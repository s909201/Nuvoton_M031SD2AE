L 1 "..\..\..\Library\StdDriver\src\uart.c"
N/****************************************************************************
N * @file     uart.c
N * @version  V1.00
N * @brief    M031 series UART driver source file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N
N#include <stdio.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5060044
N
N/*
N * Depending on compiler version __int64 or __INT64_TYPE__ should be defined.
N */
N#ifndef __int64
N  #ifdef __INT64_TYPE__
S    #define __int64 __INT64_TYPE__
N  #endif
N  /* On some architectures neither of these may be defined - if so, fall
N     through and error out if used. */
N#endif
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if !defined(__va_list) && (defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined))
X#if !0L && (0L || !0L || !0L)
N/* always defined in C++ and non-strict C for consistency of debug info */
N  #ifdef __clang__
S    typedef __builtin_va_list __va_list;
N  #else
N    typedef struct __va_list __va_list;
N  #endif
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
N#if defined(__STRICT_ANSI__) && !__FILE_INCOMPLETE
X#if 0L && !__FILE_INCOMPLETE
Sstruct __FILE {
S    union {
S        long __FILE_alignment;
S#ifdef __TARGET_ARCH_AARCH64
S        char __FILE_size[136];
S#else /* __TARGET_ARCH_AARCH64 */
S        char __FILE_size[84];
S#endif /* __TARGET_ARCH_AARCH64 */
S    } __FILE_opaque;
S};
S    /*
S     * FILE must be an object type (C99 - 7.19.1) and an object type fully
S     * describes an object [including its static size] (C99 - 6.2.5).
S     * This definition is a placeholder which matches the struct __FILE in
S     * size and alignment as used internally by libc.
S     */
N#endif
N
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N
N#pragma __printf_args
Nextern _ARMABI int __ARM_snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int __ARM_vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
Nextern _ARMABI int __ARM_vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
N#pragma __printf_args
Nextern _ARMABI int asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N#endif
N#pragma __printf_args
Nextern _ARMABI int __ARM_asprintf(char ** /*strp*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
Nextern _ARMABI int __ARM_vasprintf(char ** /*strp*/, const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
N   /*
N    * dynamically allocates a buffer of the right size for the
N    * formatted string, and returns it in (*strp). Formal return value
N    * is the same as any other printf variant, except that it returns
N    * -1 if the buffer could not be allocated.
N    *
N    * (The functions with __ARM_ prefixed names are identical to the
N    * ones without, but are available in all compilation modes without
N    * violating user namespace.)
N    */
N
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S#if !defined(__STRICT_ANSI__)
S    using ::std::asprintf;
S    using ::std::vasprintf;
S#endif
S    using ::std::__ARM_asprintf;
S    using ::std::__ARM_vasprintf;
S    using ::std::__ARM_vsnprintf;
S    using ::std::__ARM_snprintf;
S    using ::std::__ARM_vsscanf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 11 "..\..\..\Library\StdDriver\src\uart.c" 2
N#include "NuMicro.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\NuMicro.h" 1
N/**************************************************************************//**
N * @file     NuMicro.h
N * @version  V1.00
N * @brief    NuMicro peripheral access layer header file.
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2017 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __NUMICRO_H__
N#define __NUMICRO_H__
N
N#include "M031Series.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 1
N/**************************************************************************//**
N * @file     m031series.h
N * @version  V3.0
N * $Revision: 12 $
N * $Date: 18/08/16 4:06p $
N * @brief    M031 Series Peripheral Access Layer Header File
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N
N/**
N  \mainpage NuMicro M031 Driver Reference Guide
N  *
N  * <b>Introduction</b>
N  *
N  * This user manual describes the usage of M031 Series MCU device driver
N  *
N  * <b>Disclaimer</b>
N  *
N  * The Software is furnished "AS IS", without warranty as to performance or results, and
N  * the entire risk as to performance or results is assumed by YOU. Nuvoton disclaims all
N  * warranties, express, implied or otherwise, with regard to the Software, its use, or
N  * operation, including without limitation any and all warranties of merchantability, fitness
N  * for a particular purpose, and non-infringement of intellectual property rights.
N  *
N  * <b>Important Notice</b>
N  *
N  * Nuvoton Products are neither intended nor warranted for usage in systems or equipment,
N  * any malfunction or failure of which may cause loss of human life, bodily injury or severe
N  * property damage. Such applications are deemed, "Insecure Usage".
N  *
N  * Insecure usage includes, but is not limited to: equipment for surgical implementation,
N  * atomic energy control instruments, airplane or spaceship instruments, the control or
N  * operation of dynamic, brake or safety systems designed for vehicular use, traffic signal
N  * instruments, all types of safety devices, and other applications intended to support or
N  * sustain life.
N  *
N  * All Insecure Usage shall be made at customer's risk, and in the event that third parties
N  * lay claims to Nuvoton as a result of customer's Insecure Usage, customer shall indemnify
N  * the damages and liabilities thus incurred by Nuvoton.
N  *
N  * Please note that all data and specifications are subject to change without notice. All the
N  * trademarks of products and companies mentioned in this datasheet belong to their respective
N  * owners.
N  *
N  * <b>Copyright Notice</b>
N  *
N  * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N  */
N
N#ifndef __M031SERIES_H__
N#define __M031SERIES_H__
N
N/******************************************************************************/
N/*                Processor and Core Peripherals                              */
N/******************************************************************************/
N/** @addtogroup CMSIS_Device CMSIS Definitions
N  Configuration of the Cortex-M0 Processor and Core Peripherals
N  @{
N*/
N
N
N/*
N * ==========================================================================
N * ---------- Interrupt Number Definition -----------------------------------
N * ==========================================================================
N */
N
N/**
N * @details  Interrupt Number Definition. The maximum of 32 Specific Interrupts are possible.
N */
Ntypedef enum IRQn
N{
N    /******  Cortex-M0 Processor Exceptions Numbers ***************************************************/
N    NonMaskableInt_IRQn       = -14,      /*!< 2 Non Maskable Interrupt                             */
N    HardFault_IRQn            = -13,      /*!< 3 Cortex-M0 Hard Fault Interrupt                     */
N    SVCall_IRQn               = -5,       /*!< 11 Cortex-M0 SV Call Interrupt                       */
N    PendSV_IRQn               = -2,       /*!< 14 Cortex-M0 Pend SV Interrupt                       */
N    SysTick_IRQn              = -1,       /*!< 15 Cortex-M0 System Tick Interrupt                   */
N
N    /******  ARMIKMCU Swift specific Interrupt Numbers ************************************************/
N    BOD_IRQn                  = 0,        /*!< Brown-Out Low Voltage Detected Interrupt             */
N    WDT_IRQn                  = 1,        /*!< Watch Dog Timer Interrupt                            */
N    EINT024_IRQn              = 2,        /*!< EINT0, EINT2 and EINT4 Interrupt                     */
N    EINT135_IRQn              = 3,        /*!< EINT1, EINT3 and EINT5 Interrupt                     */
N    GPIO_PAPB_IRQn            = 4,        /*!< GPIO_PAPBPGPH Interrupt                              */
N    GPIO_PAPBPGPH_IRQn        = 4,        /*!< GPIO_PAPBPGPH Interrupt                              */
N    GPIO_PCPDPEPF_IRQn        = 5,        /*!< GPIO_PCPDPEPF Interrupt                              */
N    PWM0_IRQn                 = 6,        /*!< PWM0 Interrupt                                       */
N    PWM1_IRQn                 = 7,        /*!< PWM1 Interrupt                                       */
N    TMR0_IRQn                 = 8,        /*!< TIMER0 Interrupt                                     */
N    TMR1_IRQn                 = 9,        /*!< TIMER1 Interrupt                                     */
N    TMR2_IRQn                 = 10,       /*!< TIMER2 Interrupt                                     */
N    TMR3_IRQn                 = 11,       /*!< TIMER3 Interrupt                                     */
N    UART02_IRQn               = 12,       /*!< UART0 and UART2 Interrupt                            */
N    UART1_IRQn                = 13,       /*!< UART1 and UART3 Interrupt                            */
N    UART13_IRQn               = 13,       /*!< UART1 and UART3 Interrupt                            */
N    SPI0_IRQn                 = 14,       /*!< SPI0 Interrupt                                       */
N    QSPI0_IRQn                = 15,       /*!< QSPI0 Interrupt                                      */
N    ISP_IRQn                  = 16,       /*!< ISP Interrupt	                                    */
N    UART57_IRQn               = 17,       /*!< UART5 and UART7 Interrupt                            */
N    I2C0_IRQn                 = 18,       /*!< I2C0 Interrupt                                       */
N    I2C1_IRQn                 = 19,       /*!< I2C1 Interrupt                                       */
N    BPWM0_IRQn                = 20,       /*!< BPWM0 Interrupt                                      */
N    BPWM1_IRQn                = 21,       /*!< BPWM1 Interrupt                                      */
N    USCI_IRQn                 = 22,       /*!< USCI0 and USCI1 interrupt                            */
N    USCI01_IRQn               = 22,       /*!< USCI0 and USCI1 interrupt                            */
N    USBD_IRQn                 = 23,       /*!< USB Device Interrupt                                 */
N    ACMP01_IRQn               = 25,       /*!< ACMP0/1 Interrupt                                    */
N    PDMA_IRQn                 = 26,       /*!< PDMA Interrupt                                       */
N    UART46_IRQn               = 27,       /*!< UART4 and UART6 Interrupt                            */
N    PWRWU_IRQn                = 28,       /*!< Power Down Wake Up Interrupt                         */
N    ADC_IRQn                  = 29,       /*!< ADC Interrupt                                        */
N    CKFAIL_IRQn               = 30,       /*!< Clock fail detect Interrupt                          */
N    RTC_IRQn                  = 31,       /*!< RTC Interrupt                                        */
N} IRQn_Type;
N
N
N/*
N * ==========================================================================
N * ----------- Processor and Core Peripheral Section ------------------------
N * ==========================================================================
N */
N
N/* Configuration of the Cortex-M0 Processor and Core Peripherals */
N#define __MPU_PRESENT           0       /*!< armikcmu does not provide a MPU present or not       */
N#define __NVIC_PRIO_BITS        2       /*!< armikcmu Supports 2 Bits for the Priority Levels     */
N#define __Vendor_SysTickConfig  0       /*!< Set to 1 if different SysTick Config is used         */
N
N/*@}*/ /* end of group CMSIS_Device */
N
N#include "core_cm0.h"                   /*!< Cortex-M0 processor and core peripherals             */
L 1 "..\..\..\Library\CMSIS\Include\core_cm0.h" 1
N/**************************************************************************//**
N * @file     core_cm0.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060960 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM0_H_GENERIC
N#define __CORE_CM0_H_GENERIC
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060044
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 45 "..\..\..\Library\CMSIS\Include\core_cm0.h" 2
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M0
N  @{
N */
N
N/*  CMSIS CM0 definitions */
N#define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS HAL main version */
N#define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS HAL sub version */
N#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL version number */
X#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) |                                     __CM0_CMSIS_VERSION_SUB           )         
N
N#define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core */
N
N
N#if   defined ( __CC_ARM )
X#if   1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler */
N  #define __STATIC_INLINE  static __inline
N
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler */
S  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler */
S  #define __STATIC_INLINE  static __inline
S
S#elif defined ( __GNUC__ )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __ICCARM__ )
S  #define __ASM            __asm                                      /*!< asm keyword for IAR Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for IAR Compiler. Only available in High optimization mode! */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TMS470__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TI CCS Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __TASKING__ )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler */
S  #define __STATIC_INLINE  static inline
S
S#elif defined ( __CSMC__ )
S  #define __packed
S  #define __ASM            _asm                                      /*!< asm keyword for COSMIC Compiler */
S  #define __INLINE         inline                                    /*!< inline keyword for COSMIC Compiler. Use -pc99 on compile line */
S  #define __STATIC_INLINE  static inline
S
S#else
S  #error Unknown compiler
N#endif
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TMS470__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "core_cmInstr.h"                /* Core Instruction Access */
L 1 "..\..\..\Library\CMSIS\Include\core_cmInstr.h" 1
N/**************************************************************************//**
N * @file     core_cmInstr.h
N * @brief    CMSIS Cortex-M Core Instruction Access Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060960 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CMINSTR_H
N#define __CORE_CMINSTR_H
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/*------------------ RealView Compiler -----------------*/
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "..\..\..\Library\CMSIS\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS Cortex-M Core Function/Instruction Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060960 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x00U) >= 0x03U) || (__CORTEX_SC >= 300U)
S
S/**
S  \brief   Enable FIQ
S  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/**
S  \brief   Disable FIQ
S  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/**
S  \brief   Get Base Priority
S  \details Returns the current value of the Base Priority register.
S  \return               Base Priority register value
S */
S__STATIC_INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S
S
S/**
S  \brief   Set Base Priority
S  \details Assigns the given value to the Base Priority register.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Set Base Priority with condition
S  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
S           or the new value increases the BASEPRI priority level.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
S{
S  register uint32_t __regBasePriMax      __ASM("basepri_max");
S  __regBasePriMax = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Get Fault Mask
S  \details Returns the current value of the Fault Mask register.
S  \return               Fault Mask register value
S */
S__STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S
S
S/**
S  \brief   Set Fault Mask
S  \details Assigns the given value to the Fault Mask register.
S  \param [in]    faultMask  Fault Mask value to set
S */
S__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & (uint32_t)1);
S}
S
N#endif /* (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U) */
N
N
N#if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
X#if       ((0x00U) == 0x04U) || ((0x00U) == 0x07U)
S
S/**
S  \brief   Get FPSCR
S  \details Returns the current value of the Floating Point Status/Control register.
S  \return               Floating Point Status/Control register value
S */
S__STATIC_INLINE uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0U);
S#endif
S}
S
S
S/**
S  \brief   Set FPSCR
S  \details Assigns the given value to the Floating Point Status/Control register.
S  \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#endif
S}
S
N#endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
N
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB() do {\
N                   __schedule_barrier();\
N                   __isb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __ISB() do {                   __schedule_barrier();                   __isb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB() do {\
N                   __schedule_barrier();\
N                   __dsb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DSB() do {                   __schedule_barrier();                   __dsb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB() do {\
N                   __schedule_barrier();\
N                   __dmb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DMB() do {                   __schedule_barrier();                   __dmb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in integer value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in two unsigned short values.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N/**
N  \brief   Reverse byte order in signed short value
N  \details Reverses the byte order in a signed short value with sign extension to integer.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    value  Value to rotate
N  \param [in]    value  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x00U) >= 0x03U) || (__CORTEX_SC >= 300U)
S  #define __RBIT                          __rbit
N#else
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
X__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
N{
N  uint32_t result;
N  int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
N
N  result = value;                      /* r will be reversed bits of v; first get LSB of v */
N  for (value >>= 1U; value; value >>= 1U)
N  {
N    result <<= 1U;
N    result |= value & 1U;
N    s--;
N  }
N  result <<= s;                        /* shift when v's highest bits are zero */
N  return(result);
N}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
X#if       ((0x00U) >= 0x03U) || (__CORTEX_SC >= 300U)
S
S/**
S  \brief   LDR Exclusive (8 bit)
S  \details Executes a exclusive LDR instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
S#else
S  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (16 bit)
S  \details Executes a exclusive LDR instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
S#else
S  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (32 bit)
S  \details Executes a exclusive LDR instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
S#else
S  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (8 bit)
S  \details Executes a exclusive STR instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (16 bit)
S  \details Executes a exclusive STR instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (32 bit)
S  \details Executes a exclusive STR instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   Remove the exclusive lock
S  \details Removes the exclusive lock which is created by LDREX.
S */
S#define __CLREX                           __clrex
S
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/**
S  \brief   Rotate Right with Extend (32 bit)
S  \details Moves each bit of a bitstring right by one bit.
S           The carry input is shifted in at the left end of the bitstring.
S  \param [in]    value  Value to rotate
S  \return               Rotated value
S */
S#ifndef __NO_EMBEDDED_ASM
S__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
S{
S  rrx r0, r0
S  bx lr
S}
S#endif
S
S
S/**
S  \brief   LDRT Unprivileged (8 bit)
S  \details Executes a Unprivileged LDRT instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (16 bit)
S  \details Executes a Unprivileged LDRT instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (32 bit)
S  \details Executes a Unprivileged LDRT instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
S
S
S/**
S  \brief   STRT Unprivileged (8 bit)
S  \details Executes a Unprivileged STRT instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRBT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (16 bit)
S  \details Executes a Unprivileged STRT instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRHT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (32 bit)
S  \details Executes a Unprivileged STRT instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRT(value, ptr)                __strt(value, ptr)
S
N#endif /* (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U) */
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if (__CORTEX_M >= 0x04U)  /* only for Cortex-M4 and above */
X#if ((0x00U) >= 0x04U)   
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
N#endif /* (__CORTEX_M >= 0x04) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 54 "..\..\..\Library\CMSIS\Include\core_cmInstr.h" 2
N
N/*------------------ ARM Compiler V6 -------------------*/
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armcc_V6.h"
S
S/*------------------ GNU Compiler ----------------------*/
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S/*------------------ ICC Compiler ----------------------*/
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iar.h>
S
S/*------------------ TI CCS Compiler -------------------*/
S#elif defined ( __TMS470__ )
S  #include <cmsis_ccs.h>
S
S/*------------------ TASKING Compiler ------------------*/
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S/*------------------ COSMIC Compiler -------------------*/
S#elif defined ( __CSMC__ )
S  #include <cmsis_csm.h>
S
N#endif
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N#endif /* __CORE_CMINSTR_H */
L 164 "..\..\..\Library\CMSIS\Include\core_cm0.h" 2
N#include "core_cmFunc.h"                 /* Core Function Access */
L 1 "..\..\..\Library\CMSIS\Include\core_cmFunc.h" 1
N/**************************************************************************//**
N * @file     core_cmFunc.h
N * @brief    CMSIS Cortex-M Core Function Access Header File
N * @version  V4.30
N * @date     20. October 2015
N ******************************************************************************/
N/* Copyright (c) 2009 - 2015 ARM LIMITED
N
N   All rights reserved.
N   Redistribution and use in source and binary forms, with or without
N   modification, are permitted provided that the following conditions are met:
N   - Redistributions of source code must retain the above copyright
N     notice, this list of conditions and the following disclaimer.
N   - Redistributions in binary form must reproduce the above copyright
N     notice, this list of conditions and the following disclaimer in the
N     documentation and/or other materials provided with the distribution.
N   - Neither the name of ARM nor the names of its contributors may be used
N     to endorse or promote products derived from this software without
N     specific prior written permission.
N   *
N   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N   ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
N   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N   POSSIBILITY OF SUCH DAMAGE.
N   ---------------------------------------------------------------------------*/
N
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060960 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CMFUNC_H
N#define __CORE_CMFUNC_H
N
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N*/
N
N/*------------------ RealView Compiler -----------------*/
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
N
N/*------------------ ARM Compiler V6 -------------------*/
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armcc_V6.h"
S
S/*------------------ GNU Compiler ----------------------*/
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S/*------------------ ICC Compiler ----------------------*/
S#elif defined ( __ICCARM__ )
S  #include <cmsis_iar.h>
S
S/*------------------ TI CCS Compiler -------------------*/
S#elif defined ( __TMS470__ )
S  #include <cmsis_ccs.h>
S
S/*------------------ TASKING Compiler ------------------*/
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S/*------------------ COSMIC Compiler -------------------*/
S#elif defined ( __CSMC__ )
S  #include <cmsis_csm.h>
S
N#endif
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N#endif /* __CORE_CMFUNC_H */
L 165 "..\..\..\Library\CMSIS\Include\core_cm0.h" 2
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0_H_DEPENDANT
N#define __CORE_CM0_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM0_REV
S    #define __CM0_REV               0x0000U
S    #warning "__CM0_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          2U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M0 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[1U];                
N        uint32_t RESERVED0[31U];
N  __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[1U];                
N        uint32_t RSERVED1[31U];
N  __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[1U];                
N        uint32_t RESERVED2[31U];
N  __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[1U];                
N        uint32_t RESERVED3[31U];
N        uint32_t RESERVED4[64U];
N  __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
X  volatile uint32_t IP[8U];                  
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N        uint32_t RESERVED0;
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N        uint32_t RESERVED1;
N  __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED */
X  volatile uint32_t SHP[2U];                 
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP and not via processor.
N            Therefore they are not covered by the Cortex-M0 header file.
N  @{
N */
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Cortex-M0 Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
N#define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
N#define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
N
N
N/**
N  \brief   Enable External Interrupt
N  \details Enables a device-specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Disable External Interrupt
N  \details Disables a device-specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the pending register in the NVIC and returns the pending bit for the specified interrupt.
N  \param [in]      IRQn  Interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N */
N__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X  return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of an external interrupt.
N  \param [in]      IRQn  Interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of an external interrupt.
N  \param [in]      IRQn  External interrupt number. Value cannot be negative.
N */
N__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of an interrupt.
N  \note    The priority cannot be set for every core interrupt.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N */
N__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) < 0)
N  {
N    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N  else
N  {
N    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of an interrupt.
N           The interrupt number can be positive to specify an external (device specific) interrupt,
N           or negative to specify an internal (core) interrupt.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) < 0)
N  {
N    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N  else
N  {
N    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2U));
N  __DSB();                                                          /* Ensure completion of memory access */
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if (__Vendor_SysTickConfig == 0U)
X#if (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 135 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "system_M031Series.h"          /*!< M031 System                                    */
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\system_M031Series.h" 1
N/**************************************************************************//**
N * @file     system_M031Series.h
N * @version  V3.00
N * $Revision: 5 $
N * $Date: 18/05/29 5:31p $
N * @brief    M031 Series System Setting Header File
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2017 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __SYSTEM_M031_H__
N#define __SYSTEM_M031_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Macro Definition                                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N#ifndef DEBUG_PORT
N#define DEBUG_PORT      UART0       /*!< Select Debug Port which is used for retarget.c to output debug message to UART */
N#endif
N
N/**
N *
N * @details    This is used to enable PLL to speed up booting at startup. Remove it will cause system using
N *             default clock source (External crystal or internal 22.1184MHz IRC).
N *             Enable this option will cause system booting in 72MHz(By XTAL) or 71.8848MHz(By IRC22M) according to
N *             user configuration setting in CONFIG0
N *
N */
N
N/*----------------------------------------------------------------------------
N  Define SYSCLK
N *----------------------------------------------------------------------------*/
N#ifndef  __HXT
N#define __HXT       (32000000UL)    /*!< External Crystal Clock Frequency     */
N#endif  /*!defined(__HXT) */
N
N#ifndef  __LXT
N#define __LXT       (32768UL)       /*!< External Crystal Clock Frequency 32.768KHz */
N#endif  /*!defined(__LXT) */
N
N#define __LIRC      (38400UL)       /*!< Internal 38.4KHz RC Oscillator Frequency */
N#define __HIRC      (48000000UL)    /*!< Internal 48M RC Oscillator Frequency */
N#define __HSI       (96000000UL)    /*!< PLL default output is 96MHz from HIRC */
N
Nextern uint32_t SystemCoreClock;    /*!< System Clock Frequency (Core Clock)  */
Nextern uint32_t CyclesPerUs;        /*!< Cycles per micro second              */
Nextern uint32_t PllClock;           /*!< PLL Output Clock Frequency           */
N
N#if USE_ASSERT
S/**
S * @brief      Assert Function
S *
S * @param[in]  expr  Expression to be evaluated
S *
S * @return     None
S *
S * @details    If the expression is false, an error message will be printed out
S *             from debug port (UART0 or UART1).
S */
S#define ASSERT_PARAM(expr)  { if (!(expr)) { AssertError((uint8_t*)__FILE__, __LINE__); } }
S
Svoid AssertError(uint8_t* file, uint32_t line);
N#else
N#define ASSERT_PARAM(expr)
N#endif
N
N#define assert_param(expr)  ASSERT_PARAM(expr)
N
N
N/**
N * @brief    System Initialization
N *
N * @param    None
N *
N * @return   None
N *
N * @details  The necessary initialization of system.
N */
Nextern void SystemInit(void);
N
N
N/**
N * @brief    Update the Variable SystemCoreClock
N *
N * @param    None
N *
N * @return   None
N *
N * @details  This function is used to update the variable SystemCoreClock
N *           and must be called whenever the core clock is changed.
N */
Nextern void SystemCoreClockUpdate(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
N
N/* Copyright (C) 2014 Nuvoton Technology Corp. All rights reserved. */
L 136 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N
N/**
N * Initialize the system clock
N *
N * @param  None
N * @return None
N *
N * @brief  Setup the microcontroller system
N *         Initialize the PLL and update the SystemFrequency variable
N */
Nextern void SystemInit(void);
N
N
N
N/******************************************************************************/
N/*                Device Specific Peripheral registers structures             */
N/******************************************************************************/
N
N#include "acmp_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\acmp_reg.h" 1
N/**************************************************************************//**
N * @file     acmp_reg.h
N * @version  V1.00
N * @brief    ACMP register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __ACMP_REG_H__
N#define __ACMP_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup ACMP Analog Comparator Controller (ACMP)
N    Memory Mapped Structure for ACMP Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var ACMP_T::CTL
N     * Offset: 0x00/0x04  Analog Comparator 0/1 Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ACMPEN    |Comparator Enable Bit
N     * |        |          |0 = Comparator 0 Disabled.
N     * |        |          |1 = Comparator 0 Enabled.
N     * |[1]     |ACMPIE    |Comparator Interrupt Enable Bit
N     * |        |          |0 = Comparator 0 interrupt Disabled.
N     * |        |          |1 = Comparator 0 interrupt Enabled. If WKEN (ACMP_CTL0[16]) is set to 1, the wake-up interrupt function will be enabled as well.
N     * |[3]     |ACMPOINV  |Comparator Output Inverse
N     * |        |          |0 = Comparator 0 output inverse Disabled.
N     * |        |          |1 = Comparator 0 output inverse Enabled.
N     * |[5:4]   |NEGSEL    |Comparator Negative Input Selection
N     * |        |          |00 = ACMP0_N pin.
N     * |        |          |01 = Internal comparator reference voltage (CRV).
N     * |        |          |10 = Band-gap voltage.
N     * |        |          |11 = Reserved.
N     * |[7:6]   |POSSEL    |Comparator Positive Input Selection
N     * |        |          |00 = Input from ACMP0_P0.
N     * |        |          |01 = Input from ACMP0_P1.
N     * |        |          |10 = Input from ACMP0_P2.
N     * |        |          |11 = Input from ACMP0_P3.
N     * |[9:8]   |INTPOL    |Interrupt Condition Polarity Selection
N     * |        |          |ACMPIF0 will be set to 1 when comparator output edge condition is detected.
N     * |        |          |00 = Rising edge or falling edge.
N     * |        |          |01 = Rising edge.
N     * |        |          |10 = Falling edge.
N     * |        |          |11 = Reserved.
N     * |[12]    |OUTSEL    |Comparator Output Select
N     * |        |          |0 = Comparator 0 output to ACMP0_O pin is unfiltered comparator output.
N     * |        |          |1 = Comparator 0 output to ACMP0_O pin is from filter output.
N     * |[15:13] |FILTSEL   |Comparator Output Filter Count Selection
N     * |        |          |000 = Filter function is Disabled.
N     * |        |          |001 = ACMP0 output is sampled 1 consecutive PCLK.
N     * |        |          |010 = ACMP0 output is sampled 2 consecutive PCLKs.
N     * |        |          |011 = ACMP0 output is sampled 4 consecutive PCLKs.
N     * |        |          |100 = ACMP0 output is sampled 8 consecutive PCLKs.
N     * |        |          |101 = ACMP0 output is sampled 16 consecutive PCLKs.
N     * |        |          |110 = ACMP0 output is sampled 32 consecutive PCLKs.
N     * |        |          |111 = ACMP0 output is sampled 64 consecutive PCLKs.
N     * |[16]    |WKEN      |Power-down Wake-up Enable Bit
N     * |        |          |0 = Wake-up function Disabled.
N     * |        |          |1 = Wake-up function Enabled.
N     * |[17]    |WLATEN    |Window Latch Mode Enable Bit
N     * |        |          |0 = Window Latch Mode Disabled.
N     * |        |          |1 = Window Latch Mode Enabled.
N     * |[18]    |WCMPSEL   |Window Compare Mode Selection
N     * |        |          |0 = Window Compare Mode Disabled.
N     * |        |          |1 = Window Compare Mode is Selected.
N     * @var ACMP_T::STATUS
N     * Offset: 0x08  Analog Comparator Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ACMPIF0   |Comparator 0 Interrupt Flag
N     * |        |          |This bit is set by hardware when the edge condition defined by INTPOL (ACMP_CTL0[9:8]) is detected on comparator 0 output. This will generate an interrupt if ACMPIE (ACMP_CTL0[1]) is set to 1.
N     * |        |          |Note: Write 1 to clear this bit to 0.
N     * |[1]     |ACMPIF1   |Comparator 1 Interrupt Flag
N     * |        |          |This bit is set by hardware when the edge condition defined by INTPOL (ACMP_CTL1[9:8]) is detected on comparator 1 output.
N     * |        |          |This will cause an interrupt if ACMPIE (ACMP_CTL1[1]) is set to 1.
N     * |        |          |Note: Write 1 to clear this bit to 0.
N     * |[4]     |ACMPO0    |Comparator 0 Output
N     * |        |          |Synchronized to the PCLK to allow reading by software. Cleared when the comparator 0 is disabled, i.e. ACMPEN (ACMP_CTL0[0]) is cleared to 0.
N     * |[5]     |ACMPO1    |Comparator 1 Output
N     * |        |          |Synchronized to the PCLK to allow reading by software
N     * |        |          |Cleared when the comparator 1 is disabled, i.e
N     * |        |          |ACMPEN (ACMP_CTL1[0]) is cleared to 0.
N     * |[8]     |WKIF0     |Comparator 0 Power-down Wake-up Interrupt Flag
N     * |        |          |This bit will be set to 1 when ACMP0 wake-up interrupt event occurs.
N     * |        |          |0 = No power-down wake-up occurred.
N     * |        |          |1 = Power-down wake-up occurred.
N     * |        |          |Note: Write 1 to clear this bit to 0.
N     * |[9]     |WKIF1     |Comparator 1 Power-down Wake-up Interrupt Flag
N     * |        |          |This bit will be set to 1 when ACMP1 wake-up interrupt event occurs.
N     * |        |          |0 = No power-down wake-up occurred.
N     * |        |          |1 = Power-down wake-up occurred.
N     * |        |          |Note: Write 1 to clear this bit to 0.
N     * |[12]    |ACMPS0    |Comparator 0 Status
N     * |        |          |Synchronized to the PCLK to allow reading by software. Cleared when the comparator 0 is disabled, i.e. ACMPEN (ACMP_CTL0[0]) is cleared to 0.
N     * |[13]    |ACMPS1    |Comparator 1 Status
N     * |        |          |Synchronized to the PCLK to allow reading by software. Cleared when the comparator 1 is disabled, i.e. ACMPEN (ACMP_CTL1[0]) is cleared to 0.
N     * |[16]    |ACMPWO    |Comparator Window Output
N     * |        |          |This bit shows the output status of window compare mode.
N     * |        |          |0 = The positive input voltage is outside the window.
N     * |        |          |1 = The positive input voltage is in the window.
N     * @var ACMP_T::VREF
N     * Offset: 0x0C  Analog Comparator Reference Voltage Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |CRVCTL    |Comparator Reference Voltage Setting
N     * |        |          |CRV = CRV source voltage * (1/6+CRVCTL/24).
N     * |[6]     |CRVSSEL   |CRV Source Voltage Selection
N     * |        |          |0 = AVDD is selected as CRV source voltage.
N     * |        |          |1 = VREF is selected as as CRV source voltage.
N     */
N    __IO uint32_t CTL[2];                /*!< [0x0000~0x0004] Analog Comparator 0/1 Control Register                    */
X    volatile uint32_t CTL[2];                 
N    __IO uint32_t STATUS;                /*!< [0x0008] Analog Comparator Status Register                                */
X    volatile uint32_t STATUS;                 
N    __IO uint32_t VREF;                  /*!< [0x000c] Analog Comparator Reference Voltage Control Register             */
X    volatile uint32_t VREF;                   
N    __IO uint32_t CALCTL;                /*!< [0x0010] Analog Comparator Calibration Control Register                   */
X    volatile uint32_t CALCTL;                 
N    __I  uint32_t CALSR;                 /*!< [0x0014] Analog Comparator Calibration Status Register                    */
X    volatile const  uint32_t CALSR;                  
N
N} ACMP_T;
N
N/**
N    @addtogroup ACMP_CONST ACMP Bit Field Definition
N    Constant Definitions for ACMP Controller
N@{ */
N
N#define ACMP_CTL_ACMPEN_Pos             (0)                                             /*!< ACMP_T::CTL: ACMPEN Position           */
N#define ACMP_CTL_ACMPEN_Msk             (0x1ul << ACMP_CTL_ACMPEN_Pos)                  /*!< ACMP_T::CTL: ACMPEN Mask               */
N
N#define ACMP_CTL_ACMPIE_Pos             (1)                                             /*!< ACMP_T::CTL: ACMPIE Position           */
N#define ACMP_CTL_ACMPIE_Msk             (0x1ul << ACMP_CTL_ACMPIE_Pos)                  /*!< ACMP_T::CTL: ACMPIE Mask               */
N
N#define ACMP_CTL_HYSEN_Pos              (2)                                             /*!< ACMP_T::CTL: HYSEN Position            */
N#define ACMP_CTL_HYSEN_Msk              (0x1ul << ACMP_CTL_HYSEN_Pos)                   /*!< ACMP_T::CTL: HYSEN Mask                */
N
N#define ACMP_CTL_ACMPOINV_Pos           (3)                                             /*!< ACMP_T::CTL: ACMPOINV Position         */
N#define ACMP_CTL_ACMPOINV_Msk           (0x1ul << ACMP_CTL_ACMPOINV_Pos)                /*!< ACMP_T::CTL: ACMPOINV Mask             */
N
N#define ACMP_CTL_NEGSEL_Pos             (4)                                             /*!< ACMP_T::CTL: NEGSEL Position           */
N#define ACMP_CTL_NEGSEL_Msk             (0x3ul << ACMP_CTL_NEGSEL_Pos)                  /*!< ACMP_T::CTL: NEGSEL Mask               */
N
N#define ACMP_CTL_POSSEL_Pos             (6)                                             /*!< ACMP_T::CTL: POSSEL Position           */
N#define ACMP_CTL_POSSEL_Msk             (0x3ul << ACMP_CTL_POSSEL_Pos)                  /*!< ACMP_T::CTL: POSSEL Mask               */
N
N#define ACMP_CTL_INTPOL_Pos             (8)                                             /*!< ACMP_T::CTL: INTPOL Position           */
N#define ACMP_CTL_INTPOL_Msk             (0x3ul << ACMP_CTL_INTPOL_Pos)                  /*!< ACMP_T::CTL: INTPOL Mask               */
N
N#define ACMP_CTL_OUTSEL_Pos             (12)                                            /*!< ACMP_T::CTL: OUTSEL Position           */
N#define ACMP_CTL_OUTSEL_Msk             (0x1ul << ACMP_CTL_OUTSEL_Pos)                  /*!< ACMP_T::CTL: OUTSEL Mask               */
N
N#define ACMP_CTL_FILTSEL_Pos            (13)                                            /*!< ACMP_T::CTL: FILTSEL Position          */
N#define ACMP_CTL_FILTSEL_Msk            (0x7ul << ACMP_CTL_FILTSEL_Pos)                 /*!< ACMP_T::CTL: FILTSEL Mask              */
N
N#define ACMP_CTL_WKEN_Pos               (16)                                            /*!< ACMP_T::CTL: WKEN Position             */
N#define ACMP_CTL_WKEN_Msk               (0x1ul << ACMP_CTL_WKEN_Pos)                    /*!< ACMP_T::CTL: WKEN Mask                 */
N
N#define ACMP_CTL_WLATEN_Pos             (17)                                            /*!< ACMP_T::CTL: WLATEN Position           */
N#define ACMP_CTL_WLATEN_Msk             (0x1ul << ACMP_CTL_WLATEN_Pos)                  /*!< ACMP_T::CTL: WLATEN Mask               */
N
N#define ACMP_CTL_WCMPSEL_Pos            (18)                                            /*!< ACMP_T::CTL: WCMPSEL Position          */
N#define ACMP_CTL_WCMPSEL_Msk            (0x1ul << ACMP_CTL_WCMPSEL_Pos)                 /*!< ACMP_T::CTL: WCMPSEL Mask              */
N
N#define ACMP_STATUS_ACMPIF0_Pos          (0)                                            /*!< ACMP_T::STATUS: ACMPIF0 Position       */
N#define ACMP_STATUS_ACMPIF0_Msk          (0x1ul << ACMP_STATUS_ACMPIF0_Pos)             /*!< ACMP_T::STATUS: ACMPIF0 Mask           */
N
N#define ACMP_STATUS_ACMPIF1_Pos          (1)                                            /*!< ACMP_T::STATUS: ACMPIF1 Position       */
N#define ACMP_STATUS_ACMPIF1_Msk          (0x1ul << ACMP_STATUS_ACMPIF1_Pos)             /*!< ACMP_T::STATUS: ACMPIF1 Mask           */
N
N#define ACMP_STATUS_ACMPO0_Pos           (4)                                            /*!< ACMP_T::STATUS: ACMPO0 Position        */
N#define ACMP_STATUS_ACMPO0_Msk           (0x1ul << ACMP_STATUS_ACMPO0_Pos)              /*!< ACMP_T::STATUS: ACMPO0 Mask            */
N
N#define ACMP_STATUS_ACMPO1_Pos           (5)                                            /*!< ACMP_T::STATUS: ACMPO1 Position        */
N#define ACMP_STATUS_ACMPO1_Msk           (0x1ul << ACMP_STATUS_ACMPO1_Pos)              /*!< ACMP_T::STATUS: ACMPO1 Mask            */
N
N#define ACMP_STATUS_WKIF0_Pos            (8)                                            /*!< ACMP_T::STATUS: WKIF0 Position         */
N#define ACMP_STATUS_WKIF0_Msk            (0x1ul << ACMP_STATUS_WKIF0_Pos)               /*!< ACMP_T::STATUS: WKIF0 Mask             */
N
N#define ACMP_STATUS_WKIF1_Pos            (9)                                            /*!< ACMP_T::STATUS: WKIF1 Position         */
N#define ACMP_STATUS_WKIF1_Msk            (0x1ul << ACMP_STATUS_WKIF1_Pos)               /*!< ACMP_T::STATUS: WKIF1 Mask             */
N
N#define ACMP_STATUS_ACMPS0_Pos           (12)                                           /*!< ACMP_T::STATUS: ACMPS0 Position        */
N#define ACMP_STATUS_ACMPS0_Msk           (0x1ul << ACMP_STATUS_ACMPS0_Pos)              /*!< ACMP_T::STATUS: ACMPS0 Mask            */
N
N#define ACMP_STATUS_ACMPS1_Pos           (13)                                           /*!< ACMP_T::STATUS: ACMPS1 Position        */
N#define ACMP_STATUS_ACMPS1_Msk           (0x1ul << ACMP_STATUS_ACMPS1_Pos)              /*!< ACMP_T::STATUS: ACMPS1 Mask            */
N
N#define ACMP_STATUS_ACMPWO_Pos           (16)                                           /*!< ACMP_T::STATUS: ACMPWO Position        */
N#define ACMP_STATUS_ACMPWO_Msk           (0x1ul << ACMP_STATUS_ACMPWO_Pos)              /*!< ACMP_T::STATUS: ACMPWO Mask            */
N
N#define ACMP_VREF_CRVCTL_Pos             (0)                                            /*!< ACMP_T::VREF: CRVCTL Position          */
N#define ACMP_VREF_CRVCTL_Msk             (0xful << ACMP_VREF_CRVCTL_Pos)                /*!< ACMP_T::VREF: CRVCTL Mask              */
N
N#define ACMP_VREF_CRVSSEL_Pos            (6)                                            /*!< ACMP_T::VREF: CRVSSEL Position         */
N#define ACMP_VREF_CRVSSEL_Msk            (0x1ul << ACMP_VREF_CRVSSEL_Pos)               /*!< ACMP_T::VREF: CRVSSEL Mask             */
N
N#define ACMP_CALCTL_CALTRG0_Pos          (0)                                            /*!< ACMP_T::CALCTL: CALTRG0 Position       */
N#define ACMP_CALCTL_CALTRG0_Msk          (0x1ul << ACMP_CALCTL_CALTRG0_Pos)             /*!< ACMP_T::CALCTL: CALTRG0 Mask           */
N
N#define ACMP_CALCTL_CALTRG1_Pos          (1)                                            /*!< ACMP_T::CALCTL: CALTRG1 Position       */
N#define ACMP_CALCTL_CALTRG1_Msk          (0x1ul << ACMP_CALCTL_CALTRG1_Pos)             /*!< ACMP_T::CALCTL: CALTRG1 Mask           */
N
N#define ACMP_CALCTL_CALCLK0_Pos          (4)                                            /*!< ACMP_T::CALCTL: CALCLK0 Position       */
N#define ACMP_CALCTL_CALCLK0_Msk          (0x3ul << ACMP_CALCTL_CALCLK0_Pos)             /*!< ACMP_T::CALCTL: CALCLK0 Mask           */
N
N#define ACMP_CALCTL_CALCLK1_Pos          (6)                                            /*!< ACMP_T::CALCTL: CALCLK1 Position       */
N#define ACMP_CALCTL_CALCLK1_Msk          (0x3ul << ACMP_CALCTL_CALCLK1_Pos)             /*!< ACMP_T::CALCTL: CALCLK1 Mask           */
N
N#define ACMP_CALCTL_CALRVS0_Pos          (16)                                           /*!< ACMP_T::CALCTL: CALRVS0 Position       */
N#define ACMP_CALCTL_CALRVS0_Msk          (0x1ul << ACMP_CALCTL_CALRVS0_Pos)             /*!< ACMP_T::CALCTL: CALRVS0 Mask           */
N
N#define ACMP_CALCTL_CALRVS1_Pos          (17)                                           /*!< ACMP_T::CALCTL: CALRVS1 Position       */
N#define ACMP_CALCTL_CALRVS1_Msk          (0x1ul << ACMP_CALCTL_CALRVS1_Pos)             /*!< ACMP_T::CALCTL: CALRVS1 Mask           */
N
N#define ACMP_CALSR_DONE0_Pos             (0)                                            /*!< ACMP_T::CALSR: DONE0 Position          */
N#define ACMP_CALSR_DONE0_Msk             (0x1ul << ACMP_CALSR_DONE0_Pos)                /*!< ACMP_T::CALSR: DONE0 Mask              */
N
N#define ACMP_CALSR_CALNS0_Pos            (1)                                            /*!< ACMP_T::CALSR: CALNS0 Position         */
N#define ACMP_CALSR_CALNS0_Msk            (0x1ul << ACMP_CALSR_CALNS0_Pos)               /*!< ACMP_T::CALSR: CALNS0 Mask             */
N
N#define ACMP_CALSR_CALPS0_Pos            (2)                                            /*!< ACMP_T::CALSR: CALPS0 Position         */
N#define ACMP_CALSR_CALPS0_Msk            (0x1ul << ACMP_CALSR_CALPS0_Pos)               /*!< ACMP_T::CALSR: CALPS0 Mask             */
N
N#define ACMP_CALSR_DONE1_Pos             (4)                                            /*!< ACMP_T::CALSR: DONE1 Position          */
N#define ACMP_CALSR_DONE1_Msk             (0x1ul << ACMP_CALSR_DONE1_Pos)                /*!< ACMP_T::CALSR: DONE1 Mask              */
N
N#define ACMP_CALSR_CALNS1_Pos            (5)                                            /*!< ACMP_T::CALSR: CALNS1 Position         */
N#define ACMP_CALSR_CALNS1_Msk            (0x1ul << ACMP_CALSR_CALNS1_Pos)               /*!< ACMP_T::CALSR: CALNS1 Mask             */
N
N#define ACMP_CALSR_CALPS1_Pos            (6)                                            /*!< ACMP_T::CALSR: CALPS1 Position         */
N#define ACMP_CALSR_CALPS1_Msk            (0x1ul << ACMP_CALSR_CALPS1_Pos)               /*!< ACMP_T::CALSR: CALPS1 Mask             */
N
N/**@}*/ /* ACMP_CONST */
N/**@}*/ /* end of ACMP register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __ACMP_REG_H__ */
L 161 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "adc_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\adc_reg.h" 1
N/**************************************************************************//**
N * @file     adc_reg.h
N * @version  V1.00
N * @brief    ADC register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __ADC_REG_H__
N#define __ADC_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup ADC Analog to Digital Converter (ADC)
N    Memory Mapped Structure for ADC Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var ADC_T::ADDR
N     * Offset: 0x00-0x74  ADC Data Register 0-29
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RSLT      |A/D Conversion Result (Read Only)
N     * |        |          |This field contains conversion result of ADC.
N     * |[16]    |OVERRUN   |Overrun Flag (Read Only)
N     * |        |          |If converted data in RSLT bits has not been read before new conversion result is loaded to this register, OVERRUN bit is set to 1. It is cleared by hardware after ADDR register is read.
N     * |        |          |0 = Data in RSLT bits is not overwrote.
N     * |        |          |1 = Data in RSLT bits is overwrote.
N     * |[17]    |VALID     |Valid Flag (Read Only)
N     * |        |          |This bit will be set to 1 when the conversion of the corresponding channel is completed. This bit will be cleared to 0 by hardware after ADDR register is read.
N     * |        |          |0 = Data in RSLT bits is not valid.
N     * |        |          |1 = Data in RSLT bits is valid.
N     * @var ADC_T::ADCR
N     * Offset: 0x80  ADC Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ADEN      |A/D Converter Enable Bit
N     * |        |          |0 = A/D converter Disabled.
N     * |        |          |1 = A/D converter Enabled.
N     * |        |          |Note: Before starting A/D conversion function, this bit should be set to 1. Clear it to 0 to disable A/D converter analog circuit to save power consumption.
N     * |[1]     |ADIE      |A/D Interrupt Enable Bit
N     * |        |          |A/D conversion end interrupt request is generated if ADIE bit is set to 1.
N     * |        |          |0 = A/D interrupt function Disabled.
N     * |        |          |1 = A/D interrupt function Enabled.
N     * |[3:2]   |ADMD      |A/D Converter Operation Mode Control
N     * |        |          |00 = Single conversion.
N     * |        |          |01 = Burst conversion.
N     * |        |          |10 = Single-cycle Scan.
N     * |        |          |11 = Continuous Scan.
N     * |        |          |Note1: When changing the operation mode, software should clear ADST bit first.
N     * |        |          |Note2: In Burst mode, the A/D result data is always at ADC Data Register 0.
N     * |[5:4]   |TRGS      |Hardware Trigger Source
N     * |        |          |00 = A/D conversion is started by external STADC pin.
N     * |        |          |01 = Timer0 ~ Timer3 overflow pulse trigger.
N     * |        |          |10 = Reserved.
N     * |        |          |11 = A/D conversion is started by PWM trigger.
N     * |        |          |Note: Software should clear TRGEN bit and ADST bit to 0 before changing TRGS bits.
N     * |[7:6]   |TRGCOND   |External Trigger Condition
N     * |        |          |These two bits decide external pin STADC trigger event is level or edge. The signal must be kept at stable state at least 8 PCLKs for level trigger and at least 4 PCLKs for edge trigger.
N     * |        |          |00 = Low level.
N     * |        |          |01 = High level.
N     * |        |          |10 = Falling edge.
N     * |        |          |11 = Rising edge.
N     * |[8]     |TRGEN     |External Trigger Enable Bit
N     * |        |          |Enable or disable triggering of A/D conversion by external STADC pin, PWM trigger and Timer trigger. If external trigger is enabled, the ADST bit can be set to 1 by the selected hardware trigger source.
N     * |        |          |0 = External trigger Disabled.
N     * |        |          |1 = External trigger Enabled.
N     * |        |          |Note: The ADC external trigger function is only supported in Single-cycle Scan mode.
N     * |[9]     |PTEN      |PDMA Transfer Enable Bit
N     * |        |          |When A/D conversion is completed, the converted data is loaded into ADDR0~15, ADDR29. Software can enable this bit to generate a PDMA data transfer request.
N     * |        |          |0 = PDMA data transfer Disabled.
N     * |        |          |1 = PDMA data transfer in ADDR0~15, ADDR29 Enabled.
N     * |        |          |Note: When PTEN=1, software must set ADIE=0 to disable interrupt.
N     * |[10]    |DIFFEN    |Differential Input Mode Control
N     * |        |          |Differential input voltage (Vdiff) = Vplus - Vminus.
N     * |        |          |The relation between Vplus and Vminus is Vplus + Vminus = Vref.
N     * |        |          |The Vplus of differential input paired channel x is from ADC0_CHy pin; Vminus is from ADC0_CHz pin, x=0,1..7, y=2*x, z=y+1.
N     * |        |          |0 = Single-end analog input mode.
N     * |        |          |1 = Differential analog input mode.
N     * |        |          |Note: In Differential Input mode, only the even number of the two corresponding channels needs to be enabled in ADCHER register. The conversion result will be placed to the corresponding data register of the enabled channel.
N     * |[11]    |ADST      |A/D Conversion Start or Calibration Start
N     * |        |          |ADST bit can be set to 1 from four sources: software, external pin STADC, PWM trigger and Timer trigger. ADST bit will be cleared to 0 by hardware automatically at the ends of Single mode, Single-cycle Scan mode and Calibration mode. In Continuous Scan mode and Burst mode, A/D conversion is continuously performed until software writes 0 to this bit or chip is reset.
N     * |        |          |0 = Conversion stops and A/D converter enters idle state.
N     * |        |          |1 = Conversion starts or Calibration Start.
N     * |        |          |Note1: When ADST become from 1 to 0, ADC macro will reset to initial state. After macro reset to initial state, user should wait at most 2 ADC clock and set this bit to start next conversion.
N     * |        |          |Note2: Calibration Start only if CALEN (ADC_ADCALR[0]) = 1.
N     * |[12]    |RESET     |ADC RESET (Write Protect)
N     * |        |          |If user writes this bit, the ADC analog macro will reset
N     * |        |          |Calibration data in macro will be deleted, but registers in ADC controller will keep.
N     * |        |          |Note: This bit is cleared by hardware.
N     * |[31]    |DMOF      |Differential Input Mode Output Format
N     * |        |          |If user enables differential input mode, the conversion result can be expressed with binary straight format (unsigned format) or 2's complement format (signed format).
N     * |        |          |0 = A/D Conversion result will be filled in RSLT at ADDRx registers with unsigned format (straight binary format).
N     * |        |          |1 = A/D Conversion result will be filled in RSLT at ADDRx registers with 2's complement format.
N     * @var ADC_T::ADCHER
N     * Offset: 0x84  ADC Channel Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |CHEN      |Analog Input Channel Enable Control
N     * |        |          |Set ADCHER[15:0] bits to enable the corresponding analog input channel 15 ~ 0
N     * |        |          |If DIFFEN bit is set to 1, only the even number channel needs to be enabled.
N     * |        |          |Besides, set ADCHER[29] bit will enable internal channel for band-gap voltage respectively
N     * |        |          |Other bits are reserved.
N     * |        |          |0 = Channel Disabled.
N     * |        |          |1 = Channel Enabled.
N     * |        |          |Note1: If the internal channel for band-gap voltage (CHEN[29]) is active, the maximum sampling rate will be 1M SPS.
N     * @var ADC_T::ADCMPR
N     * Offset: 0x88/0x8C  ADC Compare Register 0/1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CMPEN     |Compare Enable Bit
N     * |        |          |Set this bit to 1 to enable ADC controller to compare CMPD (ADCMPRx[27:16]) with specified channel conversion result when converted data is loaded into ADDR register.
N     * |        |          |0 = Compare function Disabled.
N     * |        |          |1 = Compare function Enabled.
N     * |[1]     |CMPIE     |Compare Interrupt Enable Bit
N     * |        |          |If the compare function is enabled and the compare condition matches the setting of CMPCOND and CMPMATCNT, CMPFx bit will be asserted, in the meanwhile, if CMPIE bit is set to 1, a compare interrupt request is generated.
N     * |        |          |0 = Compare function interrupt Disabled.
N     * |        |          |1 = Compare function interrupt Enabled.
N     * |[2]     |CMPCOND   |Compare Condition
N     * |        |          |0 = Set the compare condition as that when a 12-bit A/D conversion result is less than the 12-bit CMPD bits, the internal match counter will increase one.
N     * |        |          |1 = Set the compare condition as that when a 12-bit A/D conversion result is greater than or equal to the 12-bit CMPD bits, the internal match counter will increase one.
N     * |        |          |Note: When the internal counter reaches to (CMPMATCNT +1), the CMPFx bit will be set.
N     * |[7:3]   |CMPCH     |Compare Channel Selection
N     * |        |          |00000 = Channel 0 conversion result is selected to be compared.
N     * |        |          |00001 = Channel 1 conversion result is selected to be compared.
N     * |        |          |00010 = Channel 2 conversion result is selected to be compared.
N     * |        |          |00011 = Channel 3 conversion result is selected to be compared.
N     * |        |          |00100 = Channel 4 conversion result is selected to be compared.
N     * |        |          |00101 = Channel 5 conversion result is selected to be compared.
N     * |        |          |00110 = Channel 6 conversion result is selected to be compared.
N     * |        |          |00111 = Channel 7 conversion result is selected to be compared.
N     * |        |          |01000 = Channel 8 conversion result is selected to be compared.
N     * |        |          |01001 = Channel 9 conversion result is selected to be compared.
N     * |        |          |01010 = Channel 10 conversion result is selected to be compared.
N     * |        |          |01011 = Channel 11 conversion result is selected to be compared.
N     * |        |          |01100 = Channel 12 conversion result is selected to be compared.
N     * |        |          |01101 = Channel 13 conversion result is selected to be compared.
N     * |        |          |01110 = Channel 14 conversion result is selected to be compared.
N     * |        |          |01111 = Channel 15 conversion result is selected to be compared.
N     * |        |          |11101 = Band-gap voltage conversion result is selected to be compared.
N     * |        |          |Others = Reserved.
N     * |[11:8]  |CMPMATCNT |Compare Match Count
N     * |        |          |When the specified A/D channel analog conversion result matches the compare condition defined by CMPCOND bit, the internal match counter will increase 1. When the internal counter reaches the value to (CMPMATCNT +1), the CMPFx bit will be set.
N     * |[15]    |CMPWEN    |Compare Window Mode Enable Bit
N     * |        |          |0 = Compare Window Mode Disabled.
N     * |        |          |1 = Compare Window Mode Enabled.
N     * |        |          |Note: This bit is only presented in ADCMPR0 register.
N     * |[27:16] |CMPD      |Comparison Data
N     * |        |          |The 12-bit data is used to compare with conversion result of specified channel.
N     * |        |          |Note: CMPD bits should be filled in unsigned format (straight binary format).
N     * @var ADC_T::ADSR0
N     * Offset: 0x90  ADC Status Register0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ADF       |A/D Conversion End Flag
N     * |        |          |A status flag that indicates the end of A/D conversion. Software can write 1 to clear this bit.
N     * |        |          |ADF bit is set to 1 at the following three conditions:
N     * |        |          |1. When A/D conversion ends in Single mode.
N     * |        |          |2. When A/D conversion ends on all specified channels in Single-cycle Scan mode and Continuous Scan mode.
N     * |        |          |3. When more than or equal to 8 samples in FIFO in Burst mode.
N     * |[1]     |CMPF0     |Compare Flag 0
N     * |        |          |When the A/D conversion result of the selected channel meets setting condition in ADCMPR0 register then this bit is set to 1. This bit is cleared by writing 1 to it.
N     * |        |          |0 = Conversion result in ADDR does not meet ADCMPR0 setting.
N     * |        |          |1 = Conversion result in ADDR meets ADCMPR0 setting.
N     * |[2]     |CMPF1     |Compare Flag 1
N     * |        |          |When the A/D conversion result of the selected channel meets setting condition in ADCMPR1 register then this bit is set to 1; it is cleared by writing 1 to it.
N     * |        |          |0 = Conversion result in ADDR does not meet ADCMPR1 setting.
N     * |        |          |1 = Conversion result in ADDR meets ADCMPR1 setting.
N     * |[7]     |BUSY      |BUSY/IDLE (Read Only)
N     * |        |          |This bit is a mirror of ADST bit in ADCR register.
N     * |        |          |0 = A/D converter is in idle state.
N     * |        |          |1 = A/D converter is busy at conversion.
N     * |[8]     |VALIDF    |Data Valid Flag (Read Only)
N     * |        |          |If any one of VALID (ADDRx[17]) is set, this flag will be set to 1.
N     * |        |          |Note: When ADC is in burst mode and any conversion result is valid, this flag will be set to 1.
N     * |[16]    |OVERRUNF  |Overrun Flag (Read Only)
N     * |        |          |If any one of OVERRUN (ADDRx[16]) is set, this flag will be set to 1.
N     * |        |          |Note: When ADC is in burst mode and the FIFO is overrun, this flag will be set to 1.
N     * |[31:27] |CHANNEL   |Current Conversion Channel (Read Only)
N     * |        |          |When BUSY=1, this filed reflects current conversion channel. When BUSY=0, it shows the number of the next converted channel.
N     * @var ADC_T::ADSR1
N     * Offset: 0x94  ADC Status Register1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |VALID     |Data Valid Flag (Read Only)
N     * |        |          |VALID[29, 15:0] are the mirror of the VALID bits in ADDR29[17], ADDR15[17]~ ADDR0[17]. The other bits are reserved.
N     * |        |          |Note: When ADC is in burst mode and any conversion result is valid, VALID[29, 15:0] will be set to 1.
N     * @var ADC_T::ADSR2
N     * Offset: 0x98  ADC Status Register2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |OVERRUN   |Overrun Flag (Read Only)
N     * |        |          |OVERRUN[29, 15:0] are the mirror of the OVERRUN bit in ADDR29[16], ADDR15[16] ~ ADDR0[16]. The other bits are reserved.
N     * |        |          |Note: When ADC is in burst mode and the FIFO is overrun, OVERRUN[29, 15:0] will be set to 1.
N     * @var ADC_T::ESMPCTL
N     * Offset: 0xA0  ADC Extend Sample Time Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |EXTSMPT   |ADC Sampling Time Extend
N     * |        |          |When ADC converting at high conversion rate, the sampling time of analog input voltage may not enough if input channel loading is heavy, user can extend ADC sampling time after trigger source is coming to get enough sampling time.
N     * |        |          |The range of start delay time is from 0~255 ADC clock.
N     * @var ADC_T::ADPDMA
N     * Offset: 0x100  ADC PDMA Current Transfer Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[17:0]  |CURDAT    |ADC PDMA Current Transfer Data Register (Read Only)
N     * |        |          |When PDMA transferring, read this register can monitor current PDMA transfer data.
N     * |        |          |Current PDMA transfer data could be the content of ADDR0 ~ ADDR15 and ADDR29 registers.
N     * @var ADC_T::ADCALR
N     * Offset: 0x180  ADC Calibration Mode Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CALEN     |Calibration Function Enable Bit
N     * |        |          |0 = Calibration function Disable.
N     * |        |          |1 = Calibration function Enable.
N     * |        |          |Note: If chip power off, calibration function should be executed again.
N     * |[1]     |CALIE     |Calibration Interrupt Enable
N     * |        |          |If calibration function is enabled and the calibration finish, CALIF bit will be asserted, in the meanwhile, if CALIE bit is set to 1, a calibration interrupt request is generated.
N     * |        |          |0 = Calibration function Interrupt Disable.
N     * |        |          |1 = Calibration function Interrupt Enable.
N     * @var ADC_T::ADCALSTSR
N     * Offset: 0x184  ADC Calibration Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CALIF     |Calibration Finish Interrupt Flag
N     * |        |          |If calibration finish, this flag will be set to 1. It is cleared by writing 1 to it.
N     */
N    __I  uint32_t ADDR[30];              /*!< [0x0000-0x0074] ADC Data Register 0 ~ 29                                  */
X    volatile const  uint32_t ADDR[30];               
N    __I  uint32_t RESERVE1[2];
X    volatile const  uint32_t RESERVE1[2];
N    __IO uint32_t ADCR;                  /*!< [0x0080] ADC Control Register                                             */
X    volatile uint32_t ADCR;                   
N    __IO uint32_t ADCHER;                /*!< [0x0084] ADC Channel Enable Register                                      */
X    volatile uint32_t ADCHER;                 
N    __IO uint32_t ADCMPR[2];             /*!< [0x0088-0x008c] ADC Compare Register 0/1                                  */
X    volatile uint32_t ADCMPR[2];              
N    __IO uint32_t ADSR0;                 /*!< [0x0090] ADC Status Register0                                             */
X    volatile uint32_t ADSR0;                  
N    __I  uint32_t ADSR1;                 /*!< [0x0094] ADC Status Register1                                             */
X    volatile const  uint32_t ADSR1;                  
N    __I  uint32_t ADSR2;                 /*!< [0x0098] ADC Status Register2                                             */
X    volatile const  uint32_t ADSR2;                  
N    __I  uint32_t RESERVE2[1];
X    volatile const  uint32_t RESERVE2[1];
N    __IO uint32_t ESMPCTL;               /*!< [0x00a0] ADC Extend Sample Time Control Register                          */
X    volatile uint32_t ESMPCTL;                
N    __IO uint32_t CFDCTL;                /*!< [0x00a4] ADC Channel Floating Detect Control Register                     */
X    volatile uint32_t CFDCTL;                 
N    __I  uint32_t RESERVE3[22];
X    volatile const  uint32_t RESERVE3[22];
N    __I  uint32_t ADPDMA;                /*!< [0x0100] ADC PDMA Current Transfer Data Register                          */
X    volatile const  uint32_t ADPDMA;                 
N    __I  uint32_t RESERVE4[31];
X    volatile const  uint32_t RESERVE4[31];
N    __IO uint32_t ADCALR;                /*!< [0x0180] ADC Calibration Mode Register                                    */
X    volatile uint32_t ADCALR;                 
N    __IO uint32_t ADCALSTSR;             /*!< [0x0184] ADC Calibration Status Register                                  */
X    volatile uint32_t ADCALSTSR;              
N    __IO uint32_t ADCALDBR;              /*!< [0x0188] ADC Calibration Debug Mode Register                              */
X    volatile uint32_t ADCALDBR;               
N} ADC_T;
N
N/**
N    @addtogroup ADC_CONST ADC Bit Field Definition
N    Constant Definitions for ADC Controller
N@{ */
N
N#define ADC_ADDR_RSLT_Pos               (0)                                         /*!< ADC_T::ADDR: RSLT Position             */
N#define ADC_ADDR_RSLT_Msk               (0xfffful << ADC_ADDR_RSLT_Pos)             /*!< ADC_T::ADDR: RSLT Mask                 */
N
N#define ADC_ADDR_OVERRUN_Pos            (16)                                        /*!< ADC_T::ADDR: OVERRUN Position          */
N#define ADC_ADDR_OVERRUN_Msk            (0x1ul << ADC_ADDR_OVERRUN_Pos)             /*!< ADC_T::ADDR: OVERRUN Mask              */
N
N#define ADC_ADDR_VALID_Pos              (17)                                        /*!< ADC_T::ADDR: VALID Position            */
N#define ADC_ADDR_VALID_Msk              (0x1ul << ADC_ADDR_VALID_Pos)               /*!< ADC_T::ADDR: VALID Mask                */
N
N#define ADC_ADCR_ADEN_Pos                (0)                                        /*!< ADC_T::ADCR: ADEN Position             */
N#define ADC_ADCR_ADEN_Msk                (0x1ul << ADC_ADCR_ADEN_Pos)               /*!< ADC_T::ADCR: ADEN Mask                 */
N
N#define ADC_ADCR_ADIE_Pos                (1)                                        /*!< ADC_T::ADCR: ADIE Position             */
N#define ADC_ADCR_ADIE_Msk                (0x1ul << ADC_ADCR_ADIE_Pos)               /*!< ADC_T::ADCR: ADIE Mask                 */
N
N#define ADC_ADCR_ADMD_Pos                (2)                                        /*!< ADC_T::ADCR: ADMD Position             */
N#define ADC_ADCR_ADMD_Msk                (0x3ul << ADC_ADCR_ADMD_Pos)               /*!< ADC_T::ADCR: ADMD Mask                 */
N
N#define ADC_ADCR_TRGS_Pos                (4)                                        /*!< ADC_T::ADCR: TRGS Position             */
N#define ADC_ADCR_TRGS_Msk                (0x3ul << ADC_ADCR_TRGS_Pos)               /*!< ADC_T::ADCR: TRGS Mask                 */
N
N#define ADC_ADCR_TRGCOND_Pos             (6)                                        /*!< ADC_T::ADCR: TRGCOND Position          */
N#define ADC_ADCR_TRGCOND_Msk             (0x3ul << ADC_ADCR_TRGCOND_Pos)            /*!< ADC_T::ADCR: TRGCOND Mask              */
N
N#define ADC_ADCR_TRGEN_Pos               (8)                                        /*!< ADC_T::ADCR: TRGEN Position            */
N#define ADC_ADCR_TRGEN_Msk               (0x1ul << ADC_ADCR_TRGEN_Pos)              /*!< ADC_T::ADCR: TRGEN Mask                */
N
N#define ADC_ADCR_PTEN_Pos                (9)                                        /*!< ADC_T::ADCR: PTEN Position             */
N#define ADC_ADCR_PTEN_Msk                (0x1ul << ADC_ADCR_PTEN_Pos)               /*!< ADC_T::ADCR: PTEN Mask                 */
N
N#define ADC_ADCR_DIFFEN_Pos              (10)                                       /*!< ADC_T::ADCR: DIFFEN Position           */
N#define ADC_ADCR_DIFFEN_Msk              (0x1ul << ADC_ADCR_DIFFEN_Pos)             /*!< ADC_T::ADCR: DIFFEN Mask               */
N
N#define ADC_ADCR_ADST_Pos                (11)                                       /*!< ADC_T::ADCR: ADST Position             */
N#define ADC_ADCR_ADST_Msk                (0x1ul << ADC_ADCR_ADST_Pos)               /*!< ADC_T::ADCR: ADST Mask                 */
N
N#define ADC_ADCR_RESET_Pos               (12)                                       /*!< ADC_T::ADCR: RESET Position            */
N#define ADC_ADCR_RESET_Msk               (0x1ul << ADC_ADCR_RESET_Pos)              /*!< ADC_T::ADCR: RESET Mask                */
N
N#define ADC_ADCR_DMOF_Pos                (31)                                       /*!< ADC_T::ADCR: DMOF Position             */
N#define ADC_ADCR_DMOF_Msk                (0x1ul << ADC_ADCR_DMOF_Pos)               /*!< ADC_T::ADCR: DMOF Mask                 */
N
N#define ADC_ADCHER_CHEN_Pos              (0)                                        /*!< ADC_T::ADCHER: CHEN Position           */
N#define ADC_ADCHER_CHEN_Msk              (0xfffffffful << ADC_ADCHER_CHEN_Pos)      /*!< ADC_T::ADCHER: CHEN Mask               */
N
N#define ADC_ADCMPR_CMPEN_Pos            (0)                                         /*!< ADC_T::ADCMPR: CMPEN Position          */
N#define ADC_ADCMPR_CMPEN_Msk            (0x1ul << ADC_ADCMPR_CMPEN_Pos)             /*!< ADC_T::ADCMPR: CMPEN Mask              */
N
N#define ADC_ADCMPR_CMPIE_Pos            (1)                                         /*!< ADC_T::ADCMPR: CMPIE Position          */
N#define ADC_ADCMPR_CMPIE_Msk            (0x1ul << ADC_ADCMPR_CMPIE_Pos)             /*!< ADC_T::ADCMPR: CMPIE Mask              */
N
N#define ADC_ADCMPR_CMPCOND_Pos          (2)                                         /*!< ADC_T::ADCMPR: CMPCOND Position        */
N#define ADC_ADCMPR_CMPCOND_Msk          (0x1ul << ADC_ADCMPR_CMPCOND_Pos)           /*!< ADC_T::ADCMPR: CMPCOND Mask            */
N
N#define ADC_ADCMPR_CMPCH_Pos            (3)                                         /*!< ADC_T::ADCMPR: CMPCH Position          */
N#define ADC_ADCMPR_CMPCH_Msk            (0x1ful << ADC_ADCMPR_CMPCH_Pos)            /*!< ADC_T::ADCMPR: CMPCH Mask              */
N
N#define ADC_ADCMPR_CMPMATCNT_Pos        (8)                                         /*!< ADC_T::ADCMPR: CMPMATCNT Position      */
N#define ADC_ADCMPR_CMPMATCNT_Msk        (0xful << ADC_ADCMPR_CMPMATCNT_Pos)         /*!< ADC_T::ADCMPR: CMPMATCNT Mask          */
N
N#define ADC_ADCMPR_CMPWEN_Pos           (15)                                        /*!< ADC_T::ADCMPR: CMPWEN Position         */
N#define ADC_ADCMPR_CMPWEN_Msk           (0x1ul << ADC_ADCMPR_CMPWEN_Pos)            /*!< ADC_T::ADCMPR: CMPWEN Mask             */
N
N#define ADC_ADCMPR_CMPD_Pos             (16)                                        /*!< ADC_T::ADCMPR: CMPD Position           */
N#define ADC_ADCMPR_CMPD_Msk             (0xffful << ADC_ADCMPR_CMPD_Pos)            /*!< ADC_T::ADCMPR: CMPD Mask               */
N
N#define ADC_ADSR0_ADF_Pos                (0)                                        /*!< ADC_T::ADSR0: ADF Position             */
N#define ADC_ADSR0_ADF_Msk                (0x1ul << ADC_ADSR0_ADF_Pos)               /*!< ADC_T::ADSR0: ADF Mask                 */
N
N#define ADC_ADSR0_CMPF0_Pos              (1)                                        /*!< ADC_T::ADSR0: CMPF0 Position           */
N#define ADC_ADSR0_CMPF0_Msk              (0x1ul << ADC_ADSR0_CMPF0_Pos)             /*!< ADC_T::ADSR0: CMPF0 Mask               */
N
N#define ADC_ADSR0_CMPF1_Pos              (2)                                        /*!< ADC_T::ADSR0: CMPF1 Position           */
N#define ADC_ADSR0_CMPF1_Msk              (0x1ul << ADC_ADSR0_CMPF1_Pos)             /*!< ADC_T::ADSR0: CMPF1 Mask               */
N
N#define ADC_ADSR0_BUSY_Pos               (7)                                        /*!< ADC_T::ADSR0: BUSY Position            */
N#define ADC_ADSR0_BUSY_Msk               (0x1ul << ADC_ADSR0_BUSY_Pos)              /*!< ADC_T::ADSR0: BUSY Mask                */
N
N#define ADC_ADSR0_VALIDF_Pos             (8)                                        /*!< ADC_T::ADSR0: VALIDF Position          */
N#define ADC_ADSR0_VALIDF_Msk             (0x1ul << ADC_ADSR0_VALIDF_Pos)            /*!< ADC_T::ADSR0: VALIDF Mask              */
N
N#define ADC_ADSR0_OVERRUNF_Pos           (16)                                       /*!< ADC_T::ADSR0: OVERRUNF Position        */
N#define ADC_ADSR0_OVERRUNF_Msk           (0x1ul << ADC_ADSR0_OVERRUNF_Pos)          /*!< ADC_T::ADSR0: OVERRUNF Mask            */
N
N#define ADC_ADSR0_CHANNEL_Pos            (27)                                       /*!< ADC_T::ADSR0: CHANNEL Position         */
N#define ADC_ADSR0_CHANNEL_Msk            (0x1ful << ADC_ADSR0_CHANNEL_Pos)          /*!< ADC_T::ADSR0: CHANNEL Mask             */
N
N#define ADC_ADSR1_VALID_Pos              (0)                                        /*!< ADC_T::ADSR1: VALID Position           */
N#define ADC_ADSR1_VALID_Msk              (0xfffffffful << ADC_ADSR1_VALID_Pos)      /*!< ADC_T::ADSR1: VALID Mask               */
N
N#define ADC_ADSR2_OVERRUN_Pos            (0)                                        /*!< ADC_T::ADSR2: OVERRUN Position         */
N#define ADC_ADSR2_OVERRUN_Msk            (0xfffffffful << ADC_ADSR2_OVERRUN_Pos)    /*!< ADC_T::ADSR2: OVERRUN Mask             */
N
N#define ADC_ESMPCTL_EXTSMPT_Pos          (0)                                        /*!< ADC_T::ESMPCTL: EXTSMPT Position       */
N#define ADC_ESMPCTL_EXTSMPT_Msk          (0xfful << ADC_ESMPCTL_EXTSMPT_Pos)        /*!< ADC_T::ESMPCTL: EXTSMPT Mask           */
N
N#define ADC_CFDCTL_PRECHEN_Pos           (0)                                        /*!< ADC_T::CFDCTL: PRECHEN Position        */
N#define ADC_CFDCTL_PRECHEN_Msk           (0x1ul << ADC_CFDCTL_PRECHEN_Pos)          /*!< ADC_T::CFDCTL: PRECHEN Mask            */
N
N#define ADC_CFDCTL_DISCHEN_Pos           (1)                                        /*!< ADC_T::CFDCTL: DISCHEN Position        */
N#define ADC_CFDCTL_DISCHEN_Msk           (0x1ul << ADC_CFDCTL_DISCHEN_Pos)          /*!< ADC_T::CFDCTL: DISCHEN Mask            */
N
N#define ADC_CFDCTL_FDETCHEN_Pos          (8)                                        /*!< ADC_T::CFDCTL: FDETCHEN Position       */
N#define ADC_CFDCTL_FDETCHEN_Msk          (0x1ul << ADC_CFDCTL_FDETCHEN_Pos)         /*!< ADC_T::CFDCTL: FDETCHEN Mask           */
N
N#define ADC_ADPDMA_CURDAT_Pos            (0)                                        /*!< ADC_T::ADPDMA: CURDAT Position         */
N#define ADC_ADPDMA_CURDAT_Msk            (0x3fffful << ADC_ADPDMA_CURDAT_Pos)       /*!< ADC_T::ADPDMA: CURDAT Mask             */
N
N#define ADC_ADCALR_CALEN_Pos             (0)                                        /*!< ADC_T::ADCALR: CALEN Position          */
N#define ADC_ADCALR_CALEN_Msk             (0x1ul << ADC_ADCALR_CALEN_Pos)            /*!< ADC_T::ADCALR: CALEN Mask              */
N
N#define ADC_ADCALR_CALIE_Pos             (1)                                        /*!< ADC_T::ADCALR: CALIE Position          */
N#define ADC_ADCALR_CALIE_Msk             (0x1ul << ADC_ADCALR_CALIE_Pos)            /*!< ADC_T::ADCALR: CALIE Mask              */
N
N#define ADC_ADCALSTSR_CALIF_Pos          (0)                                        /*!< ADC_T::ADCALSTSR: CALIF Position       */
N#define ADC_ADCALSTSR_CALIF_Msk          (0x1ul << ADC_ADCALSTSR_CALIF_Pos)         /*!< ADC_T::ADCALSTSR: CALIF Mask           */
N
N/**@}*/ /* ADC_CONST */
N/**@}*/ /* end of ADC register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __ADC_REG_H__ */
L 162 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "clk_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\clk_reg.h" 1
N/**************************************************************************//**
N * @file     clk_reg.h
N * @version  V1.00
N * @brief    CLK register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __CLK_REG_H__
N#define __CLK_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup CLK System Clock Controller (CLK)
N    Memory Mapped Structure for CLK Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var CLK_T::PWRCTL
N     * Offset: 0x00  System Power-down Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |HXTEN     |HXT Enable Bit (Write Protect)
N     * |        |          |0 = External high speed crystal (HXT) Disabled.
N     * |        |          |1 = External high speed crystal (HXT) Enabled.
N     * |        |          |Note1: Reset by power on reset.
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[1]     |LXTEN     |LXT Enable Bit (Write Protect)
N     * |        |          |0 = External low speed crystal (LXT) Disabled.
N     * |        |          |1 = External low speed crystal (LXT) Enabled.
N     * |        |          |Note1: Reset by RTC power on reset.
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[2]     |HIRCEN    |HIRC Enable Bit (Write Protect)
N     * |        |          |0 = Internal high speed RC oscillator (HIRC) Disabled.
N     * |        |          |1 = Internal high speed RC oscillator (HIRC) Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[3]     |LIRCEN    |LIRC Enable Bit (Write Protect)
N     * |        |          |0 = Internal low speed RC oscillator (LIRC) Disabled.
N     * |        |          |1 = Internal low speed RC oscillator (LIRC) Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[4]     |PDWKDLY   |Enable the Wake-up Delay Counter (Write Protect)
N     * |        |          |When the chip wakes up from Power-down mode, the clock control will delay certain clock cycles to wait system clock stable.
N     * |        |          |The delayed clock cycle is 4096 clock cycles when chip works at external high speed crystal oscillator (HXT), and 512 clock cycles when chip works at internal high speed RC oscillator (HIRC).
N     * |        |          |0 = Clock cycles delay Disabled.
N     * |        |          |1 = Clock cycles delay Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[5]     |PDWKIEN   |Power-down Mode Wake-up Interrupt Enable Bit (Write Protect)
N     * |        |          |0 = Power-down mode wake-up interrupt Disabled.
N     * |        |          |1 = Power-down mode wake-up interrupt Enabled.
N     * |        |          |Note1: The interrupt will occur when both PDWKIF and PDWKIEN are high.
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[6]     |PDWKIF    |Power-down Mode Wake-up Interrupt Status
N     * |        |          |Set by "Power-down wake-up event", it indicates that resume from Power-down mode.
N     * |        |          |The flag is set if any wake-up source is occurred. Refer Power Modes and Wake-up Sources chapter.
N     * |        |          |Note1: Write 1 to clear the bit to 0.
N     * |        |          |Note2: This bit works only if PDWKIEN (CLK_PWRCTL[5]) set to 1.
N     * |[7]     |PDEN      |System Power-down Enable (Write Protect)
N     * |        |          |When this bit is set to 1, Power-down mode is enabled and chip keeps active till the CPU sleep mode is also active and then the chip enters Power-down mode.
N     * |        |          |When chip wakes up from Power-down mode, this bit is auto cleared. Users need to set this bit again for next Power-down.
N     * |        |          |In Power-down mode, HXT and the HIRC will be disabled in this mode, but LXT and LIRC are not controlled by Power-down mode.
N     * |        |          |In Power-down mode, the PLL and system clock are disabled, and ignored the clock source selection. The clocks of peripheral are not controlled by Power-down mode, if the peripheral clock source is from LXT or LIRC.
N     * |        |          |0 = Chip operating normally or chip in idle mode because of WFI command.
N     * |        |          |1 = Chip enters Power-down mode instant or wait CPU sleep command WFI.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[13]    |HXTTBEN   |HXT Crystal TURBO Mode (Write Protect)
N     * |        |          |0 = HXT Crystal TURBO mode disabled.
N     * |        |          |1 = HXT Crystal TURBO mode enabled.
N     * |        |          |Note1: Reset by power on reset.
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[22:20] |HXTGAIN   |HXT Gain Control Bit (Write Protect)
N     * |        |          |This is a protected register. Please refer to open lock sequence to program it.
N     * |        |          |Gain control is used to enlarge the gain of crystal to make sure crystal work normally. If gain control is enabled, crystal will consume more power than gain control off.
N     * |        |          |000 = HXT frequency is lower than from 4 MHz.
N     * |        |          |001 = HXT frequency is from 4 MHz to 8 MHz.
N     * |        |          |010 = HXT frequency is from 8 MHz to 12 MHz.
N     * |        |          |011 = HXT frequency is from 12 MHz to 16 MHz.
N     * |        |          |100 = HXT frequency is from 16 MHz to 24 MHz.
N     * |        |          |111 = HXT frequency is from 24 MHz to 32 MHz.
N     * |        |          |Others: Reserved
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[24]    |LXTSELXT  |LXT Mode Selection
N     * |        |          |0 = LXT work as crystal mode. PF.4 and PF.5 are configured as external low speed crystal (LXT) pins.
N     * |        |          |1 = LXT work as external clock mode. PF.5 is configured as external clock input pin.
N     * |        |          |Note1: When LXTSELXT = 1, PF.5 MFP should be setting as GPIO mode. The DC characteristic of X32_IN is the same as GPIO.
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[26:25] |LXTGAIN   |LXT Gain Control Bit (Write Protect)
N     * |        |          |00 = LXT Crystal ESR = 35K, CL=12.5pFReserved.
N     * |        |          |10 = LXT Crystal ESR = 70K, CL=12.5pFReserved.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var CLK_T::AHBCLK
N     * Offset: 0x04  AHB Devices Clock Enable Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |PDMACKEN  |PDMA Controller Clock Enable Bit
N     * |        |          |0 = PDMA peripheral clock Disabled.
N     * |        |          |1 = PDMA peripheral clock Enabled.
N     * |[2]     |ISPCKEN   |Flash ISP Controller Clock Enable Bit
N     * |        |          |0 = Flash ISP peripheral clock Disabled.
N     * |        |          |1 = Flash ISP peripheral clock Enabled.
N     * |[3]     |EBICKEN   |EBI Controller Clock Enable Bit
N     * |        |          |0 = EBI peripheral clock Disabled.
N     * |        |          |1 = EBI peripheral clock Enabled.Reserved.
N     * |[4]     |HDIVCKEN  |HDIV Controller Clock Enable Bit
N     * |        |          |0 = HDIV peripheral clock Disabled.
N     * |        |          |1 = HDIV peripheral clock Enabled.Reserved.
N     * |[7]     |CRCCKEN   |CRC Generator Controller Clock Enable Bit
N     * |        |          |0 = CRC peripheral clock Disabled.
N     * |        |          |1 = CRC peripheral clock Enabled.
N     * @var CLK_T::APBCLK0
N     * Offset: 0x08  APB Devices Clock Enable Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WDTCKEN   |Watchdog Timer Clock Enable Bit (Write Protect)
N     * |        |          |0 = Watchdog timer clock Disabled.
N     * |        |          |1 = Watchdog timer clock Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register. Reserved.
N     * |        |          |Note: Reset by power on reset or watch dog reset or software chip reset.
N     * |[2]     |TMR0CKEN  |Timer0 Clock Enable Bit
N     * |        |          |0 = Timer0 clock Disabled.
N     * |        |          |1 = Timer0 clock Enabled.
N     * |[3]     |TMR1CKEN  |Timer1 Clock Enable Bit
N     * |        |          |0 = Timer1 clock Disabled.
N     * |        |          |1 = Timer1 clock Enabled.
N     * |[4]     |TMR2CKEN  |Timer2 Clock Enable Bit
N     * |        |          |0 = Timer2 clock Disabled.
N     * |        |          |1 = Timer2 clock Enabled.
N     * |[5]     |TMR3CKEN  |Timer3 Clock Enable Bit
N     * |        |          |0 = Timer3 clock Disabled.
N     * |        |          |1 = Timer3 clock Enabled.
N     * |[6]     |CLKOCKEN  |CLKO Clock Enable Bit
N     * |        |          |0 = CLKO clock Disabled.
N     * |        |          |1 = CLKO clock Enabled.
N     * |[7]     |ACMP01CKEN|Analog Comparator 0/1 Clock Enable Bit
N     * |        |          |0 = Analog comparator 0/1 clock Disabled.
N     * |        |          |1 = Analog comparator 0/1 clock Enabled.
N     * |[8]     |I2C0CKEN  |I2C0 Clock Enable Bit
N     * |        |          |0 = I2C0 clock Disabled.
N     * |        |          |1 = I2C0 clock Enabled.
N     * |[9]     |I2C1CKEN  |I2C1 Clock Enable Bit
N     * |        |          |0 = I2C1 clock Disabled.
N     * |        |          |1 = I2C1 clock Enabled.
N     * |[13]    |SPI0CKEN  |SPI0 Clock Enable Bit
N     * |        |          |0 = SPI0 clock Disabled.
N     * |        |          |1 = SPI0 clock Enabled.
N     * |[16]    |UART0CKEN |UART0 Clock Enable Bit
N     * |        |          |0 = UART0 clock Disabled.
N     * |        |          |1 = UART0 clock Enabled.
N     * |[17]    |UART1CKEN |UART1 Clock Enable Bit
N     * |        |          |0 = UART1 clock Disabled.
N     * |        |          |1 = UART1 clock Enabled.
N     * |[18]    |UART2CKEN |UART2 Clock Enable Bit
N     * |        |          |0 = UART2 clock Disabled.
N     * |        |          |1 = UART2 clock Enabled.
N     * |[27]    |USBDCKEN  |USB Device Clock Enable Bit
N     * |        |          |0 = USB Device clock Disabled.
N     * |        |          |1 = USB Device clock Enabled.Reserved.
N     * |[28]    |ADCCKEN   |Analog-digital-converter (ADC) Clock Enable Bit
N     * |        |          |0 = ADC clock Disabled.
N     * |        |          |1 = ADC clock Enabled.Reserved.
N     * @var CLK_T::APBCLK1
N     * Offset: 0x0C  APB Devices Clock Enable Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8]     |USCI0CKEN |USCI0 Clock Enable Bit
N     * |        |          |0 = USCI0 clock Disabled.
N     * |        |          |1 = USCI0 clock Enabled.
N     * |[16]    |PWM0CKEN  |PWM0 Clock Enable Bit
N     * |        |          |0 = PWM0 clock Disabled.
N     * |        |          |1 = PWM0 clock Enabled.
N     * |[17]    |PWM1CKEN  |PWM1 Clock Enable Bit
N     * |        |          |0 = PWM1 clock Disabled.
N     * |        |          |1 = PWM1 clock Enabled.
N     * @var CLK_T::CLKSEL0
N     * Offset: 0x10  Clock Source Select Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |HCLKSEL   |HCLK Clock Source Selection (Write Protect)
N     * |        |          |Before clock switching, the related clock sources (both pre-select and new-select) must be turned on.
N     * |        |          |000 = Clock source from HXT.
N     * |        |          |001 = Clock source from LXT.
N     * |        |          |010 = Clock source from PLL. (M031_E/M032_E/M031_D only)
N     * |        |          |    = Clock source from HIRC. (M031_C/B only)
N     * |        |          |011 = Clock source from LIRC.
N     * |        |          |111= Clock source from HIRC.
N     * |        |          |Other = Reserved.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note: Reset by power on reset.
N     * |[5:3]   |STCLKSEL  |Cortex-M0 SysTick Clock Source Selection (Write Protect)
N     * |        |          |If SYST_CTRL[2]=0, SysTick uses listed clock source below.
N     * |        |          |000 = Clock source from HXT.
N     * |        |          |001 = Clock source from LXT.
N     * |        |          |010 = Clock source from HXT/2.
N     * |        |          |011 = Clock source from HCLK/2.
N     * |        |          |111 = Clock source from HIRC/2.
N     * |        |          |Other = Reserved.
N     * |        |          |Note: if SysTick clock source is not from HCLK (i.e. SYST_CTRL[2] = 0), SysTick clock source must less than or equal to HCLK/2.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[8]     |USBDSEL   |USB Device Clock Source Selection (Write Protect)
N     * |        |          |These bits are protected bit. It means programming this bit needs to write "59h", "16h", "88h" to address 0x4000_0100 to disable register protection. Refer to the register REGWRPROT at address GCR_BA+0x100.
N     * |        |          |0 = Clock source from HIRC.
N     * |        |          |1 = Clock source from PLL divided. (M031_E/M032_E only)
N     * |        |          |  = Clock source from HIRC. (M031_D/C/B only)
N     * @var CLK_T::CLKSEL1
N     * Offset: 0x14  Clock Source Select Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |WDTSEL    |Watchdog Timer Clock Source Selection (Write Protect)
N     * |        |          |00 = Reserved.
N     * |        |          |01 = Clock source from external low speed crystal oscillator (LXT).
N     * |        |          |10 = Clock source from HCLK/2048.
N     * |        |          |11 = Clock source from internal low speed RC oscillator (LIRC).
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: Will be forced to 11 when CONFIG0[31], CONFIG0[4], CONFIG0[3] are all ones.
N     * |[3:2]   |WWDTSEL   |Window Watchdog Timer Clock Source Selection (Write Protect)
N     * |        |          |10 = Clock source from HCLK/2048.
N     * |        |          |11 = Clock source from internal low speed RC oscillator (LIRC).
N     * |        |          |Others = Reserved.
N     * |[6:4]   |CLKOSEL   |Clock Divider Clock Source Selection
N     * |        |          |000 = Clock source from external high speed crystal oscillator (HXT).
N     * |        |          |001 = Clock source from external low speed crystal oscillator (LXT).
N     * |        |          |010 = Clock source from HCLK.
N     * |        |          |011 = Clock source from internal high speed RC oscillator (HIRC).
N     * |        |          |100 = Clock source from internal low speed RC oscillator (LIRC).
N     * |        |          |101 = Clock source from internal high speed RC oscillator (HIRC).
N     * |        |          |110 = Clock source from PLL. (M031_E/D only).
N     * |        |          |    = Clock source from internal high speed RC oscillator (HIRC). (M031_C/B only).
N     * |[10:8]  |TMR0SEL   |TIMER0 Clock Source Selection
N     * |        |          |000 = Clock source from external high speed crystal oscillator (HXT).
N     * |        |          |001 = Clock source from external low speed crystal oscillator (LXT).
N     * |        |          |010 = Clock source from PCLK0.
N     * |        |          |011 = Clock source from external clock T0 pin.
N     * |        |          |101 = Clock source from internal low speed RC oscillator (LIRC).
N     * |        |          |111 = Clock source from internal high speed RC oscillator (HIRC).
N     * |        |          |Others = Reserved.
N     * |[14:12] |TMR1SEL   |TIMER1 Clock Source Selection
N     * |        |          |000 = Clock source from external high speed crystal oscillator (HXT).
N     * |        |          |001 = Clock source from external low speed crystal oscillator (LXT).
N     * |        |          |010 = Clock source from PCLK0.
N     * |        |          |011 = Clock source from external clock T1 pin.
N     * |        |          |101 = Clock source from internal low speed RC oscillator (LIRC).
N     * |        |          |111 = Clock source from internal high speed RC oscillator (HIRC).
N     * |        |          |Others = Reserved.
N     * |[18:16] |TMR2SEL   |TIMER2 Clock Source Selection
N     * |        |          |000 = Clock source from external high speed crystal oscillator (HXT).
N     * |        |          |001 = Clock source from external low speed crystal oscillator (LXT).
N     * |        |          |010 = Clock source from PCLK1.
N     * |        |          |011 = Clock source from external clock T2 pin.
N     * |        |          |101 = Clock source from internal low speed RC oscillator (LIRC).
N     * |        |          |111 = Clock source from internal high speed RC oscillator (HIRC).
N     * |        |          |Others = Reserved.
N     * |[22:20] |TMR3SEL   |TIMER3 Clock Source Selection
N     * |        |          |000 = Clock source from external high speed crystal oscillator (HXT).
N     * |        |          |001 = Clock source from external low speed crystal oscillator (LXT).
N     * |        |          |010 = Clock source from PCLK1.
N     * |        |          |011 = Clock source from external clock T3 pin.
N     * |        |          |101 = Clock source from internal low speed RC oscillator (LIRC).
N     * |        |          |111 = Clock source from internal high speed RC oscillator (HIRC).
N     * |        |          |Others = Reserved.
N     * |[26:24] |UART0SEL  |UART0 Clock Source Selection
N     * |        |          |000 = Clock source from external high speed crystal oscillator (HXT).
N     * |        |          |001 = Clock source from PLL. (M031_E/D only)
N     * |        |          |    = Clock source from PCLK0. (M031_C/B only).
N     * |        |          |010 = Clock source from external low speed crystal oscillator (LXT).
N     * |        |          |011 = Clock source from internal high speed RC oscillator (HIRC).
N     * |        |          |100 = Clock source from PCLK0.
N     * |        |          |Other = Reserved.
N     * |[30:28] |UART1SEL  |UART1 Clock Source Selection
N     * |        |          |000 = Clock source from external high speed crystal oscillator (HXT).
N     * |        |          |001 = Clock source from PLL. (M031_E/D only)
N     * |        |          |    = Clock source from PCLK1. (M031_C/B only).
N     * |        |          |010 = Clock source from external low speed crystal oscillator (LXT).
N     * |        |          |011 = Clock source from internal high speed RC oscillator (HIRC).
N     * |        |          |100 = Clock source from PCLK1.
N     * |        |          |Other = Reserved.
N     * @var CLK_T::CLKSEL2
N     * Offset: 0x18  Clock Source Select Control Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |PWM0SEL   |PWM0 Clock Source Selection
N     * |        |          |The peripheral clock source of PWM0 is defined by PWM0SEL.
N     * |        |          |0 = Clock source from PLL. (M031_E/D only)
N     * |        |          |  = Clock source from PCLK0. (M031_C/B only).
N     * |        |          |1 = Clock source from PCLK0.
N     * |[1]     |PWM1SEL   |PWM1 Clock Source Selection
N     * |        |          |The peripheral clock source of PWM1 is defined by PWM1SEL.
N     * |        |          |0 = Clock source from PLL. (M031_E/D only)
N     * |        |          |  = Clock source from PCLK1. (M031_C/B only).
N     * |        |          |1 = Clock source from PCLK1.
N     * |[5:4]   |SPI0SEL   |SPI0 Clock Source Selection
N     * |        |          |00 = Clock source from external high speed crystal oscillator (HXT).
N     * |        |          |01 = Clock source from PLL. (M031_E/D only)
N     * |        |          |   = Clock source from PCLK1. (M031_C/B only).
N     * |        |          |10 = Clock source from PCLK1.
N     * |        |          |11 = Clock source from internal high speed RC oscillator (HIRC).
N     * |[21:20] |ADCSEL    |ADC Clock Source Selection
N     * |        |          |00 = Clock source from external high speed crystal oscillator (HXT) clock.
N     * |        |          |01 = Clock source from PLL. (M031_E/D only)
N     * |        |          |   = Clock source from PCLK1. (M031_C/B only).
N     * |        |          |10 = Clock source from PCLK1.
N     * |        |          |11 = Clock source from internal high speed RC oscillator (HIRC) clock.
N     * @var CLK_T::CLKSEL3
N     * Offset: 0x1C  Clock Source Select Control Register 3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[26:24] |UART2SEL  |UART2 Clock Source Selection
N     * |        |          |000 = Clock source from external high speed crystal oscillator (HXT).
N     * |        |          |001 = Clock source from PLL. (M031_E/D only)
N     * |        |          |    = Clock source from PCLK0. (M031_C/B only).
N     * |        |          |010 = Clock source from external low speed crystal oscillator (LXT).
N     * |        |          |011 = Clock source from internal high speed RC oscillator (HIRC).
N     * |        |          |100 = Clock source from PCLK0.
N     * |        |          |Other = Reserved.
N     * @var CLK_T::CLKDIV0
N     * Offset: 0x20  Clock Divider Number Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |HCLKDIV   |HCLK Clock Divide Number From HCLK Clock Source
N     * |        |          |HCLK clock frequency = (HCLK clock source frequency) / (HCLKDIV + 1).
N     * |[7:4]   |USBDIV    |USB Clock Divide Number From PLL Clock
N     * |        |          |USB clock frequency = (PLL frequency) / (USBDIV + 1).
N     * |[11:8]  |UART0DIV  |UART0 Clock Divide Number From UART0 Clock Source
N     * |        |          |UART0 clock frequency = (UART0 clock source frequency) / (UART0DIV + 1).
N     * |[15:12] |UART1DIV  |UART1 Clock Divide Number From UART1 Clock Source
N     * |        |          |UART1 clock frequency = (UART1 clock source frequency) / (UART1DIV + 1).
N     * |[23:16] |ADCDIV    |ADC Clock Divide Number From ADC Clock Source
N     * |        |          |ADC clock frequency = (ADC clock source frequency) / (ADCDIV + 1).
N     * @var CLK_T::CLKDIV4
N     * Offset: 0x30  Clock Divider Number Register 4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |UART2DIV  |UART2 Clock Divide Number From UART2 Clock Source
N     * |        |          |UART2 clock frequency = (UART2 clock source frequency) / (UART2DIV + 1).
N     * @var CLK_T::PCLKDIV
N     * Offset: 0x34  APB Clock Divider Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |APB0DIV   |APB0 Clock DIvider
N     * |        |          |APB0 clock can be divided from HCLK.
N     * |        |          |000 = PCLK0 = HCLK.
N     * |        |          |001 = PCLK0 = 1/2 HCLK.
N     * |        |          |010 = PCLK0 = 1/4 HCLK.
N     * |        |          |011 = PCLK0 = 1/8 HCLK.
N     * |        |          |100 = PCLK0 = 1/16 HCLK.
N     * |        |          |Others = Reserved.
N     * |[6:4]   |APB1DIV   |APB1 Clock DIvider
N     * |        |          |APB1 clock can be divided from HCLK.
N     * |        |          |000 = PCLK1 = HCLK.
N     * |        |          |001 = PCLK1 = 1/2 HCLK.
N     * |        |          |010 = PCLK1 = 1/4 HCLK.
N     * |        |          |011 = PCLK1 = 1/8 HCLK.
N     * |        |          |100 = PCLK1 = 1/16 HCLK.
N     * |        |          |Others = Reserved.
N     * @var CLK_T::PLLCTL
N     * Offset: 0x40  PLL Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]   |FBDIV     |PLL Feedback Divider Control (Write Protect)
N     * |        |          |Refer to the formulas below the table.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[13:9]  |INDIV     |PLL Input Divider Control (Write Protect)
N     * |        |          |Refer to the formulas below the table.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[15:14] |OUTDIV    |PLL Output Divider Control (Write Protect)
N     * |        |          |Refer to the formulas below the table.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[16]    |PD        |Power-down Mode (Write Protect)
N     * |        |          |If set the PDEN bit to 1 in CLK_PWRCTL register, the PLL will enter Power-down mode, too.
N     * |        |          |0 = PLL is in normal mode.
N     * |        |          |1 = PLL is in Power-down mode (default).
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[17]    |BP        |PLL Bypass Control (Write Protect)
N     * |        |          |0 = PLL is in normal mode (default).
N     * |        |          |1 = PLL clock output is same as PLL input clock FIN.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[18]    |OE        |PLL OE (FOUT Enable) Pin Control (Write Protect)
N     * |        |          |0 = PLL FOUT Enabled.
N     * |        |          |1 = PLL FOUT is fixed low.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[19]    |PLLSRC    |PLL Source Clock Selection (Write Protect)
N     * |        |          |0 = PLL source clock from external high-speed crystal oscillator (HXT).
N     * |        |          |1 = PLL source clock from 48 MHz internal high-speed oscillator (HIRC/4).
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[23]    |STBSEL    |PLL Stable Counter Selection (Write Protect)
N     * |        |          |0 = PLL stable time is 6144 PLL source clock (suitable for source clock is equal to or less than 12 MHz).
N     * |        |          |1 = PLL stable time is 16128 PLL source clock (suitable for source clock is larger than 12 MHz).
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var CLK_T::STATUS
N     * Offset: 0x50  Clock Status Monitor Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |HXTSTB    |HXT Clock Source Stable Flag (Read Only)
N     * |        |          |0 = External high speed crystal oscillator (HXT) clock is not stable or disabled.
N     * |        |          |1 = External high speed crystal oscillator (HXT) clock is stable and enabled.
N     * |[1]     |LXTSTB    |LXT Clock Source Stable Flag (Read Only)
N     * |        |          |0 = External low speed crystal oscillator (LXT) clock is not stable or disabled.
N     * |        |          |1 = External low speed crystal oscillator (LXT) clock is stabled and enabled.
N     * |[2]     |PLLSTB    |Internal PLL Clock Source Stable Flag (Read Only)
N     * |        |          |0 = Internal PLL clock is not stable or disabled.
N     * |        |          |1 = Internal PLL clock is stable and enabled.
N     * |        |          |Reserved. (M031_C/B only)
N     * |[3]     |LIRCSTB   |LIRC Clock Source Stable Flag (Read Only)
N     * |        |          |0 = Internal low speed RC oscillator (LIRC) clock is not stable or disabled.
N     * |        |          |1 = Internal low speed RC oscillator (LIRC) clock is stable and enabled.
N     * |[4]     |HIRCSTB   |HIRC Clock Source Stable Flag (Read Only)
N     * |        |          |0 = Internal high speed RC oscillator (HIRC) clock is not stable or disabled.
N     * |        |          |1 = Internal high speed RC oscillator (HIRC) clock is stable and enabled.
N     * |[7]     |CLKSFAIL  |Clock Switching Fail Flag (Read Only)
N     * |        |          |This bit is updated when software switches system clock source. If switch target clock is stable, this bit will be set to 0. If switch target clock is not stable, this bit will be set to 1.
N     * |        |          |0 = Clock switching success.
N     * |        |          |1 = Clock switching failure.
N     * |        |          |Note: Write 1 to clear the bit to 0.
N     * @var CLK_T::CLKOCTL
N     * Offset: 0x60  Clock Output Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |FREQSEL   |Clock Output Frequency Selection
N     * |        |          |The formula of output frequency is
N     * |        |          |Fout = Fin/(2^(N+1)).
N     * |        |          |Fin is the input clock frequency.
N     * |        |          |Fout is the frequency of divider output clock.
N     * |        |          |N is the 4-bit value of FREQSEL[3:0].
N     * |[4]     |CLKOEN    |Clock Output Enable Bit
N     * |        |          |0 = Clock Output function Disabled.
N     * |        |          |1 = Clock Output function Enabled.
N     * |[5]     |DIV1EN    |Clock Output Divide One Enable Bit
N     * |        |          |0 = Clock Output will output clock with source frequency divided by FREQSEL.
N     * |        |          |1 = Clock Output will output clock with source frequency.
N     * @var CLK_T::CLKDCTL
N     * Offset: 0x70  Clock Fail Detector Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |HXTFDEN   |HXT Clock Fail Detector Enable Bit
N     * |        |          |0 = External high speed crystal oscillator (HXT) clock fail detector Disabled.
N     * |        |          |1 = External high speed crystal oscillator (HXT) clock fail detector Enabled.
N     * |[5]     |HXTFIEN   |HXT Clock Fail Interrupt Enable Bit
N     * |        |          |0 = External high speed crystal oscillator (HXT) clock fail interrupt Disabled.
N     * |        |          |1 = External high speed crystal oscillator (HXT) clock fail interrupt Enabled.
N     * |[12]    |LXTFDEN   |LXT Clock Fail Detector Enable Bit
N     * |        |          |0 = External low speed crystal oscillator (LXT) clock fail detector Disabled.
N     * |        |          |1 = External low speed crystal oscillator (LXT) clock fail detector Enabled.
N     * |[13]    |LXTFIEN   |LXT Clock Fail Interrupt Enable Bit
N     * |        |          |0 = External low speed crystal oscillator (LXT) clock fail interrupt Disabled.
N     * |        |          |1 = External low speed crystal oscillator (LXT) clock fail interrupt Enabled.
N     * |[16]    |HXTFQDEN  |HXT Clock Frequency Range Detector Enable Bit
N     * |        |          |0 = External high speed crystal oscillator (HXT) clock frequency range detector Disabled.
N     * |        |          |1 = External high speed crystal oscillator (HXT) clock frequency range detector Enabled.
N     * |[17]    |HXTFQIEN  |HXT Clock Frequency Range Detector Interrupt Enable Bit
N     * |        |          |0 = External high speed crystal oscillator (HXT) clock frequency range detector fail interrupt Disabled.
N     * |        |          |1 = External high speed crystal oscillator (HXT) clock frequency range detector fail interrupt Enabled.
N     * @var CLK_T::CLKDSTS
N     * Offset: 0x74  Clock Fail Detector Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |HXTFIF    |HXT Clock Fail Interrupt Flag (Write Protect)
N     * |        |          |0 = External high speed crystal oscillator (HXT) clock is normal.
N     * |        |          |1 = External high speed crystal oscillator (HXT) clock stops.
N     * |        |          |Note: Write 1 to clear the bit to 0.
N     * |[1]     |LXTFIF    |LXT Clock Fail Interrupt Flag (Write Protect)
N     * |        |          |0 = External low speed crystal oscillator (LXT) clock is normal.
N     * |        |          |1 = External low speed crystal oscillator (LXT) stops.
N     * |        |          |Note: Write 1 to clear the bit to 0.
N     * |[8]     |HXTFQIF   |HXT Clock Frequency Range Detector Interrupt Flag (Write Protect)
N     * |        |          |0 = External high speed crystal oscillator (HXT) clock frequency is normal.
N     * |        |          |1 = External high speed crystal oscillator (HXT) clock frequency is abnormal.
N     * |        |          |Note: Write 1 to clear the bit to 0.
N     * @var CLK_T::CDUPB
N     * Offset: 0x78  Clock Frequency Range Detector Upper Boundary Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |UPERBD    |HXT Clock Frequency Range Detector Upper Boundary Value
N     * |        |          |The bits define the maximum value of frequency range detector window.
N     * |        |          |When HXT frequency higher than this maximum frequency value, the HXT Clock Frequency Range Detector Interrupt Flag will set to 1.
N     * @var CLK_T::CDLOWB
N     * Offset: 0x7C  Clock Frequency Range Detector Lower Boundary Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |LOWERBD   |HXT Clock Frequency Range Detector Lower Boundary Value
N     * |        |          |The bits define the minimum value of frequency range detector window.
N     * |        |          |When HXT frequency lower than this minimum frequency value, the HXT Clock Frequency Range Detector Interrupt Flag will set to 1.
N     * @var CLK_T::HXTFSEL
N     * Offset: 0xB4  HXT Filter Select Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |HXTFSEL   |HXT Filter Select
N     * |        |          |0 = HXT frequency is > 12MHz.
N     * |        |          |1 = HXT frequency is <= 12MHz.
N     * |        |          |Note: This bit should not be changed during HXT is running.
N     */
N    __IO uint32_t PWRCTL;                /*!< [0x0000] System Power-down Control Register                               */
X    volatile uint32_t PWRCTL;                 
N    __IO uint32_t AHBCLK;                /*!< [0x0004] AHB Devices Clock Enable Control Register                        */
X    volatile uint32_t AHBCLK;                 
N    __IO uint32_t APBCLK0;               /*!< [0x0008] APB Devices Clock Enable Control Register 0                      */
X    volatile uint32_t APBCLK0;                
N    __IO uint32_t APBCLK1;               /*!< [0x000c] APB Devices Clock Enable Control Register 1                      */
X    volatile uint32_t APBCLK1;                
N    __IO uint32_t CLKSEL0;               /*!< [0x0010] Clock Source Select Control Register 0                           */
X    volatile uint32_t CLKSEL0;                
N    __IO uint32_t CLKSEL1;               /*!< [0x0014] Clock Source Select Control Register 1                           */
X    volatile uint32_t CLKSEL1;                
N    __IO uint32_t CLKSEL2;               /*!< [0x0018] Clock Source Select Control Register 2                           */
X    volatile uint32_t CLKSEL2;                
N    __IO uint32_t CLKSEL3;               /*!< [0x001c] Clock Source Select Control Register 3                           */
X    volatile uint32_t CLKSEL3;                
N    __IO uint32_t CLKDIV0;               /*!< [0x0020] Clock Divider Number Register 0                                  */
X    volatile uint32_t CLKDIV0;                
N    __I  uint32_t RESERVE0[3];
X    volatile const  uint32_t RESERVE0[3];
N    __IO uint32_t CLKDIV4;               /*!< [0x0030] Clock Divider Number Register 4                                  */
X    volatile uint32_t CLKDIV4;                
N    __IO uint32_t PCLKDIV;               /*!< [0x0034] APB Clock Divider Register                                       */
X    volatile uint32_t PCLKDIV;                
N    __I  uint32_t RESERVE1[2];
X    volatile const  uint32_t RESERVE1[2];
N    __IO uint32_t PLLCTL;                /*!< [0x0040] PLL Control Register                                             */
X    volatile uint32_t PLLCTL;                 
N    __I  uint32_t RESERVE2[3];
X    volatile const  uint32_t RESERVE2[3];
N    __I  uint32_t STATUS;                /*!< [0x0050] Clock Status Monitor Register                                    */
X    volatile const  uint32_t STATUS;                 
N    __I  uint32_t RESERVE3[3];
X    volatile const  uint32_t RESERVE3[3];
N    __IO uint32_t CLKOCTL;               /*!< [0x0060] Clock Output Control Register                                    */
X    volatile uint32_t CLKOCTL;                
N    __I  uint32_t RESERVE4[3];
X    volatile const  uint32_t RESERVE4[3];
N    __IO uint32_t CLKDCTL;               /*!< [0x0070] Clock Fail Detector Control Register                             */
X    volatile uint32_t CLKDCTL;                
N    __IO uint32_t CLKDSTS;               /*!< [0x0074] Clock Fail Detector Status Register                              */
X    volatile uint32_t CLKDSTS;                
N    __IO uint32_t CDUPB;                 /*!< [0x0078] Clock Frequency Range Detector Upper Boundary Register           */
X    volatile uint32_t CDUPB;                  
N    __IO uint32_t CDLOWB;                /*!< [0x007c] Clock Frequency Range Detector Lower Boundary Register           */
X    volatile uint32_t CDLOWB;                 
N    __IO uint32_t LDOCTL;                /*!< [0x0080] LDO Control Register                                             */
X    volatile uint32_t LDOCTL;                 
N    __I  uint32_t RESERVE5[12];
X    volatile const  uint32_t RESERVE5[12];
N    __IO uint32_t HXTFSEL;               /*!< [0x00b4] HXT Filter Select Control Register                               */
X    volatile uint32_t HXTFSEL;                
N    __I  uint32_t RESERVE9[14];
X    volatile const  uint32_t RESERVE9[14];
N    __IO uint32_t TESTCLK;               /*!< [0x00f0] Test Clock Control Register                                      */
X    volatile uint32_t TESTCLK;                
N
N} CLK_T;
N
N/**
N    @addtogroup CLK_CONST CLK Bit Field Definition
N    Constant Definitions for CLK Controller
N@{ */
N
N#define CLK_PWRCTL_HXTEN_Pos             (0)                                               /*!< CLK_T::PWRCTL: HXTEN Position          */
N#define CLK_PWRCTL_HXTEN_Msk             (0x1ul << CLK_PWRCTL_HXTEN_Pos)                   /*!< CLK_T::PWRCTL: HXTEN Mask              */
N
N#define CLK_PWRCTL_LXTEN_Pos             (1)                                               /*!< CLK_T::PWRCTL: LXTEN Position          */
N#define CLK_PWRCTL_LXTEN_Msk             (0x1ul << CLK_PWRCTL_LXTEN_Pos)                   /*!< CLK_T::PWRCTL: LXTEN Mask              */
N
N#define CLK_PWRCTL_HIRCEN_Pos            (2)                                               /*!< CLK_T::PWRCTL: HIRCEN Position         */
N#define CLK_PWRCTL_HIRCEN_Msk            (0x1ul << CLK_PWRCTL_HIRCEN_Pos)                  /*!< CLK_T::PWRCTL: HIRCEN Mask             */
N
N#define CLK_PWRCTL_LIRCEN_Pos            (3)                                               /*!< CLK_T::PWRCTL: LIRCEN Position         */
N#define CLK_PWRCTL_LIRCEN_Msk            (0x1ul << CLK_PWRCTL_LIRCEN_Pos)                  /*!< CLK_T::PWRCTL: LIRCEN Mask             */
N
N#define CLK_PWRCTL_PDWKDLY_Pos           (4)                                               /*!< CLK_T::PWRCTL: PDWKDLY Position        */
N#define CLK_PWRCTL_PDWKDLY_Msk           (0x1ul << CLK_PWRCTL_PDWKDLY_Pos)                 /*!< CLK_T::PWRCTL: PDWKDLY Mask            */
N
N#define CLK_PWRCTL_PDWKIEN_Pos           (5)                                               /*!< CLK_T::PWRCTL: PDWKIEN Position        */
N#define CLK_PWRCTL_PDWKIEN_Msk           (0x1ul << CLK_PWRCTL_PDWKIEN_Pos)                 /*!< CLK_T::PWRCTL: PDWKIEN Mask            */
N
N#define CLK_PWRCTL_PDWKIF_Pos            (6)                                               /*!< CLK_T::PWRCTL: PDWKIF Position         */
N#define CLK_PWRCTL_PDWKIF_Msk            (0x1ul << CLK_PWRCTL_PDWKIF_Pos)                  /*!< CLK_T::PWRCTL: PDWKIF Mask             */
N
N#define CLK_PWRCTL_PDEN_Pos              (7)                                               /*!< CLK_T::PWRCTL: PDEN Position           */
N#define CLK_PWRCTL_PDEN_Msk              (0x1ul << CLK_PWRCTL_PDEN_Pos)                    /*!< CLK_T::PWRCTL: PDEN Mask               */
N
N#define CLK_PWRCTL_DBPDEN_Pos            (9)                                               /*!< CLK_T::PWRCTL: DBPDEN Position         */
N#define CLK_PWRCTL_DBPDEN_Msk            (0x1ul << CLK_PWRCTL_DBPDEN_Pos)                  /*!< CLK_T::PWRCTL: DBPDEN Mask             */
N
N#define CLK_PWRCTL_HXTTBEN_Pos           (13)                                              /*!< CLK_T::PWRCTL: HXTTBEN Position        */
N#define CLK_PWRCTL_HXTTBEN_Msk           (0x1ul << CLK_PWRCTL_HXTTBEN_Pos)                 /*!< CLK_T::PWRCTL: HXTTBEN Mask            */
N
N#define CLK_PWRCTL_HIRCSTBS_Pos          (16)                                              /*!< CLK_T::PWRCTL: HIRCSTBS Position       */
N#define CLK_PWRCTL_HIRCSTBS_Msk          (0x3ul << CLK_PWRCTL_HIRCSTBS_Pos)                /*!< CLK_T::PWRCTL: HIRCSTBS Mask           */
N
N#define CLK_PWRCTL_HXTGAIN_Pos           (20)                                              /*!< CLK_T::PWRCTL: HXTGAIN Position        */
N#define CLK_PWRCTL_HXTGAIN_Msk           (0x7ul << CLK_PWRCTL_HXTGAIN_Pos)                 /*!< CLK_T::PWRCTL: HXTGAIN Mask            */
N
N#define CLK_PWRCTL_LXTSELXT_Pos          (24)                                              /*!< CLK_T::PWRCTL: LXTSELXT Position       */
N#define CLK_PWRCTL_LXTSELXT_Msk          (0x1ul << CLK_PWRCTL_LXTSELXT_Pos)                /*!< CLK_T::PWRCTL: LXTSELXT Mask           */
N
N#define CLK_PWRCTL_LXTGAIN_Pos           (25)                                              /*!< CLK_T::PWRCTL: LXTGAIN Position        */
N#define CLK_PWRCTL_LXTGAIN_Msk           (0x3ul << CLK_PWRCTL_LXTGAIN_Pos)                 /*!< CLK_T::PWRCTL: LXTGAIN Mask            */
N
N#define CLK_PWRCTL_LXTSTBS_Pos           (30)                                              /*!< CLK_T::PWRCTL: LXTSTBS Position        */
N#define CLK_PWRCTL_LXTSTBS_Msk           (0x1ul << CLK_PWRCTL_LXTSTBS_Pos)                 /*!< CLK_T::PWRCTL: LXTSTBS Mask            */
N
N#define CLK_PWRCTL_LXTTBEN_Pos           (31)                                              /*!< CLK_T::PWRCTL: LXTTBEN Position        */
N#define CLK_PWRCTL_LXTTBEN_Msk           (0x1ul << CLK_PWRCTL_LXTTBEN_Pos)                 /*!< CLK_T::PWRCTL: LXTTBEN Mask            */
N
N#define CLK_AHBCLK_PDMACKEN_Pos          (1)                                               /*!< CLK_T::AHBCLK: PDMACKEN Position       */
N#define CLK_AHBCLK_PDMACKEN_Msk          (0x1ul << CLK_AHBCLK_PDMACKEN_Pos)                /*!< CLK_T::AHBCLK: PDMACKEN Mask           */
N
N#define CLK_AHBCLK_ISPCKEN_Pos           (2)                                               /*!< CLK_T::AHBCLK: ISPCKEN Position        */
N#define CLK_AHBCLK_ISPCKEN_Msk           (0x1ul << CLK_AHBCLK_ISPCKEN_Pos)                 /*!< CLK_T::AHBCLK: ISPCKEN Mask            */
N
N#define CLK_AHBCLK_EBICKEN_Pos           (3)                                               /*!< CLK_T::AHBCLK: EBICKEN Position        */
N#define CLK_AHBCLK_EBICKEN_Msk           (0x1ul << CLK_AHBCLK_EBICKEN_Pos)                 /*!< CLK_T::AHBCLK: EBICKEN Mask            */
N
N#define CLK_AHBCLK_HDIVCKEN_Pos          (4)                                               /*!< CLK_T::AHBCLK: HDIVCKEN Position       */
N#define CLK_AHBCLK_HDIVCKEN_Msk          (0x1ul << CLK_AHBCLK_HDIVCKEN_Pos)                /*!< CLK_T::AHBCLK: HDIVCKEN Mask           */
N
N#define CLK_AHBCLK_CRCCKEN_Pos           (7)                                               /*!< CLK_T::AHBCLK: CRCCKEN Position        */
N#define CLK_AHBCLK_CRCCKEN_Msk           (0x1ul << CLK_AHBCLK_CRCCKEN_Pos)                 /*!< CLK_T::AHBCLK: CRCCKEN Mask            */
N
N#define CLK_AHBCLK_SRAM0IDLE_Pos         (20)                                              /*!< CLK_T::AHBCLK: SRAM0IDLE Position      */
N#define CLK_AHBCLK_SRAM0IDLE_Msk         (0x1ul << CLK_AHBCLK_SRAM0IDLE_Pos)               /*!< CLK_T::AHBCLK: SRAM0IDLE Mask          */
N
N#define CLK_APBCLK0_WDTCKEN_Pos          (0)                                               /*!< CLK_T::APBCLK0: WDTCKEN Position       */
N#define CLK_APBCLK0_WDTCKEN_Msk          (0x1ul << CLK_APBCLK0_WDTCKEN_Pos)                /*!< CLK_T::APBCLK0: WDTCKEN Mask           */
N
N#define CLK_APBCLK0_RTCCKEN_Pos          (1)                                               /*!< CLK_T::APBCLK0: RTCCKEN Position       */
N#define CLK_APBCLK0_RTCCKEN_Msk          (0x1ul << CLK_APBCLK0_RTCCKEN_Pos)                /*!< CLK_T::APBCLK0: RTCCKEN Mask           */
N
N#define CLK_APBCLK0_TMR0CKEN_Pos         (2)                                               /*!< CLK_T::APBCLK0: TMR0CKEN Position      */
N#define CLK_APBCLK0_TMR0CKEN_Msk         (0x1ul << CLK_APBCLK0_TMR0CKEN_Pos)               /*!< CLK_T::APBCLK0: TMR0CKEN Mask          */
N
N#define CLK_APBCLK0_TMR1CKEN_Pos         (3)                                               /*!< CLK_T::APBCLK0: TMR1CKEN Position      */
N#define CLK_APBCLK0_TMR1CKEN_Msk         (0x1ul << CLK_APBCLK0_TMR1CKEN_Pos)               /*!< CLK_T::APBCLK0: TMR1CKEN Mask          */
N
N#define CLK_APBCLK0_TMR2CKEN_Pos         (4)                                               /*!< CLK_T::APBCLK0: TMR2CKEN Position      */
N#define CLK_APBCLK0_TMR2CKEN_Msk         (0x1ul << CLK_APBCLK0_TMR2CKEN_Pos)               /*!< CLK_T::APBCLK0: TMR2CKEN Mask          */
N
N#define CLK_APBCLK0_TMR3CKEN_Pos         (5)                                               /*!< CLK_T::APBCLK0: TMR3CKEN Position      */
N#define CLK_APBCLK0_TMR3CKEN_Msk         (0x1ul << CLK_APBCLK0_TMR3CKEN_Pos)               /*!< CLK_T::APBCLK0: TMR3CKEN Mask          */
N
N#define CLK_APBCLK0_CLKOCKEN_Pos         (6)                                               /*!< CLK_T::APBCLK0: CLKOCKEN Position      */
N#define CLK_APBCLK0_CLKOCKEN_Msk         (0x1ul << CLK_APBCLK0_CLKOCKEN_Pos)               /*!< CLK_T::APBCLK0: CLKOCKEN Mask          */
N
N#define CLK_APBCLK0_ACMP01CKEN_Pos       (7)                                               /*!< CLK_T::APBCLK0: ACMP01CKEN Position    */
N#define CLK_APBCLK0_ACMP01CKEN_Msk       (0x1ul << CLK_APBCLK0_ACMP01CKEN_Pos)             /*!< CLK_T::APBCLK0: ACMP01CKEN Mask        */
N
N#define CLK_APBCLK0_I2C0CKEN_Pos         (8)                                               /*!< CLK_T::APBCLK0: I2C0CKEN Position      */
N#define CLK_APBCLK0_I2C0CKEN_Msk         (0x1ul << CLK_APBCLK0_I2C0CKEN_Pos)               /*!< CLK_T::APBCLK0: I2C0CKEN Mask          */
N
N#define CLK_APBCLK0_I2C1CKEN_Pos         (9)                                               /*!< CLK_T::APBCLK0: I2C1CKEN Position      */
N#define CLK_APBCLK0_I2C1CKEN_Msk         (0x1ul << CLK_APBCLK0_I2C1CKEN_Pos)               /*!< CLK_T::APBCLK0: I2C1CKEN Mask          */
N
N#define CLK_APBCLK0_QSPI0CKEN_Pos        (12)                                              /*!< CLK_T::APBCLK0: QSPI0CKEN Position     */
N#define CLK_APBCLK0_QSPI0CKEN_Msk        (0x1ul << CLK_APBCLK0_QSPI0CKEN_Pos)              /*!< CLK_T::APBCLK0: QSPI0CKEN Mask         */
N
N#define CLK_APBCLK0_SPI0CKEN_Pos         (13)                                              /*!< CLK_T::APBCLK0: SPI0CKEN Position      */
N#define CLK_APBCLK0_SPI0CKEN_Msk         (0x1ul << CLK_APBCLK0_SPI0CKEN_Pos)               /*!< CLK_T::APBCLK0: SPI0CKEN Mask          */
N
N#define CLK_APBCLK0_UART0CKEN_Pos        (16)                                              /*!< CLK_T::APBCLK0: UART0CKEN Position     */
N#define CLK_APBCLK0_UART0CKEN_Msk        (0x1ul << CLK_APBCLK0_UART0CKEN_Pos)              /*!< CLK_T::APBCLK0: UART0CKEN Mask         */
N
N#define CLK_APBCLK0_UART1CKEN_Pos        (17)                                              /*!< CLK_T::APBCLK0: UART1CKEN Position     */
N#define CLK_APBCLK0_UART1CKEN_Msk        (0x1ul << CLK_APBCLK0_UART1CKEN_Pos)              /*!< CLK_T::APBCLK0: UART1CKEN Mask         */
N
N#define CLK_APBCLK0_UART2CKEN_Pos        (18)                                              /*!< CLK_T::APBCLK0: UART2CKEN Position     */
N#define CLK_APBCLK0_UART2CKEN_Msk        (0x1ul << CLK_APBCLK0_UART2CKEN_Pos)              /*!< CLK_T::APBCLK0: UART2CKEN Mask         */
N
N#define CLK_APBCLK0_UART3CKEN_Pos        (19)                                              /*!< CLK_T::APBCLK0: UART3CKEN Position     */
N#define CLK_APBCLK0_UART3CKEN_Msk        (0x1ul << CLK_APBCLK0_UART3CKEN_Pos)              /*!< CLK_T::APBCLK0: UART3CKEN Mask         */
N
N#define CLK_APBCLK0_UART4CKEN_Pos        (20)                                              /*!< CLK_T::APBCLK0: UART4CKEN Position     */
N#define CLK_APBCLK0_UART4CKEN_Msk        (0x1ul << CLK_APBCLK0_UART4CKEN_Pos)              /*!< CLK_T::APBCLK0: UART4CKEN Mask         */
N
N#define CLK_APBCLK0_UART5CKEN_Pos        (21)                                              /*!< CLK_T::APBCLK0: UART5CKEN Position     */
N#define CLK_APBCLK0_UART5CKEN_Msk        (0x1ul << CLK_APBCLK0_UART5CKEN_Pos)              /*!< CLK_T::APBCLK0: UART5CKEN Mask         */
N
N#define CLK_APBCLK0_UART6CKEN_Pos        (22)                                              /*!< CLK_T::APBCLK0: UART6CKEN Position     */
N#define CLK_APBCLK0_UART6CKEN_Msk        (0x1ul << CLK_APBCLK0_UART6CKEN_Pos)              /*!< CLK_T::APBCLK0: UART6CKEN Mask         */
N
N#define CLK_APBCLK0_UART7CKEN_Pos        (23)                                              /*!< CLK_T::APBCLK0: UART7CKEN Position     */
N#define CLK_APBCLK0_UART7CKEN_Msk        (0x1ul << CLK_APBCLK0_UART7CKEN_Pos)              /*!< CLK_T::APBCLK0: UART7CKEN Mask         */
N
N#define CLK_APBCLK0_USBDCKEN_Pos         (27)                                              /*!< CLK_T::APBCLK0: USBDCKEN Position      */
N#define CLK_APBCLK0_USBDCKEN_Msk         (0x1ul << CLK_APBCLK0_USBDCKEN_Pos)               /*!< CLK_T::APBCLK0: USBDCKEN Mask          */
N
N#define CLK_APBCLK0_ADCCKEN_Pos          (28)                                              /*!< CLK_T::APBCLK0: ADCCKEN Position       */
N#define CLK_APBCLK0_ADCCKEN_Msk          (0x1ul << CLK_APBCLK0_ADCCKEN_Pos)                /*!< CLK_T::APBCLK0: ADCCKEN Mask           */
N
N#define CLK_APBCLK1_USCI0CKEN_Pos        (8)                                               /*!< CLK_T::APBCLK1: USCI0CKEN Position     */
N#define CLK_APBCLK1_USCI0CKEN_Msk        (0x1ul << CLK_APBCLK1_USCI0CKEN_Pos)              /*!< CLK_T::APBCLK1: USCI0CKEN Mask         */
N
N#define CLK_APBCLK1_USCI1CKEN_Pos        (9)                                               /*!< CLK_T::APBCLK1: USCI1CKEN Position     */
N#define CLK_APBCLK1_USCI1CKEN_Msk        (0x1ul << CLK_APBCLK1_USCI1CKEN_Pos)              /*!< CLK_T::APBCLK1: USCI1CKEN Mask         */
N
N#define CLK_APBCLK1_PWM0CKEN_Pos         (16)                                              /*!< CLK_T::APBCLK1: PWM0CKEN Position      */
N#define CLK_APBCLK1_PWM0CKEN_Msk         (0x1ul << CLK_APBCLK1_PWM0CKEN_Pos)               /*!< CLK_T::APBCLK1: PWM0CKEN Mask          */
N
N#define CLK_APBCLK1_PWM1CKEN_Pos         (17)                                              /*!< CLK_T::APBCLK1: PWM1CKEN Position      */
N#define CLK_APBCLK1_PWM1CKEN_Msk         (0x1ul << CLK_APBCLK1_PWM1CKEN_Pos)               /*!< CLK_T::APBCLK1: PWM1CKEN Mask          */
N
N#define CLK_APBCLK1_BPWM0CKEN_Pos        (18)                                              /*!< CLK_T::APBCLK1: BPWM0CKEN Position     */
N#define CLK_APBCLK1_BPWM0CKEN_Msk        (0x1ul << CLK_APBCLK1_BPWM0CKEN_Pos)              /*!< CLK_T::APBCLK1: BPWM0CKEN Mask         */
N
N#define CLK_APBCLK1_BPWM1CKEN_Pos        (19)                                              /*!< CLK_T::APBCLK1: BPWM1CKEN Position     */
N#define CLK_APBCLK1_BPWM1CKEN_Msk        (0x1ul << CLK_APBCLK1_BPWM1CKEN_Pos)              /*!< CLK_T::APBCLK1: BPWM1CKEN Mask         */
N
N#define CLK_CLKSEL0_HCLKSEL_Pos          (0)                                               /*!< CLK_T::CLKSEL0: HCLKSEL Position       */
N#define CLK_CLKSEL0_HCLKSEL_Msk          (0x7ul << CLK_CLKSEL0_HCLKSEL_Pos)                /*!< CLK_T::CLKSEL0: HCLKSEL Mask           */
N
N#define CLK_CLKSEL0_STCLKSEL_Pos         (3)                                               /*!< CLK_T::CLKSEL0: STCLKSEL Position      */
N#define CLK_CLKSEL0_STCLKSEL_Msk         (0x7ul << CLK_CLKSEL0_STCLKSEL_Pos)               /*!< CLK_T::CLKSEL0: STCLKSEL Mask          */
N
N#define CLK_CLKSEL0_USBDSEL_Pos          (8)                                               /*!< CLK_T::CLKSEL0: USBDSEL Position       */
N#define CLK_CLKSEL0_USBDSEL_Msk          (0x1ul << CLK_CLKSEL0_USBDSEL_Pos)                /*!< CLK_T::CLKSEL0: USBDSEL Mask           */
N
N#define CLK_CLKSEL1_WDTSEL_Pos           (0)                                               /*!< CLK_T::CLKSEL1: WDTSEL Position        */
N#define CLK_CLKSEL1_WDTSEL_Msk           (0x3ul << CLK_CLKSEL1_WDTSEL_Pos)                 /*!< CLK_T::CLKSEL1: WDTSEL Mask            */
N
N#define CLK_CLKSEL1_WWDTSEL_Pos          (2)                                               /*!< CLK_T::CLKSEL1: WWDTSEL Position       */
N#define CLK_CLKSEL1_WWDTSEL_Msk          (0x3ul << CLK_CLKSEL1_WWDTSEL_Pos)                /*!< CLK_T::CLKSEL1: WWDTSEL Mask           */
N
N#define CLK_CLKSEL1_CLKOSEL_Pos          (4)                                               /*!< CLK_T::CLKSEL1: CLKOSEL Position       */
N#define CLK_CLKSEL1_CLKOSEL_Msk          (0x7ul << CLK_CLKSEL1_CLKOSEL_Pos)                /*!< CLK_T::CLKSEL1: CLKOSEL Mask           */
N
N#define CLK_CLKSEL1_TMR0SEL_Pos          (8)                                               /*!< CLK_T::CLKSEL1: TMR0SEL Position       */
N#define CLK_CLKSEL1_TMR0SEL_Msk          (0x7ul << CLK_CLKSEL1_TMR0SEL_Pos)                /*!< CLK_T::CLKSEL1: TMR0SEL Mask           */
N
N#define CLK_CLKSEL1_TMR1SEL_Pos          (12)                                              /*!< CLK_T::CLKSEL1: TMR1SEL Position       */
N#define CLK_CLKSEL1_TMR1SEL_Msk          (0x7ul << CLK_CLKSEL1_TMR1SEL_Pos)                /*!< CLK_T::CLKSEL1: TMR1SEL Mask           */
N
N#define CLK_CLKSEL1_TMR2SEL_Pos          (16)                                              /*!< CLK_T::CLKSEL1: TMR2SEL Position       */
N#define CLK_CLKSEL1_TMR2SEL_Msk          (0x7ul << CLK_CLKSEL1_TMR2SEL_Pos)                /*!< CLK_T::CLKSEL1: TMR2SEL Mask           */
N
N#define CLK_CLKSEL1_TMR3SEL_Pos          (20)                                              /*!< CLK_T::CLKSEL1: TMR3SEL Position       */
N#define CLK_CLKSEL1_TMR3SEL_Msk          (0x7ul << CLK_CLKSEL1_TMR3SEL_Pos)                /*!< CLK_T::CLKSEL1: TMR3SEL Mask           */
N
N#define CLK_CLKSEL1_UART0SEL_Pos         (24)                                              /*!< CLK_T::CLKSEL1: UART0SEL Position      */
N#define CLK_CLKSEL1_UART0SEL_Msk         (0x7ul << CLK_CLKSEL1_UART0SEL_Pos)               /*!< CLK_T::CLKSEL1: UART0SEL Mask          */
N
N#define CLK_CLKSEL1_UART1SEL_Pos         (28)                                              /*!< CLK_T::CLKSEL1: UART1SEL Position      */
N#define CLK_CLKSEL1_UART1SEL_Msk         (0x7ul << CLK_CLKSEL1_UART1SEL_Pos)               /*!< CLK_T::CLKSEL1: UART1SEL Mask          */
N
N#define CLK_CLKSEL2_PWM0SEL_Pos          (0)                                               /*!< CLK_T::CLKSEL2: PWM0SEL Position       */
N#define CLK_CLKSEL2_PWM0SEL_Msk          (0x1ul << CLK_CLKSEL2_PWM0SEL_Pos)                /*!< CLK_T::CLKSEL2: PWM0SEL Mask           */
N
N#define CLK_CLKSEL2_PWM1SEL_Pos          (1)                                               /*!< CLK_T::CLKSEL2: PWM1SEL Position       */
N#define CLK_CLKSEL2_PWM1SEL_Msk          (0x1ul << CLK_CLKSEL2_PWM1SEL_Pos)                /*!< CLK_T::CLKSEL2: PWM1SEL Mask           */
N
N#define CLK_CLKSEL2_QSPI0SEL_Pos         (2)                                               /*!< CLK_T::CLKSEL2: QSPI0SEL Position      */
N#define CLK_CLKSEL2_QSPI0SEL_Msk         (0x3ul << CLK_CLKSEL2_QSPI0SEL_Pos)               /*!< CLK_T::CLKSEL2: QSPI0SEL Mask          */
N
N#define CLK_CLKSEL2_SPI0SEL_Pos          (4)                                               /*!< CLK_T::CLKSEL2: SPI0SEL Position       */
N#define CLK_CLKSEL2_SPI0SEL_Msk          (0x3ul << CLK_CLKSEL2_SPI0SEL_Pos)                /*!< CLK_T::CLKSEL2: SPI0SEL Mask           */
N
N#define CLK_CLKSEL2_BPWM0SEL_Pos         (8)                                               /*!< CLK_T::CLKSEL2: BPWM0SEL Position      */
N#define CLK_CLKSEL2_BPWM0SEL_Msk         (0x1ul << CLK_CLKSEL2_BPWM0SEL_Pos)               /*!< CLK_T::CLKSEL2: BPWM0SEL Mask          */
N
N#define CLK_CLKSEL2_BPWM1SEL_Pos         (9)                                               /*!< CLK_T::CLKSEL2: BPWM1SEL Position      */
N#define CLK_CLKSEL2_BPWM1SEL_Msk         (0x1ul << CLK_CLKSEL2_BPWM1SEL_Pos)               /*!< CLK_T::CLKSEL2: BPWM1SEL Mask          */
N
N#define CLK_CLKSEL2_ADCSEL_Pos           (20)                                              /*!< CLK_T::CLKSEL2: ADCSEL Position        */
N#define CLK_CLKSEL2_ADCSEL_Msk           (0x3ul << CLK_CLKSEL2_ADCSEL_Pos)                 /*!< CLK_T::CLKSEL2: ADCSEL Mask            */
N
N#define CLK_CLKSEL3_UART6SEL_Pos         (8)                                              /*!< CLK_T::CLKSEL63: UART6SEL Position      */
N#define CLK_CLKSEL3_UART6SEL_Msk         (0x7ul << CLK_CLKSEL3_UART6SEL_Pos)               /*!< CLK_T::CLKSEL3: UART6SEL Mask          */
N
N#define CLK_CLKSEL3_UART7SEL_Pos         (12)                                              /*!< CLK_T::CLKSEL3: UART7SEL Position      */
N#define CLK_CLKSEL3_UART7SEL_Msk         (0x7ul << CLK_CLKSEL3_UART7SEL_Pos)               /*!< CLK_T::CLKSEL3: UART7SEL Mask          */
N
N#define CLK_CLKSEL3_UART4SEL_Pos         (16)                                              /*!< CLK_T::CLKSEL3: UART4SEL Position      */
N#define CLK_CLKSEL3_UART4SEL_Msk         (0x7ul << CLK_CLKSEL3_UART4SEL_Pos)               /*!< CLK_T::CLKSEL3: UART4SEL Mask          */
N
N#define CLK_CLKSEL3_UART5SEL_Pos         (20)                                              /*!< CLK_T::CLKSEL3: UART5SEL Position      */
N#define CLK_CLKSEL3_UART5SEL_Msk         (0x7ul << CLK_CLKSEL3_UART5SEL_Pos)               /*!< CLK_T::CLKSEL3: UART5SEL Mask          */
N
N#define CLK_CLKSEL3_UART2SEL_Pos         (24)                                              /*!< CLK_T::CLKSEL3: UART2SEL Position      */
N#define CLK_CLKSEL3_UART2SEL_Msk         (0x7ul << CLK_CLKSEL3_UART2SEL_Pos)               /*!< CLK_T::CLKSEL3: UART2SEL Mask          */
N
N#define CLK_CLKSEL3_UART3SEL_Pos         (28)                                              /*!< CLK_T::CLKSEL3: UART3SEL Position      */
N#define CLK_CLKSEL3_UART3SEL_Msk         (0x7ul << CLK_CLKSEL3_UART3SEL_Pos)               /*!< CLK_T::CLKSEL3: UART3SEL Mask          */
N
N#define CLK_CLKDIV0_HCLKDIV_Pos          (0)                                               /*!< CLK_T::CLKDIV0: HCLKDIV Position       */
N#define CLK_CLKDIV0_HCLKDIV_Msk          (0xful << CLK_CLKDIV0_HCLKDIV_Pos)                /*!< CLK_T::CLKDIV0: HCLKDIV Mask           */
N
N#define CLK_CLKDIV0_USBDIV_Pos           (4)                                               /*!< CLK_T::CLKDIV0: USBDIV Position        */
N#define CLK_CLKDIV0_USBDIV_Msk           (0xful << CLK_CLKDIV0_USBDIV_Pos)                 /*!< CLK_T::CLKDIV0: USBDIV Mask            */
N
N#define CLK_CLKDIV0_UART0DIV_Pos         (8)                                               /*!< CLK_T::CLKDIV0: UART0DIV Position      */
N#define CLK_CLKDIV0_UART0DIV_Msk         (0xful << CLK_CLKDIV0_UART0DIV_Pos)               /*!< CLK_T::CLKDIV0: UART0DIV Mask          */
N
N#define CLK_CLKDIV0_UART1DIV_Pos         (12)                                              /*!< CLK_T::CLKDIV0: UART1DIV Position      */
N#define CLK_CLKDIV0_UART1DIV_Msk         (0xful << CLK_CLKDIV0_UART1DIV_Pos)               /*!< CLK_T::CLKDIV0: UART1DIV Mask          */
N
N#define CLK_CLKDIV0_ADCDIV_Pos           (16)                                              /*!< CLK_T::CLKDIV0: ADCDIV Position        */
N#define CLK_CLKDIV0_ADCDIV_Msk           (0xfful << CLK_CLKDIV0_ADCDIV_Pos)                /*!< CLK_T::CLKDIV0: ADCDIV Mask            */
N
N#define CLK_CLKDIV4_UART2DIV_Pos         (0)                                               /*!< CLK_T::CLKDIV4: UART2DIV Position      */
N#define CLK_CLKDIV4_UART2DIV_Msk         (0xful << CLK_CLKDIV4_UART2DIV_Pos)               /*!< CLK_T::CLKDIV4: UART2DIV Mask          */
N
N#define CLK_CLKDIV4_UART3DIV_Pos         (4)                                               /*!< CLK_T::CLKDIV4: UART3DIV Position      */
N#define CLK_CLKDIV4_UART3DIV_Msk         (0xful << CLK_CLKDIV4_UART3DIV_Pos)               /*!< CLK_T::CLKDIV4: UART3DIV Mask          */
N
N#define CLK_CLKDIV4_UART4DIV_Pos         (8)                                               /*!< CLK_T::CLKDIV4: UART4DIV Position      */
N#define CLK_CLKDIV4_UART4DIV_Msk         (0xful << CLK_CLKDIV4_UART4DIV_Pos)               /*!< CLK_T::CLKDIV4: UART4DIV Mask          */
N
N#define CLK_CLKDIV4_UART5DIV_Pos         (12)                                              /*!< CLK_T::CLKDIV4: UART5DIV Position      */
N#define CLK_CLKDIV4_UART5DIV_Msk         (0xful << CLK_CLKDIV4_UART5DIV_Pos)               /*!< CLK_T::CLKDIV4: UART5DIV Mask          */
N
N#define CLK_CLKDIV4_UART6DIV_Pos         (16)                                              /*!< CLK_T::CLKDIV4: UART6DIV Position      */
N#define CLK_CLKDIV4_UART6DIV_Msk         (0xful << CLK_CLKDIV4_UART6DIV_Pos)               /*!< CLK_T::CLKDIV4: UART6DIV Mask          */
N
N#define CLK_CLKDIV4_UART7DIV_Pos         (20)                                              /*!< CLK_T::CLKDIV4: UART7DIV Position      */
N#define CLK_CLKDIV4_UART7DIV_Msk         (0xful << CLK_CLKDIV4_UART7DIV_Pos)               /*!< CLK_T::CLKDIV4: UART7DIV Mask          */
N
N#define CLK_PCLKDIV_APB0DIV_Pos          (0)                                               /*!< CLK_T::PCLKDIV: APB0DIV Position       */
N#define CLK_PCLKDIV_APB0DIV_Msk          (0x7ul << CLK_PCLKDIV_APB0DIV_Pos)                /*!< CLK_T::PCLKDIV: APB0DIV Mask           */
N
N#define CLK_PCLKDIV_APB1DIV_Pos          (4)                                               /*!< CLK_T::PCLKDIV: APB1DIV Position       */
N#define CLK_PCLKDIV_APB1DIV_Msk          (0x7ul << CLK_PCLKDIV_APB1DIV_Pos)                /*!< CLK_T::PCLKDIV: APB1DIV Mask           */
N
N#define CLK_PLLCTL_FBDIV_Pos             (0)                                               /*!< CLK_T::PLLCTL: FBDIV Position          */
N#define CLK_PLLCTL_FBDIV_Msk             (0x1fful << CLK_PLLCTL_FBDIV_Pos)                 /*!< CLK_T::PLLCTL: FBDIV Mask              */
N
N#define CLK_PLLCTL_INDIV_Pos             (9)                                               /*!< CLK_T::PLLCTL: INDIV Position          */
N#define CLK_PLLCTL_INDIV_Msk             (0x1ful << CLK_PLLCTL_INDIV_Pos)                  /*!< CLK_T::PLLCTL: INDIV Mask              */
N
N#define CLK_PLLCTL_OUTDIV_Pos            (14)                                              /*!< CLK_T::PLLCTL: OUTDIV Position         */
N#define CLK_PLLCTL_OUTDIV_Msk            (0x3ul << CLK_PLLCTL_OUTDIV_Pos)                  /*!< CLK_T::PLLCTL: OUTDIV Mask             */
N
N#define CLK_PLLCTL_PD_Pos                (16)                                              /*!< CLK_T::PLLCTL: PD Position             */
N#define CLK_PLLCTL_PD_Msk                (0x1ul << CLK_PLLCTL_PD_Pos)                      /*!< CLK_T::PLLCTL: PD Mask                 */
N
N#define CLK_PLLCTL_BP_Pos                (17)                                              /*!< CLK_T::PLLCTL: BP Position             */
N#define CLK_PLLCTL_BP_Msk                (0x1ul << CLK_PLLCTL_BP_Pos)                      /*!< CLK_T::PLLCTL: BP Mask                 */
N
N#define CLK_PLLCTL_OE_Pos                (18)                                              /*!< CLK_T::PLLCTL: OE Position             */
N#define CLK_PLLCTL_OE_Msk                (0x1ul << CLK_PLLCTL_OE_Pos)                      /*!< CLK_T::PLLCTL: OE Mask                 */
N
N#define CLK_PLLCTL_PLLSRC_Pos            (19)                                              /*!< CLK_T::PLLCTL: PLLSRC Position         */
N#define CLK_PLLCTL_PLLSRC_Msk            (0x1ul << CLK_PLLCTL_PLLSRC_Pos)                  /*!< CLK_T::PLLCTL: PLLSRC Mask             */
N
N#define CLK_PLLCTL_STBSEL_Pos            (23)                                              /*!< CLK_T::PLLCTL: STBSEL Position         */
N#define CLK_PLLCTL_STBSEL_Msk            (0x1ul << CLK_PLLCTL_STBSEL_Pos)                  /*!< CLK_T::PLLCTL: STBSEL Mask             */
N
N#define CLK_STATUS_HXTSTB_Pos            (0)                                               /*!< CLK_T::STATUS: HXTSTB Position         */
N#define CLK_STATUS_HXTSTB_Msk            (0x1ul << CLK_STATUS_HXTSTB_Pos)                  /*!< CLK_T::STATUS: HXTSTB Mask             */
N
N#define CLK_STATUS_LXTSTB_Pos            (1)                                               /*!< CLK_T::STATUS: LXTSTB Position         */
N#define CLK_STATUS_LXTSTB_Msk            (0x1ul << CLK_STATUS_LXTSTB_Pos)                  /*!< CLK_T::STATUS: LXTSTB Mask             */
N
N#define CLK_STATUS_PLLSTB_Pos            (2)                                               /*!< CLK_T::STATUS: PLLSTB Position         */
N#define CLK_STATUS_PLLSTB_Msk            (0x1ul << CLK_STATUS_PLLSTB_Pos)                  /*!< CLK_T::STATUS: PLLSTB Mask             */
N
N#define CLK_STATUS_LIRCSTB_Pos           (3)                                               /*!< CLK_T::STATUS: LIRCSTB Position        */
N#define CLK_STATUS_LIRCSTB_Msk           (0x1ul << CLK_STATUS_LIRCSTB_Pos)                 /*!< CLK_T::STATUS: LIRCSTB Mask            */
N
N#define CLK_STATUS_HIRCSTB_Pos           (4)                                               /*!< CLK_T::STATUS: HIRCSTB Position        */
N#define CLK_STATUS_HIRCSTB_Msk           (0x1ul << CLK_STATUS_HIRCSTB_Pos)                 /*!< CLK_T::STATUS: HIRCSTB Mask            */
N
N#define CLK_STATUS_CLKSFAIL_Pos          (7)                                               /*!< CLK_T::STATUS: CLKSFAIL Position       */
N#define CLK_STATUS_CLKSFAIL_Msk          (0x1ul << CLK_STATUS_CLKSFAIL_Pos)                /*!< CLK_T::STATUS: CLKSFAIL Mask           */
N
N#define CLK_CLKOCTL_FREQSEL_Pos          (0)                                               /*!< CLK_T::CLKOCTL: FREQSEL Position       */
N#define CLK_CLKOCTL_FREQSEL_Msk          (0xful << CLK_CLKOCTL_FREQSEL_Pos)                /*!< CLK_T::CLKOCTL: FREQSEL Mask           */
N
N#define CLK_CLKOCTL_CLKOEN_Pos           (4)                                               /*!< CLK_T::CLKOCTL: CLKOEN Position        */
N#define CLK_CLKOCTL_CLKOEN_Msk           (0x1ul << CLK_CLKOCTL_CLKOEN_Pos)                 /*!< CLK_T::CLKOCTL: CLKOEN Mask            */
N
N#define CLK_CLKOCTL_DIV1EN_Pos           (5)                                               /*!< CLK_T::CLKOCTL: DIV1EN Position        */
N#define CLK_CLKOCTL_DIV1EN_Msk           (0x1ul << CLK_CLKOCTL_DIV1EN_Pos)                 /*!< CLK_T::CLKOCTL: DIV1EN Mask            */
N
N#define CLK_CLKOCTL_CLK1HZEN_Pos         (6)                                               /*!< CLK_T::CLKOCTL: CLK1HZEN Position      */
N#define CLK_CLKOCTL_CLK1HZEN_Msk         (0x1ul << CLK_CLKOCTL_CLK1HZEN_Pos)               /*!< CLK_T::CLKOCTL: CLK1HZEN Mask          */
N
N#define CLK_CLKDCTL_HXTFDEN_Pos          (4)                                               /*!< CLK_T::CLKDCTL: HXTFDEN Position       */
N#define CLK_CLKDCTL_HXTFDEN_Msk          (0x1ul << CLK_CLKDCTL_HXTFDEN_Pos)                /*!< CLK_T::CLKDCTL: HXTFDEN Mask           */
N
N#define CLK_CLKDCTL_HXTFIEN_Pos          (5)                                               /*!< CLK_T::CLKDCTL: HXTFIEN Position       */
N#define CLK_CLKDCTL_HXTFIEN_Msk          (0x1ul << CLK_CLKDCTL_HXTFIEN_Pos)                /*!< CLK_T::CLKDCTL: HXTFIEN Mask           */
N
N#define CLK_CLKDCTL_LXTFDEN_Pos          (12)                                              /*!< CLK_T::CLKDCTL: LXTFDEN Position       */
N#define CLK_CLKDCTL_LXTFDEN_Msk          (0x1ul << CLK_CLKDCTL_LXTFDEN_Pos)                /*!< CLK_T::CLKDCTL: LXTFDEN Mask           */
N
N#define CLK_CLKDCTL_LXTFIEN_Pos          (13)                                              /*!< CLK_T::CLKDCTL: LXTFIEN Position       */
N#define CLK_CLKDCTL_LXTFIEN_Msk          (0x1ul << CLK_CLKDCTL_LXTFIEN_Pos)                /*!< CLK_T::CLKDCTL: LXTFIEN Mask           */
N
N#define CLK_CLKDCTL_HXTFQDEN_Pos         (16)                                              /*!< CLK_T::CLKDCTL: HXTFQDEN Position      */
N#define CLK_CLKDCTL_HXTFQDEN_Msk         (0x1ul << CLK_CLKDCTL_HXTFQDEN_Pos)               /*!< CLK_T::CLKDCTL: HXTFQDEN Mask          */
N
N#define CLK_CLKDCTL_HXTFQIEN_Pos         (17)                                              /*!< CLK_T::CLKDCTL: HXTFQIEN Position      */
N#define CLK_CLKDCTL_HXTFQIEN_Msk         (0x1ul << CLK_CLKDCTL_HXTFQIEN_Pos)               /*!< CLK_T::CLKDCTL: HXTFQIEN Mask          */
N
N#define CLK_CLKDSTS_HXTFIF_Pos           (0)                                               /*!< CLK_T::CLKDSTS: HXTFIF Position        */
N#define CLK_CLKDSTS_HXTFIF_Msk           (0x1ul << CLK_CLKDSTS_HXTFIF_Pos)                 /*!< CLK_T::CLKDSTS: HXTFIF Mask            */
N
N#define CLK_CLKDSTS_LXTFIF_Pos           (1)                                               /*!< CLK_T::CLKDSTS: LXTFIF Position        */
N#define CLK_CLKDSTS_LXTFIF_Msk           (0x1ul << CLK_CLKDSTS_LXTFIF_Pos)                 /*!< CLK_T::CLKDSTS: LXTFIF Mask            */
N
N#define CLK_CLKDSTS_HXTFQIF_Pos          (8)                                               /*!< CLK_T::CLKDSTS: HXTFQIF Position       */
N#define CLK_CLKDSTS_HXTFQIF_Msk          (0x1ul << CLK_CLKDSTS_HXTFQIF_Pos)                /*!< CLK_T::CLKDSTS: HXTFQIF Mask           */
N
N#define CLK_CDUPB_UPERBD_Pos             (0)                                               /*!< CLK_T::CDUPB: UPERBD Position          */
N#define CLK_CDUPB_UPERBD_Msk             (0x3fful << CLK_CDUPB_UPERBD_Pos)                 /*!< CLK_T::CDUPB: UPERBD Mask              */
N
N#define CLK_CDLOWB_LOWERBD_Pos           (0)                                               /*!< CLK_T::CDLOWB: LOWERBD Position        */
N#define CLK_CDLOWB_LOWERBD_Msk           (0x3fful << CLK_CDLOWB_LOWERBD_Pos)               /*!< CLK_T::CDLOWB: LOWERBD Mask            */
N
N#define CLK_HXTFSEL_HXTFSEL_Pos          (0)                                               /*!< CLK_T::HXTFSEL: HXTFSEL Position       */
N#define CLK_HXTFSEL_HXTFSEL_Msk          (0x1ul << CLK_HXTFSEL_HXTFSEL_Pos)                /*!< CLK_T::HXTFSEL: HXTFSEL Mask           */
N
N/**@}*/ /* CLK_CONST */
N/**@}*/ /* end of CLK register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __CLK_REG_H__ */
L 163 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "crc_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\crc_reg.h" 1
N/**************************************************************************//**
N * @file     crc_reg.h
N * @version  V1.00
N * @brief    CRC register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0 
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __CRC_REG_H__
N#define __CRC_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup CRC Cyclic Redundancy Check Controller(CRC)
N    Memory Mapped Structure for CRC Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var CRC_T::CTL
N     * Offset: 0x00  CRC Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CRCEN     |CRC Channel Enable Bit
N     * |        |          |0 = No effect.
N     * |        |          |1 = CRC operation Enabled.
N     * |[1]     |CHKSINIT  |Checksum Initialization
N     * |        |          |0 = No effect.
N     * |        |          |1 = Initial checksum value by auto reload CRC_SEED register value to CRC_CHECKSUM register value.
N     * |        |          |Note: This bit will be cleared automatically.
N     * |[24]    |DATREV    |Write Data Bit Order Reverse
N     * |        |          |This bit is used to enable the bit order reverse function per byte for write data value in CRC_DAT register.
N     * |        |          |0 = Bit order reversed for CRC write data in Disabled.
N     * |        |          |1 = Bit order reversed for CRC write data in Enabled (per byte).
N     * |        |          |Note: If the write data is 0xAABBCCDD, the bit order reverse for CRC write data in is 0x55DD33BB.
N     * |[25]    |CHKSREV   |Checksum Bit Order Reverse
N     * |        |          |This bit is used to enable the bit order reverse function for checksum result in CRC_CHECKSUM register.
N     * |        |          |0 = Bit order reverse for CRC checksum Disabled.
N     * |        |          |1 = Bit order reverse for CRC checksum Enabled.
N     * |        |          |Note: If the checksum result is 0xDD7B0F2E, the bit order reverse for CRC checksum is 0x74F0DEBB.
N     * |[26]    |DATFMT    |Write Data 1's Complement
N     * |        |          |This bit is used to enable the 1's complement function for write data value in CRC_DAT register.
N     * |        |          |0 = 1's complement for CRC writes data in Disabled.
N     * |        |          |1 = 1's complement for CRC writes data in Enabled.
N     * |[27]    |CHKSFMT   |Checksum 1's Complement
N     * |        |          |This bit is used to enable the 1's complement function for checksum result in CRC_CHECKSUM register.
N     * |        |          |0 = 1's complement for CRC checksum Disabled.
N     * |        |          |1 = 1's complement for CRC checksum Enabled.
N     * |[29:28] |DATLEN    |CPU Write Data Length
N     * |        |          |This field indicates the write data length.
N     * |        |          |00 = Data length is 8-bit mode.
N     * |        |          |01 = Data length is 16-bit mode.
N     * |        |          |1x = Data length is 32-bit mode.
N     * |        |          |Note: When the write data length is 8-bit mode, the valid data in CRC_DAT register is only DATA[7:0] bits; if the write data length is 16-bit mode, the valid data in CRC_DAT register is only DATA[15:0].
N     * |[31:30] |CRCMODE   |CRC Polynomial Mode
N     * |        |          |This field indicates the CRC operation polynomial mode.
N     * |        |          |00 = CRC-CCITT Polynomial mode.
N     * |        |          |01 = CRC-8 Polynomial mode.
N     * |        |          |10 = CRC-16 Polynomial mode.
N     * |        |          |11 = CRC-32 Polynomial mode.
N     * @var CRC_T::DAT
N     * Offset: 0x04  CRC Write Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |DATA      |CRC Write Data Bits
N     * |        |          |User can write data directly by CPU mode or use PDMA function to write data to this field to perform CRC operation.
N     * |        |          |Note: When the write data length is 8-bit mode, the valid data in CRC_DAT register is only DATA[7:0] bits; if the write data length is 16-bit mode, the valid data in CRC_DAT register is only DATA[15:0].
N     * @var CRC_T::SEED
N     * Offset: 0x08  CRC Seed Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |SEED      |CRC Seed Value
N     * |        |          |This field indicates the CRC seed value.
N     * |        |          |Note: This field will be reloaded as checksum initial value (CRC_CHECKSUM register) after perform CHKSINIT (CRC_CTL[1]).
N     * @var CRC_T::CHECKSUM
N     * Offset: 0x0C  CRC Checksum Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |CHECKSUM  |CRC Checksum Results
N     * |        |          |This field indicates the CRC checksum result.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] CRC Control Register                                             */
X    volatile uint32_t CTL;                    
N    __IO uint32_t DAT;                   /*!< [0x0004] CRC Write Data Register                                          */
X    volatile uint32_t DAT;                    
N    __IO uint32_t SEED;                  /*!< [0x0008] CRC Seed Register                                                */
X    volatile uint32_t SEED;                   
N    __I  uint32_t CHECKSUM;              /*!< [0x000c] CRC Checksum Register                                            */
X    volatile const  uint32_t CHECKSUM;               
N
N} CRC_T;
N
N/**
N    @addtogroup CRC_CONST CRC Bit Field Definition
N    Constant Definitions for CRC Controller
N@{ */
N
N
N#define CRC_CTL_CRCEN_Pos                (0)                                               /*!< CRC_T::CTL: CRCEN Position             */
N#define CRC_CTL_CRCEN_Msk                (0x1ul << CRC_CTL_CRCEN_Pos)                      /*!< CRC_T::CTL: CRCEN Mask                 */
N
N#define CRC_CTL_CHKSINIT_Pos             (1)                                               /*!< CRC_T::CTL: CHKSINIT Position          */
N#define CRC_CTL_CHKSINIT_Msk             (0x1ul << CRC_CTL_CHKSINIT_Pos)                   /*!< CRC_T::CTL: CHKSINIT Mask              */
N
N#define CRC_CTL_DATREV_Pos               (24)                                              /*!< CRC_T::CTL: DATREV Position            */
N#define CRC_CTL_DATREV_Msk               (0x1ul << CRC_CTL_DATREV_Pos)                     /*!< CRC_T::CTL: DATREV Mask                */
N
N#define CRC_CTL_CHKSREV_Pos              (25)                                              /*!< CRC_T::CTL: CHKSREV Position           */
N#define CRC_CTL_CHKSREV_Msk              (0x1ul << CRC_CTL_CHKSREV_Pos)                    /*!< CRC_T::CTL: CHKSREV Mask               */
N
N#define CRC_CTL_DATFMT_Pos               (26)                                              /*!< CRC_T::CTL: DATFMT Position            */
N#define CRC_CTL_DATFMT_Msk               (0x1ul << CRC_CTL_DATFMT_Pos)                     /*!< CRC_T::CTL: DATFMT Mask                */
N
N#define CRC_CTL_CHKSFMT_Pos              (27)                                              /*!< CRC_T::CTL: CHKSFMT Position           */
N#define CRC_CTL_CHKSFMT_Msk              (0x1ul << CRC_CTL_CHKSFMT_Pos)                    /*!< CRC_T::CTL: CHKSFMT Mask               */
N
N#define CRC_CTL_DATLEN_Pos               (28)                                              /*!< CRC_T::CTL: DATLEN Position            */
N#define CRC_CTL_DATLEN_Msk               (0x3ul << CRC_CTL_DATLEN_Pos)                     /*!< CRC_T::CTL: DATLEN Mask                */
N
N#define CRC_CTL_CRCMODE_Pos              (30)                                              /*!< CRC_T::CTL: CRCMODE Position           */
N#define CRC_CTL_CRCMODE_Msk              (0x3ul << CRC_CTL_CRCMODE_Pos)                    /*!< CRC_T::CTL: CRCMODE Mask               */
N
N#define CRC_DAT_DATA_Pos                 (0)                                               /*!< CRC_T::DAT: DATA Position              */
N#define CRC_DAT_DATA_Msk                 (0xfffffffful << CRC_DAT_DATA_Pos)                /*!< CRC_T::DAT: DATA Mask                  */
N
N#define CRC_SEED_SEED_Pos                (0)                                               /*!< CRC_T::SEED: SEED Position             */
N#define CRC_SEED_SEED_Msk                (0xfffffffful << CRC_SEED_SEED_Pos)               /*!< CRC_T::SEED: SEED Mask                 */
N
N#define CRC_CHECKSUM_CHECKSUM_Pos        (0)                                               /*!< CRC_T::CHECKSUM: CHECKSUM Position     */
N#define CRC_CHECKSUM_CHECKSUM_Msk        (0xfffffffful << CRC_CHECKSUM_CHECKSUM_Pos)       /*!< CRC_T::CHECKSUM: CHECKSUM Mask         */
N
N/**@}*/ /* CRC_CONST */
N/**@}*/ /* end of CRC register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __CRC_REG_H__ */
L 164 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "ebi_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\ebi_reg.h" 1
N/**************************************************************************//**
N * @file     ebi_reg.h
N * @version  V1.00
N * @brief    EBI register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __EBI_REG_H__
N#define __EBI_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup EBI External Bus Interface Controller(EBI)
N    Memory Mapped Structure for EBI Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var EBI_T::CTL0
N     * Offset: 0x00  External Bus Interface Bank0 Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |EN        |EBI Enable Bit
N     * |        |          |This bit is the functional enable bit for EBI.
N     * |        |          |0 = EBI function Disabled.
N     * |        |          |1 = EBI function Enabled.
N     * |[1]     |DW16      |EBI Data Width 16-bit Select
N     * |        |          |This bit defines if the EBI data width is 8-bit or 16-bit.
N     * |        |          |0 = EBI data width is 8-bit.
N     * |        |          |1 = EBI data width is 16-bit.
N     * |[2]     |CSPOLINV  |Chip Select Pin Polar Inverse
N     * |        |          |This bit defines the active level of EBI chip select pin (EBI_nCS).
N     * |        |          |0 = Chip select pin (EBI_nCS) is active low.
N     * |        |          |1 = Chip select pin (EBI_nCS) is active high.
N     * |[4]     |CACCESS   |Continuous Data Access Mode
N     * |        |          |When continuous access mode enabled, the tASU, tALE and tLHD cycles are bypass for continuous data transfer request.
N     * |        |          |0 = Continuous data access mode Disabled.
N     * |        |          |1 = Continuous data access mode Enabled.
N     * |[10:8]  |MCLKDIV   |External Output Clock Divider
N     * |        |          |The frequency of EBI output clock (MCLK) is controlled by MCLKDIV as follow:
N     * |        |          |000 = HCLK/1.
N     * |        |          |001 = HCLK/2.
N     * |        |          |010 = HCLK/4.
N     * |        |          |011 = HCLK/8.
N     * |        |          |100 = HCLK/16.
N     * |        |          |101 = HCLK/32.
N     * |        |          |110 = HCLK/64.
N     * |        |          |111 = HCLK/128.
N     * |[18:16] |TALE      |Extend Time Of of ALE
N     * |        |          |The EBI_ALE high pulse period (tALE) to latch the address can be controlled by TALE.
N     * |        |          |tALE = (TALE + 1)*EBI_MCLK.
N     * |        |          |Note: This field only available in EBI_CTL0 register.
N     * |[24]    |WBUFEN    |EBI Write Buffer Enable Bit
N     * |        |          |0 = EBI write buffer Disabled.
N     * |        |          |1 = EBI write buffer Enabled.
N     * |        |          |Note: This bit only available in EBI_CTL0 register.
N     * @var EBI_T::TCTL0
N     * Offset: 0x04  External Bus Interface Bank0 Timing Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:3]   |TACC      |EBI Data Access Time
N     * |        |          |TACC define data access time (tACC).
N     * |        |          |tACC = (TACC + 1) * EBI_MCLK.
N     * |[10:8]  |TAHD      |EBI Data Access Hold Time
N     * |        |          |TAHD define data access hold time (tAHD).
N     * |        |          |tAHD = (TAHD + 1) * EBI_MCLK.
N     * |[15:12] |W2X       |Idle Cycle After Write
N     * |        |          |This field defines the number of W2X idle cycle.
N     * |        |          |When write action is finish, W2X idle cycle is inserted and EBI_nCS return to idle state.
N     * |        |          |W2X idle cycle = (W2X * EBI_MCLK).
N     * |        |          |When write action is finish, W2X idle cycle is inserted and EBI_nCS return to idle state.
N     * |[22]    |RAHDOFF   |Access Hold Time Disable Control When Read
N     * |        |          |0 = The Data Access Hold Time (tAHD) during EBI reading is Enabled.
N     * |        |          |1 = The Data Access Hold Time (tAHD) during EBI reading is Disabled.
N     * |[23]    |WAHDOFF   |Access Hold Time Disable Control When Write
N     * |        |          |0 = The Data Access Hold Time (tAHD) during EBI writing is Enabled.
N     * |        |          |1 = The Data Access Hold Time (tAHD) during EBI writing is Disabled.
N     * |[27:24] |R2R       |Idle Cycle Between Read-to-read
N     * |        |          |This field defines the number of R2R idle cycle.
N     * |        |          |When read action is finish and next action is going to read, R2R idle cycle is inserted and EBI_nCS return to idle state.
N     * |        |          |R2R idle cycle = (R2R * EBI_MCLK).
N     * |        |          |When read action is finish and next action is going to read, R2R idle cycle is inserted and EBI_nCS return to idle state.
N     * @var EBI_T::CTL1
N     * Offset: 0x10  External Bus Interface Bank1 Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |EN        |EBI Enable Bit
N     * |        |          |This bit is the functional enable bit for EBI.
N     * |        |          |0 = EBI function Disabled.
N     * |        |          |1 = EBI function Enabled.
N     * |[1]     |DW16      |EBI Data Width 16-bit Select
N     * |        |          |This bit defines if the EBI data width is 8-bit or 16-bit.
N     * |        |          |0 = EBI data width is 8-bit.
N     * |        |          |1 = EBI data width is 16-bit.
N     * |[2]     |CSPOLINV  |Chip Select Pin Polar Inverse
N     * |        |          |This bit defines the active level of EBI chip select pin (EBI_nCS).
N     * |        |          |0 = Chip select pin (EBI_nCS) is active low.
N     * |        |          |1 = Chip select pin (EBI_nCS) is active high.
N     * |[4]     |CACCESS   |Continuous Data Access Mode
N     * |        |          |When con ttinuousenuous access mode enabled, the tASU, tALE and tLHD cycles are bypass for continuous data transfer request.
N     * |        |          |0 = Continuous data access mode Disabled.
N     * |        |          |1 = Continuous data access mode Enabled.
N     * |[10:8]  |MCLKDIV   |External Output Clock Divider
N     * |        |          |The frequency of EBI output clock (MCLK) is controlled by MCLKDIV as follow:
N     * |        |          |000 = HCLK/1.
N     * |        |          |001 = HCLK/2.
N     * |        |          |010 = HCLK/4.
N     * |        |          |011 = HCLK/8.
N     * |        |          |100 = HCLK/16.
N     * |        |          |101 = HCLK/32.
N     * |        |          |110 = HCLK/64.
N     * |        |          |111 = HCLK/128.
N     * |[18:16] |TALE      |Extend Time Of of ALE
N     * |        |          |The EBI_ALE high pulse period (tALE) to latch the address can be controlled by TALE.
N     * |        |          |tALE = (TALE + 1)*EBI_MCLK.
N     * |        |          |Note: This field only available in EBI_CTL0 register.
N     * |[24]    |WBUFEN    |EBI Write Buffer Enable Bit
N     * |        |          |0 = EBI write buffer Disabled.
N     * |        |          |1 = EBI write buffer Enabled.
N     * |        |          |Note: This bit only available in EBI_CTL0 register.
N     * @var EBI_T::TCTL1
N     * Offset: 0x14  External Bus Interface Bank1 Timing Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:3]   |TACC      |EBI Data Access Time
N     * |        |          |TACC define data access time (tACC).
N     * |        |          |tACC = (TACC + 1) * EBI_MCLK.
N     * |[10:8]  |TAHD      |EBI Data Access Hold Time
N     * |        |          |TAHD define data access hold time (tAHD).
N     * |        |          |tAHD = (TAHD + 1) * EBI_MCLK.
N     * |[15:12] |W2X       |Idle Cycle After Write
N     * |        |          |This field defines the number of W2X idle cycle.
N     * |        |          |When write action is finish, W2X idle cycle is inserted and EBI_nCS return to idle state.
N     * |        |          |W2X idle cycle = (W2X * EBI_MCLK).
N     * |        |          |When write action is finish, W2X idle cycle is inserted and EBI_nCS return to idle state.
N     * |[22]    |RAHDOFF   |Access Hold Time Disable Control When Read
N     * |        |          |0 = The Data Access Hold Time (tAHD) during EBI reading is Enabled.
N     * |        |          |1 = The Data Access Hold Time (tAHD) during EBI reading is Disabled.
N     * |[23]    |WAHDOFF   |Access Hold Time Disable Control When Write
N     * |        |          |0 = The Data Access Hold Time (tAHD) during EBI writing is Enabled.
N     * |        |          |1 = The Data Access Hold Time (tAHD) during EBI writing is Disabled.
N     * |[27:24] |R2R       |Idle Cycle Between Read-to-read
N     * |        |          |This field defines the number of R2R idle cycle.
N     * |        |          |When read action is finish and next action is going to read, R2R idle cycle is inserted and EBI_nCS return to idle state.
N     * |        |          |R2R idle cycle = (R2R * EBI_MCLK).
N     * |        |          |When read action is finish and next action is going to read, R2R idle cycle is inserted and EBI_nCS return to idle state.
N     */
N    __IO uint32_t CTL0;                  /*!< [0x0000] External Bus Interface Bank0 Control Register                    */
X    volatile uint32_t CTL0;                   
N    __IO uint32_t TCTL0;                 /*!< [0x0004] External Bus Interface Bank0 Timing Control Register             */
X    volatile uint32_t TCTL0;                  
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __IO uint32_t CTL1;                  /*!< [0x0010] External Bus Interface Bank1 Control Register                    */
X    volatile uint32_t CTL1;                   
N    __IO uint32_t TCTL1;                 /*!< [0x0014] External Bus Interface Bank1 Timing Control Register             */
X    volatile uint32_t TCTL1;                  
N
N} EBI_T;
N
N/**
N    @addtogroup EBI_CONST EBI Bit Field Definition
N    Constant Definitions for EBI Controller
N@{ */
N
N#define EBI_CTL_EN_Pos                   (0)                                               /*!< EBI_T::CTL0: EN Position                  */
N#define EBI_CTL_EN_Msk                   (0x1ul << EBI_CTL_EN_Pos)                         /*!< EBI_T::CTL0: EN Mask                      */
N
N#define EBI_CTL_DW16_Pos                 (1)                                               /*!< EBI_T::CTL0: DW16 Position                */
N#define EBI_CTL_DW16_Msk                 (0x1ul << EBI_CTL_DW16_Pos)                       /*!< EBI_T::CTL0: DW16 Mask                    */
N
N#define EBI_CTL_CSPOLINV_Pos             (2)                                               /*!< EBI_T::CTL0: CSPOLINV Position            */
N#define EBI_CTL_CSPOLINV_Msk             (0x1ul << EBI_CTL_CSPOLINV_Pos)                   /*!< EBI_T::CTL0: CSPOLINV Mask                */
N
N#define EBI_CTL_CACCESS_Pos              (4)                                               /*!< EBI_T::CTL0: CACCESS Position             */
N#define EBI_CTL_CACCESS_Msk              (0x1ul << EBI_CTL_CACCESS_Pos)                    /*!< EBI_T::CTL0: CACCESS Mask                 */
N
N#define EBI_CTL_MCLKDIV_Pos              (8)                                               /*!< EBI_T::CTL0: MCLKDIV Position             */
N#define EBI_CTL_MCLKDIV_Msk              (0x7ul << EBI_CTL_MCLKDIV_Pos)                    /*!< EBI_T::CTL0: MCLKDIV Mask                 */
N
N#define EBI_CTL_TALE_Pos                 (16)                                              /*!< EBI_T::CTL0: TALE Position                */
N#define EBI_CTL_TALE_Msk                 (0x7ul << EBI_CTL_TALE_Pos)                       /*!< EBI_T::CTL0: TALE Mask                    */
N
N#define EBI_CTL_WBUFEN_Pos               (24)                                              /*!< EBI_T::CTL0: WBUFEN Position              */
N#define EBI_CTL_WBUFEN_Msk               (0x1ul << EBI_CTL_WBUFEN_Pos)                     /*!< EBI_T::CTL0: WBUFEN Mask                  */
N
N#define EBI_TCTL_TACC_Pos                (3)                                               /*!< EBI_T::TCTL0: TACC Position               */
N#define EBI_TCTL_TACC_Msk                (0x1ful << EBI_TCTL_TACC_Pos)                     /*!< EBI_T::TCTL0: TACC Mask                   */
N
N#define EBI_TCTL_TAHD_Pos                (8)                                               /*!< EBI_T::TCTL0: TAHD Position               */
N#define EBI_TCTL_TAHD_Msk                (0x7ul << EBI_TCTL_TAHD_Pos)                      /*!< EBI_T::TCTL0: TAHD Mask                   */
N
N#define EBI_TCTL_W2X_Pos                 (12)                                              /*!< EBI_T::TCTL0: W2X Position                */
N#define EBI_TCTL_W2X_Msk                 (0xful << EBI_TCTL_W2X_Pos)                       /*!< EBI_T::TCTL0: W2X Mask                    */
N
N#define EBI_TCTL_RAHDOFF_Pos             (22)                                              /*!< EBI_T::TCTL0: RAHDOFF Position            */
N#define EBI_TCTL_RAHDOFF_Msk             (0x1ul << EBI_TCTL_RAHDOFF_Pos)                   /*!< EBI_T::TCTL0: RAHDOFF Mask                */
N
N#define EBI_TCTL_WAHDOFF_Pos             (23)                                              /*!< EBI_T::TCTL0: WAHDOFF Position            */
N#define EBI_TCTL_WAHDOFF_Msk             (0x1ul << EBI_TCTL_WAHDOFF_Pos)                   /*!< EBI_T::TCTL0: WAHDOFF Mask                */
N
N#define EBI_TCTL_R2R_Pos                 (24)                                              /*!< EBI_T::TCTL0: R2R Position                */
N#define EBI_TCTL_R2R_Msk                 (0xful << EBI_TCTL_R2R_Pos)                       /*!< EBI_T::TCTL0: R2R Mask                    */
N
N/**@}*/ /* EBI_CONST */
N/**@}*/ /* end of EBI register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __EBI_REG_H__ */
L 165 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "fmc_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\fmc_reg.h" 1
N/**************************************************************************//**
N * @file     fmc_reg.h
N * @version  V1.00
N * @brief    FMC register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0 
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __FMC_REG_H__
N#define __FMC_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup FMC Flash Memory Controller(FMC)
N    Memory Mapped Structure for FMC Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var FMC_T::ISPCTL
N     * Offset: 0x00  ISP Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ISPEN     |ISP Enable Bit (Write Protection)
N     * |        |          |ISP function enable bit. Set this bit to enable ISP function.
N     * |        |          |0 = ISP function Disabled.
N     * |        |          |1 = ISP function Enabled.
N     * |        |          |Note: This bit is write-protected. Refer to the SYS_REGLCTL register.
N     * |[1]     |BS        |Boot Select (Write Protection)
N     * |        |          |Set/clear this bit to select next booting from LDROM/APROM, respectively.
N     * |        |          |This bit also functions as chip booting status flag, which can be used to check where chip booted from.
N     * |        |          |This bit is initiated with the inversed value of CBS[1] (CONFIG0[7]) after any reset is happened except CPU reset (RSTS_CPU is 1) or system reset (RSTS_SYS) is happened.
N     * |        |          |0 = Booting from APROM.
N     * |        |          |1 = Booting from LDROM.
N     * |        |          |Note: This bit is write-protected. Refer to the SYS_REGLCTL register.
N     * |[2]     |SPUEN     |SPROM Update Enable Bit (Write Protection)
N     * |        |          |0 = SPROM cannot be updated.
N     * |        |          |1 = SPROM can be updated.
N     * |        |          |Note: This bit is write-protected. Refer to the SYS_REGLCTL register.
N     * |[3]     |APUEN     |APROM Update Enable Bit (Write Protection)
N     * |        |          |0 = APROM cannot be updated when the chip runs in APROM.
N     * |        |          |1 = APROM can be updated when the chip runs in APROM.
N     * |        |          |Note: This bit is write-protected. Refer to the SYS_REGLCTL register.
N     * |[4]     |CFGUEN    |CONFIG Update Enable Bit (Write Protection)
N     * |        |          |0 = CONFIG cannot be updated.
N     * |        |          |1 = CONFIG can be updated.
N     * |        |          |Note: This bit is write-protected. Refer to the SYS_REGLCTL register.
N     * |[5]     |LDUEN     |LDROM Update Enable Bit (Write Protection)
N     * |        |          |LDROM update enable bit.
N     * |        |          |0 = LDROM cannot be updated.
N     * |        |          |1 = LDROM can be updated.
N     * |        |          |Note: This bit is write-protected. Refer to the SYS_REGLCTL register.
N     * |[6]     |ISPFF     |ISP Fail Flag (Write Protection)
N     * |        |          |This bit is set by hardware when a triggered ISP meets any of the following conditions:
N     * |        |          |This bit needs to be cleared by writing 1 to it.
N     * |        |          |(1) APROM writes to itself if APUEN is set to 0.
N     * |        |          |(2) LDROM writes to itself if LDUEN is set to 0.
N     * |        |          |(3) CONFIG is erased/programmed if CFGUEN is set to 0.
N     * |        |          |(4) SPROM is erased/programmed if SPUEN is set to 0.
N     * |        |          |(5) SPROM is programmed at SPROM secured mode.
N     * |        |          |(6) Page Erase command at LOCK mode with ICE connection.
N     * |        |          |(7) Erase or Program command at brown-out detected.
N     * |        |          |(8) Destination address is illegal, such as over an available range.
N     * |        |          |(9) Invalid ISP commands.
N     * |        |          |Note: This bit is write-protected. Refer to the SYS_REGLCTL register.
N     * @var FMC_T::ISPADDR
N     * Offset: 0x04  ISP Address Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |ISPADDR   |ISP Address
N     * |        |          |The NuMicro M031 series is equipped with embedded flash.
N     * |        |          |ISPADDR[1:0] must be kept 00 for ISP 32-bit operation and ISPADR[8:0] must be kept all 0 for Vector Page Re-map Command.
N     * |        |          |For CRC32 Checksum Calculation command, this field is the flash starting address for checksum calculation, 512 bytes alignment is necessary for checksum calculation.
N     * @var FMC_T::ISPDAT
N     * Offset: 0x08  ISP Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |ISPDAT    |ISP Data
N     * |        |          |Write data to this register before ISP program operation.
N     * |        |          |Read data from this register after ISP read operation.
N     * |        |          |For Run CRC32 Checksum Calculation command, ISPDAT is the memory size (byte) and 512 bytes alignment.
N     * |        |          |For ISP Read Checksum command, ISPDAT is the checksum result.
N     * |        |          |If ISPDAT = 0x0000_0000, it means that (1) the checksum calculation is in progress, or (2) the memory range for checksum calculation is incorrect.
N     * @var FMC_T::ISPCMD
N     * Offset: 0x0C  ISP Command Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[6:0]   |CMD       |ISP CMD
N     * |        |          |ISP command table is shown below:
N     * |        |          |0x00 = FLASH Read.
N     * |        |          |0x04 = Read Unique ID..
N     * |        |          |0x0B = Read Company ID.
N     * |        |          |0x0C = Read Device ID.
N     * |        |          |0x0D = Read CRC32 Checksum.
N     * |        |          |0x21 = FLASH 32-bit Program.
N     * |        |          |0x22 = FLASH Page Erase..
N     * |        |          |0x2D = Run CRC32 Checksum Calculation.
N     * |        |          |0x2E = Vector Remap.
N     * |        |          |The other commands are invalid.
N     * @var FMC_T::ISPTRG
N     * Offset: 0x10  ISP Trigger Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ISPGO     |ISP Start Trigger (Write Protection)
N     * |        |          |Write 1 to start ISP operation and this bit will be cleared to 0 by hardware automatically when ISP operation is finished.
N     * |        |          |0 = ISP operation is finished.
N     * |        |          |1 = ISP is progressed.
N     * |        |          |Note: This bit is write-protected. Refer to the SYS_REGLCTL register.
N     * @var FMC_T::DFBA
N     * Offset: 0x14  Data Flash Base Address
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |DFBA      |Data Flash Base Address
N     * |        |          |This register indicates Data Flash start address. It is a read only register.
N     * |        |          |The Data Flash is shared with APROM. the content of this register is loaded from CONFIG1.
N     * |        |          |This register is valid when DFEN (CONFIG0[0]) =0.
N     * @var FMC_T::FTCTL
N     * Offset: 0x18  Flash Access Time Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[6:4]   |FOM       |Frequency Optimization Mode (Write Protect)
N     * |        |          |The NuMicro Mini58TM series support adjustable flash access timing to optimize the flash access cycles in different working frequency.
N     * |        |          |0x1 = Frequency <= 24MHz..
N     * |        |          |Others = Frequency <= 50MHz.
N     * |        |          |Note: This bit is write-protected. Refer to the SYS_REGLCTL register.
N     * @var FMC_T::ISPSTS
N     * Offset: 0x40  ISP Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ISPBUSY   |ISP BUSY (Read Only)
N     * |        |          |0 = ISP operation is finished.
N     * |        |          |1 = ISP operation is busy.
N     * |[2:1]   |CBS       |Boot Selection of CONFIG (Read Only)
N     * |        |          |This bit is initiated with the CBS (CONFIG0[7:6]) after any reset is happened except CPU reset (RSTS_CPU is 1) or system reset (RSTS_SYS) is happened.
N     * |        |          |00 = LDROM with IAP mode.
N     * |        |          |01 = LDROM without IAP mode.
N     * |        |          |10 = APROM with IAP mode.
N     * |        |          |11 = APROM without IAP mode.
N     * |[6]     |ISPFF     |ISP Fail Flag (Write Protection)
N     * |        |          |This bit is the mirror of ISPFF (FMC_ISPCTL[6]), it needs to be cleared by writing 1 to FMC_ISPCTL[6] or FMC_ISPSTS[6].
N     * |        |          |This bit is set by hardware when a triggered ISP meets any of the following conditions:
N     * |        |          |(1) APROM writes to itself if APUEN is set to 0.
N     * |        |          |(2) LDROM writes to itself if LDUEN is set to 0.
N     * |        |          |(3) CONFIG is erased/programmed if CFGUEN is set to 0.
N     * |        |          |(4) SPROM is erased/programmed if SPUEN is set to 0.
N     * |        |          |(5) SPROM is programmed at SPROM secured mode.
N     * |        |          |(6) Page Erase command at LOCK mode with ICE connection.
N     * |        |          |(7) Erase or Program command at brown-out detected.
N     * |        |          |(8) Destination address is illegal, such as over an available range.
N     * |        |          |(9) Invalid ISP commands.
N     * |[29:9]  |VECMAP    |Vector Page Mapping Address (Read Only)
N     * |        |          |All access to 0x0000_0000~0x0000_01FF is remapped to the Flash memory or SRAM address {VECMAP[20:0], 9'h000} ~ {VECMAP[20:0], 9'h1FF}, except SPROM.
N     * |        |          |VECMAP [20:19] = 00 system vector address is mapped to Flash memory.
N     * |        |          |VECMAP [20:19] = 10 system vector address is mapped to SRAM memory.
N     * |        |          |VECMAP [18:12] should be 0.All access to 0x0000_0000~0x0000_01FF is remapped to the flash memory address {VECMAP[11:0], 9'h000} ~ {VECMAP[11:0], 9'h1FF}
N     * |[31]    |SCODE     |Security Code Active Flag
N     * |        |          |This bit is set to 1 by hardware when detecting SPROM secured code is active at flash initialization, or software writes 1 to this bit to make secured code active; this bit is only cleared by SPROM page erase operation.
N     * |        |          |0 = SPROM secured code is inactive.
N     * |        |          |1 = SPROM secured code is active.
N     */
N    __IO uint32_t ISPCTL;                /*!< [0x0000] ISP Control Register                                             */
X    volatile uint32_t ISPCTL;                 
N    __IO uint32_t ISPADDR;               /*!< [0x0004] ISP Address Register                                             */
X    volatile uint32_t ISPADDR;                
N    __IO uint32_t ISPDAT;                /*!< [0x0008] ISP Data Register                                                */
X    volatile uint32_t ISPDAT;                 
N    __IO uint32_t ISPCMD;                /*!< [0x000c] ISP Command Register                                             */
X    volatile uint32_t ISPCMD;                 
N    __IO uint32_t ISPTRG;                /*!< [0x0010] ISP Trigger Control Register                                     */
X    volatile uint32_t ISPTRG;                 
N    __I  uint32_t DFBA;                  /*!< [0x0014] Data Flash Base Address                                          */
X    volatile const  uint32_t DFBA;                   
N    __IO uint32_t FTCTL;                 /*!< [0x0018] Flash Access Time Control Register                               */
X    volatile uint32_t FTCTL;                  
N    __IO uint32_t ICPCTL;                /*!< [0x001C] Flash ICP Enable Control Register                                */
X    volatile uint32_t ICPCTL;                 
N    __I  uint32_t RESERVE0[8];
X    volatile const  uint32_t RESERVE0[8];
N    __IO uint32_t ISPSTS;                /*!< [0x0040] ISP Status Register                                              */
X    volatile uint32_t ISPSTS;                 
N    __I  uint32_t RESERVE1[15];
X    volatile const  uint32_t RESERVE1[15];
N    __IO uint32_t MPDAT0;                /*!< [0x0080] ISP Data0 Register                                               */
X    volatile uint32_t MPDAT0;                 
N    __IO uint32_t MPDAT1;                /*!< [0x0084] ISP Data1 Register                                               */
X    volatile uint32_t MPDAT1;                 
N    __IO uint32_t MPDAT2;                /*!< [0x0088] ISP Data2 Register                                               */
X    volatile uint32_t MPDAT2;                 
N    __IO uint32_t MPDAT3;                /*!< [0x008c] ISP Data3 Register                                               */
X    volatile uint32_t MPDAT3;                 
N    __I  uint32_t RESERVE2[12];
X    volatile const  uint32_t RESERVE2[12];
N    __I  uint32_t MPSTS;                 /*!< [0x00c0] ISP Multi-Program Status Register                                */
X    volatile const  uint32_t MPSTS;                  
N    __I  uint32_t MPADDR;                /*!< [0x00c4] ISP Multi-Program Address Register                               */
X    volatile const  uint32_t MPADDR;                 
N    __I  uint32_t RESERVE3[0x3CD];
X    volatile const  uint32_t RESERVE3[0x3CD];
N    __I  uint32_t VERSION;               /*!< [0x0FFC] FMC Version Register                                             */
X    volatile const  uint32_t VERSION;                
N} FMC_T;
N
N/**
N    @addtogroup FMC_CONST FMC Bit Field Definition
N    Constant Definitions for FMC Controller
N@{ */
N
N#define FMC_ISPCTL_ISPEN_Pos             (0)                                               /*!< FMC_T::ISPCTL: ISPEN Position          */
N#define FMC_ISPCTL_ISPEN_Msk             (0x1ul << FMC_ISPCTL_ISPEN_Pos)                   /*!< FMC_T::ISPCTL: ISPEN Mask              */
N
N#define FMC_ISPCTL_BS_Pos                (1)                                               /*!< FMC_T::ISPCTL: BS Position             */
N#define FMC_ISPCTL_BS_Msk                (0x1ul << FMC_ISPCTL_BS_Pos)                      /*!< FMC_T::ISPCTL: BS Mask                 */
N
N#define FMC_ISPCTL_SPUEN_Pos             (2)                                               /*!< FMC_T::ISPCTL: SPUEN Position          */
N#define FMC_ISPCTL_SPUEN_Msk             (0x1ul << FMC_ISPCTL_SPUEN_Pos)                   /*!< FMC_T::ISPCTL: SPUEN Mask              */
N
N#define FMC_ISPCTL_APUEN_Pos             (3)                                               /*!< FMC_T::ISPCTL: APUEN Position          */
N#define FMC_ISPCTL_APUEN_Msk             (0x1ul << FMC_ISPCTL_APUEN_Pos)                   /*!< FMC_T::ISPCTL: APUEN Mask              */
N
N#define FMC_ISPCTL_CFGUEN_Pos            (4)                                               /*!< FMC_T::ISPCTL: CFGUEN Position         */
N#define FMC_ISPCTL_CFGUEN_Msk            (0x1ul << FMC_ISPCTL_CFGUEN_Pos)                  /*!< FMC_T::ISPCTL: CFGUEN Mask             */
N
N#define FMC_ISPCTL_LDUEN_Pos             (5)                                               /*!< FMC_T::ISPCTL: LDUEN Position          */
N#define FMC_ISPCTL_LDUEN_Msk             (0x1ul << FMC_ISPCTL_LDUEN_Pos)                   /*!< FMC_T::ISPCTL: LDUEN Mask              */
N
N#define FMC_ISPCTL_ISPFF_Pos             (6)                                               /*!< FMC_T::ISPCTL: ISPFF Position          */
N#define FMC_ISPCTL_ISPFF_Msk             (0x1ul << FMC_ISPCTL_ISPFF_Pos)                   /*!< FMC_T::ISPCTL: ISPFF Mask              */
N
N#define FMC_ISPCTL_INTEN_Pos             (24)                                              /*!< FMC_T::ISPCTL: INTEN Position          */
N#define FMC_ISPCTL_INTEN_Msk             (0x1ul << FMC_ISPCTL_INTEN_Pos)                   /*!< FMC_T::ISPCTL: INTEN Mask              */
N
N#define FMC_ISPADDR_ISPADDR_Pos          (0)                                               /*!< FMC_T::ISPADDR: ISPADDR Position       */
N#define FMC_ISPADDR_ISPADDR_Msk          (0xfffffffful << FMC_ISPADDR_ISPADDR_Pos)         /*!< FMC_T::ISPADDR: ISPADDR Mask           */
N
N#define FMC_ISPDAT_ISPDAT_Pos            (0)                                               /*!< FMC_T::ISPDAT: ISPDAT Position         */
N#define FMC_ISPDAT_ISPDAT_Msk            (0xfffffffful << FMC_ISPDAT_ISPDAT_Pos)           /*!< FMC_T::ISPDAT: ISPDAT Mask             */
N
N#define FMC_ISPCMD_CMD_Pos               (0)                                               /*!< FMC_T::ISPCMD: CMD Position            */
N#define FMC_ISPCMD_CMD_Msk               (0x7ful << FMC_ISPCMD_CMD_Pos)                    /*!< FMC_T::ISPCMD: CMD Mask                */
N
N#define FMC_ISPTRG_ISPGO_Pos             (0)                                               /*!< FMC_T::ISPTRG: ISPGO Position          */
N#define FMC_ISPTRG_ISPGO_Msk             (0x1ul << FMC_ISPTRG_ISPGO_Pos)                   /*!< FMC_T::ISPTRG: ISPGO Mask              */
N
N#define FMC_DFBA_DFBA_Pos                (0)                                               /*!< FMC_T::DFBA: DFBA Position             */
N#define FMC_DFBA_DFBA_Msk                (0xfffffffful << FMC_DFBA_DFBA_Pos)               /*!< FMC_T::DFBA: DFBA Mask                 */
N
N#define FMC_FTCTL_FOM_Pos                (4)                                               /*!< FMC_T::FTCTL: FOM Position             */
N#define FMC_FTCTL_FOM_Msk                (0x7ul << FMC_FTCTL_FOM_Pos)                      /*!< FMC_T::FTCTL: FOM Mask                 */
N
N#define FMC_FTCTL_CACHEINV_Pos           (9)                                               /*!< FMC_T::FTCTL: CACHEINV Position        */
N#define FMC_FTCTL_CACHEINV_Msk           (0x1ul << FMC_FTCTL_CACHEINV_Pos)                 /*!< FMC_T::FTCTL: CACHEINV Mask            */
N
N#define FMC_ISPSTS_ISPBUSY_Pos           (0)                                               /*!< FMC_T::ISPSTS: ISPBUSY Position        */
N#define FMC_ISPSTS_ISPBUSY_Msk           (0x1ul << FMC_ISPSTS_ISPBUSY_Pos)                 /*!< FMC_T::ISPSTS: ISPBUSY Mask            */
N
N#define FMC_ISPSTS_CBS_Pos               (1)                                               /*!< FMC_T::ISPSTS: CBS Position            */
N#define FMC_ISPSTS_CBS_Msk               (0x3ul << FMC_ISPSTS_CBS_Pos)                     /*!< FMC_T::ISPSTS: CBS Mask                */
N
N#define FMC_ISPSTS_PGFF_Pos              (5)                                               /*!< FMC_T::ISPSTS: PGFF Position           */
N#define FMC_ISPSTS_PGFF_Msk              (0x1ul << FMC_ISPSTS_PGFF_Pos)                    /*!< FMC_T::ISPSTS: PGFF Mask               */
N
N#define FMC_ISPSTS_ISPFF_Pos             (6)                                               /*!< FMC_T::ISPSTS: ISPFF Position          */
N#define FMC_ISPSTS_ISPFF_Msk             (0x1ul << FMC_ISPSTS_ISPFF_Pos)                   /*!< FMC_T::ISPSTS: ISPFF Mask              */
N
N#define FMC_ISPSTS_ALLONE_Pos             (7)                                               /*!< FMC_T::ISPSTS: ISPFF Position          */
N#define FMC_ISPSTS_ALLONE_Msk             (0x1ul << FMC_ISPSTS_ALLONE_Pos)
N
N#define FMC_ISPSTS_INTFLAG_Pos           (8)                                               /*!< FMC_T::ISPSTS: INTFLAG Position        */
N#define FMC_ISPSTS_INTFLAG_Msk           (0x1ul << FMC_ISPSTS_INTFLAG_Pos)                 /*!< FMC_T::ISPSTS: INTFLAG Mask            */
N
N#define FMC_ISPSTS_VECMAP_Pos            (9)                                               /*!< FMC_T::ISPSTS: VECMAP Position         */
N#define FMC_ISPSTS_VECMAP_Msk            (0x1ffffful << FMC_ISPSTS_VECMAP_Pos)             /*!< FMC_T::ISPSTS: VECMAP Mask             */
N
N#define FMC_ISPSTS_SCODE_Pos             (31)                                              /*!< FMC_T::ISPSTS: SCODE Position          */
N#define FMC_ISPSTS_SCODE_Msk             (0x1ul << FMC_ISPSTS_SCODE_Pos)                   /*!< FMC_T::ISPSTS: SCODE Mask              */
N
N#define FMC_MPDAT0_ISPDAT0_Pos           (0)                                               /*!< FMC_T::MPDAT0: ISPDAT0 Position        */
N#define FMC_MPDAT0_ISPDAT0_Msk           (0xfffffffful << FMC_MPDAT0_ISPDAT0_Pos)          /*!< FMC_T::MPDAT0: ISPDAT0 Mask            */
N
N#define FMC_MPDAT1_ISPDAT1_Pos           (0)                                               /*!< FMC_T::MPDAT1: ISPDAT1 Position        */
N#define FMC_MPDAT1_ISPDAT1_Msk           (0xfffffffful << FMC_MPDAT1_ISPDAT1_Pos)          /*!< FMC_T::MPDAT1: ISPDAT1 Mask            */
N
N#define FMC_MPDAT2_ISPDAT2_Pos           (0)                                               /*!< FMC_T::MPDAT2: ISPDAT2 Position        */
N#define FMC_MPDAT2_ISPDAT2_Msk           (0xfffffffful << FMC_MPDAT2_ISPDAT2_Pos)          /*!< FMC_T::MPDAT2: ISPDAT2 Mask            */
N
N#define FMC_MPDAT3_ISPDAT3_Pos           (0)                                               /*!< FMC_T::MPDAT3: ISPDAT3 Position        */
N#define FMC_MPDAT3_ISPDAT3_Msk           (0xfffffffful << FMC_MPDAT3_ISPDAT3_Pos)          /*!< FMC_T::MPDAT3: ISPDAT3 Mask            */
N
N#define FMC_MPSTS_MPBUSY_Pos             (0)                                               /*!< FMC_T::MPSTS: MPBUSY Position          */
N#define FMC_MPSTS_MPBUSY_Msk             (0x1ul << FMC_MPSTS_MPBUSY_Pos)                   /*!< FMC_T::MPSTS: MPBUSY Mask              */
N
N#define FMC_MPSTS_PPGO_Pos               (1)                                               /*!< FMC_T::MPSTS: PPGO Position            */
N#define FMC_MPSTS_PPGO_Msk               (0x1ul << FMC_MPSTS_PPGO_Pos)                     /*!< FMC_T::MPSTS: PPGO Mask                */
N
N#define FMC_MPSTS_ISPFF_Pos              (2)                                               /*!< FMC_T::MPSTS: ISPFF Position           */
N#define FMC_MPSTS_ISPFF_Msk              (0x1ul << FMC_MPSTS_ISPFF_Pos)                    /*!< FMC_T::MPSTS: ISPFF Mask               */
N
N#define FMC_MPSTS_D0_Pos                 (4)                                               /*!< FMC_T::MPSTS: D0 Position              */
N#define FMC_MPSTS_D0_Msk                 (0x1ul << FMC_MPSTS_D0_Pos)                       /*!< FMC_T::MPSTS: D0 Mask                  */
N
N#define FMC_MPSTS_D1_Pos                 (5)                                               /*!< FMC_T::MPSTS: D1 Position              */
N#define FMC_MPSTS_D1_Msk                 (0x1ul << FMC_MPSTS_D1_Pos)                       /*!< FMC_T::MPSTS: D1 Mask                  */
N
N#define FMC_MPSTS_D2_Pos                 (6)                                               /*!< FMC_T::MPSTS: D2 Position              */
N#define FMC_MPSTS_D2_Msk                 (0x1ul << FMC_MPSTS_D2_Pos)                       /*!< FMC_T::MPSTS: D2 Mask                  */
N
N#define FMC_MPSTS_D3_Pos                 (7)                                               /*!< FMC_T::MPSTS: D3 Position              */
N#define FMC_MPSTS_D3_Msk                 (0x1ul << FMC_MPSTS_D3_Pos)                       /*!< FMC_T::MPSTS: D3 Mask                  */
N
N#define FMC_MPADDR_MPADDR_Pos            (0)                                               /*!< FMC_T::MPADDR: MPADDR Position         */
N#define FMC_MPADDR_MPADDR_Msk            (0xfffffffful << FMC_MPADDR_MPADDR_Pos)           /*!< FMC_T::MPADDR: MPADDR Mask             */
N
N/**@}*/ /* FMC_CONST */
N/**@}*/ /* end of FMC register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __FMC_REG_H__ */
L 166 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "gpio_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\gpio_reg.h" 1
N/**************************************************************************//**
N * @file     gpio_reg.h
N * @version  V1.00
N * @brief    GPIO register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __GPIO_REG_H__
N#define __GPIO_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup GPIO General Purpose Input/Output Controller (GPIO)
N    Memory Mapped Structure for GPIO Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var GPIO_T::MODE
N     * Offset: 0x00/0x40/0x80/0xC0/0x100/0x140  PA-PF I/O Mode Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2n+1:2n]|MODEn    |Port A-F I/O Pin[n] Mode Control
N     * |        |          |Determine each I/O mode of Px.n pins.
N     * |        |          |00 = Px.n is in Input mode.
N     * |        |          |01 = Px.n is in Push-pull Output mode.
N     * |        |          |10 = Px.n is in Open-drain Output mode.
N     * |        |          |11 = Px.n is in Quasi-bidirectional mode.
N     * |        |          |Note1: The initial value of this field is defined by CIOINI (CONFIG0 [10]). If CIOINI is set to 0, the default value is 0xFFFF_FFFF and all pins will be quasi-bidirectional mode after chip powered on. If CIOINI is set to 1, the default value is 0x0000_0000 and all pins will be  input mode after chip powered on.
N     * |        |          |Note2:
N     * |        |          |The PC.8~13,15/PD.4~14/PF.7~13 pin is ignored.
N     * @var GPIO_T::DINOFF
N     * Offset: 0x04/0x44/0x84/0xC4/0x104/0x144  PA-PF Digital Input Path Disable Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n+16]  |DINOFFn   |Port A-F Pin[n] Digital Input Path Disable Bit
N     * |        |          |Each of these bits is used to control if the digital input path of corresponding Px.n pin is disabled. If input is analog signal, users can disable Px.n digital input path to avoid input current leakage.
N     * |        |          |0 = Px.n digital input path Enabled.
N     * |        |          |1 = Px.n digital input path Disabled (digital input tied to low).
N     * |        |          |Note:
N     * |        |          |The PC.8~13,15/PD.4~14/PF.7~13 pin is ignored.
N     * @var GPIO_T::DOUT
N     * Offset: 0x08/0x48/0x88/0xC8/0x108/0x148  PA-PF Data Output Value
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |DOUTn     |Port A-F Pin[n] Output Value
N     * |        |          |Each of these bits controls the status of a Px.n pin when the Px.n is configured as Push-pull output, Open-drain output or Quasi-bidirectional mode.
N     * |        |          |0 = Px.n will drive Low if the Px.n pin is configured as Push-pull output, Open-drain output or Quasi-bidirectional mode.
N     * |        |          |1 = Px.n will drive High if the Px.n pin is configured as Push-pull output or Quasi-bidirectional mode.
N     * |        |          |Note:
N     * |        |          |The PC.8~13,15/PD.4~14/PF.7~13 pin is ignored.
N     * @var GPIO_T::DATMSK
N     * Offset: 0x0C/0x4C/0x8C/0xCC/0x10C/0x14C  PA-PF Data Output Write Mask
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |DATMSKn   |Port A-F Pin[n] Data Output Write Mask
N     * |        |          |These bits are used to protect the corresponding DOUT (Px_DOUT[n]) bit. When the DATMSK (Px_DATMSK[n]) bit is set to 1, the corresponding DOUT (Px_DOUT[n]) bit is protected. If the write signal is masked, writing data to the protect bit is ignored.
N     * |        |          |0 = Corresponding DOUT (Px_DOUT[n]) bit can be updated.
N     * |        |          |1 = Corresponding DOUT (Px_DOUT[n]) bit protected.
N     * |        |          |Note1: This function only protects the corresponding DOUT (Px_DOUT[n]) bit, and will not protect the corresponding PDIO (Pxn_PDIO[0]) bit.
N     * |        |          |Note2:
N     * |        |          |The PC.8~13,15/PD.4~14/PF.7~13 pin is ignored.
N     * @var GPIO_T::PIN
N     * Offset: 0x10/0x50/0x90/0xD0/0x110/0x150  PA-PF Pin Value
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |PINn      |Port A-F Pin[n] Pin Value
N     * |        |          |Each bit of the register reflects the actual status of the respective Px.n pin. If the bit is 1, it indicates the corresponding pin status is high; else the pin status is low.
N     * |        |          |Note:
N     * |        |          |The PC.8~13,15/PD.4~14/PF.7~13 pin is ignored.
N     * @var GPIO_T::DBEN
N     * Offset: 0x14/0x54/0x94/0xD4/0x114/0x154  PA-PF De-Bounce Enable Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |DBENn     |Port A-F Pin[n] Input Signal De-bounce Enable Bit
N     * |        |          |The DBEN[n] bit is used to enable the de-bounce function for each corresponding bit.
N     * |        |          |If the input signal pulse width cannot be sampled by continuous two de-bounce sample cycle, the input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBCLKSRC (GPIO_DBCTL [4]), one de-bounce sample cycle period is controlled by DBCLKSEL (GPIO_DBCTL [3:0]).
N     * |        |          |0 = Px.n de-bounce function Disabled.
N     * |        |          |1 = Px.n de-bounce function Enabled.
N     * |        |          |The de-bounce function is valid only for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
N     * |        |          |Note:
N     * |        |          |The PC.8~13,15/PD.4~14/PF.7~13 pin is ignored.
N     * @var GPIO_T::INTTYPE
N     * Offset: 0x18/0x58/0x98/0xD8/0x118/0x158  PA-PF Interrupt Trigger Type Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |TYPEn     |Port A-F Pin[n] Edge or Level Detection Interrupt Trigger Type Control
N     * |        |          |TYPE (Px_INTTYPE[n]) bit is used to control the triggered interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce.
N     * |        |          |If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrupt.
N     * |        |          |0 = Edge trigger interrupt.
N     * |        |          |1 = Level trigger interrupt.
N     * |        |          |If the pin is set as the level trigger interrupt, only one level can be set on the registers RHIEN (Px_INTEN[n+16])/FLIEN (Px_INTEN[n]). If both levels to trigger interrupt are set, the setting is ignored and no interrupt will occur.
N     * |        |          |The de-bounce function is valid only for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
N     * |        |          |Note:
N     * |        |          |The PC.8~13,15/PD.4~14/PF.7~13 pin is ignored.
N     * @var GPIO_T::INTEN
N     * Offset: 0x1C/0x5C/0x9C/0xDC/0x11C/0x15C  PA-PF Interrupt Enable Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |FLIENn    |Port A-F Pin[n] Falling Edge or Low Level Interrupt Trigger Type Enable Bit
N     * |        |          |The FLIEN (Px_INTEN[n]) bit is used to enable the interrupt for each of the corresponding input Px.n pin. Set bit to 1 also enable the pin wake-up function.
N     * |        |          |When setting the FLIEN (Px_INTEN[n]) bit to 1 :
N     * |        |          |If the interrupt is level trigger (TYPE (Px_INTTYPE[n]) bit is set to 1), the input Px.n pin will generate the interrupt while this pin state is at low level.
N     * |        |          |If the interrupt is edge trigger(TYPE (Px_INTTYPE[n]) bit is set to 0), the input Px.n pin will generate the interrupt while this pin state changed from high to low.
N     * |        |          |0 = Px.n level low or high to low interrupt Disabled.
N     * |        |          |1 = Px.n level low or high to low interrupt Enabled.
N     * |        |          |Note:
N     * |        |          |The PC.8~13,15/PD.4~14/PF.7~13 pin is ignored.
N     * |[n+16]  |RHIENn    |Port A-F Pin[n] Rising Edge or High Level Interrupt Trigger Type Enable Bit
N     * |        |          |The RHIEN (Px_INTEN[n+16]) bit is used to enable the interrupt for each of the corresponding input Px.n pin. Set bit to 1 also enable the pin wake-up function.
N     * |        |          |When setting the RHIEN (Px_INTEN[n+16]) bit to 1 :
N     * |        |          |If the interrupt is level trigger (TYPE (Px_INTTYPE[n]) bit is set to 1), the input Px.n pin will generate the interrupt while this pin state is at high level.
N     * |        |          |If the interrupt is edge trigger (TYPE (Px_INTTYPE[n]) bit is set to 0), the input Px.n pin will generate the interrupt while this pin state changed from low to high.
N     * |        |          |0 = Px.n level high or low to high interrupt Disabled.
N     * |        |          |1 = Px.n level high or low to high interrupt Enabled.
N     * |        |          |Note:
N     * |        |          |The PC.8~13,15/PD.4~14/PF.7~13 pin is ignored.
N     * @var GPIO_T::INTSRC
N     * Offset: 0x20/0x60/0xA0/0xE0/0x120/0x160  PA-PF Interrupt Source Flag
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |INTSRCn   |Port A-F Pin[n] Interrupt Source Flag
N     * |        |          |Write Operation :
N     * |        |          |0 = No action.
N     * |        |          |1 = Clear the corresponding pending interrupt.
N     * |        |          |Read Operation :
N     * |        |          |0 = No interrupt at Px.n.
N     * |        |          |1 = Px.n generates an interrupt.
N     * |        |          |Note:
N     * |        |          |The PC.8~13,15/PD.4~14/PF.7~13 pin is ignored.
N     */
N
N    __IO uint32_t MODE;               /*!< [0x0000] PA I/O Mode Control                                              */
X    volatile uint32_t MODE;                
N    __IO uint32_t DINOFF;             /*!< [0x0004] PA Digital Input Path Disable Control                            */
X    volatile uint32_t DINOFF;              
N    __IO uint32_t DOUT;               /*!< [0x0008] PA Data Output Value                                             */
X    volatile uint32_t DOUT;                
N    __IO uint32_t DATMSK;             /*!< [0x000c] PA Data Output Write Mask                                        */
X    volatile uint32_t DATMSK;              
N    __I  uint32_t PIN;                /*!< [0x0010] PA Pin Value                                                     */
X    volatile const  uint32_t PIN;                 
N    __IO uint32_t DBEN;               /*!< [0x0014] PA De-bounce Enable Control Register                             */
X    volatile uint32_t DBEN;                
N    __IO uint32_t INTTYPE;            /*!< [0x0018] PA Interrupt Trigger Type Control                                */
X    volatile uint32_t INTTYPE;             
N    __IO uint32_t INTEN;              /*!< [0x001c] PA Interrupt Enable Control Register                             */
X    volatile uint32_t INTEN;               
N    __IO uint32_t INTSRC;             /*!< [0x0020] PA Interrupt Source Flag                                         */
X    volatile uint32_t INTSRC;              
N} GPIO_T;
N
Ntypedef struct
N{
N
N
N    /**
N     * @var GPIO_DBCTL_T::DBCTL
N     * Offset: 0x180  Interrupt De-bounce Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |DBCLKSEL  |De-bounce Sampling Cycle Selection
N     * |        |          |0000 = Sample interrupt input once per 1 clocks.
N     * |        |          |0001 = Sample interrupt input once per 2 clocks.
N     * |        |          |0010 = Sample interrupt input once per 4 clocks.
N     * |        |          |0011 = Sample interrupt input once per 8 clocks.
N     * |        |          |0100 = Sample interrupt input once per 16 clocks.
N     * |        |          |0101 = Sample interrupt input once per 32 clocks.
N     * |        |          |0110 = Sample interrupt input once per 64 clocks.
N     * |        |          |0111 = Sample interrupt input once per 128 clocks.
N     * |        |          |1000 = Sample interrupt input once per 256 clocks.
N     * |        |          |1001 = Sample interrupt input once per 2*256 clocks.
N     * |        |          |1010 = Sample interrupt input once per 4*256 clocks.
N     * |        |          |1011 = Sample interrupt input once per 8*256 clocks.
N     * |        |          |1100 = Sample interrupt input once per 16*256 clocks.
N     * |        |          |1101 = Sample interrupt input once per 32*256 clocks.
N     * |        |          |1110 = Sample interrupt input once per 64*256 clocks.
N     * |        |          |1111 = Sample interrupt input once per 128*256 clocks.
N     * |[4]     |DBCLKSRC  |De-bounce Counter Clock Source Selection
N     * |        |          |0 = De-bounce counter clock source is the HCLK.
N     * |        |          |1 = De-bounce counter clock source is the 32 kHz internal low speed RC oscillator (LIRC).
N     * |[5]     |ICLKON    |Interrupt Clock on Mode
N     * |        |          |0 = Edge detection circuit is active only if I/O pin corresponding RHIEN (Px_INTEN[n+16])/FLIEN (Px_INTEN[n]) bit is set to 1.
N     * |        |          |1 = All I/O pins edge detection circuit is always active after reset.
N     * |        |          |Note: It is recommended to disable this bit to save system power if no special application concern.
N     */
N
N    __IO uint32_t DBCTL;            /*!< [0x0440] Interrupt De-bounce Control Register                             */
X    volatile uint32_t DBCTL;             
N} GPIO_DBCTL_T;
N
N
N/**
N    @addtogroup GPIO_CONST GPIO Bit Field Definition
N    Constant Definitions for GPIO Controller
N@{ */
N
N#define GPIO_MODE_MODE0_Pos              (0)                                               /*!< GPIO_T::MODE: MODE0 Position           */
N#define GPIO_MODE_MODE0_Msk              (0x3ul << GPIO_MODE_MODE0_Pos)                    /*!< GPIO_T::MODE: MODE0 Mask               */
N
N#define GPIO_MODE_MODE1_Pos              (2)                                               /*!< GPIO_T::MODE: MODE1 Position           */
N#define GPIO_MODE_MODE1_Msk              (0x3ul << GPIO_MODE_MODE1_Pos)                    /*!< GPIO_T::MODE: MODE1 Mask               */
N
N#define GPIO_MODE_MODE2_Pos              (4)                                               /*!< GPIO_T::MODE: MODE2 Position           */
N#define GPIO_MODE_MODE2_Msk              (0x3ul << GPIO_MODE_MODE2_Pos)                    /*!< GPIO_T::MODE: MODE2 Mask               */
N
N#define GPIO_MODE_MODE3_Pos              (6)                                               /*!< GPIO_T::MODE: MODE3 Position           */
N#define GPIO_MODE_MODE3_Msk              (0x3ul << GPIO_MODE_MODE3_Pos)                    /*!< GPIO_T::MODE: MODE3 Mask               */
N
N#define GPIO_MODE_MODE4_Pos              (8)                                               /*!< GPIO_T::MODE: MODE4 Position           */
N#define GPIO_MODE_MODE4_Msk              (0x3ul << GPIO_MODE_MODE4_Pos)                    /*!< GPIO_T::MODE: MODE4 Mask               */
N
N#define GPIO_MODE_MODE5_Pos              (10)                                              /*!< GPIO_T::MODE: MODE5 Position           */
N#define GPIO_MODE_MODE5_Msk              (0x3ul << GPIO_MODE_MODE5_Pos)                    /*!< GPIO_T::MODE: MODE5 Mask               */
N
N#define GPIO_MODE_MODE6_Pos              (12)                                              /*!< GPIO_T::MODE: MODE6 Position           */
N#define GPIO_MODE_MODE6_Msk              (0x3ul << GPIO_MODE_MODE6_Pos)                    /*!< GPIO_T::MODE: MODE6 Mask               */
N
N#define GPIO_MODE_MODE7_Pos              (14)                                              /*!< GPIO_T::MODE: MODE7 Position           */
N#define GPIO_MODE_MODE7_Msk              (0x3ul << GPIO_MODE_MODE7_Pos)                    /*!< GPIO_T::MODE: MODE7 Mask               */
N
N#define GPIO_MODE_MODE8_Pos              (16)                                              /*!< GPIO_T::MODE: MODE8 Position           */
N#define GPIO_MODE_MODE8_Msk              (0x3ul << GPIO_MODE_MODE8_Pos)                    /*!< GPIO_T::MODE: MODE8 Mask               */
N
N#define GPIO_MODE_MODE9_Pos              (18)                                              /*!< GPIO_T::MODE: MODE9 Position           */
N#define GPIO_MODE_MODE9_Msk              (0x3ul << GPIO_MODE_MODE9_Pos)                    /*!< GPIO_T::MODE: MODE9 Mask               */
N
N#define GPIO_MODE_MODE10_Pos             (20)                                              /*!< GPIO_T::MODE: MODE10 Position          */
N#define GPIO_MODE_MODE10_Msk             (0x3ul << GPIO_MODE_MODE10_Pos)                   /*!< GPIO_T::MODE: MODE10 Mask              */
N
N#define GPIO_MODE_MODE11_Pos             (22)                                              /*!< GPIO_T::MODE: MODE11 Position          */
N#define GPIO_MODE_MODE11_Msk             (0x3ul << GPIO_MODE_MODE11_Pos)                   /*!< GPIO_T::MODE: MODE11 Mask              */
N
N#define GPIO_MODE_MODE12_Pos             (24)                                              /*!< GPIO_T::MODE: MODE12 Position          */
N#define GPIO_MODE_MODE12_Msk             (0x3ul << GPIO_MODE_MODE12_Pos)                   /*!< GPIO_T::MODE: MODE12 Mask              */
N
N#define GPIO_MODE_MODE13_Pos             (26)                                              /*!< GPIO_T::MODE: MODE13 Position          */
N#define GPIO_MODE_MODE13_Msk             (0x3ul << GPIO_MODE_MODE13_Pos)                   /*!< GPIO_T::MODE: MODE13 Mask              */
N
N#define GPIO_MODE_MODE14_Pos             (28)                                              /*!< GPIO_T::MODE: MODE14 Position          */
N#define GPIO_MODE_MODE14_Msk             (0x3ul << GPIO_MODE_MODE14_Pos)                   /*!< GPIO_T::MODE: MODE14 Mask              */
N
N#define GPIO_MODE_MODE15_Pos             (30)                                              /*!< GPIO_T::MODE: MODE15 Position          */
N#define GPIO_MODE_MODE15_Msk             (0x3ul << GPIO_MODE_MODE15_Pos)                   /*!< GPIO_T::MODE: MODE15 Mask              */
N
N#define GPIO_DINOFF_DINOFF0_Pos          (16)                                              /*!< GPIO_T::DINOFF: DINOFF0 Position       */
N#define GPIO_DINOFF_DINOFF0_Msk          (0x1ul << GPIO_DINOFF_DINOFF0_Pos)                /*!< GPIO_T::DINOFF: DINOFF0 Mask           */
N
N#define GPIO_DINOFF_DINOFF1_Pos          (17)                                              /*!< GPIO_T::DINOFF: DINOFF1 Position       */
N#define GPIO_DINOFF_DINOFF1_Msk          (0x1ul << GPIO_DINOFF_DINOFF1_Pos)                /*!< GPIO_T::DINOFF: DINOFF1 Mask           */
N
N#define GPIO_DINOFF_DINOFF2_Pos          (18)                                              /*!< GPIO_T::DINOFF: DINOFF2 Position       */
N#define GPIO_DINOFF_DINOFF2_Msk          (0x1ul << GPIO_DINOFF_DINOFF2_Pos)                /*!< GPIO_T::DINOFF: DINOFF2 Mask           */
N
N#define GPIO_DINOFF_DINOFF3_Pos          (19)                                              /*!< GPIO_T::DINOFF: DINOFF3 Position       */
N#define GPIO_DINOFF_DINOFF3_Msk          (0x1ul << GPIO_DINOFF_DINOFF3_Pos)                /*!< GPIO_T::DINOFF: DINOFF3 Mask           */
N
N#define GPIO_DINOFF_DINOFF4_Pos          (20)                                              /*!< GPIO_T::DINOFF: DINOFF4 Position       */
N#define GPIO_DINOFF_DINOFF4_Msk          (0x1ul << GPIO_DINOFF_DINOFF4_Pos)                /*!< GPIO_T::DINOFF: DINOFF4 Mask           */
N
N#define GPIO_DINOFF_DINOFF5_Pos          (21)                                              /*!< GPIO_T::DINOFF: DINOFF5 Position       */
N#define GPIO_DINOFF_DINOFF5_Msk          (0x1ul << GPIO_DINOFF_DINOFF5_Pos)                /*!< GPIO_T::DINOFF: DINOFF5 Mask           */
N
N#define GPIO_DINOFF_DINOFF6_Pos          (22)                                              /*!< GPIO_T::DINOFF: DINOFF6 Position       */
N#define GPIO_DINOFF_DINOFF6_Msk          (0x1ul << GPIO_DINOFF_DINOFF6_Pos)                /*!< GPIO_T::DINOFF: DINOFF6 Mask           */
N
N#define GPIO_DINOFF_DINOFF7_Pos          (23)                                              /*!< GPIO_T::DINOFF: DINOFF7 Position       */
N#define GPIO_DINOFF_DINOFF7_Msk          (0x1ul << GPIO_DINOFF_DINOFF7_Pos)                /*!< GPIO_T::DINOFF: DINOFF7 Mask           */
N
N#define GPIO_DINOFF_DINOFF8_Pos          (24)                                              /*!< GPIO_T::DINOFF: DINOFF8 Position       */
N#define GPIO_DINOFF_DINOFF8_Msk          (0x1ul << GPIO_DINOFF_DINOFF8_Pos)                /*!< GPIO_T::DINOFF: DINOFF8 Mask           */
N
N#define GPIO_DINOFF_DINOFF9_Pos          (25)                                              /*!< GPIO_T::DINOFF: DINOFF9 Position       */
N#define GPIO_DINOFF_DINOFF9_Msk          (0x1ul << GPIO_DINOFF_DINOFF9_Pos)                /*!< GPIO_T::DINOFF: DINOFF9 Mask           */
N
N#define GPIO_DINOFF_DINOFF10_Pos         (26)                                              /*!< GPIO_T::DINOFF: DINOFF10 Position      */
N#define GPIO_DINOFF_DINOFF10_Msk         (0x1ul << GPIO_DINOFF_DINOFF10_Pos)               /*!< GPIO_T::DINOFF: DINOFF10 Mask          */
N
N#define GPIO_DINOFF_DINOFF11_Pos         (27)                                              /*!< GPIO_T::DINOFF: DINOFF11 Position      */
N#define GPIO_DINOFF_DINOFF11_Msk         (0x1ul << GPIO_DINOFF_DINOFF11_Pos)               /*!< GPIO_T::DINOFF: DINOFF11 Mask          */
N
N#define GPIO_DINOFF_DINOFF12_Pos         (28)                                              /*!< GPIO_T::DINOFF: DINOFF12 Position      */
N#define GPIO_DINOFF_DINOFF12_Msk         (0x1ul << GPIO_DINOFF_DINOFF12_Pos)               /*!< GPIO_T::DINOFF: DINOFF12 Mask          */
N
N#define GPIO_DINOFF_DINOFF13_Pos         (29)                                              /*!< GPIO_T::DINOFF: DINOFF13 Position      */
N#define GPIO_DINOFF_DINOFF13_Msk         (0x1ul << GPIO_DINOFF_DINOFF13_Pos)               /*!< GPIO_T::DINOFF: DINOFF13 Mask          */
N
N#define GPIO_DINOFF_DINOFF14_Pos         (30)                                              /*!< GPIO_T::DINOFF: DINOFF14 Position      */
N#define GPIO_DINOFF_DINOFF14_Msk         (0x1ul << GPIO_DINOFF_DINOFF14_Pos)               /*!< GPIO_T::DINOFF: DINOFF14 Mask          */
N
N#define GPIO_DINOFF_DINOFF15_Pos         (31)                                              /*!< GPIO_T::DINOFF: DINOFF15 Position      */
N#define GPIO_DINOFF_DINOFF15_Msk         (0x1ul << GPIO_DINOFF_DINOFF15_Pos)               /*!< GPIO_T::DINOFF: DINOFF15 Mask          */
N
N#define GPIO_DOUT_DOUT0_Pos              (0)                                               /*!< GPIO_T::DOUT: DOUT0 Position           */
N#define GPIO_DOUT_DOUT0_Msk              (0x1ul << GPIO_DOUT_DOUT0_Pos)                    /*!< GPIO_T::DOUT: DOUT0 Mask               */
N
N#define GPIO_DOUT_DOUT1_Pos              (1)                                               /*!< GPIO_T::DOUT: DOUT1 Position           */
N#define GPIO_DOUT_DOUT1_Msk              (0x1ul << GPIO_DOUT_DOUT1_Pos)                    /*!< GPIO_T::DOUT: DOUT1 Mask               */
N
N#define GPIO_DOUT_DOUT2_Pos              (2)                                               /*!< GPIO_T::DOUT: DOUT2 Position           */
N#define GPIO_DOUT_DOUT2_Msk              (0x1ul << GPIO_DOUT_DOUT2_Pos)                    /*!< GPIO_T::DOUT: DOUT2 Mask               */
N
N#define GPIO_DOUT_DOUT3_Pos              (3)                                               /*!< GPIO_T::DOUT: DOUT3 Position           */
N#define GPIO_DOUT_DOUT3_Msk              (0x1ul << GPIO_DOUT_DOUT3_Pos)                    /*!< GPIO_T::DOUT: DOUT3 Mask               */
N
N#define GPIO_DOUT_DOUT4_Pos              (4)                                               /*!< GPIO_T::DOUT: DOUT4 Position           */
N#define GPIO_DOUT_DOUT4_Msk              (0x1ul << GPIO_DOUT_DOUT4_Pos)                    /*!< GPIO_T::DOUT: DOUT4 Mask               */
N
N#define GPIO_DOUT_DOUT5_Pos              (5)                                               /*!< GPIO_T::DOUT: DOUT5 Position           */
N#define GPIO_DOUT_DOUT5_Msk              (0x1ul << GPIO_DOUT_DOUT5_Pos)                    /*!< GPIO_T::DOUT: DOUT5 Mask               */
N
N#define GPIO_DOUT_DOUT6_Pos              (6)                                               /*!< GPIO_T::DOUT: DOUT6 Position           */
N#define GPIO_DOUT_DOUT6_Msk              (0x1ul << GPIO_DOUT_DOUT6_Pos)                    /*!< GPIO_T::DOUT: DOUT6 Mask               */
N
N#define GPIO_DOUT_DOUT7_Pos              (7)                                               /*!< GPIO_T::DOUT: DOUT7 Position           */
N#define GPIO_DOUT_DOUT7_Msk              (0x1ul << GPIO_DOUT_DOUT7_Pos)                    /*!< GPIO_T::DOUT: DOUT7 Mask               */
N
N#define GPIO_DOUT_DOUT8_Pos              (8)                                               /*!< GPIO_T::DOUT: DOUT8 Position           */
N#define GPIO_DOUT_DOUT8_Msk              (0x1ul << GPIO_DOUT_DOUT8_Pos)                    /*!< GPIO_T::DOUT: DOUT8 Mask               */
N
N#define GPIO_DOUT_DOUT9_Pos              (9)                                               /*!< GPIO_T::DOUT: DOUT9 Position           */
N#define GPIO_DOUT_DOUT9_Msk              (0x1ul << GPIO_DOUT_DOUT9_Pos)                    /*!< GPIO_T::DOUT: DOUT9 Mask               */
N
N#define GPIO_DOUT_DOUT10_Pos             (10)                                              /*!< GPIO_T::DOUT: DOUT10 Position          */
N#define GPIO_DOUT_DOUT10_Msk             (0x1ul << GPIO_DOUT_DOUT10_Pos)                   /*!< GPIO_T::DOUT: DOUT10 Mask              */
N
N#define GPIO_DOUT_DOUT11_Pos             (11)                                              /*!< GPIO_T::DOUT: DOUT11 Position          */
N#define GPIO_DOUT_DOUT11_Msk             (0x1ul << GPIO_DOUT_DOUT11_Pos)                   /*!< GPIO_T::DOUT: DOUT11 Mask              */
N
N#define GPIO_DOUT_DOUT12_Pos             (12)                                              /*!< GPIO_T::DOUT: DOUT12 Position          */
N#define GPIO_DOUT_DOUT12_Msk             (0x1ul << GPIO_DOUT_DOUT12_Pos)                   /*!< GPIO_T::DOUT: DOUT12 Mask              */
N
N#define GPIO_DOUT_DOUT13_Pos             (13)                                              /*!< GPIO_T::DOUT: DOUT13 Position          */
N#define GPIO_DOUT_DOUT13_Msk             (0x1ul << GPIO_DOUT_DOUT13_Pos)                   /*!< GPIO_T::DOUT: DOUT13 Mask              */
N
N#define GPIO_DOUT_DOUT14_Pos             (14)                                              /*!< GPIO_T::DOUT: DOUT14 Position          */
N#define GPIO_DOUT_DOUT14_Msk             (0x1ul << GPIO_DOUT_DOUT14_Pos)                   /*!< GPIO_T::DOUT: DOUT14 Mask              */
N
N#define GPIO_DOUT_DOUT15_Pos             (15)                                              /*!< GPIO_T::DOUT: DOUT15 Position          */
N#define GPIO_DOUT_DOUT15_Msk             (0x1ul << GPIO_DOUT_DOUT15_Pos)                   /*!< GPIO_T::DOUT: DOUT15 Mask              */
N
N#define GPIO_DATMSK_DATMSK0_Pos          (0)                                               /*!< GPIO_T::DATMSK: DATMSK0 Position       */
N#define GPIO_DATMSK_DATMSK0_Msk          (0x1ul << GPIO_DATMSK_DATMSK0_Pos)                /*!< GPIO_T::DATMSK: DATMSK0 Mask           */
N
N#define GPIO_DATMSK_DATMSK1_Pos          (1)                                               /*!< GPIO_T::DATMSK: DATMSK1 Position       */
N#define GPIO_DATMSK_DATMSK1_Msk          (0x1ul << GPIO_DATMSK_DATMSK1_Pos)                /*!< GPIO_T::DATMSK: DATMSK1 Mask           */
N
N#define GPIO_DATMSK_DATMSK2_Pos          (2)                                               /*!< GPIO_T::DATMSK: DATMSK2 Position       */
N#define GPIO_DATMSK_DATMSK2_Msk          (0x1ul << GPIO_DATMSK_DATMSK2_Pos)                /*!< GPIO_T::DATMSK: DATMSK2 Mask           */
N
N#define GPIO_DATMSK_DATMSK3_Pos          (3)                                               /*!< GPIO_T::DATMSK: DATMSK3 Position       */
N#define GPIO_DATMSK_DATMSK3_Msk          (0x1ul << GPIO_DATMSK_DATMSK3_Pos)                /*!< GPIO_T::DATMSK: DATMSK3 Mask           */
N
N#define GPIO_DATMSK_DATMSK4_Pos          (4)                                               /*!< GPIO_T::DATMSK: DATMSK4 Position       */
N#define GPIO_DATMSK_DATMSK4_Msk          (0x1ul << GPIO_DATMSK_DATMSK4_Pos)                /*!< GPIO_T::DATMSK: DATMSK4 Mask           */
N
N#define GPIO_DATMSK_DATMSK5_Pos          (5)                                               /*!< GPIO_T::DATMSK: DATMSK5 Position       */
N#define GPIO_DATMSK_DATMSK5_Msk          (0x1ul << GPIO_DATMSK_DATMSK5_Pos)                /*!< GPIO_T::DATMSK: DATMSK5 Mask           */
N
N#define GPIO_DATMSK_DATMSK6_Pos          (6)                                               /*!< GPIO_T::DATMSK: DATMSK6 Position       */
N#define GPIO_DATMSK_DATMSK6_Msk          (0x1ul << GPIO_DATMSK_DATMSK6_Pos)                /*!< GPIO_T::DATMSK: DATMSK6 Mask           */
N
N#define GPIO_DATMSK_DATMSK7_Pos          (7)                                               /*!< GPIO_T::DATMSK: DATMSK7 Position       */
N#define GPIO_DATMSK_DATMSK7_Msk          (0x1ul << GPIO_DATMSK_DATMSK7_Pos)                /*!< GPIO_T::DATMSK: DATMSK7 Mask           */
N
N#define GPIO_DATMSK_DATMSK8_Pos          (8)                                               /*!< GPIO_T::DATMSK: DATMSK8 Position       */
N#define GPIO_DATMSK_DATMSK8_Msk          (0x1ul << GPIO_DATMSK_DATMSK8_Pos)                /*!< GPIO_T::DATMSK: DATMSK8 Mask           */
N
N#define GPIO_DATMSK_DATMSK9_Pos          (9)                                               /*!< GPIO_T::DATMSK: DATMSK9 Position       */
N#define GPIO_DATMSK_DATMSK9_Msk          (0x1ul << GPIO_DATMSK_DATMSK9_Pos)                /*!< GPIO_T::DATMSK: DATMSK9 Mask           */
N
N#define GPIO_DATMSK_DATMSK10_Pos         (10)                                              /*!< GPIO_T::DATMSK: DATMSK10 Position      */
N#define GPIO_DATMSK_DATMSK10_Msk         (0x1ul << GPIO_DATMSK_DATMSK10_Pos)               /*!< GPIO_T::DATMSK: DATMSK10 Mask          */
N
N#define GPIO_DATMSK_DATMSK11_Pos         (11)                                              /*!< GPIO_T::DATMSK: DATMSK11 Position      */
N#define GPIO_DATMSK_DATMSK11_Msk         (0x1ul << GPIO_DATMSK_DATMSK11_Pos)               /*!< GPIO_T::DATMSK: DATMSK11 Mask          */
N
N#define GPIO_DATMSK_DATMSK12_Pos         (12)                                              /*!< GPIO_T::DATMSK: DATMSK12 Position      */
N#define GPIO_DATMSK_DATMSK12_Msk         (0x1ul << GPIO_DATMSK_DATMSK12_Pos)               /*!< GPIO_T::DATMSK: DATMSK12 Mask          */
N
N#define GPIO_DATMSK_DATMSK13_Pos         (13)                                              /*!< GPIO_T::DATMSK: DATMSK13 Position      */
N#define GPIO_DATMSK_DATMSK13_Msk         (0x1ul << GPIO_DATMSK_DATMSK13_Pos)               /*!< GPIO_T::DATMSK: DATMSK13 Mask          */
N
N#define GPIO_DATMSK_DATMSK14_Pos         (14)                                              /*!< GPIO_T::DATMSK: DATMSK14 Position      */
N#define GPIO_DATMSK_DATMSK14_Msk         (0x1ul << GPIO_DATMSK_DATMSK14_Pos)               /*!< GPIO_T::DATMSK: DATMSK14 Mask          */
N
N#define GPIO_DATMSK_DATMSK15_Pos         (15)                                              /*!< GPIO_T::DATMSK: DATMSK15 Position      */
N#define GPIO_DATMSK_DATMSK15_Msk         (0x1ul << GPIO_DATMSK_DATMSK15_Pos)               /*!< GPIO_T::DATMSK: DATMSK15 Mask          */
N
N#define GPIO_PIN_PIN0_Pos                (0)                                               /*!< GPIO_T::PIN: PIN0 Position             */
N#define GPIO_PIN_PIN0_Msk                (0x1ul << GPIO_PIN_PIN0_Pos)                      /*!< GPIO_T::PIN: PIN0 Mask                 */
N
N#define GPIO_PIN_PIN1_Pos                (1)                                               /*!< GPIO_T::PIN: PIN1 Position             */
N#define GPIO_PIN_PIN1_Msk                (0x1ul << GPIO_PIN_PIN1_Pos)                      /*!< GPIO_T::PIN: PIN1 Mask                 */
N
N#define GPIO_PIN_PIN2_Pos                (2)                                               /*!< GPIO_T::PIN: PIN2 Position             */
N#define GPIO_PIN_PIN2_Msk                (0x1ul << GPIO_PIN_PIN2_Pos)                      /*!< GPIO_T::PIN: PIN2 Mask                 */
N
N#define GPIO_PIN_PIN3_Pos                (3)                                               /*!< GPIO_T::PIN: PIN3 Position             */
N#define GPIO_PIN_PIN3_Msk                (0x1ul << GPIO_PIN_PIN3_Pos)                      /*!< GPIO_T::PIN: PIN3 Mask                 */
N
N#define GPIO_PIN_PIN4_Pos                (4)                                               /*!< GPIO_T::PIN: PIN4 Position             */
N#define GPIO_PIN_PIN4_Msk                (0x1ul << GPIO_PIN_PIN4_Pos)                      /*!< GPIO_T::PIN: PIN4 Mask                 */
N
N#define GPIO_PIN_PIN5_Pos                (5)                                               /*!< GPIO_T::PIN: PIN5 Position             */
N#define GPIO_PIN_PIN5_Msk                (0x1ul << GPIO_PIN_PIN5_Pos)                      /*!< GPIO_T::PIN: PIN5 Mask                 */
N
N#define GPIO_PIN_PIN6_Pos                (6)                                               /*!< GPIO_T::PIN: PIN6 Position             */
N#define GPIO_PIN_PIN6_Msk                (0x1ul << GPIO_PIN_PIN6_Pos)                      /*!< GPIO_T::PIN: PIN6 Mask                 */
N
N#define GPIO_PIN_PIN7_Pos                (7)                                               /*!< GPIO_T::PIN: PIN7 Position             */
N#define GPIO_PIN_PIN7_Msk                (0x1ul << GPIO_PIN_PIN7_Pos)                      /*!< GPIO_T::PIN: PIN7 Mask                 */
N
N#define GPIO_PIN_PIN8_Pos                (8)                                               /*!< GPIO_T::PIN: PIN8 Position             */
N#define GPIO_PIN_PIN8_Msk                (0x1ul << GPIO_PIN_PIN8_Pos)                      /*!< GPIO_T::PIN: PIN8 Mask                 */
N
N#define GPIO_PIN_PIN9_Pos                (9)                                               /*!< GPIO_T::PIN: PIN9 Position             */
N#define GPIO_PIN_PIN9_Msk                (0x1ul << GPIO_PIN_PIN9_Pos)                      /*!< GPIO_T::PIN: PIN9 Mask                 */
N
N#define GPIO_PIN_PIN10_Pos               (10)                                              /*!< GPIO_T::PIN: PIN10 Position            */
N#define GPIO_PIN_PIN10_Msk               (0x1ul << GPIO_PIN_PIN10_Pos)                     /*!< GPIO_T::PIN: PIN10 Mask                */
N
N#define GPIO_PIN_PIN11_Pos               (11)                                              /*!< GPIO_T::PIN: PIN11 Position            */
N#define GPIO_PIN_PIN11_Msk               (0x1ul << GPIO_PIN_PIN11_Pos)                     /*!< GPIO_T::PIN: PIN11 Mask                */
N
N#define GPIO_PIN_PIN12_Pos               (12)                                              /*!< GPIO_T::PIN: PIN12 Position            */
N#define GPIO_PIN_PIN12_Msk               (0x1ul << GPIO_PIN_PIN12_Pos)                     /*!< GPIO_T::PIN: PIN12 Mask                */
N
N#define GPIO_PIN_PIN13_Pos               (13)                                              /*!< GPIO_T::PIN: PIN13 Position            */
N#define GPIO_PIN_PIN13_Msk               (0x1ul << GPIO_PIN_PIN13_Pos)                     /*!< GPIO_T::PIN: PIN13 Mask                */
N
N#define GPIO_PIN_PIN14_Pos               (14)                                              /*!< GPIO_T::PIN: PIN14 Position            */
N#define GPIO_PIN_PIN14_Msk               (0x1ul << GPIO_PIN_PIN14_Pos)                     /*!< GPIO_T::PIN: PIN14 Mask                */
N
N#define GPIO_PIN_PIN15_Pos               (15)                                              /*!< GPIO_T::PIN: PIN15 Position            */
N#define GPIO_PIN_PIN15_Msk               (0x1ul << GPIO_PIN_PIN15_Pos)                     /*!< GPIO_T::PIN: PIN15 Mask                */
N
N#define GPIO_DBEN_DBEN0_Pos              (0)                                               /*!< GPIO_T::DBEN: DBEN0 Position           */
N#define GPIO_DBEN_DBEN0_Msk              (0x1ul << GPIO_DBEN_DBEN0_Pos)                    /*!< GPIO_T::DBEN: DBEN0 Mask               */
N
N#define GPIO_DBEN_DBEN1_Pos              (1)                                               /*!< GPIO_T::DBEN: DBEN1 Position           */
N#define GPIO_DBEN_DBEN1_Msk              (0x1ul << GPIO_DBEN_DBEN1_Pos)                    /*!< GPIO_T::DBEN: DBEN1 Mask               */
N
N#define GPIO_DBEN_DBEN2_Pos              (2)                                               /*!< GPIO_T::DBEN: DBEN2 Position           */
N#define GPIO_DBEN_DBEN2_Msk              (0x1ul << GPIO_DBEN_DBEN2_Pos)                    /*!< GPIO_T::DBEN: DBEN2 Mask               */
N
N#define GPIO_DBEN_DBEN3_Pos              (3)                                               /*!< GPIO_T::DBEN: DBEN3 Position           */
N#define GPIO_DBEN_DBEN3_Msk              (0x1ul << GPIO_DBEN_DBEN3_Pos)                    /*!< GPIO_T::DBEN: DBEN3 Mask               */
N
N#define GPIO_DBEN_DBEN4_Pos              (4)                                               /*!< GPIO_T::DBEN: DBEN4 Position           */
N#define GPIO_DBEN_DBEN4_Msk              (0x1ul << GPIO_DBEN_DBEN4_Pos)                    /*!< GPIO_T::DBEN: DBEN4 Mask               */
N
N#define GPIO_DBEN_DBEN5_Pos              (5)                                               /*!< GPIO_T::DBEN: DBEN5 Position           */
N#define GPIO_DBEN_DBEN5_Msk              (0x1ul << GPIO_DBEN_DBEN5_Pos)                    /*!< GPIO_T::DBEN: DBEN5 Mask               */
N
N#define GPIO_DBEN_DBEN6_Pos              (6)                                               /*!< GPIO_T::DBEN: DBEN6 Position           */
N#define GPIO_DBEN_DBEN6_Msk              (0x1ul << GPIO_DBEN_DBEN6_Pos)                    /*!< GPIO_T::DBEN: DBEN6 Mask               */
N
N#define GPIO_DBEN_DBEN7_Pos              (7)                                               /*!< GPIO_T::DBEN: DBEN7 Position           */
N#define GPIO_DBEN_DBEN7_Msk              (0x1ul << GPIO_DBEN_DBEN7_Pos)                    /*!< GPIO_T::DBEN: DBEN7 Mask               */
N
N#define GPIO_DBEN_DBEN8_Pos              (8)                                               /*!< GPIO_T::DBEN: DBEN8 Position           */
N#define GPIO_DBEN_DBEN8_Msk              (0x1ul << GPIO_DBEN_DBEN8_Pos)                    /*!< GPIO_T::DBEN: DBEN8 Mask               */
N
N#define GPIO_DBEN_DBEN9_Pos              (9)                                               /*!< GPIO_T::DBEN: DBEN9 Position           */
N#define GPIO_DBEN_DBEN9_Msk              (0x1ul << GPIO_DBEN_DBEN9_Pos)                    /*!< GPIO_T::DBEN: DBEN9 Mask               */
N
N#define GPIO_DBEN_DBEN10_Pos             (10)                                              /*!< GPIO_T::DBEN: DBEN10 Position          */
N#define GPIO_DBEN_DBEN10_Msk             (0x1ul << GPIO_DBEN_DBEN10_Pos)                   /*!< GPIO_T::DBEN: DBEN10 Mask              */
N
N#define GPIO_DBEN_DBEN11_Pos             (11)                                              /*!< GPIO_T::DBEN: DBEN11 Position          */
N#define GPIO_DBEN_DBEN11_Msk             (0x1ul << GPIO_DBEN_DBEN11_Pos)                   /*!< GPIO_T::DBEN: DBEN11 Mask              */
N
N#define GPIO_DBEN_DBEN12_Pos             (12)                                              /*!< GPIO_T::DBEN: DBEN12 Position          */
N#define GPIO_DBEN_DBEN12_Msk             (0x1ul << GPIO_DBEN_DBEN12_Pos)                   /*!< GPIO_T::DBEN: DBEN12 Mask              */
N
N#define GPIO_DBEN_DBEN13_Pos             (13)                                              /*!< GPIO_T::DBEN: DBEN13 Position          */
N#define GPIO_DBEN_DBEN13_Msk             (0x1ul << GPIO_DBEN_DBEN13_Pos)                   /*!< GPIO_T::DBEN: DBEN13 Mask              */
N
N#define GPIO_DBEN_DBEN14_Pos             (14)                                              /*!< GPIO_T::DBEN: DBEN14 Position          */
N#define GPIO_DBEN_DBEN14_Msk             (0x1ul << GPIO_DBEN_DBEN14_Pos)                   /*!< GPIO_T::DBEN: DBEN14 Mask              */
N
N#define GPIO_DBEN_DBEN15_Pos             (15)                                              /*!< GPIO_T::DBEN: DBEN15 Position          */
N#define GPIO_DBEN_DBEN15_Msk             (0x1ul << GPIO_DBEN_DBEN15_Pos)                   /*!< GPIO_T::DBEN: DBEN15 Mask              */
N
N#define GPIO_INTTYPE_TYPE0_Pos           (0)                                               /*!< GPIO_T::INTTYPE: TYPE0 Position        */
N#define GPIO_INTTYPE_TYPE0_Msk           (0x1ul << GPIO_INTTYPE_TYPE0_Pos)                 /*!< GPIO_T::INTTYPE: TYPE0 Mask            */
N
N#define GPIO_INTTYPE_TYPE1_Pos           (1)                                               /*!< GPIO_T::INTTYPE: TYPE1 Position        */
N#define GPIO_INTTYPE_TYPE1_Msk           (0x1ul << GPIO_INTTYPE_TYPE1_Pos)                 /*!< GPIO_T::INTTYPE: TYPE1 Mask            */
N
N#define GPIO_INTTYPE_TYPE2_Pos           (2)                                               /*!< GPIO_T::INTTYPE: TYPE2 Position        */
N#define GPIO_INTTYPE_TYPE2_Msk           (0x1ul << GPIO_INTTYPE_TYPE2_Pos)                 /*!< GPIO_T::INTTYPE: TYPE2 Mask            */
N
N#define GPIO_INTTYPE_TYPE3_Pos           (3)                                               /*!< GPIO_T::INTTYPE: TYPE3 Position        */
N#define GPIO_INTTYPE_TYPE3_Msk           (0x1ul << GPIO_INTTYPE_TYPE3_Pos)                 /*!< GPIO_T::INTTYPE: TYPE3 Mask            */
N
N#define GPIO_INTTYPE_TYPE4_Pos           (4)                                               /*!< GPIO_T::INTTYPE: TYPE4 Position        */
N#define GPIO_INTTYPE_TYPE4_Msk           (0x1ul << GPIO_INTTYPE_TYPE4_Pos)                 /*!< GPIO_T::INTTYPE: TYPE4 Mask            */
N
N#define GPIO_INTTYPE_TYPE5_Pos           (5)                                               /*!< GPIO_T::INTTYPE: TYPE5 Position        */
N#define GPIO_INTTYPE_TYPE5_Msk           (0x1ul << GPIO_INTTYPE_TYPE5_Pos)                 /*!< GPIO_T::INTTYPE: TYPE5 Mask            */
N
N#define GPIO_INTTYPE_TYPE6_Pos           (6)                                               /*!< GPIO_T::INTTYPE: TYPE6 Position        */
N#define GPIO_INTTYPE_TYPE6_Msk           (0x1ul << GPIO_INTTYPE_TYPE6_Pos)                 /*!< GPIO_T::INTTYPE: TYPE6 Mask            */
N
N#define GPIO_INTTYPE_TYPE7_Pos           (7)                                               /*!< GPIO_T::INTTYPE: TYPE7 Position        */
N#define GPIO_INTTYPE_TYPE7_Msk           (0x1ul << GPIO_INTTYPE_TYPE7_Pos)                 /*!< GPIO_T::INTTYPE: TYPE7 Mask            */
N
N#define GPIO_INTTYPE_TYPE8_Pos           (8)                                               /*!< GPIO_T::INTTYPE: TYPE8 Position        */
N#define GPIO_INTTYPE_TYPE8_Msk           (0x1ul << GPIO_INTTYPE_TYPE8_Pos)                 /*!< GPIO_T::INTTYPE: TYPE8 Mask            */
N
N#define GPIO_INTTYPE_TYPE9_Pos           (9)                                               /*!< GPIO_T::INTTYPE: TYPE9 Position        */
N#define GPIO_INTTYPE_TYPE9_Msk           (0x1ul << GPIO_INTTYPE_TYPE9_Pos)                 /*!< GPIO_T::INTTYPE: TYPE9 Mask            */
N
N#define GPIO_INTTYPE_TYPE10_Pos          (10)                                              /*!< GPIO_T::INTTYPE: TYPE10 Position       */
N#define GPIO_INTTYPE_TYPE10_Msk          (0x1ul << GPIO_INTTYPE_TYPE10_Pos)                /*!< GPIO_T::INTTYPE: TYPE10 Mask           */
N
N#define GPIO_INTTYPE_TYPE11_Pos          (11)                                              /*!< GPIO_T::INTTYPE: TYPE11 Position       */
N#define GPIO_INTTYPE_TYPE11_Msk          (0x1ul << GPIO_INTTYPE_TYPE11_Pos)                /*!< GPIO_T::INTTYPE: TYPE11 Mask           */
N
N#define GPIO_INTTYPE_TYPE12_Pos          (12)                                              /*!< GPIO_T::INTTYPE: TYPE12 Position       */
N#define GPIO_INTTYPE_TYPE12_Msk          (0x1ul << GPIO_INTTYPE_TYPE12_Pos)                /*!< GPIO_T::INTTYPE: TYPE12 Mask           */
N
N#define GPIO_INTTYPE_TYPE13_Pos          (13)                                              /*!< GPIO_T::INTTYPE: TYPE13 Position       */
N#define GPIO_INTTYPE_TYPE13_Msk          (0x1ul << GPIO_INTTYPE_TYPE13_Pos)                /*!< GPIO_T::INTTYPE: TYPE13 Mask           */
N
N#define GPIO_INTTYPE_TYPE14_Pos          (14)                                              /*!< GPIO_T::INTTYPE: TYPE14 Position       */
N#define GPIO_INTTYPE_TYPE14_Msk          (0x1ul << GPIO_INTTYPE_TYPE14_Pos)                /*!< GPIO_T::INTTYPE: TYPE14 Mask           */
N
N#define GPIO_INTTYPE_TYPE15_Pos          (15)                                              /*!< GPIO_T::INTTYPE: TYPE15 Position       */
N#define GPIO_INTTYPE_TYPE15_Msk          (0x1ul << GPIO_INTTYPE_TYPE15_Pos)                /*!< GPIO_T::INTTYPE: TYPE15 Mask           */
N
N#define GPIO_INTEN_FLIEN0_Pos            (0)                                               /*!< GPIO_T::INTEN: FLIEN0 Position         */
N#define GPIO_INTEN_FLIEN0_Msk            (0x1ul << GPIO_INTEN_FLIEN0_Pos)                  /*!< GPIO_T::INTEN: FLIEN0 Mask             */
N
N#define GPIO_INTEN_FLIEN1_Pos            (1)                                               /*!< GPIO_T::INTEN: FLIEN1 Position         */
N#define GPIO_INTEN_FLIEN1_Msk            (0x1ul << GPIO_INTEN_FLIEN1_Pos)                  /*!< GPIO_T::INTEN: FLIEN1 Mask             */
N
N#define GPIO_INTEN_FLIEN2_Pos            (2)                                               /*!< GPIO_T::INTEN: FLIEN2 Position         */
N#define GPIO_INTEN_FLIEN2_Msk            (0x1ul << GPIO_INTEN_FLIEN2_Pos)                  /*!< GPIO_T::INTEN: FLIEN2 Mask             */
N
N#define GPIO_INTEN_FLIEN3_Pos            (3)                                               /*!< GPIO_T::INTEN: FLIEN3 Position         */
N#define GPIO_INTEN_FLIEN3_Msk            (0x1ul << GPIO_INTEN_FLIEN3_Pos)                  /*!< GPIO_T::INTEN: FLIEN3 Mask             */
N
N#define GPIO_INTEN_FLIEN4_Pos            (4)                                               /*!< GPIO_T::INTEN: FLIEN4 Position         */
N#define GPIO_INTEN_FLIEN4_Msk            (0x1ul << GPIO_INTEN_FLIEN4_Pos)                  /*!< GPIO_T::INTEN: FLIEN4 Mask             */
N
N#define GPIO_INTEN_FLIEN5_Pos            (5)                                               /*!< GPIO_T::INTEN: FLIEN5 Position         */
N#define GPIO_INTEN_FLIEN5_Msk            (0x1ul << GPIO_INTEN_FLIEN5_Pos)                  /*!< GPIO_T::INTEN: FLIEN5 Mask             */
N
N#define GPIO_INTEN_FLIEN6_Pos            (6)                                               /*!< GPIO_T::INTEN: FLIEN6 Position         */
N#define GPIO_INTEN_FLIEN6_Msk            (0x1ul << GPIO_INTEN_FLIEN6_Pos)                  /*!< GPIO_T::INTEN: FLIEN6 Mask             */
N
N#define GPIO_INTEN_FLIEN7_Pos            (7)                                               /*!< GPIO_T::INTEN: FLIEN7 Position         */
N#define GPIO_INTEN_FLIEN7_Msk            (0x1ul << GPIO_INTEN_FLIEN7_Pos)                  /*!< GPIO_T::INTEN: FLIEN7 Mask             */
N
N#define GPIO_INTEN_FLIEN8_Pos            (8)                                               /*!< GPIO_T::INTEN: FLIEN8 Position         */
N#define GPIO_INTEN_FLIEN8_Msk            (0x1ul << GPIO_INTEN_FLIEN8_Pos)                  /*!< GPIO_T::INTEN: FLIEN8 Mask             */
N
N#define GPIO_INTEN_FLIEN9_Pos            (9)                                               /*!< GPIO_T::INTEN: FLIEN9 Position         */
N#define GPIO_INTEN_FLIEN9_Msk            (0x1ul << GPIO_INTEN_FLIEN9_Pos)                  /*!< GPIO_T::INTEN: FLIEN9 Mask             */
N
N#define GPIO_INTEN_FLIEN10_Pos           (10)                                              /*!< GPIO_T::INTEN: FLIEN10 Position        */
N#define GPIO_INTEN_FLIEN10_Msk           (0x1ul << GPIO_INTEN_FLIEN10_Pos)                 /*!< GPIO_T::INTEN: FLIEN10 Mask            */
N
N#define GPIO_INTEN_FLIEN11_Pos           (11)                                              /*!< GPIO_T::INTEN: FLIEN11 Position        */
N#define GPIO_INTEN_FLIEN11_Msk           (0x1ul << GPIO_INTEN_FLIEN11_Pos)                 /*!< GPIO_T::INTEN: FLIEN11 Mask            */
N
N#define GPIO_INTEN_FLIEN12_Pos           (12)                                              /*!< GPIO_T::INTEN: FLIEN12 Position        */
N#define GPIO_INTEN_FLIEN12_Msk           (0x1ul << GPIO_INTEN_FLIEN12_Pos)                 /*!< GPIO_T::INTEN: FLIEN12 Mask            */
N
N#define GPIO_INTEN_FLIEN13_Pos           (13)                                              /*!< GPIO_T::INTEN: FLIEN13 Position        */
N#define GPIO_INTEN_FLIEN13_Msk           (0x1ul << GPIO_INTEN_FLIEN13_Pos)                 /*!< GPIO_T::INTEN: FLIEN13 Mask            */
N
N#define GPIO_INTEN_FLIEN14_Pos           (14)                                              /*!< GPIO_T::INTEN: FLIEN14 Position        */
N#define GPIO_INTEN_FLIEN14_Msk           (0x1ul << GPIO_INTEN_FLIEN14_Pos)                 /*!< GPIO_T::INTEN: FLIEN14 Mask            */
N
N#define GPIO_INTEN_FLIEN15_Pos           (15)                                              /*!< GPIO_T::INTEN: FLIEN15 Position        */
N#define GPIO_INTEN_FLIEN15_Msk           (0x1ul << GPIO_INTEN_FLIEN15_Pos)                 /*!< GPIO_T::INTEN: FLIEN15 Mask            */
N
N#define GPIO_INTEN_RHIEN0_Pos            (16)                                              /*!< GPIO_T::INTEN: RHIEN0 Position         */
N#define GPIO_INTEN_RHIEN0_Msk            (0x1ul << GPIO_INTEN_RHIEN0_Pos)                  /*!< GPIO_T::INTEN: RHIEN0 Mask             */
N
N#define GPIO_INTEN_RHIEN1_Pos            (17)                                              /*!< GPIO_T::INTEN: RHIEN1 Position         */
N#define GPIO_INTEN_RHIEN1_Msk            (0x1ul << GPIO_INTEN_RHIEN1_Pos)                  /*!< GPIO_T::INTEN: RHIEN1 Mask             */
N
N#define GPIO_INTEN_RHIEN2_Pos            (18)                                              /*!< GPIO_T::INTEN: RHIEN2 Position         */
N#define GPIO_INTEN_RHIEN2_Msk            (0x1ul << GPIO_INTEN_RHIEN2_Pos)                  /*!< GPIO_T::INTEN: RHIEN2 Mask             */
N
N#define GPIO_INTEN_RHIEN3_Pos            (19)                                              /*!< GPIO_T::INTEN: RHIEN3 Position         */
N#define GPIO_INTEN_RHIEN3_Msk            (0x1ul << GPIO_INTEN_RHIEN3_Pos)                  /*!< GPIO_T::INTEN: RHIEN3 Mask             */
N
N#define GPIO_INTEN_RHIEN4_Pos            (20)                                              /*!< GPIO_T::INTEN: RHIEN4 Position         */
N#define GPIO_INTEN_RHIEN4_Msk            (0x1ul << GPIO_INTEN_RHIEN4_Pos)                  /*!< GPIO_T::INTEN: RHIEN4 Mask             */
N
N#define GPIO_INTEN_RHIEN5_Pos            (21)                                              /*!< GPIO_T::INTEN: RHIEN5 Position         */
N#define GPIO_INTEN_RHIEN5_Msk            (0x1ul << GPIO_INTEN_RHIEN5_Pos)                  /*!< GPIO_T::INTEN: RHIEN5 Mask             */
N
N#define GPIO_INTEN_RHIEN6_Pos            (22)                                              /*!< GPIO_T::INTEN: RHIEN6 Position         */
N#define GPIO_INTEN_RHIEN6_Msk            (0x1ul << GPIO_INTEN_RHIEN6_Pos)                  /*!< GPIO_T::INTEN: RHIEN6 Mask             */
N
N#define GPIO_INTEN_RHIEN7_Pos            (23)                                              /*!< GPIO_T::INTEN: RHIEN7 Position         */
N#define GPIO_INTEN_RHIEN7_Msk            (0x1ul << GPIO_INTEN_RHIEN7_Pos)                  /*!< GPIO_T::INTEN: RHIEN7 Mask             */
N
N#define GPIO_INTEN_RHIEN8_Pos            (24)                                              /*!< GPIO_T::INTEN: RHIEN8 Position         */
N#define GPIO_INTEN_RHIEN8_Msk            (0x1ul << GPIO_INTEN_RHIEN8_Pos)                  /*!< GPIO_T::INTEN: RHIEN8 Mask             */
N
N#define GPIO_INTEN_RHIEN9_Pos            (25)                                              /*!< GPIO_T::INTEN: RHIEN9 Position         */
N#define GPIO_INTEN_RHIEN9_Msk            (0x1ul << GPIO_INTEN_RHIEN9_Pos)                  /*!< GPIO_T::INTEN: RHIEN9 Mask             */
N
N#define GPIO_INTEN_RHIEN10_Pos           (26)                                              /*!< GPIO_T::INTEN: RHIEN10 Position        */
N#define GPIO_INTEN_RHIEN10_Msk           (0x1ul << GPIO_INTEN_RHIEN10_Pos)                 /*!< GPIO_T::INTEN: RHIEN10 Mask            */
N
N#define GPIO_INTEN_RHIEN11_Pos           (27)                                              /*!< GPIO_T::INTEN: RHIEN11 Position        */
N#define GPIO_INTEN_RHIEN11_Msk           (0x1ul << GPIO_INTEN_RHIEN11_Pos)                 /*!< GPIO_T::INTEN: RHIEN11 Mask            */
N
N#define GPIO_INTEN_RHIEN12_Pos           (28)                                              /*!< GPIO_T::INTEN: RHIEN12 Position        */
N#define GPIO_INTEN_RHIEN12_Msk           (0x1ul << GPIO_INTEN_RHIEN12_Pos)                 /*!< GPIO_T::INTEN: RHIEN12 Mask            */
N
N#define GPIO_INTEN_RHIEN13_Pos           (29)                                              /*!< GPIO_T::INTEN: RHIEN13 Position        */
N#define GPIO_INTEN_RHIEN13_Msk           (0x1ul << GPIO_INTEN_RHIEN13_Pos)                 /*!< GPIO_T::INTEN: RHIEN13 Mask            */
N
N#define GPIO_INTEN_RHIEN14_Pos           (30)                                              /*!< GPIO_T::INTEN: RHIEN14 Position        */
N#define GPIO_INTEN_RHIEN14_Msk           (0x1ul << GPIO_INTEN_RHIEN14_Pos)                 /*!< GPIO_T::INTEN: RHIEN14 Mask            */
N
N#define GPIO_INTEN_RHIEN15_Pos           (31)                                              /*!< GPIO_T::INTEN: RHIEN15 Position        */
N#define GPIO_INTEN_RHIEN15_Msk           (0x1ul << GPIO_INTEN_RHIEN15_Pos)                 /*!< GPIO_T::INTEN: RHIEN15 Mask            */
N
N#define GPIO_INTSRC_INTSRC0_Pos          (0)                                               /*!< GPIO_T::INTSRC: INTSRC0 Position       */
N#define GPIO_INTSRC_INTSRC0_Msk          (0x1ul << GPIO_INTSRC_INTSRC0_Pos)                /*!< GPIO_T::INTSRC: INTSRC0 Mask           */
N
N#define GPIO_INTSRC_INTSRC1_Pos          (1)                                               /*!< GPIO_T::INTSRC: INTSRC1 Position       */
N#define GPIO_INTSRC_INTSRC1_Msk          (0x1ul << GPIO_INTSRC_INTSRC1_Pos)                /*!< GPIO_T::INTSRC: INTSRC1 Mask           */
N
N#define GPIO_INTSRC_INTSRC2_Pos          (2)                                               /*!< GPIO_T::INTSRC: INTSRC2 Position       */
N#define GPIO_INTSRC_INTSRC2_Msk          (0x1ul << GPIO_INTSRC_INTSRC2_Pos)                /*!< GPIO_T::INTSRC: INTSRC2 Mask           */
N
N#define GPIO_INTSRC_INTSRC3_Pos          (3)                                               /*!< GPIO_T::INTSRC: INTSRC3 Position       */
N#define GPIO_INTSRC_INTSRC3_Msk          (0x1ul << GPIO_INTSRC_INTSRC3_Pos)                /*!< GPIO_T::INTSRC: INTSRC3 Mask           */
N
N#define GPIO_INTSRC_INTSRC4_Pos          (4)                                               /*!< GPIO_T::INTSRC: INTSRC4 Position       */
N#define GPIO_INTSRC_INTSRC4_Msk          (0x1ul << GPIO_INTSRC_INTSRC4_Pos)                /*!< GPIO_T::INTSRC: INTSRC4 Mask           */
N
N#define GPIO_INTSRC_INTSRC5_Pos          (5)                                               /*!< GPIO_T::INTSRC: INTSRC5 Position       */
N#define GPIO_INTSRC_INTSRC5_Msk          (0x1ul << GPIO_INTSRC_INTSRC5_Pos)                /*!< GPIO_T::INTSRC: INTSRC5 Mask           */
N
N#define GPIO_INTSRC_INTSRC6_Pos          (6)                                               /*!< GPIO_T::INTSRC: INTSRC6 Position       */
N#define GPIO_INTSRC_INTSRC6_Msk          (0x1ul << GPIO_INTSRC_INTSRC6_Pos)                /*!< GPIO_T::INTSRC: INTSRC6 Mask           */
N
N#define GPIO_INTSRC_INTSRC7_Pos          (7)                                               /*!< GPIO_T::INTSRC: INTSRC7 Position       */
N#define GPIO_INTSRC_INTSRC7_Msk          (0x1ul << GPIO_INTSRC_INTSRC7_Pos)                /*!< GPIO_T::INTSRC: INTSRC7 Mask           */
N
N#define GPIO_INTSRC_INTSRC8_Pos          (8)                                               /*!< GPIO_T::INTSRC: INTSRC8 Position       */
N#define GPIO_INTSRC_INTSRC8_Msk          (0x1ul << GPIO_INTSRC_INTSRC8_Pos)                /*!< GPIO_T::INTSRC: INTSRC8 Mask           */
N
N#define GPIO_INTSRC_INTSRC9_Pos          (9)                                               /*!< GPIO_T::INTSRC: INTSRC9 Position       */
N#define GPIO_INTSRC_INTSRC9_Msk          (0x1ul << GPIO_INTSRC_INTSRC9_Pos)                /*!< GPIO_T::INTSRC: INTSRC9 Mask           */
N
N#define GPIO_INTSRC_INTSRC10_Pos         (10)                                              /*!< GPIO_T::INTSRC: INTSRC10 Position      */
N#define GPIO_INTSRC_INTSRC10_Msk         (0x1ul << GPIO_INTSRC_INTSRC10_Pos)               /*!< GPIO_T::INTSRC: INTSRC10 Mask          */
N
N#define GPIO_INTSRC_INTSRC11_Pos         (11)                                              /*!< GPIO_T::INTSRC: INTSRC11 Position      */
N#define GPIO_INTSRC_INTSRC11_Msk         (0x1ul << GPIO_INTSRC_INTSRC11_Pos)               /*!< GPIO_T::INTSRC: INTSRC11 Mask          */
N
N#define GPIO_INTSRC_INTSRC12_Pos         (12)                                              /*!< GPIO_T::INTSRC: INTSRC12 Position      */
N#define GPIO_INTSRC_INTSRC12_Msk         (0x1ul << GPIO_INTSRC_INTSRC12_Pos)               /*!< GPIO_T::INTSRC: INTSRC12 Mask          */
N
N#define GPIO_INTSRC_INTSRC13_Pos         (13)                                              /*!< GPIO_T::INTSRC: INTSRC13 Position      */
N#define GPIO_INTSRC_INTSRC13_Msk         (0x1ul << GPIO_INTSRC_INTSRC13_Pos)               /*!< GPIO_T::INTSRC: INTSRC13 Mask          */
N
N#define GPIO_INTSRC_INTSRC14_Pos         (14)                                              /*!< GPIO_T::INTSRC: INTSRC14 Position      */
N#define GPIO_INTSRC_INTSRC14_Msk         (0x1ul << GPIO_INTSRC_INTSRC14_Pos)               /*!< GPIO_T::INTSRC: INTSRC14 Mask          */
N
N#define GPIO_INTSRC_INTSRC15_Pos         (15)                                              /*!< GPIO_T::INTSRC: INTSRC15 Position      */
N#define GPIO_INTSRC_INTSRC15_Msk         (0x1ul << GPIO_INTSRC_INTSRC15_Pos)               /*!< GPIO_T::INTSRC: INTSRC15 Mask          */
N
N#define GPIO_DBCTL_DBCLKSEL_Pos          (0)                                               /*!< GPIO_DBCTL_T::DBCTL: DBCLKSEL Position */
N#define GPIO_DBCTL_DBCLKSEL_Msk          (0xful << GPIO_DBCTL_DBCLKSEL_Pos)                /*!< GPIO_DBCTL_T::DBCTL: DBCLKSEL Mask     */
N
N#define GPIO_DBCTL_DBCLKSRC_Pos          (4)                                               /*!< GPIO_DBCTL_T::DBCTL: DBCLKSRC Position */
N#define GPIO_DBCTL_DBCLKSRC_Msk          (0x1ul << GPIO_DBCTL_DBCLKSRC_Pos)                /*!< GPIO_DBCTL_T::DBCTL: DBCLKSRC Mask     */
N
N#define GPIO_DBCTL_ICLKON_Pos            (5)                                               /*!< GPIO_DBCTL_T::DBCTL: ICLKON Position   */
N#define GPIO_DBCTL_ICLKON_Msk            (0x1ul << GPIO_DBCTL_ICLKON_Pos)                  /*!< GPIO_DBCTL_T::DBCTL: ICLKON Mask       */
N
N#define GPIO_PDIO_PDIO_Pos               (0)                                               /*!< PDIO Position            */
N#define GPIO_PDIO_PDIO_Msk               (0x1ul << GPIO_PDIO_PDIO_Pos)                     /*!< PDIO Mask                */
N
N/**@}*/ /* GPIO_CONST */
N/**@}*/ /* end of GPIO register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __GPIO_REG_H__ */
L 167 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "hdiv_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\hdiv_reg.h" 1
N/**************************************************************************//**
N * @file     hdiv_reg.h
N * @version  V1.00
N * @brief    HDIV register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __HDIV_REG_H__
N#define __HDIV_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup HDIV Hardware Divider (HDIV)
N    Memory Mapped Structure for HDIV Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * DIVIDEND
N     * ===================================================================================================
N     * Offset: 0x00  Dividend Source Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |DIVIDEND  |Dividend Source
N     * |        |          |This register is given the dividend of divider before calculation starting.
N    */
N    __IO uint32_t DIVIDEND;
X    volatile uint32_t DIVIDEND;
N
N    /**
N     * DIVISOR
N     * ===================================================================================================
N     * Offset: 0x04  Divisor Source Resister
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |DIVISOR   |Divisor Source
N     * |        |          |This register is given the divisor of divider before calculation starts.
N     * |        |          |Note: When this register is written, hardware divider will start calculate.
N    */
N    __IO uint32_t DIVISOR;
X    volatile uint32_t DIVISOR;
N
N    /**
N     * QUOTIENT
N     * ===================================================================================================
N     * Offset: 0x08  Quotient Result Resister
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |QUOTIENT  |Quotient Result
N     * |        |          |This register holds the quotient result of divider after calculation complete.
N    */
N    __IO uint32_t QUOTIENT;
X    volatile uint32_t QUOTIENT;
N
N    /**
N     * REM
N     * ===================================================================================================
N     * Offset: 0x0C  Remainder Result Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |REM       |Remainder Result
N     * |        |          |The remainder of hardware divider is 16-bit sign integer (REM[15:0]) with sign extension
N     * |        |          |(REM[31:16]) to 32-bit integer.
N    */
N    __IO uint32_t REM;
X    volatile uint32_t REM;
N
N    /**
N     * STATUS
N     * ===================================================================================================
N     * Offset: 0x10  Divider Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |DIVBYZERO |Divisor Zero Warning
N     * |        |          |0 = The divisor is not 0.
N     * |        |          |1 = The divisor is 0.
N     * |        |          |Note: The DIVBYZERO flag is used to indicate divide-by-zero situation and updated whenever
N     * |        |          |HDIV_DIVISOR is written.
N     * |        |          |This register is read only.
N    */
N    __I  uint32_t STATUS;
X    volatile const  uint32_t STATUS;
N
N} HDIV_T;
N
N/**
N    @addtogroup HDIV_CONST HDIV Bit Field Definition
N    Constant Definitions for HDIV Controller
N@{ */
N
N#define HDIV_DIVIDEND_DIVIDEND_Pos       (0)                                               /*!< HDIV_T::DIVIDEND: DIVIDEND Position       */
N#define HDIV_DIVIDEND_DIVIDEND_Msk       (0xfffffffful << HDIV_DIVIDEND_DIVIDEND_Pos)      /*!< HDIV_T::DIVIDEND: DIVIDEND Mask           */
N
N#define HDIV_DIVISOR_DIVISOR_Pos         (0)                                               /*!< HDIV_T::DIVISOR: DIVISOR Position         */
N#define HDIV_DIVISOR_DIVISOR_Msk         (0xfffful << HDIV_DIVISOR_DIVISOR_Pos)            /*!< HDIV_T::DIVISOR: DIVISOR Mask             */
N
N#define HDIV_QUOTIENT_QUOTIENT_Pos       (0)                                               /*!< HDIV_T::QUOTIENT: QUOTIENT Position       */
N#define HDIV_QUOTIENT_QUOTIENT_Msk       (0xfffffffful << HDIV_QUOTIENT_QUOTIENT_Pos)      /*!< HDIV_T::QUOTIENT: QUOTIENT Mask           */
N
N#define HDIV_REM_REM_Pos                 (0)                                               /*!< HDIV_T::REM: REM Position                 */
N#define HDIV_REM_REM_Msk                 (0xfffffffful << HDIV_REM_REM_Pos)                /*!< HDIV_T::REM: REM Mask                     */
N
N#define HDIV_STATUS_DIVBYZERO_Pos        (1)                                               /*!< HDIV_T::STATUS: DIVBYZERO Position        */
N#define HDIV_STATUS_DIVBYZERO_Msk        (0x1ul << HDIV_STATUS_DIVBYZERO_Pos)              /*!< HDIV_T::STATUS: DIVBYZERO Mask            */
N
N/**@}*/ /* HDIV_CONST */
N/**@}*/ /* end of HDIV register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __HDIV_REG_H__ */
N
N
N/**@}*/ /* HDIV_CONST */
N/**@}*/ /* end of HDIV register group */
L 168 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "i2c_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\i2c_reg.h" 1
N/**************************************************************************//**
N * @file     i2c_reg.h
N * @version  V1.00
N * @brief    I2C register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __I2C_REG_H__
N#define __I2C_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup I2C Inter-IC Bus Controller (I2C)
N    Memory Mapped Structure for I2C Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var I2C_T::CTL0
N     * Offset: 0x00  I2C Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2]     |AA        |Assert Acknowledge Control
N     * |        |          |When AA =1 prior to address or data is received, an acknowledged (low level to SDA) will be returned during the acknowledge clock pulse on the SCL line when 1.) A slave is acknowledging the address sent from master, 2.) The receiver devices are acknowledging the data sent by transmitter.
N     * |        |          |When AA=0 prior to address or data received, a Not acknowledged (high level to SDA) will be returned during the acknowledge clock pulse on the SCL line.
N     * |[3]     |SI        |I2C Interrupt Flag
N     * |        |          |When a new I2C state is present in the I2C_STATUS0 register, the SI flag is set by hardware.
N     * |        |          |If bit INTEN (I2C_CTL0 [7]) is set, the I2C interrupt is requested.
N     * |        |          |SI must be cleared by software.
N     * |        |          |Clear SI by writing 1 to this bit.
N     * |[4]     |STO       |I2C STOP Control
N     * |        |          |In Master mode, setting STO to transmit a STOP condition to bus then I2C controller will check the bus condition if a STOP condition is detected.
N     * |        |          |This bit will be cleared by hardware automatically.
N     * |[5]     |STA       |I2C START Control
N     * |        |          |Setting STA to logic 1 to enter Master mode, the I2C hardware sends a START or repeat START condition to bus when the bus is free.
N     * |[6]     |I2CEN     |I2C Controller Enable Bit
N     * |        |          |Set to enable I2C serial function controller.
N     * |        |          |When I2CEN=1 the I2C serial function enable.
N     * |        |          |The multi-function pin function must set to SDA, and SCL of I2C function first.
N     * |        |          |0 = I2C controller Disabled.
N     * |        |          |1 = I2C controller Enabled.
N     * |[7]     |INTEN     |Enable Interrupt
N     * |        |          |0 = I2C interrupt Disabled.
N     * |        |          |1 = I2C interrupt Enabled.
N     * @var I2C_T::ADDR0
N     * Offset: 0x04  I2C Slave Address Register0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |GC        |General Call Function
N     * |        |          |0 = General Call Function Disabled.
N     * |        |          |1 = General Call Function Enabled.
N     * |[7:1]   |ADDR      |I2C Address
N     * |        |          |The content of this register is irrelevant when I2C is in Master mode.
N     * |        |          |In the slave mode, the seven most significant bits must be loaded with the chip's own address.
N     * |        |          |The I2C hardware will react if either of the address is matched.
N     * |        |          |Note: When software set 7'h00, the address can not be used.
N     * @var I2C_T::DAT
N     * Offset: 0x08  I2C Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |DAT       |I2C Data
N     * |        |          |Bit [7:0] is located with the 8-bit transferred/received data of I2C serial port.
N     * @var I2C_T::STATUS0
N     * Offset: 0x0C  I2C Status Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |STATUS    |I2C Status
N     * |        |          |The three least significant bits are always 0.
N     * |        |          |The five most significant bits contain the status code.
N     * |        |          |There are 28 possible status codes.
N     * |        |          |When the content of I2C_STATUS0 is F8H, no serial interrupt is requested.
N     * |        |          |Others I2C_STATUS0 values correspond to defined I2C states.
N     * |        |          |When each of these states is entered, a status interrupt is requested (SI = 1).
N     * |        |          |A valid status code is present in I2C_STATUS0 one cycle after SI is set by hardware and is still present one cycle after SI has been reset by software.
N     * |        |          |In addition, states 00H stands for a Bus Error.
N     * |        |          |A Bus Error occurs when a START or STOP condition is present at an illegal position in the formation frame.
N     * |        |          |Example of illegal position are during the serial transfer of an address byte, a data byte or an acknowledge bit.
N     * @var I2C_T::CLKDIV
N     * Offset: 0x10  I2C Clock Divided Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |DIVIDER   |I2C Clock Divided
N     * |        |          |Indicates the I2C clock rate: Data Baud Rate of I2C = (system clock) / (4x (I2C_CLKDIV+1)).
N     * |        |          |Note: The minimum value of I2C_CLKDIV is 4.
N     * @var I2C_T::TOCTL
N     * Offset: 0x14  I2C Time-out Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TOIF      |Time-out Flag
N     * |        |          |This bit is set by hardware when I2C time-out happened and it can interrupt CPU if I2C interrupt enable bit (INTEN) is set to 1.
N     * |        |          |Note: Software can write 1 to clear this bit.
N     * |[1]     |TOCDIV4   |Time-out Counter Input Clock Divided by 4
N     * |        |          |When enabled, the time-out period is extended 4 times.
N     * |        |          |0 = Time-out period is extend 4 times Disabled.
N     * |        |          |1 = Time-out period is extend 4 times Enabled.
N     * |[2]     |TOCEN     |Time-out Counter Enable Bit
N     * |        |          |When enabled, the 14-bit time-out counter will start counting when SI is cleared.
N     * |        |          |Setting flag SI to '1' will reset counter and re-start up counting after SI is cleared.
N     * |        |          |0 = Time-out counter Disabled.
N     * |        |          |1 = Time-out counter Enabled.
N     * @var I2C_T::ADDR1
N     * Offset: 0x18  I2C Slave Address Register1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |GC        |General Call Function
N     * |        |          |0 = General Call Function Disabled.
N     * |        |          |1 = General Call Function Enabled.
N     * |[7:1]   |ADDR      |I2C Address
N     * |        |          |The content of this register is irrelevant when I2C is in Master mode.
N     * |        |          |In the slave mode, the seven most significant bits must be loaded with the chip's own address.
N     * |        |          |The I2C hardware will react if either of the address is matched.
N     * |        |          |Note: When software set 7'h00, the address can not be used.
N     * @var I2C_T::ADDR2
N     * Offset: 0x1C  I2C Slave Address Register2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |GC        |General Call Function
N     * |        |          |0 = General Call Function Disabled.
N     * |        |          |1 = General Call Function Enabled.
N     * |[7:1]   |ADDR      |I2C Address
N     * |        |          |The content of this register is irrelevant when I2C is in Master mode.
N     * |        |          |In the slave mode, the seven most significant bits must be loaded with the chip's own address.
N     * |        |          |The I2C hardware will react if either of the address is matched.
N     * |        |          |Note: When software set 7'h00, the address can not be used.
N     * @var I2C_T::ADDR3
N     * Offset: 0x20  I2C Slave Address Register3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |GC        |General Call Function
N     * |        |          |0 = General Call Function Disabled.
N     * |        |          |1 = General Call Function Enabled.
N     * |[7:1]   |ADDR      |I2C Address
N     * |        |          |The content of this register is irrelevant when I2C is in Master mode.
N     * |        |          |In the slave mode, the seven most significant bits must be loaded with the chip's own address.
N     * |        |          |The I2C hardware will react if either of the address is matched.
N     * |        |          |Note: When software set 7'h00, the address can not be used.
N     * @var I2C_T::ADDRMSK0
N     * Offset: 0x24  I2C Slave Address Mask Register0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:1]   |ADDRMSK   |I2C Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care).
N     * |        |          |I2C bus controllers support multiple address recognition with four address mask register.
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care.
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * |        |          |Note: The wake-up function can not use address mask.
N     * @var I2C_T::ADDRMSK1
N     * Offset: 0x28  I2C Slave Address Mask Register1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:1]   |ADDRMSK   |I2C Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care).
N     * |        |          |I2C bus controllers support multiple address recognition with four address mask register.
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care.
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * |        |          |Note: The wake-up function can not use address mask.
N     * @var I2C_T::ADDRMSK2
N     * Offset: 0x2C  I2C Slave Address Mask Register2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:1]   |ADDRMSK   |I2C Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care).
N     * |        |          |I2C bus controllers support multiple address recognition with four address mask register.
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care.
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * |        |          |Note: The wake-up function can not use address mask.
N     * @var I2C_T::ADDRMSK3
N     * Offset: 0x30  I2C Slave Address Mask Register3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:1]   |ADDRMSK   |I2C Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care).
N     * |        |          |I2C bus controllers support multiple address recognition with four address mask register.
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care.
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * |        |          |Note: The wake-up function can not use address mask.
N     * @var I2C_T::WKCTL
N     * Offset: 0x3C  I2C Wake-up Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKEN      |I2C Wake-up Enable Bit
N     * |        |          |0 = I2C wake-up function Disabled.
N     * |        |          |1= I2C wake-up function Enabled.
N     * |[7]     |NHDBUSEN  |I2C No Hold BUS Enable Bit
N     * |        |          |0 = I2C hold bus after wake-up.
N     * |        |          |1= I2C don't hold bus after wake-up.
N     * |        |          |Note: The I2C controller could respond when WKIF event is not clear, it may cause error data transmitted or received.
N     * |        |          |If data transmitted or received when WKIF event is not clear, user must reset I2C controller and execute the original operation again.
N     * @var I2C_T::WKSTS
N     * Offset: 0x40  I2C Wake-up Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKIF      |I2C Wake-up Flag
N     * |        |          |When chip is woken up from Power-down mode by I2C, this bit is set to 1.
N     * |        |          |Software can write 1 to clear this bit.
N     * |[1]     |WKAKDONE  |Wakeup Address Frame Acknowledge Bit Done
N     * |        |          |0 = The ACK bit cycle of address match frame isn't done.
N     * |        |          |1 = The ACK bit cycle of address match frame is done in power-down.
N     * |        |          |Note: This bit can't release WKIF. Software can write 1 to clear this bit.
N     * |[2]     |WRSTSWK   |Read/Write Status Bit in Address Wakeup Frame (Read Only)
N     * |        |          |0 = Write command be record on the address match wakeup frame.
N     * |        |          |1 = Read command be record on the address match wakeup frame.
N     * |        |          |Note: This bit will be cleared when software can write 1 to WKAKDONE (I2C_WKSTS[1]) bit.
N     * @var I2C_T::CTL1
N     * Offset: 0x44  I2C Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TXPDMAEN  |PDMA Transmit Channel Available
N     * |        |          |0 = Transmit PDMA function Disabled.
N     * |        |          |1 = Transmit PDMA function Enabled.
N     * |[1]     |RXPDMAEN  |PDMA Receive Channel Available
N     * |        |          |0 = Receive PDMA function Disabled.
N     * |        |          |1 = Receive PDMA function Enabled.
N     * |[2]     |PDMARST   |PDMA Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the I2C request to PDMA.
N     * |[3]     |OVRIEN    |I2C over Run Interrupt Control Bit
N     * |        |          |Setting OVRIEN to logic 1 will send a interrupt to system when the TWOFF bit is enabled and there is over run event in received buffer.
N     * |[4]     |UDRIEN    |I2C Under Run Interrupt Control Bit
N     * |        |          |Setting UDRIEN to logic 1 will send a interrupt to system when the TWOFF bit is enabled and there is under run event happened in transmitted buffer.
N     * |[5]     |TWOBUFEN  |Two-level BUFFER Enable Bit
N     * |        |          |0 = Two-level buffer Disabled.
N     * |        |          |1 = Two-level buffer Enabled.
N     * |        |          |Set to enable the two-level buffer for I2C transmitted or received buffer.
N     * |        |          |It is used to improve the performance of the I2C bus.
N     * |        |          |If this bit is set = 1, the control bit of STA for repeat start or STO bit should be set after the current SI is cleared.
N     * |        |          |For example: if there are 4 data shall be transmitted and then stop it.
N     * |        |          |The STO bit shall be set after the 3rd data's SI event being clear.
N     * |        |          |In this time, the 4th data can be transmitted and the I2C stop after the 4th data transmission done.
N     * |[6]     |BUFRST    |Two-level BUFFER Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the related counters, two-level buffer state machine, and the content of data buffer.
N     * |[7]     |NSTRETCH  |No Stretch on the I2C Bus
N     * |        |          |0 = The I2C SCL bus is stretched by hardware if the SI is not cleared in master mode.
N     * |        |          |1 = The I2C SCL bus is not stretched by hardware if the SI is not cleared in master mode.
N     * |[8]     |PDMASTR   |PDMA Stretch Bit
N     * |        |          |0 = I2C send STOP automatically after PDMA transfer done. (only master TX)
N     * |        |          |1 = I2C SCL bus is stretched by hardware after PDMA transfer done if the SI is not cleared.
N     * |        |          |(only master TX)
N     * @var I2C_T::STATUS1
N     * Offset: 0x48  I2C Status Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |FULL      |TWO-lEVEL BUFFER FULL
N     * |        |          |This bit indicates two-level buffer TX or RX full or not when the TWOBUFEN = 1.
N     * |        |          |This bit is set when POINTER is equal to 2.
N     * |        |          |Note:This bit is read only.
N     * |[5]     |EMPTY     |TWO-lEVEL BUFFER EMPTY
N     * |        |          |This bit indicates two-level buffer TX or RX empty or not when the TWOBUFEN = 1.
N     * |        |          |This bit is set when POINTER is equal to 0.
N     * |        |          |Note:This bit is read only.
N     * |[6]     |OVR       |I2C over Run Status Bit
N     * |        |          |This bit indicates the received two-level buffer TX or RX is over run when the TWOBUFEN = 1.
N     * |        |          |Note:This bit is read only.
N     * |[7]     |UDR       |I2C Under Run Status Bit
N     * |        |          |This bit indicates the transmitted two-level buffer TX or RX is under run when the TWOBUFEN = 1.
N     * |        |          |Note:This bit is read only.
N     * |[8]     |ONBUSY    |On Bus Busy (Read Only)
N     * |        |          |Indicates that a communication is in progress on the bus.
N     * |        |          |It is set by hardware when a START condition is detected.
N     * |        |          |It is cleared by hardware when a STOP condition is detected.
N     * |        |          |0 = The bus is IDLE (both SCLK and SDA High).
N     * |        |          |1 = The bus is busy.
N     * @var I2C_T::TMCTL
N     * Offset: 0x4C  I2C Timing Configure Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]   |STCTL     |Setup Time Configure Control
N     * |        |          |This field is used to generate a delay timing between SDA falling edge and SCL rising edge in transmission mode.
N     * |        |          |The delay setup time is numbers of peripheral clock = STCTL x PCLK.
N     * |        |          |Note: Setup time setting should not make SCL output less than three PCLKs.
N     * |[24:16] |HTCTL     |Hold Time Configure Control
N     * |        |          |This field is used to generate the delay timing between SCL falling edge and SDA rising edge in transmission mode.
N     * |        |          |The delay hold time is numbers of peripheral clock = HTCTL x PCLK.
N     * @var I2C_T::BUSCTL
N     * Offset: 0x50  I2C Bus Management Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ACKMEN    |Acknowledge Control by Manual
N     * |        |          |In order to allow ACK control in slave reception including the command and data, slave byte control mode must be enabled by setting the ACKMEN bit.
N     * |        |          |0 = Slave byte control Disabled.
N     * |        |          |1 = Slave byte control Enabled.
N     * |        |          |The 9th bit can response the ACK or NACK according the received data by user.
N     * |        |          |When the byte is received, stretching the SCLK signal low between the 8th and 9th SCLK pulse.
N     * |        |          |Note: If the BMDEN =1 and this bit is enabled, the information of I2C_STATUS0 will be fixed as 0xF0 in slave receive condition.
N     * |[1]     |PECEN     |Packet Error Checking Calculation Enable Bit
N     * |        |          |0 = Packet Error Checking Calculation Disabled.
N     * |        |          |1 = Packet Error Checking Calculation Enabled.
N     * |        |          |Note: When I2C enter powerdown mode, the bit should be enabled after wake-up if needed PEC calculation.
N     * |[2]     |BMDEN     |Bus Management Device Default Address Enable Bit
N     * |        |          |0 = Device default address Disable.
N     * |        |          |When the address 0'b1100001x coming and the both of BMDEN and ACKMEN are enabled, the device responses NACKed
N     * |        |          |1 = Device default address Enabled.
N     * |        |          |When the address 0'b1100001x coming and the both of BMDEN and ACKMEN are enabled, the device responses ACKed.
N     * |[3]     |BMHEN     |Bus Management Host Enable Bit
N     * |        |          |0 = Host function Disabled.
N     * |        |          |1 = Host function Enabled.
N     * |[4]     |ALERTEN   |Bus Management Alert Enable Bit
N     * |        |          |Device Mode (BMHEN =0).
N     * |        |          |0 = Release the BM_ALERT pin high and Alert Response Header disabled: 0001100x followed by NACK if both of BMDEN and ACKMEN are enabled.
N     * |        |          |1 = Drive BM_ALERT pin low and Alert Response Address Header enables: 0001100x followed by ACK if both of BMDEN and ACKMEN are enabled.
N     * |        |          |Host Mode (BMHEN =1).
N     * |        |          |0 = BM_ALERT pin not supported.
N     * |        |          |1 = BM_ALERT pin supported.
N     * |[5]     |SCTLOSTS  |Suspend/Control Data Output Status
N     * |        |          |0 = The output of SUSCON pin is low.
N     * |        |          |1 = The output of SUSCON pin is high.
N     * |[6]     |SCTLOEN   |Suspend or Control Pin Output Enable Bit
N     * |        |          |0 = The SUSCON pin in input.
N     * |        |          |1 = The output enable is active on the SUSCON pin.
N     * |[7]     |BUSEN     |BUS Enable Bit
N     * |        |          |0 = The system management function Disabled.
N     * |        |          |1 = The system management function Enabled.
N     * |        |          |Note: When the bit is enabled, the internal 14-bit counter is used to calculate the time out event of clock low condition.
N     * |[8]     |PECTXEN   |Packet Error Checking Byte Transmission/Reception
N     * |        |          |0 = No PEC transfer.
N     * |        |          |1 = PEC transmission is requested.
N     * |        |          |Note: 1.This bit has no effect in slave mode when ACKMEN =0.
N     * |[9]     |TIDLE     |Timer Check in Idle State
N     * |        |          |The BUSTOUT is used to calculate the time-out of clock low in bus active and the idle period in bus Idle.
N     * |        |          |This bit is used to define which condition is enabled.
N     * |        |          |0 = BUSTOUT is used to calculate the clock low period in bus active.
N     * |        |          |1 = BUSTOUT is used to calculate the IDLE period in bus Idle.
N     * |        |          |Note: The BUSY (I2C_BUSSTS[0]) indicate the current bus state.
N     * |[10]    |PECCLR    |PEC Clear at Repeat Start
N     * |        |          |The calculation of PEC starts when PECEN is set to 1 and it is cleared when the STA or STO bit is detected.
N     * |        |          |This PECCLR bit is used to enable the condition of REPEAT START can clear the PEC calculation.
N     * |        |          |0 = PEC calculation is cleared by "Repeat Start" function Disabled.
N     * |        |          |1 = PEC calculation is cleared by "Repeat Start" function Enabled.
N     * |[11]    |ACKM9SI   |Acknowledge Manual Enable Extra SI Interrupt
N     * |        |          |0 = There is no SI interrupt in the 9th clock cycle when the BUSEN =1 and ACKMEN =1.
N     * |        |          |1 = There is SI interrupt in the 9th clock cycle when the BUSEN =1 and ACKMEN =1.
N     * |[12]    |BCDIEN    |Packet Error Checking Byte Count Done Interrupt Enable Bit
N     * |        |          |0 = Byte count done interrupt Disabled.
N     * |        |          |1 = Byte count done interrupt Enabled.
N     * |        |          |Note: This bit is used in PECEN =1.
N     * |[13]    |PECDIEN   |Packet Error Checking Byte Transfer Done Interrupt Enable Bit
N     * |        |          |0 = PEC transfer done interrupt Disabled.
N     * |        |          |1 = PEC transfer done interrupt Enabled.
N     * |        |          |Note: This bit is used in PECEN =1.
N     * @var I2C_T::BUSTCTL
N     * Offset: 0x54  I2C Bus Management Timer Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BUSTOEN   |Bus Time Out Enable Bit
N     * |        |          |0 = Bus clock low time-out detection Disabled.
N     * |        |          |1 = Bus clock low time-out detection Enabled (bus clock is low for more than TTime-out (in BIDLE=0) or high more than TTime-out(in BIDLE =1)
N     * |[1]     |CLKTOEN   |Cumulative Clock Low Time Out Enable Bit
N     * |        |          |0 = Cumulative clock low time-out detection Disabled.
N     * |        |          |1 = Cumulative clock low time-out detection Enabled.
N     * |        |          |For Master, it calculates the period from START to ACK
N     * |        |          |For Slave, it calculates the period from START to STOP
N     * |[2]     |BUSTOIEN  |Time-out Interrupt Enable Bit
N     * |        |          |BUSY =1.
N     * |        |          |0 = SCLK low time-out interrupt Disabled.
N     * |        |          |1 = SCLK low time-out interrupt Enabled.
N     * |        |          |BUSY =0.
N     * |        |          |0 = Bus IDLE time-out interrupt Disabled.
N     * |        |          |1 = Bus IDLE time-out interrupt Enabled.
N     * |[3]     |CLKTOIEN  |Extended Clock Time Out Interrupt Enable Bit
N     * |        |          |0 = Clock time out interrupt Disabled.
N     * |        |          |1 = Clock time out interrupt Enabled.
N     * |[4]     |TORSTEN   |Time Out Reset Enable Bit
N     * |        |          |0 = I2C state machine reset Disabled.
N     * |        |          |1 = I2C state machine reset Enabled. (The clock and data bus will be released to high)
N     * @var I2C_T::BUSSTS
N     * Offset: 0x58  I2C Bus Management Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BUSY      |Bus Busy (Read Only)
N     * |        |          |Indicates that a communication is in progress on the bus.
N     * |        |          |It is set by hardware when a START condition is detected.
N     * |        |          |It is cleared by hardware when a STOP condition is detected.
N     * |        |          |0 = Bus is IDLE (both SCLK and SDA High).
N     * |        |          |1 = Bus is busy.
N     * |[1]     |BCDONE    |Byte Count Transmission/Receive Done
N     * |        |          |0 = Byte count transmission/ receive is not finished when the PECEN is set.
N     * |        |          |1 = Byte count transmission/ receive is finished when the PECEN is set.
N     * |        |          |Note: Software can write 1 to clear this bit.
N     * |[2]     |PECERR    |PEC Error in Reception
N     * |        |          |0 = PEC value equal the received PEC data packet.
N     * |        |          |1 = PEC value doesn't match the receive PEC data packet.
N     * |        |          |Note: Software can write 1 to clear this bit.
N     * |[3]     |ALERT     |SMBus Alert Status
N     * |        |          |Device Mode (BMHEN =0).
N     * |        |          |0 = SMBALERT pin state is low.
N     * |        |          |1 = SMBALERT pin state is high.
N     * |        |          |Host Mode (BMHEN =1).
N     * |        |          |0 = No SMBALERT event.
N     * |        |          |1 = There is SMBALERT event (falling edge) is detected in SMALERT pin when the BMHEN = 1 (SMBus host configuration) and the ALERTEN = 1.
N     * |        |          |Note:
N     * |        |          |1. The SMBALERT pin is an open-drain pin, the pull-high resistor is must in the system
N     * |        |          |2. Software can write 1 to clear this bit.
N     * |[4]     |SCTLDIN   |Bus Suspend or Control Signal Input Status (Read Only)
N     * |        |          |0 = The input status of SUSCON pin is 0.
N     * |        |          |1 = The input status of SUSCON pin is 1.
N     * |[5]     |BUSTO     |Bus Time-out Status
N     * |        |          |0 = There is no any time-out or external clock time-out.
N     * |        |          |1 = A time-out or external clock time-out occurred.
N     * |        |          |In bus busy, the bit indicates the total clock low time-out event occurred; otherwise, it indicates the bus idle time-out event occurred.
N     * |        |          |Note: Software can write 1 to clear this bit.
N     * |[6]     |CLKTO     |Clock Low Cumulate Time-out Status
N     * |        |          |0 = Cumulative clock low is no any time-out.
N     * |        |          |1 = Cumulative clock low time-out occurred.
N     * |        |          |Note: Software can write 1 to clear this bit.
N     * |[7]     |PECDONE   |PEC Byte Transmission/Receive Done
N     * |        |          |0 = PEC transmission/ receive is not finished when the PECEN is set.
N     * |        |          |1 = PEC transmission/ receive is finished when the PECEN is set.
N     * |        |          |Note: Software can write 1 to clear this bit.
N     * @var I2C_T::PKTSIZE
N     * Offset: 0x5C  I2C Packet Error Checking Byte Number Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]   |PLDSIZE   |Transfer Byte Number
N     * |        |          |The transmission or receive byte number in one transaction when the PECEN is set.
N     * |        |          |The maximum transaction or receive byte is 256 Bytes.
N     * |        |          |Note: The byte number counting includes address, command code, and data frame.
N     * @var I2C_T::PKTCRC
N     * Offset: 0x60  I2C Packet Error Checking Byte Value Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |PECCRC    |Packet Error Checking Byte Value
N     * |        |          |This byte indicates the packet error checking content after transmission or receive byte count by using the C(x) = X8 + X2 + X + 1.
N     * |        |          |It is read only.
N     * @var I2C_T::BUSTOUT
N     * Offset: 0x64  I2C Bus Management Timer Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |BUSTO     |Bus Management Time-out Value
N     * |        |          |Indicates the bus time-out value in bus is IDLE or SCLK low.
N     * |        |          |Note: If the user wants to revise the value of BUSTOUT, the TORSTEN (I2C_BUSTCTL[4]) bit shall be set to 1 and clear to 0 first in the BUSEN(I2C_BUSCTL[7]) is set.
N     * @var I2C_T::CLKTOUT
N     * Offset: 0x68  I2C Bus Management Clock Low Timer Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |CLKTO     |Bus Clock Low Timer
N     * |        |          |The field is used to configure the cumulative clock extension time-out.
N     * |        |          |Note: If the user wants to revise the value of CLKLTOUT, the TORSTEN bit shall be set to 1 and clear to 0 first in the BUSEN is set.
N     */
N    __IO uint32_t CTL0;                  /*!< [0x0000] I2C Control Register 0                                           */
X    volatile uint32_t CTL0;                   
N    __IO uint32_t ADDR0;                 /*!< [0x0004] I2C Slave Address Register0                                      */
X    volatile uint32_t ADDR0;                  
N    __IO uint32_t DAT;                   /*!< [0x0008] I2C Data Register                                                */
X    volatile uint32_t DAT;                    
N    __I  uint32_t STATUS0;               /*!< [0x000c] I2C Status Register 0                                            */
X    volatile const  uint32_t STATUS0;                
N    __IO uint32_t CLKDIV;                /*!< [0x0010] I2C Clock Divided Register                                       */
X    volatile uint32_t CLKDIV;                 
N    __IO uint32_t TOCTL;                 /*!< [0x0014] I2C Time-out Control Register                                    */
X    volatile uint32_t TOCTL;                  
N    __IO uint32_t ADDR1;                 /*!< [0x0018] I2C Slave Address Register1                                      */
X    volatile uint32_t ADDR1;                  
N    __IO uint32_t ADDR2;                 /*!< [0x001c] I2C Slave Address Register2                                      */
X    volatile uint32_t ADDR2;                  
N    __IO uint32_t ADDR3;                 /*!< [0x0020] I2C Slave Address Register3                                      */
X    volatile uint32_t ADDR3;                  
N    __IO uint32_t ADDRMSK0;              /*!< [0x0024] I2C Slave Address Mask Register0                                 */
X    volatile uint32_t ADDRMSK0;               
N    __IO uint32_t ADDRMSK1;              /*!< [0x0028] I2C Slave Address Mask Register1                                 */
X    volatile uint32_t ADDRMSK1;               
N    __IO uint32_t ADDRMSK2;              /*!< [0x002c] I2C Slave Address Mask Register2                                 */
X    volatile uint32_t ADDRMSK2;               
N    __IO uint32_t ADDRMSK3;              /*!< [0x0030] I2C Slave Address Mask Register3                                 */
X    volatile uint32_t ADDRMSK3;               
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __IO uint32_t WKCTL;                 /*!< [0x003c] I2C Wake-up Control Register                                     */
X    volatile uint32_t WKCTL;                  
N    __IO uint32_t WKSTS;                 /*!< [0x0040] I2C Wake-up Status Register                                      */
X    volatile uint32_t WKSTS;                  
N    __IO uint32_t CTL1;                  /*!< [0x0044] I2C Control Register 1                                           */
X    volatile uint32_t CTL1;                   
N    __IO uint32_t STATUS1;               /*!< [0x0048] I2C Status Register 1                                            */
X    volatile uint32_t STATUS1;                
N    __IO uint32_t TMCTL;                 /*!< [0x004c] I2C Timing Configure Control Register                            */
X    volatile uint32_t TMCTL;                  
N    __IO uint32_t BUSCTL;                /*!< [0x0050] I2C Bus Management Control Register                              */
X    volatile uint32_t BUSCTL;                 
N    __IO uint32_t BUSTCTL;               /*!< [0x0054] I2C Bus Management Timer Control Register                        */
X    volatile uint32_t BUSTCTL;                
N    __IO uint32_t BUSSTS;                /*!< [0x0058] I2C Bus Management Status Register                               */
X    volatile uint32_t BUSSTS;                 
N    __IO uint32_t PKTSIZE;               /*!< [0x005c] I2C Packet Error Checking Byte Number Register                   */
X    volatile uint32_t PKTSIZE;                
N    __I  uint32_t PKTCRC;                /*!< [0x0060] I2C Packet Error Checking Byte Value Register                    */
X    volatile const  uint32_t PKTCRC;                 
N    __IO uint32_t BUSTOUT;               /*!< [0x0064] I2C Bus Management Timer Register                                */
X    volatile uint32_t BUSTOUT;                
N    __IO uint32_t CLKTOUT;               /*!< [0x0068] I2C Bus Management Clock Low Timer Register                      */
X    volatile uint32_t CLKTOUT;                
N} I2C_T;
N
N/**
N    @addtogroup I2C_CONST I2C Bit Field Definition
N    Constant Definitions for I2C Controller
N@{ */
N
N#define I2C_CTL0_AA_Pos                  (2)                                               /*!< I2C_T::CTL0: AA Position               */
N#define I2C_CTL0_AA_Msk                  (0x1ul << I2C_CTL0_AA_Pos)                        /*!< I2C_T::CTL0: AA Mask                   */
N
N#define I2C_CTL0_SI_Pos                  (3)                                               /*!< I2C_T::CTL0: SI Position               */
N#define I2C_CTL0_SI_Msk                  (0x1ul << I2C_CTL0_SI_Pos)                        /*!< I2C_T::CTL0: SI Mask                   */
N
N#define I2C_CTL0_STO_Pos                 (4)                                               /*!< I2C_T::CTL0: STO Position              */
N#define I2C_CTL0_STO_Msk                 (0x1ul << I2C_CTL0_STO_Pos)                       /*!< I2C_T::CTL0: STO Mask                  */
N
N#define I2C_CTL0_STA_Pos                 (5)                                               /*!< I2C_T::CTL0: STA Position              */
N#define I2C_CTL0_STA_Msk                 (0x1ul << I2C_CTL0_STA_Pos)                       /*!< I2C_T::CTL0: STA Mask                  */
N
N#define I2C_CTL0_I2CEN_Pos               (6)                                               /*!< I2C_T::CTL0: I2CEN Position            */
N#define I2C_CTL0_I2CEN_Msk               (0x1ul << I2C_CTL0_I2CEN_Pos)                     /*!< I2C_T::CTL0: I2CEN Mask                */
N
N#define I2C_CTL0_INTEN_Pos               (7)                                               /*!< I2C_T::CTL0: INTEN Position            */
N#define I2C_CTL0_INTEN_Msk               (0x1ul << I2C_CTL0_INTEN_Pos)                     /*!< I2C_T::CTL0: INTEN Mask                */
N
N#define I2C_ADDR0_GC_Pos                 (0)                                               /*!< I2C_T::ADDR0: GC Position              */
N#define I2C_ADDR0_GC_Msk                 (0x1ul << I2C_ADDR0_GC_Pos)                       /*!< I2C_T::ADDR0: GC Mask                  */
N
N#define I2C_ADDR0_ADDR_Pos               (1)                                               /*!< I2C_T::ADDR0: ADDR Position            */
N#define I2C_ADDR0_ADDR_Msk               (0x7ful << I2C_ADDR0_ADDR_Pos)                    /*!< I2C_T::ADDR0: ADDR Mask                */
N
N#define I2C_DAT_DAT_Pos                  (0)                                               /*!< I2C_T::DAT: DAT Position               */
N#define I2C_DAT_DAT_Msk                  (0xfful << I2C_DAT_DAT_Pos)                       /*!< I2C_T::DAT: DAT Mask                   */
N
N#define I2C_STATUS0_STATUS_Pos           (0)                                               /*!< I2C_T::STATUS0: STATUS Position        */
N#define I2C_STATUS0_STATUS_Msk           (0xfful << I2C_STATUS0_STATUS_Pos)                /*!< I2C_T::STATUS0: STATUS Mask            */
N
N#define I2C_CLKDIV_DIVIDER_Pos           (0)                                               /*!< I2C_T::CLKDIV: DIVIDER Position        */
N#define I2C_CLKDIV_DIVIDER_Msk           (0x3fful << I2C_CLKDIV_DIVIDER_Pos)               /*!< I2C_T::CLKDIV: DIVIDER Mask            */
N
N#define I2C_TOCTL_TOIF_Pos               (0)                                               /*!< I2C_T::TOCTL: TOIF Position            */
N#define I2C_TOCTL_TOIF_Msk               (0x1ul << I2C_TOCTL_TOIF_Pos)                     /*!< I2C_T::TOCTL: TOIF Mask                */
N
N#define I2C_TOCTL_TOCDIV4_Pos            (1)                                               /*!< I2C_T::TOCTL: TOCDIV4 Position         */
N#define I2C_TOCTL_TOCDIV4_Msk            (0x1ul << I2C_TOCTL_TOCDIV4_Pos)                  /*!< I2C_T::TOCTL: TOCDIV4 Mask             */
N
N#define I2C_TOCTL_TOCEN_Pos              (2)                                               /*!< I2C_T::TOCTL: TOCEN Position           */
N#define I2C_TOCTL_TOCEN_Msk              (0x1ul << I2C_TOCTL_TOCEN_Pos)                    /*!< I2C_T::TOCTL: TOCEN Mask               */
N
N#define I2C_ADDR1_GC_Pos                 (0)                                               /*!< I2C_T::ADDR1: GC Position              */
N#define I2C_ADDR1_GC_Msk                 (0x1ul << I2C_ADDR1_GC_Pos)                       /*!< I2C_T::ADDR1: GC Mask                  */
N
N#define I2C_ADDR1_ADDR_Pos               (1)                                               /*!< I2C_T::ADDR1: ADDR Position            */
N#define I2C_ADDR1_ADDR_Msk               (0x7ful << I2C_ADDR1_ADDR_Pos)                    /*!< I2C_T::ADDR1: ADDR Mask                */
N
N#define I2C_ADDR2_GC_Pos                 (0)                                               /*!< I2C_T::ADDR2: GC Position              */
N#define I2C_ADDR2_GC_Msk                 (0x1ul << I2C_ADDR2_GC_Pos)                       /*!< I2C_T::ADDR2: GC Mask                  */
N
N#define I2C_ADDR2_ADDR_Pos               (1)                                               /*!< I2C_T::ADDR2: ADDR Position            */
N#define I2C_ADDR2_ADDR_Msk               (0x7ful << I2C_ADDR2_ADDR_Pos)                    /*!< I2C_T::ADDR2: ADDR Mask                */
N
N#define I2C_ADDR3_GC_Pos                 (0)                                               /*!< I2C_T::ADDR3: GC Position              */
N#define I2C_ADDR3_GC_Msk                 (0x1ul << I2C_ADDR3_GC_Pos)                       /*!< I2C_T::ADDR3: GC Mask                  */
N
N#define I2C_ADDR3_ADDR_Pos               (1)                                               /*!< I2C_T::ADDR3: ADDR Position            */
N#define I2C_ADDR3_ADDR_Msk               (0x7ful << I2C_ADDR3_ADDR_Pos)                    /*!< I2C_T::ADDR3: ADDR Mask                */
N
N#define I2C_ADDRMSK0_ADDRMSK_Pos         (1)                                               /*!< I2C_T::ADDRMSK0: ADDRMSK Position      */
N#define I2C_ADDRMSK0_ADDRMSK_Msk         (0x7ful << I2C_ADDRMSK0_ADDRMSK_Pos)              /*!< I2C_T::ADDRMSK0: ADDRMSK Mask          */
N
N#define I2C_ADDRMSK1_ADDRMSK_Pos         (1)                                               /*!< I2C_T::ADDRMSK1: ADDRMSK Position      */
N#define I2C_ADDRMSK1_ADDRMSK_Msk         (0x7ful << I2C_ADDRMSK1_ADDRMSK_Pos)              /*!< I2C_T::ADDRMSK1: ADDRMSK Mask          */
N
N#define I2C_ADDRMSK2_ADDRMSK_Pos         (1)                                               /*!< I2C_T::ADDRMSK2: ADDRMSK Position      */
N#define I2C_ADDRMSK2_ADDRMSK_Msk         (0x7ful << I2C_ADDRMSK2_ADDRMSK_Pos)              /*!< I2C_T::ADDRMSK2: ADDRMSK Mask          */
N
N#define I2C_ADDRMSK3_ADDRMSK_Pos         (1)                                               /*!< I2C_T::ADDRMSK3: ADDRMSK Position      */
N#define I2C_ADDRMSK3_ADDRMSK_Msk         (0x7ful << I2C_ADDRMSK3_ADDRMSK_Pos)              /*!< I2C_T::ADDRMSK3: ADDRMSK Mask          */
N
N#define I2C_WKCTL_WKEN_Pos               (0)                                               /*!< I2C_T::WKCTL: WKEN Position            */
N#define I2C_WKCTL_WKEN_Msk               (0x1ul << I2C_WKCTL_WKEN_Pos)                     /*!< I2C_T::WKCTL: WKEN Mask                */
N
N#define I2C_WKCTL_NHDBUSEN_Pos           (7)                                               /*!< I2C_T::WKCTL: NHDBUSEN Position        */
N#define I2C_WKCTL_NHDBUSEN_Msk           (0x1ul << I2C_WKCTL_NHDBUSEN_Pos)                 /*!< I2C_T::WKCTL: NHDBUSEN Mask            */
N
N#define I2C_WKSTS_WKIF_Pos               (0)                                               /*!< I2C_T::WKSTS: WKIF Position            */
N#define I2C_WKSTS_WKIF_Msk               (0x1ul << I2C_WKSTS_WKIF_Pos)                     /*!< I2C_T::WKSTS: WKIF Mask                */
N
N#define I2C_WKSTS_WKAKDONE_Pos           (1)                                               /*!< I2C_T::WKSTS: WKAKDONE Position        */
N#define I2C_WKSTS_WKAKDONE_Msk           (0x1ul << I2C_WKSTS_WKAKDONE_Pos)                 /*!< I2C_T::WKSTS: WKAKDONE Mask            */
N
N#define I2C_WKSTS_WRSTSWK_Pos            (2)                                               /*!< I2C_T::WKSTS: WRSTSWK Position         */
N#define I2C_WKSTS_WRSTSWK_Msk            (0x1ul << I2C_WKSTS_WRSTSWK_Pos)                  /*!< I2C_T::WKSTS: WRSTSWK Mask             */
N
N#define I2C_CTL1_TXPDMAEN_Pos            (0)                                               /*!< I2C_T::CTL1: TXPDMAEN Position         */
N#define I2C_CTL1_TXPDMAEN_Msk            (0x1ul << I2C_CTL1_TXPDMAEN_Pos)                  /*!< I2C_T::CTL1: TXPDMAEN Mask             */
N
N#define I2C_CTL1_RXPDMAEN_Pos            (1)                                               /*!< I2C_T::CTL1: RXPDMAEN Position         */
N#define I2C_CTL1_RXPDMAEN_Msk            (0x1ul << I2C_CTL1_RXPDMAEN_Pos)                  /*!< I2C_T::CTL1: RXPDMAEN Mask             */
N
N#define I2C_CTL1_PDMARST_Pos             (2)                                               /*!< I2C_T::CTL1: PDMARST Position          */
N#define I2C_CTL1_PDMARST_Msk             (0x1ul << I2C_CTL1_PDMARST_Pos)                   /*!< I2C_T::CTL1: PDMARST Mask              */
N
N#define I2C_CTL1_OVRIEN_Pos              (3)                                               /*!< I2C_T::CTL1: OVRIEN Position           */
N#define I2C_CTL1_OVRIEN_Msk              (0x1ul << I2C_CTL1_OVRIEN_Pos)                    /*!< I2C_T::CTL1: OVRIEN Mask               */
N
N#define I2C_CTL1_UDRIEN_Pos              (4)                                               /*!< I2C_T::CTL1: UDRIEN Position           */
N#define I2C_CTL1_UDRIEN_Msk              (0x1ul << I2C_CTL1_UDRIEN_Pos)                    /*!< I2C_T::CTL1: UDRIEN Mask               */
N
N#define I2C_CTL1_TWOBUFEN_Pos            (5)                                               /*!< I2C_T::CTL1: TWOBUFEN Position         */
N#define I2C_CTL1_TWOBUFEN_Msk            (0x1ul << I2C_CTL1_TWOBUFEN_Pos)                  /*!< I2C_T::CTL1: TWOBUFEN Mask             */
N
N#define I2C_CTL1_BUFRST_Pos              (6)                                               /*!< I2C_T::CTL1: BUFRST Position           */
N#define I2C_CTL1_BUFRST_Msk              (0x1ul << I2C_CTL1_BUFRST_Pos)                    /*!< I2C_T::CTL1: BUFRST Mask               */
N
N#define I2C_CTL1_NSTRETCH_Pos            (7)                                               /*!< I2C_T::CTL1: NSTRETCH Position         */
N#define I2C_CTL1_NSTRETCH_Msk            (0x1ul << I2C_CTL1_NSTRETCH_Pos)                  /*!< I2C_T::CTL1: NSTRETCH Mask             */
N
N#define I2C_CTL1_PDMASTR_Pos             (8)                                               /*!< I2C_T::CTL1: PDMASTR Position          */
N#define I2C_CTL1_PDMASTR_Msk             (0x1ul << I2C_CTL1_PDMASTR_Pos)                   /*!< I2C_T::CTL1: PDMASTR Mask              */
N
N#define I2C_STATUS1_FULL_Pos             (4)                                               /*!< I2C_T::STATUS1: FULL Position          */
N#define I2C_STATUS1_FULL_Msk             (0x1ul << I2C_STATUS1_FULL_Pos)                   /*!< I2C_T::STATUS1: FULL Mask              */
N
N#define I2C_STATUS1_EMPTY_Pos            (5)                                               /*!< I2C_T::STATUS1: EMPTY Position         */
N#define I2C_STATUS1_EMPTY_Msk            (0x1ul << I2C_STATUS1_EMPTY_Pos)                  /*!< I2C_T::STATUS1: EMPTY Mask             */
N
N#define I2C_STATUS1_OVR_Pos              (6)                                               /*!< I2C_T::STATUS1: OVR Position           */
N#define I2C_STATUS1_OVR_Msk              (0x1ul << I2C_STATUS1_OVR_Pos)                    /*!< I2C_T::STATUS1: OVR Mask               */
N
N#define I2C_STATUS1_UDR_Pos              (7)                                               /*!< I2C_T::STATUS1: UDR Position           */
N#define I2C_STATUS1_UDR_Msk              (0x1ul << I2C_STATUS1_UDR_Pos)                    /*!< I2C_T::STATUS1: UDR Mask               */
N
N#define I2C_STATUS1_ONBUSY_Pos           (8)                                               /*!< I2C_T::STATUS1: ONBUSY Position        */
N#define I2C_STATUS1_ONBUSY_Msk           (0x1ul << I2C_STATUS1_ONBUSY_Pos)                 /*!< I2C_T::STATUS1: ONBUSY Mask            */
N
N#define I2C_TMCTL_STCTL_Pos              (0)                                               /*!< I2C_T::TMCTL: STCTL Position           */
N#define I2C_TMCTL_STCTL_Msk              (0x1fful << I2C_TMCTL_STCTL_Pos)                  /*!< I2C_T::TMCTL: STCTL Mask               */
N
N#define I2C_TMCTL_HTCTL_Pos              (16)                                              /*!< I2C_T::TMCTL: HTCTL Position           */
N#define I2C_TMCTL_HTCTL_Msk              (0x1fful << I2C_TMCTL_HTCTL_Pos)                  /*!< I2C_T::TMCTL: HTCTL Mask               */
N
N#define I2C_BUSCTL_ACKMEN_Pos            (0)                                               /*!< I2C_T::BUSCTL: ACKMEN Position         */
N#define I2C_BUSCTL_ACKMEN_Msk            (0x1ul << I2C_BUSCTL_ACKMEN_Pos)                  /*!< I2C_T::BUSCTL: ACKMEN Mask             */
N
N#define I2C_BUSCTL_PECEN_Pos             (1)                                               /*!< I2C_T::BUSCTL: PECEN Position          */
N#define I2C_BUSCTL_PECEN_Msk             (0x1ul << I2C_BUSCTL_PECEN_Pos)                   /*!< I2C_T::BUSCTL: PECEN Mask              */
N
N#define I2C_BUSCTL_BMDEN_Pos             (2)                                               /*!< I2C_T::BUSCTL: BMDEN Position          */
N#define I2C_BUSCTL_BMDEN_Msk             (0x1ul << I2C_BUSCTL_BMDEN_Pos)                   /*!< I2C_T::BUSCTL: BMDEN Mask              */
N
N#define I2C_BUSCTL_BMHEN_Pos             (3)                                               /*!< I2C_T::BUSCTL: BMHEN Position          */
N#define I2C_BUSCTL_BMHEN_Msk             (0x1ul << I2C_BUSCTL_BMHEN_Pos)                   /*!< I2C_T::BUSCTL: BMHEN Mask              */
N
N#define I2C_BUSCTL_ALERTEN_Pos           (4)                                               /*!< I2C_T::BUSCTL: ALERTEN Position        */
N#define I2C_BUSCTL_ALERTEN_Msk           (0x1ul << I2C_BUSCTL_ALERTEN_Pos)                 /*!< I2C_T::BUSCTL: ALERTEN Mask            */
N
N#define I2C_BUSCTL_SCTLOSTS_Pos          (5)                                               /*!< I2C_T::BUSCTL: SCTLOSTS Position       */
N#define I2C_BUSCTL_SCTLOSTS_Msk          (0x1ul << I2C_BUSCTL_SCTLOSTS_Pos)                /*!< I2C_T::BUSCTL: SCTLOSTS Mask           */
N
N#define I2C_BUSCTL_SCTLOEN_Pos           (6)                                               /*!< I2C_T::BUSCTL: SCTLOEN Position        */
N#define I2C_BUSCTL_SCTLOEN_Msk           (0x1ul << I2C_BUSCTL_SCTLOEN_Pos)                 /*!< I2C_T::BUSCTL: SCTLOEN Mask            */
N
N#define I2C_BUSCTL_BUSEN_Pos             (7)                                               /*!< I2C_T::BUSCTL: BUSEN Position          */
N#define I2C_BUSCTL_BUSEN_Msk             (0x1ul << I2C_BUSCTL_BUSEN_Pos)                   /*!< I2C_T::BUSCTL: BUSEN Mask              */
N
N#define I2C_BUSCTL_PECTXEN_Pos           (8)                                               /*!< I2C_T::BUSCTL: PECTXEN Position        */
N#define I2C_BUSCTL_PECTXEN_Msk           (0x1ul << I2C_BUSCTL_PECTXEN_Pos)                 /*!< I2C_T::BUSCTL: PECTXEN Mask            */
N
N#define I2C_BUSCTL_TIDLE_Pos             (9)                                               /*!< I2C_T::BUSCTL: TIDLE Position          */
N#define I2C_BUSCTL_TIDLE_Msk             (0x1ul << I2C_BUSCTL_TIDLE_Pos)                   /*!< I2C_T::BUSCTL: TIDLE Mask              */
N
N#define I2C_BUSCTL_PECCLR_Pos            (10)                                              /*!< I2C_T::BUSCTL: PECCLR Position         */
N#define I2C_BUSCTL_PECCLR_Msk            (0x1ul << I2C_BUSCTL_PECCLR_Pos)                  /*!< I2C_T::BUSCTL: PECCLR Mask             */
N
N#define I2C_BUSCTL_ACKM9SI_Pos           (11)                                              /*!< I2C_T::BUSCTL: ACKM9SI Position        */
N#define I2C_BUSCTL_ACKM9SI_Msk           (0x1ul << I2C_BUSCTL_ACKM9SI_Pos)                 /*!< I2C_T::BUSCTL: ACKM9SI Mask            */
N
N#define I2C_BUSCTL_BCDIEN_Pos            (12)                                              /*!< I2C_T::BUSCTL: BCDIEN Position         */
N#define I2C_BUSCTL_BCDIEN_Msk            (0x1ul << I2C_BUSCTL_BCDIEN_Pos)                  /*!< I2C_T::BUSCTL: BCDIEN Mask             */
N
N#define I2C_BUSCTL_PECDIEN_Pos           (13)                                              /*!< I2C_T::BUSCTL: PECDIEN Position        */
N#define I2C_BUSCTL_PECDIEN_Msk           (0x1ul << I2C_BUSCTL_PECDIEN_Pos)                 /*!< I2C_T::BUSCTL: PECDIEN Mask            */
N
N#define I2C_BUSTCTL_BUSTOEN_Pos          (0)                                               /*!< I2C_T::BUSTCTL: BUSTOEN Position       */
N#define I2C_BUSTCTL_BUSTOEN_Msk          (0x1ul << I2C_BUSTCTL_BUSTOEN_Pos)                /*!< I2C_T::BUSTCTL: BUSTOEN Mask           */
N
N#define I2C_BUSTCTL_CLKTOEN_Pos          (1)                                               /*!< I2C_T::BUSTCTL: CLKTOEN Position       */
N#define I2C_BUSTCTL_CLKTOEN_Msk          (0x1ul << I2C_BUSTCTL_CLKTOEN_Pos)                /*!< I2C_T::BUSTCTL: CLKTOEN Mask           */
N
N#define I2C_BUSTCTL_BUSTOIEN_Pos         (2)                                               /*!< I2C_T::BUSTCTL: BUSTOIEN Position      */
N#define I2C_BUSTCTL_BUSTOIEN_Msk         (0x1ul << I2C_BUSTCTL_BUSTOIEN_Pos)               /*!< I2C_T::BUSTCTL: BUSTOIEN Mask          */
N
N#define I2C_BUSTCTL_CLKTOIEN_Pos         (3)                                               /*!< I2C_T::BUSTCTL: CLKTOIEN Position      */
N#define I2C_BUSTCTL_CLKTOIEN_Msk         (0x1ul << I2C_BUSTCTL_CLKTOIEN_Pos)               /*!< I2C_T::BUSTCTL: CLKTOIEN Mask          */
N
N#define I2C_BUSTCTL_TORSTEN_Pos          (4)                                               /*!< I2C_T::BUSTCTL: TORSTEN Position       */
N#define I2C_BUSTCTL_TORSTEN_Msk          (0x1ul << I2C_BUSTCTL_TORSTEN_Pos)                /*!< I2C_T::BUSTCTL: TORSTEN Mask           */
N
N#define I2C_BUSSTS_BUSY_Pos              (0)                                               /*!< I2C_T::BUSSTS: BUSY Position           */
N#define I2C_BUSSTS_BUSY_Msk              (0x1ul << I2C_BUSSTS_BUSY_Pos)                    /*!< I2C_T::BUSSTS: BUSY Mask               */
N
N#define I2C_BUSSTS_BCDONE_Pos            (1)                                               /*!< I2C_T::BUSSTS: BCDONE Position         */
N#define I2C_BUSSTS_BCDONE_Msk            (0x1ul << I2C_BUSSTS_BCDONE_Pos)                  /*!< I2C_T::BUSSTS: BCDONE Mask             */
N
N#define I2C_BUSSTS_PECERR_Pos            (2)                                               /*!< I2C_T::BUSSTS: PECERR Position         */
N#define I2C_BUSSTS_PECERR_Msk            (0x1ul << I2C_BUSSTS_PECERR_Pos)                  /*!< I2C_T::BUSSTS: PECERR Mask             */
N
N#define I2C_BUSSTS_ALERT_Pos             (3)                                               /*!< I2C_T::BUSSTS: ALERT Position          */
N#define I2C_BUSSTS_ALERT_Msk             (0x1ul << I2C_BUSSTS_ALERT_Pos)                   /*!< I2C_T::BUSSTS: ALERT Mask              */
N
N#define I2C_BUSSTS_SCTLDIN_Pos           (4)                                               /*!< I2C_T::BUSSTS: SCTLDIN Position        */
N#define I2C_BUSSTS_SCTLDIN_Msk           (0x1ul << I2C_BUSSTS_SCTLDIN_Pos)                 /*!< I2C_T::BUSSTS: SCTLDIN Mask            */
N
N#define I2C_BUSSTS_BUSTO_Pos             (5)                                               /*!< I2C_T::BUSSTS: BUSTO Position          */
N#define I2C_BUSSTS_BUSTO_Msk             (0x1ul << I2C_BUSSTS_BUSTO_Pos)                   /*!< I2C_T::BUSSTS: BUSTO Mask              */
N
N#define I2C_BUSSTS_CLKTO_Pos             (6)                                               /*!< I2C_T::BUSSTS: CLKTO Position          */
N#define I2C_BUSSTS_CLKTO_Msk             (0x1ul << I2C_BUSSTS_CLKTO_Pos)                   /*!< I2C_T::BUSSTS: CLKTO Mask              */
N
N#define I2C_BUSSTS_PECDONE_Pos           (7)                                               /*!< I2C_T::BUSSTS: PECDONE Position        */
N#define I2C_BUSSTS_PECDONE_Msk           (0x1ul << I2C_BUSSTS_PECDONE_Pos)                 /*!< I2C_T::BUSSTS: PECDONE Mask            */
N
N#define I2C_PKTSIZE_PLDSIZE_Pos          (0)                                               /*!< I2C_T::PKTSIZE: PLDSIZE Position       */
N#define I2C_PKTSIZE_PLDSIZE_Msk          (0x1fful << I2C_PKTSIZE_PLDSIZE_Pos)              /*!< I2C_T::PKTSIZE: PLDSIZE Mask           */
N
N#define I2C_PKTCRC_PECCRC_Pos            (0)                                               /*!< I2C_T::PKTCRC: PECCRC Position         */
N#define I2C_PKTCRC_PECCRC_Msk            (0xfful << I2C_PKTCRC_PECCRC_Pos)                 /*!< I2C_T::PKTCRC: PECCRC Mask             */
N
N#define I2C_BUSTOUT_BUSTO_Pos            (0)                                               /*!< I2C_T::BUSTOUT: BUSTO Position         */
N#define I2C_BUSTOUT_BUSTO_Msk            (0xfful << I2C_BUSTOUT_BUSTO_Pos)                 /*!< I2C_T::BUSTOUT: BUSTO Mask             */
N
N#define I2C_CLKTOUT_CLKTO_Pos            (0)                                               /*!< I2C_T::CLKTOUT: CLKTO Position         */
N#define I2C_CLKTOUT_CLKTO_Msk            (0xfful << I2C_CLKTOUT_CLKTO_Pos)                 /*!< I2C_T::CLKTOUT: CLKTO Mask             */
N
N/**@}*/ /* I2C_CONST */
N/**@}*/ /* end of I2C register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __I2C_REG_H__ */
L 169 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "pdma_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\pdma_reg.h" 1
N/**************************************************************************//**
N * @file     pdma_reg.h
N * @version  V1.00
N * @brief    PDMA register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __PDMA_REG_H__
N#define __PDMA_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup PDMA Peripheral Direct Memory Access Controller (PDMA)
N    Memory Mapped Structure for PDMA Controller
N@{ */
N
N
Ntypedef struct
N{
N
N
N    /**
N     * @var DSCT_T::CTL
N     * Offset: 0x00  Descriptor Table Control Register of PDMA Channel n
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |OPMODE    |PDMA Operation Mode Selection
N     * |        |          |00 = Idle state: Channel is stopped or this table is complete, when PDMA finish channel table task, OPMODE will be cleared to idle state automatically.
N     * |        |          |01 = Basic mode: The descriptor table only has one task. When this task is finished, the PDMA_INTSTS[1] will be asserted.
N     * |        |          |10 = Scatter-Gather mode: When operating in this mode, user must give the next descriptor table address in PDMA_DSCT_NEXT register; PDMA controller will ignore this task, then load the next task to execute.
N     * |        |          |11 = Reserved.
N     * |        |          |Note: Before filling new transfer task in the Descriptor Table, user must check the PDMA_INTSTS[1] to make sure the curren task is complete.
N     * |[2]     |TXTYPE    |Transfer Type
N     * |        |          |0 = Burst transfer type.
N     * |        |          |1 = Single transfer type.
N     * |[6:4]   |BURSIZE   |Burst Size
N     * |        |          |000 = 128 Transfers.
N     * |        |          |001 = 64 Transfers.
N     * |        |          |010 = 32 Transfers.
N     * |        |          |011 = 16 Transfers.
N     * |        |          |100 = 8 Transfers.
N     * |        |          |101 = 4 Transfers.
N     * |        |          |110 = 2 Transfers.
N     * |        |          |111 = 1 Transfers.
N     * |        |          |Note: This field is only useful in burst transfer type.
N     * |[7]     |TBINTDIS  |Table Interrupt Disable Bit
N     * |        |          |This field can be used to decide whether to enable table interrupt or not.
N     * |        |          |If the TBINTDIS bit is enabled it will not generates TDIFn(PDMA_TDSTS[8:0]) when PDMA controller finishes transfer task.
N     * |        |          |0 = Table interrupt Enabled.
N     * |        |          |1 = Table interrupt Disabled.
N     * |        |          |Note: This function only for scatter-gather mode.
N     * |[9:8]   |SAINC     |Source Address Increment
N     * |        |          |This field is used to set the source address increment size.
N     * |        |          |11 = No increment (fixed address).
N     * |        |          |Others = Increment and size is depended on TXWIDTH selection.
N     * |        |          |Note: This function do not support in memory to memory transfer type.
N     * |[11:10] |DAINC     |Destination Address Increment
N     * |        |          |This field is used to set the destination address increment size.
N     * |        |          |11 = No increment (fixed address).
N     * |        |          |Others = Increment and size is depended on TXWIDTH selection.
N     * |        |          |Note: This function do not support in memory to memory transfer type.
N     * |[13:12] |TXWIDTH   |Transfer Width Selection
N     * |        |          |This field is used for transfer width.
N     * |        |          |00 = One byte (8 bit) is transferred for every operation.
N     * |        |          |01= One half-word (16 bit) is transferred for every operation.
N     * |        |          |10 = One word (32-bit) is transferred for every operation.
N     * |        |          |11 = Reserved.
N     * |        |          |Note: The PDMA transfer source address (PDMA_DSCT_SA) and PDMA transfer destination address (PDMA_DSCT_DA) should be alignment under the TXWIDTH selection
N     * |[31:16] |TXCNT     |Transfer Count
N     * |        |          |The TXCNT represents the required number of PDMA transfer, the real transfer count is (TXCNT + 1); The maximum transfer count is 65536, every transfer may be byte, half-word or word that is dependent on TXWIDTH field.
N     * |        |          |Note: When PDMA finish each transfer data, this field will be decrease immediately.
N     * @var DSCT_T::SA
N     * Offset: 0x04  Source Address Register of PDMA Channel n
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |SA        |PDMA Transfer Source Address
N     * |        |          |This field indicates a 32-bit source address of PDMA controller.
N     * @var DSCT_T::DA
N     * Offset: 0x08  Destination Address Register of PDMA Channel n
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |DA        |PDMA Transfer Destination Address
N     * |        |          |This field indicates a 32-bit destination address of PDMA controller.
N     * @var DSCT_T::NEXT
N     * Offset: 0x0C  Next Scatter-gather Descriptor Table Offset Address of PDMA Channel n
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |NEXT      |PDMA Next Descriptor Table Offset
N     * |        |          |This field indicates the offset of the next descriptor table address in system memory.
N     * |        |          |Write Operation:
N     * |        |          |If the system memory based address is 0x2000_0000 (PDMA_SCATBA), and the next descriptor table is start from 0x2000_0100, then this field must fill in 0x0100.
N     * |        |          |Read Operation:
N     * |        |          |When operating in scatter-gather mode, the last two bits NEXT[1:0] will become reserved, and indicate the first next address of system memory.
N     * |        |          |Note1: The descriptor table address must be word boundary.
N     * |        |          |Note2: Before filled transfer task in the descriptor table, user must check if the descriptor table is complete.
N     * |[31:16] |EXENEXT   |PDMA Execution Next Descriptor Table Offset
N     * |        |          |This field indicates the offset of next descriptor table address of current execution descriptor table in system memory.
N     * |        |          |Note: write operation is useless in this field.
N     */
N    __IO uint32_t CTL;      /*!< [0x0000] Descriptor Table Control Register of PDMA Channel n.              */
X    volatile uint32_t CTL;       
N    __IO uint32_t SA;       /*!< [0x0004] Source Address Register of PDMA Channel n                        */
X    volatile uint32_t SA;        
N    __IO uint32_t DA;       /*!< [0x0008] Destination Address Register of PDMA Channel n                   */
X    volatile uint32_t DA;        
N    __IO uint32_t NEXT;     /*!< [0x000c] Next Scatter-Gather Descriptor Table Offset Address of PDMA Channel n */
X    volatile uint32_t NEXT;      
N
N} DSCT_T;
N
N
Ntypedef struct
N{
N
N
N    /**
N     * @var PDMA_T::CURSCAT
N     * Offset: 0x100  Current Scatter-gather Descriptor Table Address of PDMA Channel n
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |CURADDR   |PDMA Current Description Address (Read Only)
N     * |        |          |This field indicates a 32-bit current external description address of PDMA controller.
N     * |        |          |Note: This field is read only and used for Scatter-Gather mode only to indicate the current external description address.
N     * @var PDMA_T::CHCTL
N     * Offset: 0x400  PDMA Channel Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |CHENn     |PDMA Channel Enable Bits
N     * |        |          |Set this bit to 1 to enable PDMAn operation. Channel cannot be active if it is not set as enabled.
N     * |        |          |0 = PDMA channel [n] Disabled.
N     * |        |          |1 = PDMA channel [n] Enabled.
N     * |        |          |Note: Setting the corresponding bit of PDMA_PAUSE or PDMA_CHRST register will also clear this bit.
N     * @var PDMA_T::PAUSE
N     * Offset: 0x404  PDMA Transfer Pause Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |PAUSEn    |PDMA Channel N Transfer Pause Control (Write Only)
N     * |        |          |User can set PAUSEn bit field to pause the PDMA transfer.
N     * |        |          |When user sets PAUSEn bit, the PDMA controller will pause the on-going transfer, then clear the channel enable bit CHEN(PDMA_CHCTL [n], n=0,1..8) and clear request active flag(PDMA_TRGSTS[n:0], n=0,1..8).
N     * |        |          |If the paused channel is re-enabled again, the remaining transfers will be processed.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Pause PDMA channel n transfer.
N     * @var PDMA_T::SWREQ
N     * Offset: 0x408  PDMA Software Request Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |SWREQn    |PDMA Software Request (Write Only)
N     * |        |          |Set this bit to 1 to generate a software request to PDMA [n].
N     * |        |          |0 = No effect.
N     * |        |          |1 = Generate a software request.
N     * |        |          |Note1: User can read PDMA_TRGSTS register to know which channel is on active.
N     * |        |          |Active flag may be triggered by software request or peripheral request.
N     * |        |          |Note2: If user does not enable corresponding PDMA channel, the software request will be ignored.
N     * @var PDMA_T::TRGSTS
N     * Offset: 0x40C  PDMA Channel Request Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |REQSTSn   |PDMA Channel Request Status (Read Only)
N     * |        |          |This flag indicates whether channel[n] have a request or not, no matter request from software or peripheral.
N     * |        |          |When PDMA controller finishes channel transfer, this bit will be cleared automatically.
N     * |        |          |0 = PDMA Channel n has no request.
N     * |        |          |1 = PDMA Channel n has a request.
N     * |        |          |Note: If user pauses or resets each PDMA transfer by setting PDMA_PAUSE or PDMA_CHRST register respectively, this bit will be cleared automatically after finishing the current transfer.
N     * @var PDMA_T::PRISET
N     * Offset: 0x410  PDMA Fixed Priority Setting Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |FPRISETn  |PDMA Fixed Priority Setting
N     * |        |          |Set this bit to 1 to enable fixed priority level.
N     * |        |          |Write Operation:
N     * |        |          |0 = No effect.
N     * |        |          |1 = Set PDMA channel [n] to fixed priority channel.
N     * |        |          |Read Operation:
N     * |        |          |0 = Corresponding PDMA channel is round-robin priority.
N     * |        |          |1 = Corresponding PDMA channel is fixed priority.
N     * |        |          |Note: This field only set to fixed priority, clear fixed priority use PDMA_PRICLR register.
N     * @var PDMA_T::PRICLR
N     * Offset: 0x414  PDMA Fixed Priority Clear Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |FPRICLRn  |PDMA Fixed Priority Clear Bits (Write Only)
N     * |        |          |Set this bit to 1 to clear fixed priority level.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear PDMA channel [n] fixed priority setting.
N     * |        |          |Note: User can read PDMA_PRISET register to know the channel priority.
N     * @var PDMA_T::INTEN
N     * Offset: 0x418  PDMA Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |INTENn    |PDMA Interrupt Enable Bits
N     * |        |          |This field is used to enable PDMA channel[n] interrupt.
N     * |        |          |0 = PDMA channel n interrupt Disabled.
N     * |        |          |1 = PDMA channel n interrupt Enabled.
N     * @var PDMA_T::INTSTS
N     * Offset: 0x41C  PDMA Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ABTIF     |PDMA Read/Write Target Abort Interrupt Flag (Read Only)
N     * |        |          |This bit indicates that PDMA has target abort error; Software can read PDMA_ABTSTS register to find which channel has target abort error.
N     * |        |          |0 = No AHB bus ERROR response received.
N     * |        |          |1 = AHB bus ERROR response received.
N     * |[1]     |TDIF      |Transfer Done Interrupt Flag (Read Only)
N     * |        |          |This bit indicates that PDMA controller has finished transmission; User can read PDMA_TDSTS register to indicate which channel finished transfer.
N     * |        |          |0 = Not finished yet.
N     * |        |          |1 = PDMA channel has finished transmission.
N     * |[2]     |ALIGNF    |Transfer Alignment Interrupt Flag (Read Only)
N     * |        |          |0 = PDMA channel source address and destination address both follow transfer width setting.
N     * |        |          |1 = PDMA channel source address or destination address is not follow transfer width setting.
N     * |[8]     |REQTOF0   |Request Time-out Flag for Channel 0
N     * |        |          |This flag indicates that PDMA controller has waited peripheral request for a period defined by PDMA_TOC0, user can write 1 to clear these bits.
N     * |        |          |0 = No request time-out.
N     * |        |          |1 = Peripheral request time-out.
N     * |[9]     |REQTOF1   |Request Time-out Flag for Channel 1
N     * |        |          |This flag indicates that PDMA controller has waited peripheral request for a period defined by PDMA_TOC1, user can write 1 to clear these bits.
N     * |        |          |0 = No request time-out.
N     * |        |          |1 = Peripheral request time-out.
N     * @var PDMA_T::ABTSTS
N     * Offset: 0x420  PDMA Channel Read/Write Target Abort Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |ABTIFn    |PDMA Read/Write Target Abort Interrupt Status Flag
N     * |        |          |This bit indicates which PDMA controller has target abort error; User can write 1 to clear these bits.
N     * |        |          |0 = No AHB bus ERROR response received when channel n transfer.
N     * |        |          |1 = AHB bus ERROR response received when channel n transfer.
N     * @var PDMA_T::TDSTS
N     * Offset: 0x424  PDMA Channel Transfer Done Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |TDIFn     |Transfer Done Flag
N     * |        |          |This bit indicates whether PDMA controller channel transfer has been finished or not, user can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel transfer has not finished.
N     * |        |          |1 = PDMA channel has finished transmission.
N     * @var PDMA_T::ALIGN
N     * Offset: 0x428  PDMA Transfer Alignment Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |ALIGNn    |Transfer Alignment Flag
N     * |        |          |0 = PDMA channel source address and destination address both follow transfer width setting.
N     * |        |          |1 = PDMA channel source address or destination address is not follow transfer width setting.
N     * @var PDMA_T::TACTSTS
N     * Offset: 0x42C  PDMA Transfer Active Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]     |TXACTFn   |Transfer on Active Flag (Read Only)
N     * |        |          |This bit indicates which PDMA channel is in active.
N     * |        |          |0 = PDMA channel is not finished.
N     * |        |          |1 = PDMA channel is active.
N     * @var PDMA_T::TOUTPSC
N     * Offset: 0x430  PDMA Time-out Prescaler Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |TOUTPSC0  |PDMA Channel 0 Time-out Clock Source Prescaler Bits
N     * |        |          |000 = PDMA channel 0 time-out clock source is HCLK/2^8.
N     * |        |          |001 = PDMA channel 0 time-out clock source is HCLK/2^9.
N     * |        |          |010 = PDMA channel 0 time-out clock source is HCLK/2^10.
N     * |        |          |011 = PDMA channel 0 time-out clock source is HCLK/2^11.
N     * |        |          |100 = PDMA channel 0 time-out clock source is HCLK/2^12.
N     * |        |          |101 = PDMA channel 0 time-out clock source is HCLK/2^13.
N     * |        |          |110 = PDMA channel 0 time-out clock source is HCLK/2^14.
N     * |        |          |111 = PDMA channel 0 time-out clock source is HCLK/2^15.
N     * |[6:4]   |TOUTPSC1  |PDMA Channel 1 Time-out Clock Source Prescaler Bits
N     * |        |          |000 = PDMA channel 1 time-out clock source is HCLK/2^8.
N     * |        |          |001 = PDMA channel 1 time-out clock source is HCLK/2^9.
N     * |        |          |010 = PDMA channel 1 time-out clock source is HCLK/2^10.
N     * |        |          |011 = PDMA channel 1 time-out clock source is HCLK/2^11.
N     * |        |          |100 = PDMA channel 1 time-out clock source is HCLK/2^12.
N     * |        |          |101 = PDMA channel 1 time-out clock source is HCLK/2^13.
N     * |        |          |110 = PDMA channel 1 time-out clock source is HCLK/2^14.
N     * |        |          |111 = PDMA channel 1 time-out clock source is HCLK/2^15.
N     * @var PDMA_T::TOUTEN
N     * Offset: 0x434  PDMA Time-out Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]     |TOUTENn   |PDMA Time-out Enable Bits
N     * |        |          |0 = PDMA Channel n time-out function Disabled.
N     * |        |          |1 = PDMA Channel n time-out function Enabled.
N     * @var PDMA_T::TOUTIEN
N     * Offset: 0x438  PDMA Time-out Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]     |TOUTIENn  |PDMA Time-out Interrupt Enable Bits
N     * |        |          |0 = PDMA Channel n time-out interrupt Disabled.
N     * |        |          |1 = PDMA Channel n time-out interrupt Enabled.
N     * @var PDMA_T::SCATBA
N     * Offset: 0x43C  PDMA Scatter-gather Descriptor Table Base Address Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:16] |SCATBA    |PDMA Scatter-gather Descriptor Table Address
N     * |        |          |In Scatter-Gather mode, this is the base address for calculating the next link - list address.
N     * |        |          |The next link address equation is
N     * |        |          |Next Link Address = PDMA_SCATBA + PDMA_DSCT_NEXT.
N     * |        |          |Note: Only useful in Scatter-Gather mode.
N     * @var PDMA_T::TOC0_1
N     * Offset: 0x440  PDMA Time-out Counter Ch1 and Ch0 Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |TOC0      |Time-out Counter for Channel 0
N     * |        |          |This controls the period of time-out function for channel 0.
N     * |        |          |The calculation unit is based on TOUTPSC0 (PDMA_TOUTPSC[2:0]) clock.
N     * |        |          |Time-out period = (Period of time-out clock) * (16-bit TOCn), n = 0,1.
N     * |[31:16] |TOC1      |Time-out Counter for Channel 1
N     * |        |          |This controls the period of time-out function for channel 1.
N     * |        |          |The calculation unit is based on TOUTPSC1 (PDMA_TOUTPSC[6:4]) clock.
N     * |        |          |The example of time-out period can refer TOC0 bit description.
N     * @var PDMA_T::CHRST
N     * Offset: 0x460  PDMA Channel Reset Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]   |CHnRST    |Channel N Reset
N     * |        |          |0 = corresponding channel n is not reset.
N     * |        |          |1 = corresponding channel n is reset.
N     * @var PDMA_T::REQSEL0_3
N     * Offset: 0x480  PDMA Request Source Select Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |REQSRC0   |Channel 0 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 0.
N     * |        |          |User can configure the peripheral by setting REQSRC0.
N     * |        |          |0 = Disable PDMA peripheral request.
N     * |        |          |1 = reserved.
N     * |        |          |2 = reserved.
N     * |        |          |3 = reserved.
N     * |        |          |4 = Channel connects to UART0_TX.
N     * |        |          |5 = Channel connects to UART0_RX.
N     * |        |          |6 = Channel connects to UART1_TX.
N     * |        |          |7 = Channel connects to UART1_RX.
N     * |        |          |8 = Channel connects to UART2_TX.
N     * |        |          |9 = Channel connects to UART2_RX.
N     * |        |          |10 = Channel connects to USCI0_TX.
N     * |        |          |11 = Channel connects to USCI0_RX.
N     * |        |          |12 = Channel connects to USCI1_TX.
N     * |        |          |13 = Channel connects to USCI1_RX.
N     * |        |          |14 = Reserved.
N     * |        |          |15 = Reserved.
N     * |        |          |16 = Channel connects to QSPI0_TX.
N     * |        |          |17 = Channel connects to QSPI0_RX.
N     * |        |          |18 = Channel connects to SPI0_TX.
N     * |        |          |19 = Channel connects to SPI0_RX.
N     * |        |          |20 = Channel connects to ADC_RX.
N     * |        |          |21 = Channel connects to PWM0_P1_RX.
N     * |        |          |22 = Channel connects to PWM0_P2_RX.
N     * |        |          |23 = Channel connects to PWM0_P3_RX.
N     * |        |          |24 = Channel connects to PWM1_P1_RX.
N     * |        |          |25 = Channel connects to PWM1_P2_RX.
N     * |        |          |26 = Channel connects to PWM1_P3_RX.
N     * |        |          |27 = Reserved.
N     * |        |          |28 = Channel connects to I2C0_TX.
N     * |        |          |29 = Channel connects to I2C0_RX.
N     * |        |          |30 = Channel connects to I2C1_TX.
N     * |        |          |31 = Channel connects to I2C1_RX.
N     * |        |          |32 = Channel connects to TMR0.
N     * |        |          |33 = Channel connects to TMR1.
N     * |        |          |34 = Channel connects to TMR2.
N     * |        |          |35 = Channel connects to TMR3.
N     * |        |          |36 = Channel connects to UART3_TX.
N     * |        |          |37 = Channel connects to UART3_RX.
N     * |        |          |38 = Channel connects to UART4_TX.
N     * |        |          |39 = Channel connects to UART4_RX.
N     * |        |          |40 = Channel connects to UART5_TX.
N     * |        |          |41 = Channel connects to UART5_RX.
N     * |        |          |42 = Channel connects to UART6_TX.
N     * |        |          |43 = Channel connects to UART6_RX.
N     * |        |          |44 = Channel connects to UART7_TX.
N     * |        |          |45 = Channel connects to UART7_RX.
N     * |        |          |Others = Reserved.
N     * |        |          |Note 1: A peripheral cannot be assigned to two channels at the same time.
N     * |        |          |Note 2: This field is useless when transfer between memory and memory.
N     * |[13:8]  |REQSRC1   |Channel 1 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 1.
N     * |        |          |User can configure the peripheral setting by REQSRC1.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field.
N     * |        |          |Please refer to the explanation of REQSRC0.
N     * |[21:16] |REQSRC2   |Channel 2 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 2.
N     * |        |          |User can configure the peripheral setting by REQSRC2.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field.
N     * |        |          |Please refer to the explanation of REQSRC0.
N     * |[29:24] |REQSRC3   |Channel 3 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 3.
N     * |        |          |User can configure the peripheral setting by REQSRC3.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field.
N     * |        |          |Please refer to the explanation of REQSRC0.
N     * @var PDMA_T::REQSEL4_7
N     * Offset: 0x484  PDMA Request Source Select Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |REQSRC4   |Channel 4 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 4.
N     * |        |          |User can configure the peripheral setting by REQSRC4.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field.
N     * |        |          |Please refer to the explanation of REQSRC0.
N     * |[13:8]  |REQSRC5   |Channel 5 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 5.
N     * |        |          |User can configure the peripheral setting by REQSRC5.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field.
N     * |        |          |Please refer to the explanation of REQSRC0.
N     * |[21:16] |REQSRC6   |Channel 6 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 6.
N     * |        |          |User can configure the peripheral setting by REQSRC6.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field.
N     * |        |          |Please refer to the explanation of REQSRC0.
N     * |[29:24] |REQSRC7   |Channel 7 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 7.
N     * |        |          |User can configure the peripheral setting by REQSRC7.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field.
N     * |        |          |Please refer to the explanation of REQSRC0.
N     * @var PDMA_T::REQSEL8
N     * Offset: 0x488  PDMA Request Source Select Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |REQSRC8   |Channel 8 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 8.
N     * |        |          |User can configure the peripheral setting by REQSRC8.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field.
N     * |        |          |Please refer to the explanation of REQSRC0.
N     */
N    DSCT_T        DSCT[9];               /*!< [0x0000 ~ 0x008C] Control Register of PDMA Channel 0 ~ 8                  */
N    __I  uint32_t RESERVE0[28];
X    volatile const  uint32_t RESERVE0[28];
N    __I  uint32_t CURSCAT[9];            /*!< [0x0100 ~ 0x110] Current Scatter-gather Descriptor Table Address of PDMA Channel n */
X    volatile const  uint32_t CURSCAT[9];             
N    __I  uint32_t RESERVE1[183];
X    volatile const  uint32_t RESERVE1[183];
N    __IO uint32_t CHCTL;                 /*!< [0x0400] PDMA Channel Control Register                                    */
X    volatile uint32_t CHCTL;                  
N    __O  uint32_t PAUSE;                 /*!< [0x0404] PDMA Transfer Pause Control Register                             */
X    volatile  uint32_t PAUSE;                  
N    __O  uint32_t SWREQ;                 /*!< [0x0408] PDMA Software Request Register                                   */
X    volatile  uint32_t SWREQ;                  
N    __I  uint32_t TRGSTS;                /*!< [0x040c] PDMA Channel Request Status Register                             */
X    volatile const  uint32_t TRGSTS;                 
N    __IO uint32_t PRISET;                /*!< [0x0410] PDMA Fixed Priority Setting Register                             */
X    volatile uint32_t PRISET;                 
N    __O  uint32_t PRICLR;                /*!< [0x0414] PDMA Fixed Priority Clear Register                               */
X    volatile  uint32_t PRICLR;                 
N    __IO uint32_t INTEN;                 /*!< [0x0418] PDMA Interrupt Enable Register                                   */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t INTSTS;                /*!< [0x041c] PDMA Interrupt Status Register                                   */
X    volatile uint32_t INTSTS;                 
N    __IO uint32_t ABTSTS;                /*!< [0x0420] PDMA Channel Read/Write Target Abort Flag Register               */
X    volatile uint32_t ABTSTS;                 
N    __IO uint32_t TDSTS;                 /*!< [0x0424] PDMA Channel Transfer Done Flag Register                         */
X    volatile uint32_t TDSTS;                  
N    __IO uint32_t ALIGN;                 /*!< [0x0428] PDMA Transfer Alignment Status Register                          */
X    volatile uint32_t ALIGN;                  
N    __I  uint32_t TACTSTS;               /*!< [0x042c] PDMA Transfer Active Flag Register                               */
X    volatile const  uint32_t TACTSTS;                
N    __IO uint32_t TOUTPSC;               /*!< [0x0430] PDMA Time-out Prescaler Register                                 */
X    volatile uint32_t TOUTPSC;                
N    __IO uint32_t TOUTEN;                /*!< [0x0434] PDMA Time-out Enable Register                                    */
X    volatile uint32_t TOUTEN;                 
N    __IO uint32_t TOUTIEN;               /*!< [0x0438] PDMA Time-out Interrupt Enable Register                          */
X    volatile uint32_t TOUTIEN;                
N    __IO uint32_t SCATBA;                /*!< [0x043c] PDMA Scatter-gather Descriptor Table Base Address Register       */
X    volatile uint32_t SCATBA;                 
N    __IO uint32_t TOC0_1;                /*!< [0x0440] PDMA Time-out Counter Ch1 and Ch0 Register                       */
X    volatile uint32_t TOC0_1;                 
N    __I  uint32_t RESERVE2[7];
X    volatile const  uint32_t RESERVE2[7];
N    __IO uint32_t CHRST;                 /*!< [0x0460] PDMA Channel Reset Register                                      */
X    volatile uint32_t CHRST;                  
N    __I  uint32_t RESERVE3[7];
X    volatile const  uint32_t RESERVE3[7];
N    __IO uint32_t REQSEL0_3;             /*!< [0x0480] PDMA Request Source Select Register 0                            */
X    volatile uint32_t REQSEL0_3;              
N    __IO uint32_t REQSEL4_7;             /*!< [0x0484] PDMA Request Source Select Register 1                            */
X    volatile uint32_t REQSEL4_7;              
N    __IO uint32_t REQSEL8;               /*!< [0x0488] PDMA Request Source Select Register 2                            */
X    volatile uint32_t REQSEL8;                
N} PDMA_T;
N
N/**
N    @addtogroup PDMA_CONST PDMA Bit Field Definition
N    Constant Definitions for PDMA Controller
N@{ */
N
N#define PDMA_DSCT_CTL_OPMODE_Pos        (0)                                              /*!< DSCT_T::CTL: OPMODE Position     */
N#define PDMA_DSCT_CTL_OPMODE_Msk        (0x3ul << PDMA_DSCT_CTL_OPMODE_Pos)              /*!< DSCT_T::CTL: OPMODE Mask         */
N
N#define PDMA_DSCT_CTL_TXTYPE_Pos        (2)                                              /*!< DSCT_T::CTL: TXTYPE Position     */
N#define PDMA_DSCT_CTL_TXTYPE_Msk        (0x1ul << PDMA_DSCT_CTL_TXTYPE_Pos)              /*!< DSCT_T::CTL: TXTYPE Mask         */
N
N#define PDMA_DSCT_CTL_BURSIZE_Pos       (4)                                              /*!< DSCT_T::CTL: BURSIZE Position    */
N#define PDMA_DSCT_CTL_BURSIZE_Msk       (0x7ul << PDMA_DSCT_CTL_BURSIZE_Pos)             /*!< DSCT_T::CTL: BURSIZE Mask        */
N
N#define PDMA_DSCT_CTL_TBINTDIS_Pos      (7)                                              /*!< DSCT_T::CTL: TBINTDIS Position   */
N#define PDMA_DSCT_CTL_TBINTDIS_Msk      (0x1ul << PDMA_DSCT_CTL_TBINTDIS_Pos)            /*!< DSCT_T::CTL: TBINTDIS Mask       */
N
N#define PDMA_DSCT_CTL_SAINC_Pos         (8)                                              /*!< DSCT_T::CTL: SAINC Position      */
N#define PDMA_DSCT_CTL_SAINC_Msk         (0x3ul << PDMA_DSCT_CTL_SAINC_Pos)               /*!< DSCT_T::CTL: SAINC Mask          */
N
N#define PDMA_DSCT_CTL_DAINC_Pos         (10)                                             /*!< DSCT_T::CTL: DAINC Position      */
N#define PDMA_DSCT_CTL_DAINC_Msk         (0x3ul << PDMA_DSCT_CTL_DAINC_Pos)               /*!< DSCT_T::CTL: DAINC Mask          */
N
N#define PDMA_DSCT_CTL_TXWIDTH_Pos       (12)                                             /*!< DSCT_T::CTL: TXWIDTH Position    */
N#define PDMA_DSCT_CTL_TXWIDTH_Msk       (0x3ul << PDMA_DSCT_CTL_TXWIDTH_Pos)             /*!< DSCT_T::CTL: TXWIDTH Mask        */
N
N#define PDMA_DSCT_CTL_TXCNT_Pos         (16)                                             /*!< DSCT_T::CTL: TXCNT Position      */
N#define PDMA_DSCT_CTL_TXCNT_Msk         (0xfffful << PDMA_DSCT_CTL_TXCNT_Pos)            /*!< DSCT_T::CTL: TXCNT Mask          */
N
N#define PDMA_DSCT_SA_SA_Pos             (0)                                              /*!< DSCT_T::SA: SA Position          */
N#define PDMA_DSCT_SA_SA_Msk             (0xfffffffful << PDMA_DSCT_SA_SA_Pos)            /*!< DSCT_T::SA: SA Mask              */
N
N#define PDMA_DSCT_DA_DA_Pos             (0)                                              /*!< DSCT_T::DA: DA Position          */
N#define PDMA_DSCT_DA_DA_Msk             (0xfffffffful << PDMA_DSCT_DA_DA_Pos)            /*!< DSCT_T::DA: DA Mask              */
N
N#define PDMA_DSCT_NEXT_NEXT_Pos         (0)                                              /*!< DSCT_T::NEXT: NEXT Position      */
N#define PDMA_DSCT_NEXT_NEXT_Msk         (0xfffful << PDMA_DSCT_NEXT_NEXT_Pos)            /*!< DSCT_T::NEXT: NEXT Mask          */
N
N#define PDMA_DSCT_NEXT_EXENEXT_Pos      (16)                                             /*!< DSCT_T::NEXT: EXENEXT Position   */
N#define PDMA_DSCT_NEXT_EXENEXT_Msk      (0xfffful << PDMA_DSCT_NEXT_EXENEXT_Pos)         /*!< DSCT_T::NEXT: EXENEXT Mask       */
N
N#define PDMA_CURSCAT_CURADDR_Pos        (0)                                              /*!< PDMA_T::CURSCAT: CURADDR Position     */
N#define PDMA_CURSCAT_CURADDR_Msk        (0xfffffffful << PDMA_CURSCAT_CURADDR_Pos)       /*!< PDMA_T::CURSCAT: CURADDR Mask         */
N
N#define PDMA_CHCTL_CHENn_Pos            (0)                                              /*!< PDMA_T::CHCTL: CHENn Position         */
N#define PDMA_CHCTL_CHENn_Msk            (0x1fful << PDMA_CHCTL_CHENn_Pos)                 /*!< PDMA_T::CHCTL: CHENn Mask             */
N
N#define PDMA_PAUSE_PAUSEn_Pos           (0)                                              /*!< PDMA_T::PAUSE: PAUSEn Position        */
N#define PDMA_PAUSE_PAUSEn_Msk           (0x1fful << PDMA_PAUSE_PAUSEn_Pos)                /*!< PDMA_T::PAUSE: PAUSEn Mask            */
N
N#define PDMA_SWREQ_SWREQn_Pos           (0)                                              /*!< PDMA_T::SWREQ: SWREQn Position        */
N#define PDMA_SWREQ_SWREQn_Msk           (0x1fful << PDMA_SWREQ_SWREQn_Pos)                /*!< PDMA_T::SWREQ: SWREQn Mask            */
N
N#define PDMA_TRGSTS_REQSTSn_Pos         (0)                                              /*!< PDMA_T::TRGSTS: REQSTSn Position      */
N#define PDMA_TRGSTS_REQSTSn_Msk         (0x1fful << PDMA_TRGSTS_REQSTSn_Pos)              /*!< PDMA_T::TRGSTS: REQSTSn Mask          */
N
N#define PDMA_PRISET_FPRISETn_Pos        (0)                                              /*!< PDMA_T::PRISET: FPRISETn Position     */
N#define PDMA_PRISET_FPRISETn_Msk        (0x1fful << PDMA_PRISET_FPRISETn_Pos)             /*!< PDMA_T::PRISET: FPRISETn Mask         */
N
N#define PDMA_PRICLR_FPRICLRn_Pos        (0)                                              /*!< PDMA_T::PRICLR: FPRICLRn Position     */
N#define PDMA_PRICLR_FPRICLRn_Msk        (0x1fful << PDMA_PRICLR_FPRICLRn_Pos)             /*!< PDMA_T::PRICLR: FPRICLRn Mask         */
N
N#define PDMA_INTEN_INTENn_Pos           (0)                                              /*!< PDMA_T::INTEN: INTENn Position        */
N#define PDMA_INTEN_INTENn_Msk           (0x1fful << PDMA_INTEN_INTENn_Pos)                /*!< PDMA_T::INTEN: INTENn Mask            */
N
N#define PDMA_INTSTS_ABTIF_Pos           (0)                                              /*!< PDMA_T::INTSTS: ABTIF Position        */
N#define PDMA_INTSTS_ABTIF_Msk           (0x1ul << PDMA_INTSTS_ABTIF_Pos)                 /*!< PDMA_T::INTSTS: ABTIF Mask            */
N
N#define PDMA_INTSTS_TDIF_Pos            (1)                                              /*!< PDMA_T::INTSTS: TDIF Position         */
N#define PDMA_INTSTS_TDIF_Msk            (0x1ul << PDMA_INTSTS_TDIF_Pos)                  /*!< PDMA_T::INTSTS: TDIF Mask             */
N
N#define PDMA_INTSTS_ALIGNF_Pos          (2)                                              /*!< PDMA_T::INTSTS: ALIGNF Position       */
N#define PDMA_INTSTS_ALIGNF_Msk          (0x1ul << PDMA_INTSTS_ALIGNF_Pos)                /*!< PDMA_T::INTSTS: ALIGNF Mask           */
N
N#define PDMA_INTSTS_REQTOF0_Pos         (8)                                              /*!< PDMA_T::INTSTS: REQTOF0 Position      */
N#define PDMA_INTSTS_REQTOF0_Msk         (0x1ul << PDMA_INTSTS_REQTOF0_Pos)               /*!< PDMA_T::INTSTS: REQTOF0 Mask          */
N
N#define PDMA_INTSTS_REQTOF1_Pos         (9)                                              /*!< PDMA_T::INTSTS: REQTOF1 Position      */
N#define PDMA_INTSTS_REQTOF1_Msk         (0x1ul << PDMA_INTSTS_REQTOF1_Pos)               /*!< PDMA_T::INTSTS: REQTOF1 Mask          */
N
N#define PDMA_ABTSTS_ABTIF0_Pos          (0)                                              /*!< PDMA_T::ABTSTS: ABTIF0 Position       */
N#define PDMA_ABTSTS_ABTIF0_Msk          (0x1ul << PDMA_ABTSTS_ABTIF0_Pos)                /*!< PDMA_T::ABTSTS: ABTIF0 Mask           */
N
N#define PDMA_ABTSTS_ABTIF1_Pos          (1)                                              /*!< PDMA_T::ABTSTS: ABTIF1 Position       */
N#define PDMA_ABTSTS_ABTIF1_Msk          (0x1ul << PDMA_ABTSTS_ABTIF1_Pos)                /*!< PDMA_T::ABTSTS: ABTIF1 Mask           */
N
N#define PDMA_ABTSTS_ABTIF2_Pos          (2)                                              /*!< PDMA_T::ABTSTS: ABTIF2 Position       */
N#define PDMA_ABTSTS_ABTIF2_Msk          (0x1ul << PDMA_ABTSTS_ABTIF2_Pos)                /*!< PDMA_T::ABTSTS: ABTIF2 Mask           */
N
N#define PDMA_ABTSTS_ABTIF3_Pos          (3)                                              /*!< PDMA_T::ABTSTS: ABTIF3 Position       */
N#define PDMA_ABTSTS_ABTIF3_Msk          (0x1ul << PDMA_ABTSTS_ABTIF3_Pos)                /*!< PDMA_T::ABTSTS: ABTIF3 Mask           */
N
N#define PDMA_ABTSTS_ABTIF4_Pos          (4)                                              /*!< PDMA_T::ABTSTS: ABTIF4 Position       */
N#define PDMA_ABTSTS_ABTIF4_Msk          (0x1ul << PDMA_ABTSTS_ABTIF4_Pos)                /*!< PDMA_T::ABTSTS: ABTIF4 Mask           */
N
N#define PDMA_ABTSTS_ABTIF5_Pos          (5)                                               /*!< PDMA_T::ABTSTS: ABTIF5 Position        */
N#define PDMA_ABTSTS_ABTIF5_Msk          (0x1ul << PDMA_ABTSTS_ABTIF5_Pos)                 /*!< PDMA_T::ABTSTS: ABTIF5 Mask            */
N
N#define PDMA_ABTSTS_ABTIF6_Pos          (6)                                               /*!< PDMA_T::ABTSTS: ABTIF6 Position        */
N#define PDMA_ABTSTS_ABTIF6_Msk          (0x1ul << PDMA_ABTSTS_ABTIF6_Pos)                 /*!< PDMA_T::ABTSTS: ABTIF6 Mask            */
N
N#define PDMA_ABTSTS_ABTIF7_Pos          (7)                                               /*!< PDMA_T::ABTSTS: ABTIF7 Position        */
N#define PDMA_ABTSTS_ABTIF7_Msk          (0x1ul << PDMA_ABTSTS_ABTIF7_Pos)                 /*!< PDMA_T::ABTSTS: ABTIF7 Mask            */
N
N#define PDMA_ABTSTS_ABTIF8_Pos          (8)                                               /*!< PDMA_T::ABTSTS: ABTIF8 Position        */
N#define PDMA_ABTSTS_ABTIF8_Msk          (0x1ul << PDMA_ABTSTS_ABTIF8_Pos)                 /*!< PDMA_T::ABTSTS: ABTIF8 Mask            */
N
N#define PDMA_TDSTS_TDIF0_Pos            (0)                                              /*!< PDMA_T::TDSTS: TDIF0 Position         */
N#define PDMA_TDSTS_TDIF0_Msk            (0x1ul << PDMA_TDSTS_TDIF0_Pos)                  /*!< PDMA_T::TDSTS: TDIF0 Mask             */
N
N#define PDMA_TDSTS_TDIF1_Pos            (1)                                              /*!< PDMA_T::TDSTS: TDIF1 Position         */
N#define PDMA_TDSTS_TDIF1_Msk            (0x1ul << PDMA_TDSTS_TDIF1_Pos)                  /*!< PDMA_T::TDSTS: TDIF1 Mask             */
N
N#define PDMA_TDSTS_TDIF2_Pos            (2)                                              /*!< PDMA_T::TDSTS: TDIF2 Position         */
N#define PDMA_TDSTS_TDIF2_Msk            (0x1ul << PDMA_TDSTS_TDIF2_Pos)                  /*!< PDMA_T::TDSTS: TDIF2 Mask             */
N
N#define PDMA_TDSTS_TDIF3_Pos            (3)                                              /*!< PDMA_T::TDSTS: TDIF3 Position         */
N#define PDMA_TDSTS_TDIF3_Msk            (0x1ul << PDMA_TDSTS_TDIF3_Pos)                  /*!< PDMA_T::TDSTS: TDIF3 Mask             */
N
N#define PDMA_TDSTS_TDIF4_Pos            (4)                                              /*!< PDMA_T::TDSTS: TDIF4 Position         */
N#define PDMA_TDSTS_TDIF4_Msk            (0x1ul << PDMA_TDSTS_TDIF4_Pos)                  /*!< PDMA_T::TDSTS: TDIF4 Mask             */
N
N#define PDMA_TDSTS_TDIF5_Pos            (5)                                               /*!< PDMA_T::TDSTS: TDIF5 Position          */
N#define PDMA_TDSTS_TDIF5_Msk            (0x1ul << PDMA_TDSTS_TDIF5_Pos)                   /*!< PDMA_T::TDSTS: TDIF5 Mask              */
N
N#define PDMA_TDSTS_TDIF6_Pos            (6)                                               /*!< PDMA_T::TDSTS: TDIF6 Position          */
N#define PDMA_TDSTS_TDIF6_Msk            (0x1ul << PDMA_TDSTS_TDIF6_Pos)                   /*!< PDMA_T::TDSTS: TDIF6 Mask              */
N
N#define PDMA_TDSTS_TDIF7_Pos            (7)                                               /*!< PDMA_T::TDSTS: TDIF7 Position          */
N#define PDMA_TDSTS_TDIF7_Msk            (0x1ul << PDMA_TDSTS_TDIF7_Pos)                   /*!< PDMA_T::TDSTS: TDIF7 Mask              */
N
N#define PDMA_TDSTS_TDIF8_Pos            (8)                                               /*!< PDMA_T::TDSTS: TDIF8 Position          */
N#define PDMA_TDSTS_TDIF8_Msk            (0x1ul << PDMA_TDSTS_TDIF8_Pos)                   /*!< PDMA_T::TDSTS: TDIF8 Mask              */
N
N#define PDMA_ALIGN_ALIGNn_Pos           (0)                                              /*!< PDMA_T::ALIGN: ALIGNn Position        */
N#define PDMA_ALIGN_ALIGNn_Msk           (0x1fful << PDMA_ALIGN_ALIGNn_Pos)                /*!< PDMA_T::ALIGN: ALIGNn Mask            */
N
N#define PDMA_TACTSTS_TXACTFn_Pos        (0)                                              /*!< PDMA_T::TACTSTS: TXACTFn Position     */
N#define PDMA_TACTSTS_TXACTFn_Msk        (0x1fful << PDMA_TACTSTS_TXACTFn_Pos)             /*!< PDMA_T::TACTSTS: TXACTFn Mask         */
N
N#define PDMA_TOUTPSC_TOUTPSC0_Pos       (0)                                              /*!< PDMA_T::TOUTPSC: TOUTPSC0 Position    */
N#define PDMA_TOUTPSC_TOUTPSC0_Msk       (0x7ul << PDMA_TOUTPSC_TOUTPSC0_Pos)             /*!< PDMA_T::TOUTPSC: TOUTPSC0 Mask        */
N
N#define PDMA_TOUTPSC_TOUTPSC1_Pos       (4)                                              /*!< PDMA_T::TOUTPSC: TOUTPSC1 Position    */
N#define PDMA_TOUTPSC_TOUTPSC1_Msk       (0x7ul << PDMA_TOUTPSC_TOUTPSC1_Pos)             /*!< PDMA_T::TOUTPSC: TOUTPSC1 Mask        */
N
N#define PDMA_TOUTEN_TOUTENn_Pos         (0)                                              /*!< PDMA_T::TOUTEN: TOUTENn Position      */
N#define PDMA_TOUTEN_TOUTENn_Msk         (0x3ul << PDMA_TOUTEN_TOUTENn_Pos)               /*!< PDMA_T::TOUTEN: TOUTENn Mask          */
N
N#define PDMA_TOUTIEN_TOUTIENn_Pos       (0)                                              /*!< PDMA_T::TOUTIEN: TOUTIENn Position    */
N#define PDMA_TOUTIEN_TOUTIENn_Msk       (0x3ul << PDMA_TOUTIEN_TOUTIENn_Pos)             /*!< PDMA_T::TOUTIEN: TOUTIENn Mask        */
N
N#define PDMA_SCATBA_SCATBA_Pos          (16)                                             /*!< PDMA_T::SCATBA: SCATBA Position       */
N#define PDMA_SCATBA_SCATBA_Msk          (0xfffful << PDMA_SCATBA_SCATBA_Pos)             /*!< PDMA_T::SCATBA: SCATBA Mask           */
N
N#define PDMA_TOC0_1_TOC0_Pos            (0)                                              /*!< PDMA_T::TOC0_1: TOC0 Position         */
N#define PDMA_TOC0_1_TOC0_Msk            (0xfffful << PDMA_TOC0_1_TOC0_Pos)               /*!< PDMA_T::TOC0_1: TOC0 Mask             */
N
N#define PDMA_TOC0_1_TOC1_Pos            (16)                                             /*!< PDMA_T::TOC0_1: TOC1 Position         */
N#define PDMA_TOC0_1_TOC1_Msk            (0xfffful << PDMA_TOC0_1_TOC1_Pos)               /*!< PDMA_T::TOC0_1: TOC1 Mask             */
N
N#define PDMA_CHRST_CHnRST_Pos           (0)                                              /*!< PDMA_T::CHRST: CHnRST Position        */
N#define PDMA_CHRST_CHnRST_Msk           (0x1fful << PDMA_CHRST_CHnRST_Pos)                /*!< PDMA_T::CHRST: CHnRST Mask            */
N
N#define PDMA_REQSEL0_3_REQSRC0_Pos      (0)                                              /*!< PDMA_T::REQSEL0_3: REQSRC0 Position   */
N#define PDMA_REQSEL0_3_REQSRC0_Msk      (0x3ful << PDMA_REQSEL0_3_REQSRC0_Pos)           /*!< PDMA_T::REQSEL0_3: REQSRC0 Mask       */
N
N#define PDMA_REQSEL0_3_REQSRC1_Pos      (8)                                              /*!< PDMA_T::REQSEL0_3: REQSRC1 Position   */
N#define PDMA_REQSEL0_3_REQSRC1_Msk      (0x3ful << PDMA_REQSEL0_3_REQSRC1_Pos)           /*!< PDMA_T::REQSEL0_3: REQSRC1 Mask       */
N
N#define PDMA_REQSEL0_3_REQSRC2_Pos      (16)                                             /*!< PDMA_T::REQSEL0_3: REQSRC2 Position   */
N#define PDMA_REQSEL0_3_REQSRC2_Msk      (0x3ful << PDMA_REQSEL0_3_REQSRC2_Pos)           /*!< PDMA_T::REQSEL0_3: REQSRC2 Mask       */
N
N#define PDMA_REQSEL0_3_REQSRC3_Pos      (24)                                             /*!< PDMA_T::REQSEL0_3: REQSRC3 Position   */
N#define PDMA_REQSEL0_3_REQSRC3_Msk      (0x3ful << PDMA_REQSEL0_3_REQSRC3_Pos)           /*!< PDMA_T::REQSEL0_3: REQSRC3 Mask       */
N
N#define PDMA_REQSEL4_7_REQSRC4_Pos      (0)                                               /*!< PDMA_T::REQSEL4_7: REQSRC4 Position    */
N#define PDMA_REQSEL4_7_REQSRC4_Msk      (0x3ful << PDMA_REQSEL4_7_REQSRC4_Pos)            /*!< PDMA_T::REQSEL4_7: REQSRC4 Mask        */
N
N#define PDMA_REQSEL4_7_REQSRC5_Pos      (8)                                               /*!< PDMA_T::REQSEL4_7: REQSRC5 Position    */
N#define PDMA_REQSEL4_7_REQSRC5_Msk      (0x3ful << PDMA_REQSEL4_7_REQSRC5_Pos)            /*!< PDMA_T::REQSEL4_7: REQSRC5 Mask        */
N
N#define PDMA_REQSEL4_7_REQSRC6_Pos      (16)                                              /*!< PDMA_T::REQSEL4_7: REQSRC6 Position    */
N#define PDMA_REQSEL4_7_REQSRC6_Msk      (0x3ful << PDMA_REQSEL4_7_REQSRC6_Pos)            /*!< PDMA_T::REQSEL4_7: REQSRC6 Mask        */
N
N#define PDMA_REQSEL4_7_REQSRC7_Pos      (24)                                              /*!< PDMA_T::REQSEL4_7: REQSRC7 Position    */
N#define PDMA_REQSEL4_7_REQSRC7_Msk      (0x3ful << PDMA_REQSEL4_7_REQSRC7_Pos)            /*!< PDMA_T::REQSEL4_7: REQSRC7 Mask        */
N
N#define PDMA_REQSEL8_REQSRC8_Pos        (0)                                               /*!< PDMA_T::REQSEL8: REQSRC8 Position    */
N#define PDMA_REQSEL8_REQSRC8_Msk        (0x3ful << PDMA_REQSEL8_REQSRC8_Pos)            /*!< PDMA_T::REQSEL8: REQSRC8 Mask        */
N/**@}*/ /* PDMA_CONST */
N/**@}*/ /* end of PDMA register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __PDMA_REG_H__ */
L 170 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "pwm_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\pwm_reg.h" 1
N/**************************************************************************//**
N * @file     pwm_reg.h
N * @version  V1.00
N * @brief    PWM register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __PWM_REG_H__
N#define __PWM_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup PWM Pulse Width Modulation Controller (PWM)
N    Memory Mapped Structure for PWM Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var PWM_T::CTL0
N     * Offset: 0x00  PWM Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CTRLDn    |Center Load Enable Bits
N     * |        |          |0 = Center Loading mode is disable for corresponding PWM channel n
N     * |        |          |1 = Center Loading mode is enable for corresponding PWM channel n
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |In up-down counter type, PERIOD will load to PBUF at the end point of each period.
N     * |        |          |CMPDAT will load to CMPBUF at the center point of a period.
N     * |[16]    |IMMLDENn  |Immediately Load Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = PERIOD will load to PBUF at the end point of each period.
N     * |        |          |CMPDAT will load to CMPBUF at the end point or center point of each period by setting CTRLD bit.
N     * |        |          |1 = PERIOD/CMPDAT will load to PBUF and CMPBUF immediately when software update PERIOD/CMPDAT.
N     * |        |          |Note: If IMMLDENn is enabled, WINLDENn and CTRLDn will be invalid.
N     * |[30]    |DBGHALT   |ICE Debug Mode Counter Halt (Write Protect)
N     * |        |          |If counter halt is enabled, PWM all counters will keep current value until exit ICE debug mode.
N     * |        |          |0 = ICE debug mode counter halt disable.
N     * |        |          |1 = ICE debug mode counter halt enable.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[31]    |DBGTRIOFF |ICE Debug Mode Acknowledge Disable (Write Protect)
N     * |        |          |0 = ICE debug mode acknowledgement affects PWM output.
N     * |        |          |PWM pin will be forced as tri-state while ICE debug mode acknowledged.
N     * |        |          |1 = ICE debug mode acknowledgement disabled.
N     * |        |          |PWM pin will keep output no matter ICE debug mode acknowledged or not.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::CTL1
N     * Offset: 0x04  PWM Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |CNTTYPE0  |PWM Counter Behavior Type 0
N     * |        |          |The two bits control channel 1 and channel 0.
N     * |        |          |00 = Up counter type (supports in capture mode).
N     * |        |          |01 = Down count type (supports in capture mode).
N     * |        |          |10 = Up-down counter type.
N     * |        |          |11 = Reserved.
N     * |[5:4]   |CNTTYPE2  |PWM Counter Behavior Type 2
N     * |        |          |The two bits control channel 3 and channel 2.
N     * |        |          |00 = Up counter type (supports in capture mode).
N     * |        |          |01 = Down count type (supports in capture mode).
N     * |        |          |10 = Up-down counter type.
N     * |        |          |11 = Reserved.
N     * |[9:8]   |CNTTYPE4  |PWM Counter Behavior Type 4
N     * |        |          |The two bits control channel 5 and channel 4.
N     * |        |          |00 = Up counter type (supports in capture mode).
N     * |        |          |01 = Down count type (supports in capture mode).
N     * |        |          |10 = Up-down counter type.
N     * |        |          |11 = Reserved.
N     * |[26:24] |PWMMODEn  |PWM Mode
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = PWM independent mode.
N     * |        |          |1 = PWM complementary mode.
N     * |        |          |Note: When operating in group function, these bits must all set to the same mode.
N     * @var PWM_T::CLKSRC
N     * Offset: 0x10  PWM Clock Source Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |ECLKSRC0  |PWM_CH01 External Clock Source Select
N     * |        |          |000 = PWMx_CLK, x denotes 0 or 1.
N     * |        |          |001 = TIMER0 overflow.
N     * |        |          |010 = TIMER1 overflow.
N     * |        |          |011 = TIMER2 overflow.
N     * |        |          |100 = TIMER3 overflow.
N     * |        |          |Others = Reserved.
N     * |[10:8]  |ECLKSRC2  |PWM_CH23 External Clock Source Select
N     * |        |          |000 = PWMx_CLK, x denotes 0 or 1.
N     * |        |          |001 = TIMER0 overflow.
N     * |        |          |010 = TIMER1 overflow.
N     * |        |          |011 = TIMER2 overflow.
N     * |        |          |100 = TIMER3 overflow.
N     * |        |          |Others = Reserved.
N     * |[18:16] |ECLKSRC4  |PWM_CH45 External Clock Source Select
N     * |        |          |000 = PWMx_CLK, x denotes 0 or 1.
N     * |        |          |001 = TIMER0 overflow.
N     * |        |          |010 = TIMER1 overflow.
N     * |        |          |011 = TIMER2 overflow.
N     * |        |          |100 = TIMER3 overflow.
N     * |        |          |Others = Reserved.
N     * @var PWM_T::CLKPSC[3]
N     * Offset: 0x14  PWM Clock Prescale Register 0/1, 2/3, 4/5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |CLKPSC    |PWM Counter Clock Prescale
N     * |        |          |The clock of PWM counter is decided by clock prescaler.
N     * |        |          |Each PWM pair share one PWM counter clock prescaler.
N     * |        |          |The clock of PWM counter is divided by (CLKPSC+1).
N     * @var PWM_T::CNTEN
N     * Offset: 0x20  PWM Counter Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTEN0    |PWM Counter Enable 0
N     * |        |          |0 = PWM Counter and clock prescaler Stop Running.
N     * |        |          |1 = PWM Counter and clock prescaler Start Running.
N     * |[2]     |CNTEN2    |PWM Counter Enable 2
N     * |        |          |0 = PWM Counter and clock prescaler Stop Running.
N     * |        |          |1 = PWM Counter and clock prescaler Start Running.
N     * |[4]     |CNTEN4    |PWM Counter Enable 4
N     * |        |          |0 = PWM Counter and clock prescaler Stop Running.
N     * |        |          |1 = PWM Counter and clock prescaler Start Running.
N     * @var PWM_T::CNTCLR
N     * Offset: 0x24  PWM Clear Counter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTCLR0   |Clear PWM Counter Control Bit 0
N     * |        |          |It is automatically cleared by hardware.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear 16-bit PWM counter to 0000H.
N     * |[2]     |CNTCLR2   |Clear PWM Counter Control Bit 2
N     * |        |          |It is automatically cleared by hardware.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear 16-bit PWM counter to 0000H.
N     * |[4]     |CNTCLR4   |Clear PWM Counter Control Bit 4
N     * |        |          |It is automatically cleared by hardware.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear 16-bit PWM counter to 0000H.
N     * @var PWM_T::PERIOD
N     * Offset: 0x30~0x44  PWM Period Register 0/2/4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |PERIOD    |PWM Period Register
N     * |        |          |Up-Count mode: In this mode, PWM counter counts from 0 to PERIOD, and restarts from 0.
N     * |        |          |Down-Count mode: In this mode, PWM counter counts from PERIOD to 0, and restarts from PERIOD.
N     * |        |          |PWM period time = (PERIOD+1) * PWM_CLK period.
N     * |        |          |Up-Down-Count mode: In this mode, PWM counter counts from 0 to PERIOD, then decrements to 0 and repeats again.
N     * |        |          |PWM period time = 2 * PERIOD * PWM_CLK period.
N     * @var PWM_T::CMPDAT
N     * Offset: 0x50~0x64  PWM Comparator Register 0~5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CMP       |PWM Comparator Register
N     * |        |          |CMP use to compare with CNT to generate PWM waveform, interrupt and trigger ADC.
N     * |        |          |In independent mode, PWM_CMPDAT0~5 denote as 6 independent PWM_CH0~5 compared point.
N     * |        |          |In complementary mode, PWM_CMPDAT0, 2, 4 denote as first compared point, and PWM_CMPDAT1, 3, 5 denote as second compared point for the corresponding 3 complementary pairs PWM_CH0 and PWM_CH1, PWM_CH2 and PWM_CH3, PWM_CH4 and PWM_CH5.
N     * @var PWM_T::DTCTL[3]
N     * Offset: 0x70  PWM Dead-Time Control Register 0/1,2/3,4/5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |DTCNT     |Dead-time Counter (Write Protect)
N     * |        |          |The dead-time can be calculated from the following formula:
N     * |        |          |Dead-time = (DTCNT[11:0]+1) * PWM_CLK period.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[16]    |DTEN      |Enable Dead-time Insertion for PWM Pair (PWM_CH0, PWM_CH1) (PWM_CH2, PWM_CH3) (PWM_CH4, PWM_CH5) (Write Protect)
N     * |        |          |Dead-time insertion is only active when this pair of complementary PWM is enabled.
N     * |        |          |If dead- time insertion is inactive, the outputs of pin pair are complementary without any delay.
N     * |        |          |0 = Dead-time insertion Disabled on the pin pair.
N     * |        |          |1 = Dead-time insertion Enabled on the pin pair.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[24]    |DTCKSEL   |Dead-time Clock Select (Write Protect)
N     * |        |          |0 = Dead-time clock source from PWM_CLK.
N     * |        |          |1 = Dead-time clock source from prescaler output.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::CNT
N     * Offset: 0x90~0xA4  PWM Counter Register 0/2/4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CNT       |PWM Data Register (Read Only)
N     * |        |          |User can monitor CNT to know the current value in 16-bit period counter.
N     * |[16]    |DIRF      |PWM Direction Indicator Flag (Read Only)
N     * |        |          |0 = Counter is Down count.
N     * |        |          |1 = Counter is UP count.
N     * @var PWM_T::WGCTL0
N     * Offset: 0xB0  PWM Generation Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |ZPCTL0    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |Note: PWM can control output level when PWM counter count to 0.
N     * |[3:2]   |ZPCTL1    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |Note: PWM can control output level when PWM counter count to 0.
N     * |[5:4]   |ZPCTL2    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |Note: PWM can control output level when PWM counter count to 0.
N     * |[7:6]   |ZPCTL3    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |Note: PWM can control output level when PWM counter count to 0.
N     * |[9:8]   |ZPCTL4    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |Note: PWM can control output level when PWM counter count to 0.
N     * |[11:10] |ZPCTL5    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |Note: PWM can control output level when PWM counter count to 0.
N     * |[17:16] |PRDPCTL0  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note2: This bit is center point control when PWM counter operating in up-down counter type.
N     * |[19:18] |PRDPCTL1  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note2: This bit is center point control when PWM counter operating in up-down counter type.
N     * |[21:20] |PRDPCTL2  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note2: This bit is center point control when PWM counter operating in up-down counter type.
N     * |[23:22] |PRDPCTL3  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note2: This bit is center point control when PWM counter operating in up-down counter type.
N     * |[25:24] |PRDPCTL4  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note2: This bit is center point control when PWM counter operating in up-down counter type.
N     * |[27:26] |PRDPCTL5  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note2: This bit is center point control when PWM counter operating in up-down counter type.
N     * @var PWM_T::WGCTL1
N     * Offset: 0xB4  PWM Generation Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |CMPUCTL0  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[3:2]   |CMPUCTL1  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[5:4]   |CMPUCTL2  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[7:6]   |CMPUCTL3  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[9:8]   |CMPUCTL4  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[11:10] |CMPUCTL5  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[17:16] |CMPDCTL0  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * |[19:18] |CMPDCTL1  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * |[21:20] |CMPDCTL2  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * |[23:22] |CMPDCTL3  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * |[25:24] |CMPDCTL4  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * |[27:26] |CMPDCTL5  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |Note1: PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note2: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * @var PWM_T::MSKEN
N     * Offset: 0xB8  PWM Mask Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |MSKENn    |PWM Mask Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |The PWM output signal will be masked when this bit is enabled.
N     * |        |          |The corresponding PWM channel n will output MSKDATn (PWM_MSK[5:0]) data.
N     * |        |          |0 = PWM output signal is non-masked.
N     * |        |          |1 = PWM output signal is masked and output MSKDATn data.
N     * @var PWM_T::MSK
N     * Offset: 0xBC  PWM Mask Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |MSKDATn   |PWM Mask Data Bit
N     * |        |          |This data bit control the state of PWMn output pin, if corresponding mask function is enabled.
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Output logic low to PWM channel n.
N     * |        |          |1 = Output logic high to PWM channel n.
N     * @var PWM_T::BNF
N     * Offset: 0xC0  PWM Brake Noise Filter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BRK0FEN   |PWM Brake 0 Noise Filter Enable Bit
N     * |        |          |0 = Noise filter of PWM Brake 0 Disabled.
N     * |        |          |1 = Noise filter of PWM Brake 0 Enabled.
N     * |[3:1]   |BRK0FCS   |Brake 0 Edge Detector Filter Clock Selection
N     * |        |          |000 = Filter clock is HCLK.
N     * |        |          |001 = Filter clock is HCLK/2.
N     * |        |          |010 = Filter clock is HCLK/4.
N     * |        |          |011 = Filter clock is HCLK/8.
N     * |        |          |100 = Filter clock is HCLK/16.
N     * |        |          |101 = Filter clock is HCLK/32.
N     * |        |          |110 = Filter clock is HCLK/64.
N     * |        |          |111 = Filter clock is HCLK/128.
N     * |[6:4]   |BRK0FCNT  |Brake 0 Edge Detector Filter Count
N     * |        |          |The register bits control the Brake0 filter counter to count from 0 to BRK1FCNT.
N     * |[7]     |BRK0PINV  |Brake 0 Pin Inverse
N     * |        |          |0 = The state of pin PWMx_BRAKE0 is passed to the negative edge detector.
N     * |        |          |1 = The inversed state of pin PWMx_BRAKE10 is passed to the negative edge detector.
N     * |[8]     |BRK1FEN   |PWM Brake 1 Noise Filter Enable Bit
N     * |        |          |0 = Noise filter of PWM Brake 1 Disabled.
N     * |        |          |1 = Noise filter of PWM Brake 1 Enabled.
N     * |[11:9]  |BRK1FCS   |Brake 1 Edge Detector Filter Clock Selection
N     * |        |          |000 = Filter clock = HCLK.
N     * |        |          |001 = Filter clock = HCLK/2.
N     * |        |          |010 = Filter clock = HCLK/4.
N     * |        |          |011 = Filter clock = HCLK/8.
N     * |        |          |100 = Filter clock = HCLK/16.
N     * |        |          |101 = Filter clock = HCLK/32.
N     * |        |          |110 = Filter clock = HCLK/64.
N     * |        |          |111 = Filter clock = HCLK/128.
N     * |[14:12] |BRK1FCNT  |Brake 1 Edge Detector Filter Count
N     * |        |          |The register bits control the Brake1 filter counter to count from 0 to BRK1FCNT.
N     * |[15]    |BRK1PINV  |Brake 1 Pin Inverse
N     * |        |          |0 = The state of pin PWMx_BRAKE1 is passed to the negative edge detector.
N     * |        |          |1 = The inversed state of pin PWMx_BRAKE1 is passed to the negative edge detector.
N     * |[16]    |BK0SRC    |Brake 0 Pin Source Select
N     * |        |          |For PWM0 setting:
N     * |        |          |0 = Brake 0 pin source come from PWM0_BRAKE0.
N     * |        |          |1 = Brake 0 pin source come from PWM1_BRAKE0.
N     * |        |          |For PWM1 setting:
N     * |        |          |0 = Brake 0 pin source come from PWM1_BRAKE0.
N     * |        |          |1 = Brake 0 pin source come from PWM0_BRAKE0.
N     * |[24]    |BK1SRC    |Brake 1 Pin Source Select
N     * |        |          |For PWM0 setting:
N     * |        |          |0 = Brake 1 pin source come from PWM0_BRAKE1.
N     * |        |          |1 = Brake 1 pin source come from PWM1_BRAKE1.
N     * |        |          |For PWM1 setting:
N     * |        |          |0 = Brake 1 pin source come from PWM1_BRAKE1.
N     * |        |          |1 = Brake 1 pin source come from PWM0_BRAKE1.
N     * @var PWM_T::FAILBRK
N     * Offset: 0xC4  PWM System Fail Brake Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CSSBRKEN  |Clock Security System Detection Trigger PWM Brake Function 0 Enable Bit
N     * |        |          |0 = Brake Function triggered by CSS detection Disabled.
N     * |        |          |1 = Brake Function triggered by CSS detection Enabled.
N     * |[1]     |BODBRKEN  |Brown-out Detection Trigger PWM Brake Function 0 Enable Bit
N     * |        |          |0 = Brake Function triggered by BOD Disabled.
N     * |        |          |1 = Brake Function triggered by BOD Enabled.
N     * |[3]     |CORBRKEN  |Core Lockup Detection Trigger PWM Brake Function 0 Enable Bit
N     * |        |          |0 = Brake Function triggered by Core lockup detection Disabled.
N     * |        |          |1 = Brake Function triggered by Core lockup detection Enabled.
N     * @var PWM_T::BRKCTL[3]
N     * Offset: 0xC8  PWM Brake Edge Detect Control Register 0/1,2/3,4/5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CPO0EBEN  |Enable ACMP0_O Digital Output As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = ACMP0_O as edge-detect brake source Disabled.
N     * |        |          |1 = ACMP0_O as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer to SYS_REGLCTL register.
N     * |[1]     |CPO1EBEN  |Enable ACMP1_O Digital Output As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = ACMP1_O as edge-detect brake source Disabled.
N     * |        |          |1 = ACMP1_O as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[4]     |BRKP0EEN  |Enable PWMx_BRAKE0 Pin As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = PWMx_BRAKE0 pin as edge-detect brake source Disabled.
N     * |        |          |1 = PWMx_BRAKE0 pin as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[5]     |BRKP1EEN  |Enable PWMx_BRAKE1 Pin As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = PWMx_BRAKE1 pin as edge-detect brake source Disabled.
N     * |        |          |1 = PWMx_BRAKE1 pin as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[7]     |SYSEBEN   |Enable System Fail As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = System Fail condition as edge-detect brake source Disabled.
N     * |        |          |1 = System Fail condition as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[8]     |CPO0LBEN  |Enable ACMP0_O Digital Output As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = ACMP0_O as level-detect brake source Disabled.
N     * |        |          |1 = ACMP0_O as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[9]     |CPO1LBEN  |Enable ACMP1_O Digital Output As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = ACMP1_O as level-detect brake source Disabled.
N     * |        |          |1 = ACMP1_O as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[12]    |BRKP0LEN  |Enable BKP0 Pin As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = PWMx_BRAKE0 pin as level-detect brake source Disabled.
N     * |        |          |1 = PWMx_BRAKE0 pin as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[13]    |BRKP1LEN  |Enable BKP1 Pin As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = PWMx_BRAKE1 pin as level-detect brake source Disabled.
N     * |        |          |1 = PWMx_BRAKE1 pin as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[15]    |SYSLBEN   |Enable System Fail As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = System Fail condition as level-detect brake source Disabled.
N     * |        |          |1 = System Fail condition as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[17:16] |BRKAEVEN  |PWM Brake Action Select for Even Channel (Write Protect)
N     * |        |          |00 = PWMx brake event will not affect even channels output.
N     * |        |          |01 = PWM even channel output tri-state when PWMx brake event happened.
N     * |        |          |10 = PWM even channel output low level when PWMx brake event happened.
N     * |        |          |11 = PWM even channel output high level when PWMx brake event happened.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[19:18] |BRKAODD   |PWM Brake Action Select for Odd Channel (Write Protect)
N     * |        |          |00 = PWMx brake event will not affect odd channels output.
N     * |        |          |01 = PWM odd channel output tri-state when PWMx brake event happened.
N     * |        |          |10 = PWM odd channel output low level when PWMx brake event happened.
N     * |        |          |11 = PWM odd channel output high level when PWMx brake event happened.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[20]    |EADCEBEN  |Enable EADC Result Monitor (EADCRM) As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = EADCRM as edge-detect brake source Disabled.
N     * |        |          |1 = EADCRM as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[28]    |EADCLBEN  |Enable EADC Result Monitor (EADCRM) As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = EADCRM as level-detect brake source Disabled.
N     * |        |          |1 = EADCRM as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * @var PWM_T::POLCTL
N     * Offset: 0xD4  PWM Pin Polar Inverse Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |PINVn     |PWM PIN Polar Inverse Control
N     * |        |          |The register controls polarity state of PWM output
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = PWM output polar inverse Disabled.
N     * |        |          |1 = PWM output polar inverse Enabled.
N     * @var PWM_T::POEN
N     * Offset: 0xD8  PWM Output Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |POENn     |PWM Pin Output Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = PWM pin at tri-state.
N     * |        |          |1 = PWM pin in output mode.
N     * @var PWM_T::SWBRK
N     * Offset: 0xDC  PWM Software Brake Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |BRKETRGn  |PWM Edge Brake Software Trigger (Write Only) (Write Protect)
N     * |        |          |Each bit n controls the corresponding PWM pair n.
N     * |        |          |Write 1 to this bit will trigger Edge brake, and set BRKEIFn to 1 in PWM_INTSTS1 register.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[10:8]  |BRKLTRGn  |PWM Level Brake Software Trigger (Write Only) (Write Protect)
N     * |        |          |Each bit n controls the corresponding PWM pair n.
N     * |        |          |Write 1 to this bit will trigger level brake, and set BRKLIFn to 1 in PWM_INTSTS1 register.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::INTEN0
N     * Offset: 0xE0  PWM Interrupt Enable Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ZIEN0     |PWM Zero Point Interrupt Enable 0
N     * |        |          |0 = Zero point interrupt Disabled.
N     * |        |          |1 = Zero point interrupt Enabled.
N     * |        |          |Note: Odd channels will read always 0 at complementary mode.
N     * |[2]     |ZIEN2     |PWM Zero Point Interrupt Enable 2
N     * |        |          |0 = Zero point interrupt Disabled.
N     * |        |          |1 = Zero point interrupt Enabled.
N     * |        |          |Note: Odd channels will read always 0 at complementary mode.
N     * |[4]     |ZIEN4     |PWM Zero Point Interrupt Enable 4
N     * |        |          |0 = Zero point interrupt Disabled.
N     * |        |          |1 = Zero point interrupt Enabled.
N     * |        |          |Note: Odd channels will read always 0 at complementary mode.
N     * |[8]     |PIEN0     |PWM Period Point Interrupt Enable 0
N     * |        |          |0 = Period point interrupt Disabled.
N     * |        |          |1 = Period point interrupt Enabled.
N     * |        |          |Note: When counter type is up-down, period point means center point.
N     * |[10]    |PIEN2     |PWM Period Point Interrupt Enable 2
N     * |        |          |0 = Period point interrupt Disabled.
N     * |        |          |1 = Period point interrupt Enabled.
N     * |        |          |Note: When counter type is up-down, period point means center point.
N     * |[12]    |PIEN4     |PWM Period Point Interrupt Enable 4
N     * |        |          |0 = Period point interrupt Disabled.
N     * |        |          |1 = Period point interrupt Enabled.
N     * |        |          |Note: When counter type is up-down, period point means center point.
N     * |[21:16] |CMPUIENn  |PWM Compare Up Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Compare up count interrupt Disabled.
N     * |        |          |1 = Compare up count interrupt Enabled.
N     * |        |          |Note: In complementary mode, CMPUIEN1, 3, 5 use as another CMPUIEN for channel 0, 2, 4.
N     * |[29:24] |CMPDIENn  |PWM Compare Down Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Compare down count interrupt Disabled.
N     * |        |          |1 = Compare down count interrupt Enabled.
N     * |        |          |Note: In complementary mode, CMPDIEN1, 3, 5 use as another CMPDIEN for channel 0, 2, 4.
N     * @var PWM_T::INTEN1
N     * Offset: 0xE4  PWM Interrupt Enable Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BRKEIEN0_1|PWM Edge-detect Brake Interrupt Enable for Channel0/1 (Write Protect)
N     * |        |          |0 = Edge-detect Brake interrupt for channel0/1 Disabled.
N     * |        |          |1 = Edge-detect Brake interrupt for channel0/1 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[1]     |BRKEIEN2_3|PWM Edge-detect Brake Interrupt Enable for Channel2/3 (Write Protect)
N     * |        |          |0 = Edge-detect Brake interrupt for channel2/3 Disabled.
N     * |        |          |1 = Edge-detect Brake interrupt for channel2/3 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[2]     |BRKEIEN4_5|PWM Edge-detect Brake Interrupt Enable for Channel4/5 (Write Protect)
N     * |        |          |0 = Edge-detect Brake interrupt for channel4/5 Disabled.
N     * |        |          |1 = Edge-detect Brake interrupt for channel4/5 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[8]     |BRKLIEN0_1|PWM Level-detect Brake Interrupt Enable for Channel0/1 (Write Protect)
N     * |        |          |0 = Level-detect Brake interrupt for channel0/1 Disabled.
N     * |        |          |1 = Level-detect Brake interrupt for channel0/1 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[9]     |BRKLIEN2_3|PWM Level-detect Brake Interrupt Enable for Channel2/3 (Write Protect)
N     * |        |          |0 = Level-detect Brake interrupt for channel2/3 Disabled.
N     * |        |          |1 = Level-detect Brake interrupt for channel2/3 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[10]    |BRKLIEN4_5|PWM Level-detect Brake Interrupt Enable for Channel4/5 (Write Protect)
N     * |        |          |0 = Level-detect Brake interrupt for channel4/5 Disabled.
N     * |        |          |1 = Level-detect Brake interrupt for channel4/5 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::INTSTS0
N     * Offset: 0xE8  PWM Interrupt Flag Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ZIF0      |PWM Zero Point Interrupt Flag 0
N     * |        |          |This bit is set by hardware when PWM_CH0 counter reaches zero, software can write 1 to clear this bit to zero.
N     * |[2]     |ZIF2      |PWM Zero Point Interrupt Flag 2
N     * |        |          |This bit is set by hardware when PWM_CH2 counter reaches zero, software can write 1 to clear this bit to zero.
N     * |[4]     |ZIF4      |PWM Zero Point Interrupt Flag 4
N     * |        |          |This bit is set by hardware when PWM_CH4 counter reaches zero, software can write 1 to clear this bit to zero.
N     * |[8]     |PIF0      |PWM Period Point Interrupt Flag 0
N     * |        |          |This bit is set by hardware when PWM_CH0 counter reaches PWM_PERIOD0, software can write 1 to clear this bit to zero.
N     * |[10]    |PIF2      |PWM Period Point Interrupt Flag 2
N     * |        |          |This bit is set by hardware when PWM_CH2 counter reaches PWM_PERIOD2, software can write 1 to clear this bit to zero.
N     * |[12]    |PIF4      |PWM Period Point Interrupt Flag 4
N     * |        |          |This bit is set by hardware when PWM_CH4 counter reaches PWM_PERIOD4, software can write 1 to clear this bit to zero.
N     * |[21:16] |CMPUIFn   |PWM Compare Up Count Interrupt Flag
N     * |        |          |Flag is set by hardware when PWM counter up count and reaches PWM_CMPDATn, software can clear this bit by writing 1 to it
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |Note1: If CMPDAT equal to PERIOD, this flag is not working in up counter type selection.
N     * |        |          |Note2: In complementary mode, CMPUIF1, 3, 5 use as another CMPUIF for channel 0, 2, 4.
N     * |[29:24] |CMPDIFn   |PWM Compare Down Count Interrupt Flag
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |Flag is set by hardware when PWM counter down count and reaches PWM_CMPDATn, software can clear this bit by writing 1 to it.
N     * |        |          |Note1: If CMPDAT equal to PERIOD, this flag is not working in down counter type selection.
N     * |        |          |Note2: In complementary mode, CMPDIF1, 3, 5 use as another CMPDIF for channel 0, 2, 4.
N     * @var PWM_T::INTSTS1
N     * Offset: 0xEC  PWM Interrupt Flag Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BRKEIF0   |PWM Channel 0 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 0 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 0 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[1]     |BRKEIF1   |PWM Channel 1 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 1 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 1 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[2]     |BRKEIF2   |PWM Channel 2 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 2 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 2 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[3]     |BRKEIF3   |PWM Channel 3 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 3 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 3 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[4]     |BRKEIF4   |PWM Channel 4 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 4 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 4 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[5]     |BRKEIF5   |PWM Channel 5 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 5 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 5 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[8]     |BRKLIF0   |PWM Channel 0 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 0 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 0 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[9]     |BRKLIF1   |PWM Channel 1 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 1 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 1 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[10]    |BRKLIF2   |PWM Channel 2 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 2 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 2 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[11]    |BRKLIF3   |PWM Channel 3 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 3 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 3 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[12]    |BRKLIF4   |PWM Channel 4 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 4 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 4 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[13]    |BRKLIF5   |PWM Channel 5 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel 5 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel 5 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[16]    |BRKESTS0  |PWM Channel 0 Edge-detect Brake Status
N     * |        |          |0 = PWM channel 0 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel 0 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel0 at brake state, writing 1 to clear.
N     * |[17]    |BRKESTS1  |PWM Channel 1 Edge-detect Brake Status
N     * |        |          |0 = PWM channel 1 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel 1 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel1 at brake state, writing 1 to clear.
N     * |[18]    |BRKESTS2  |PWM Channel 2 Edge-detect Brake Status
N     * |        |          |0 = PWM channel 2 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel 2 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel2 at brake state, writing 1 to clear.
N     * |[19]    |BRKESTS3  |PWM Channel 3 Edge-detect Brake Status
N     * |        |          |0 = PWM channel 3 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel 3 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel3 at brake state, writing 1 to clear.
N     * |[20]    |BRKESTS4  |PWM Channel 4 Edge-detect Brake Status
N     * |        |          |0 = PWM channel 4 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel 4 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel4 at brake state, writing 1 to clear.
N     * |[21]    |BRKESTS5  |PWM Channel 5 Edge-detect Brake Status
N     * |        |          |0 = PWM channel 5 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel 5 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel5 at brake state, writing 1 to clear.
N     * |[24]    |BRKLSTS0  |PWM Channel 0 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel 0 level-detect brake state is released.
N     * |        |          |1 = When PWM channel 0 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel0 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * |[25]    |BRKLSTS1  |PWM Channel 1 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel 1 level-detect brake state is released.
N     * |        |          |1 = When PWM channel 1 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel1 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * |[26]    |BRKLSTS2  |PWM Channel 2 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel 2 level-detect brake state is released.
N     * |        |          |1 = When PWM channel 2 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel2 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * |[27]    |BRKLSTS3  |PWM Channel 3 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel 3 level-detect brake state is released.
N     * |        |          |1 = When PWM channel 3 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel3 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * |[28]    |BRKLSTS4  |PWM Channel 4 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel 4 level-detect brake state is released.
N     * |        |          |1 = When PWM channel 4 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel4 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * |[29]    |BRKLSTS5  |PWM Channel 5 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel 5 level-detect brake state is released.
N     * |        |          |1 = When PWM channel 5 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel5 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * @var PWM_T::ADCTS0
N     * Offset: 0xF8  PWM Trigger ADC Source Select Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |TRGSEL0   |PWM_CH0 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH0 zero point.
N     * |        |          |0001 = PWM_CH0 period point.
N     * |        |          |0010 = PWM_CH0 zero or period point.
N     * |        |          |0011 = PWM_CH0 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH0 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH1 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH1 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[7]     |TRGEN0    |PWM_CH0 Trigger ADC Enable Bit
N     * |[11:8]  |TRGSEL1   |PWM_CH1 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH0 zero point.
N     * |        |          |0001 = PWM_CH0 period point.
N     * |        |          |0010 = PWM_CH0 zero or period point.
N     * |        |          |0011 = PWM_CH0 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH0 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH1 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH1 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[15]    |TRGEN1    |PWM_CH1 Trigger ADC Enable Bit
N     * |[19:16] |TRGSEL2   |PWM_CH2 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH2 zero point.
N     * |        |          |0001 = PWM_CH2 period point.
N     * |        |          |0010 = PWM_CH2 zero or period point.
N     * |        |          |0011 = PWM_CH2 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH2 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH3 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH3 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[23]    |TRGEN2    |PWM_CH2 Trigger ADC Enable Bit
N     * |[27:24] |TRGSEL3   |PWM_CH3 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH2 zero point.
N     * |        |          |0001 = PWM_CH2 period point.
N     * |        |          |0010 = PWM_CH2 zero or period point.
N     * |        |          |0011 = PWM_CH2 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH2 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH3 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH3 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[31]    |TRGEN3    |PWM_CH3 Trigger ADC Enable Bit
N     * @var PWM_T::ADCTS1
N     * Offset: 0xFC  PWM Trigger ADC Source Select Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |TRGSEL4   |PWM_CH4 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH4 zero point.
N     * |        |          |0001 = PWM_CH4 period point.
N     * |        |          |0010 = PWM_CH4 zero or period point.
N     * |        |          |0011 = PWM_CH4 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH4 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH5 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH5 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[7]     |TRGEN4    |PWM_CH4 Trigger ADC Enable Bit
N     * |[11:8]  |TRGSEL5   |PWM_CH5 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH4 zero point.
N     * |        |          |0001 = PWM_CH4 period point.
N     * |        |          |0010 = PWM_CH4 zero or period point.
N     * |        |          |0011 = PWM_CH4 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH4 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH5 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH5 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[15]    |TRGEN5    |PWM_CH5 Trigger ADC Enable Bit
N     * @var PWM_T::SSCTL
N     * Offset: 0x110  PWM Synchronous Start Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SSEN0     |PWM Synchronous Start Function Enable 0
N     * |        |          |When synchronous start function is enabled, the PWM_CH0 counter enable bit (CNTEN0) can be enabled by writing PWM synchronous start trigger bit (CNTSEN).
N     * |        |          |0 = PWM synchronous start function Disabled.
N     * |        |          |1 = PWM synchronous start function Enabled.
N     * |[2]     |SSEN2     |PWM Synchronous Start Function Enable 2
N     * |        |          |When synchronous start function is enabled, the PWM_CH2 counter enable bit (CNTEN2) can be enabled by writing PWM synchronous start trigger bit (CNTSEN).
N     * |        |          |0 = PWM synchronous start function Disabled.
N     * |        |          |1 = PWM synchronous start function Enabled.
N     * |[4]     |SSEN4     |PWM Synchronous Start Function Enable 4
N     * |        |          |When synchronous start function is enabled, the PWM_CH4 counter enable bit (CNTEN4) can be enabled by writing PWM synchronous start trigger bit (CNTSEN).
N     * |        |          |0 = PWM synchronous start function Disabled.
N     * |        |          |1 = PWM synchronous start function Enabled.
N     * |[9:8]   |SSRC      |PWM Synchronous Start Source Select
N     * |        |          |00 = Synchronous start source come from PWM0.
N     * |        |          |01 = Synchronous start source come from PWM1.
N     * |        |          |10 = Synchronous start source come from BPWM0.
N     * |        |          |11 = Synchronous start source come from BPWM1.
N     * @var PWM_T::SSTRG
N     * Offset: 0x114  PWM Synchronous Start Trigger Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTSEN    |PWM Counter Synchronous Start Enable (Write Only)
N     * |        |          |PMW counter synchronous enable function is used to make selected PWM channels (include PWM0_CHx and PWM1_CHx) start counting at the same time.
N     * |        |          |Writing this bit to 1 will also set the counter enable bit (CNTENn, n denotes channel 0 to 5) if correlated PWM channel counter synchronous start function is enabled.
N     * @var PWM_T::STATUS
N     * Offset: 0x120  PWM Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTMAX0   |Time-base Counter 0 Equal to 0xFFFF Latched Status
N     * |        |          |0 = indicates the time-base counter never reached its maximum value 0xFFFF.
N     * |        |          |1 = indicates the time-base counter reached its maximum value.
N     * |        |          |Note: This bit can be clear by software writing 1.
N     * |[2]     |CNTMAX2   |Time-base Counter 2 Equal to 0xFFFF Latched Status
N     * |        |          |0 = indicates the time-base counter never reached its maximum value 0xFFFF.
N     * |        |          |1 = indicates the time-base counter reached its maximum value.
N     * |        |          |Note: This bit can be clear by software writing 1.
N     * |[4]     |CNTMAX4   |Time-base Counter 4 Equal to 0xFFFF Latched Status
N     * |        |          |0 = indicates the time-base counter never reached its maximum value 0xFFFF.
N     * |        |          |1 = indicates the time-base counter reached its maximum value.
N     * |        |          |Note: This bit can be clear by software writing 1.
N     * |[21:16] |ADCTRGn   |ADC Start of Conversion Status
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Indicates no ADC start of conversion trigger event has occurred.
N     * |        |          |1 = Indicates an ADC start of conversion trigger event has occurred.
N     * |        |          |Note: This bit can be clear by software writing 1.
N     * @var PWM_T::CAPINEN
N     * Offset: 0x200  PWM Capture Input Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CAPINENn  |Capture Input Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = PWM Channel capture input path Disabled.
N     * |        |          |The input of PWM channel capture function is always regarded as 0.
N     * |        |          |1 = PWM Channel capture input path Enabled.
N     * |        |          |The input of PWM channel capture function comes from correlative multifunction pin.
N     * @var PWM_T::CAPCTL
N     * Offset: 0x204  PWM Capture Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CAPENn    |Capture Function Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Capture function Disabled. RCAPDAT/FCAPDAT register will not be updated.
N     * |        |          |1 = Capture function Enabled
N     * |        |          |Capture latched the PWM counter value when detected rising or falling edge of input signal and saved to RCAPDAT (Rising latch) and FCAPDAT (Falling latch).
N     * |[13:8]  |CAPINVn   |Capture Inverter Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Capture source inverter Disabled.
N     * |        |          |1 = Capture source inverter Enabled. Reverse the input signal from GPIO.
N     * |[21:16] |RCRLDENn  |Rising Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Rising capture reload counter Disabled.
N     * |        |          |1 = Rising capture reload counter Enabled.
N     * |[29:24] |FCRLDENn  |Falling Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Falling capture reload counter Disabled.
N     * |        |          |1 = Falling capture reload counter Enabled.
N     * @var PWM_T::CAPSTS
N     * Offset: 0x208  PWM Capture Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CRLIFOVn  |Capture Rising Latch Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if rising latch happened when the corresponding CRLIF is 1.
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CRLIF.
N     * |[13:8]  |CFLIFOVn  |Capture Falling Latch Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if falling latch happened when the corresponding CFLIF is 1.
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CFLIF.
N     * @var PWM_T::RCAPDAT0
N     * Offset: 0x20C  PWM Rising Capture Data Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT0
N     * Offset: 0x210  PWM Falling Capture Data Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::RCAPDAT1
N     * Offset: 0x214  PWM Rising Capture Data Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT1
N     * Offset: 0x218  PWM Falling Capture Data Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::RCAPDAT2
N     * Offset: 0x21C  PWM Rising Capture Data Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT2
N     * Offset: 0x220  PWM Falling Capture Data Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::RCAPDAT3
N     * Offset: 0x224  PWM Rising Capture Data Register 3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT3
N     * Offset: 0x228  PWM Falling Capture Data Register 3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::RCAPDAT4
N     * Offset: 0x22C  PWM Rising Capture Data Register 4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT4
N     * Offset: 0x230  PWM Falling Capture Data Register 4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::RCAPDAT5
N     * Offset: 0x234  PWM Rising Capture Data Register 5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT5
N     * Offset: 0x238  PWM Falling Capture Data Register 5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::PDMACTL
N     * Offset: 0x23C  PWM PDMA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CHEN0_1   |Channel 0/1 PDMA Enable Bit
N     * |        |          |0 = Channel 0/1 PDMA function Disabled.
N     * |        |          |1 = Channel 0/1 PDMA function Enabled for the channel 0/1 captured data and transfer to memory.
N     * |[2:1]   |CAPMOD0_1 |Select PWM_RCAPDAT0/1 or PWM_FCAPDAT0/1 to Do PDMA Transfer
N     * |        |          |00 = Reserved.
N     * |        |          |01 = PWM_RCAPDAT0/1.
N     * |        |          |10 = PWM_FCAPDAT0/1.
N     * |        |          |11 = Both PWM_RCAPDAT0/1 and PWM_FCAPDAT0/1.
N     * |[3]     |CAPORD0_1 |Capture Channel 0/1 Rising/Falling Order
N     * |        |          |Set this bit to determine whether the PWM_RCAPDAT0/1 or PWM_FCAPDAT0/1 is the first captured data transferred to memory through PDMA when CAPMOD0_1 =11.
N     * |        |          |0 = PWM_FCAPDAT0/1 is the first captured data to memory.
N     * |        |          |1 = PWM_RCAPDAT0/1 is the first captured data to memory.
N     * |[4]     |CHSEL0_1  |Select Channel 0/1 to Do PDMA Transfer
N     * |        |          |0 = Channel 0.
N     * |        |          |1 = Channel 1.
N     * |[8]     |CHEN2_3   |Channel 2/3 PDMA Enable Bit
N     * |        |          |0 = Channel 2/3 PDMA function Disabled.
N     * |        |          |1 = Channel 2/3 PDMA function Enabled for the channel 2/3 captured data and transfer to memory.
N     * |[10:9]  |CAPMOD2_3 |Select PWM_RCAPDAT2/3 or PWM_FCAODAT2/3 to Do PDMA Transfer
N     * |        |          |00 = Reserved.
N     * |        |          |01 = PWM_RCAPDAT2/3.
N     * |        |          |10 = PWM_FCAPDAT2/3.
N     * |        |          |11 = Both PWM_RCAPDAT2/3 and PWM_FCAPDAT2/3.
N     * |[11]    |CAPORD2_3 |Capture Channel 2/3 Rising/Falling Order
N     * |        |          |Set this bit to determine whether the PWM_RCAPDAT2/3 or PWM_FCAPDAT2/3 is the first captured data transferred to memory through PDMA when CAPMOD2_3 =11.
N     * |        |          |0 = PWM_FCAPDAT2/3 is the first captured data to memory.
N     * |        |          |1 = PWM_RCAPDAT2/3 is the first captured data to memory.
N     * |[12]    |CHSEL2_3  |Select Channel 2/3 to Do PDMA Transfer
N     * |        |          |0 = Channel 2.
N     * |        |          |1 = Channel 3.
N     * |[16]    |CHEN4_5   |Channel 4/5 PDMA Enable Bit
N     * |        |          |0 = Channel 4/5 PDMA function Disabled.
N     * |        |          |1 = Channel 4/5 PDMA function Enabled for the channel 4/5 captured data and transfer to memory.
N     * |[18:17] |CAPMOD4_5 |Select PWM_RCAPDAT4/5 or PWM_FCAPDAT4/5 to Do PDMA Transfer
N     * |        |          |00 = Reserved.
N     * |        |          |01 = PWM_RCAPDAT4/5.
N     * |        |          |10 = PWM_FCAPDAT4/5.
N     * |        |          |11 = Both PWM_RCAPDAT4/5 and PWM_FCAPDAT4/5.
N     * |[19]    |CAPORD4_5 |Capture Channel 4/5 Rising/Falling Order
N     * |        |          |Set this bit to determine whether the PWM_RCAPDAT4/5 or PWM_FCAPDAT4/5 is the first captured data transferred to memory through PDMA when CAPMOD4_5 =11.
N     * |        |          |0 = PWM_FCAPDAT4/5 is the first captured data to memory.
N     * |        |          |1 = PWM_RCAPDAT4/5 is the first captured data to memory.
N     * |[20]    |CHSEL4_5  |Select Channel 4/5 to Do PDMA Transfer
N     * |        |          |0 = Channel 4.
N     * |        |          |1 = Channel 5.
N     * @var PWM_T::PDMACAP0_1
N     * Offset: 0x240  PWM Capture Channel 01 PDMA Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CAPBUF    |PWM Capture PDMA Register (Read Only)
N     * |        |          |This register is use as a buffer to transfer PWM capture rising or falling data to memory by PDMA.
N     * @var PWM_T::PDMACAP2_3
N     * Offset: 0x244  PWM Capture Channel 23 PDMA Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CAPBUF    |PWM Capture PDMA Register (Read Only)
N     * |        |          |This register is use as a buffer to transfer PWM capture rising or falling data to memory by PDMA.
N     * @var PWM_T::PDMACAP4_5
N     * Offset: 0x248  PWM Capture Channel 45 PDMA Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CAPBUF    |PWM Capture PDMA Register (Read Only)
N     * |        |          |This register is use as a buffer to transfer PWM capture rising or falling data to memory by PDMA.
N     * @var PWM_T::CAPIEN
N     * Offset: 0x250  PWM Capture Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CAPRIENn  |PWM Capture Rising Latch Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Capture rising edge latch interrupt Disabled.
N     * |        |          |1 = Capture rising edge latch interrupt Enabled.
N     * |[13:8]  |CAPFIENn  |PWM Capture Falling Latch Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Capture falling edge latch interrupt Disabled.
N     * |        |          |1 = Capture falling edge latch interrupt Enabled.
N     * @var PWM_T::CAPIF
N     * Offset: 0x254  PWM Capture Interrupt Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CRLIFn    |PWM Capture Rising Latch Interrupt Flag
N     * |        |          |This bit is writing 1 to clear. Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = No capture rising latch condition happened.
N     * |        |          |1 = Capture rising latch condition happened, this flag will be set to high.
N     * |[13:8]  |CFLIFn    |PWM Capture Falling Latch Interrupt Flag
N     * |        |          |This bit is writing 1 to clear. Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = No capture falling latch condition happened.
N     * |        |          |1 = Capture falling latch condition happened, this flag will be set to high.
N     * @var PWM_T::PBUF
N     * Offset: 0x304~0x318  PWM PERIOD0/2/4 Buffer
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |PBUF      |PWM Period Register Buffer (Read Only)
N     * |        |          |Used as PERIOD active register.
N     * @var PWM_T::CMPBUF
N     * Offset: 0x31C~~0x330  PWM CMPDAT0~5 Buffer
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CMPBUF    |PWM Comparator Register Buffer (Read Only)
N     * |        |          |Used as CMP active register.
N     */
N    __IO uint32_t CTL0;                  /*!< [0x0000] PWM Control Register 0                                           */
X    volatile uint32_t CTL0;                   
N    __IO uint32_t CTL1;                  /*!< [0x0004] PWM Control Register 1                                           */
X    volatile uint32_t CTL1;                   
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __IO uint32_t CLKSRC;                /*!< [0x0010] PWM Clock Source Register                                        */
X    volatile uint32_t CLKSRC;                 
N    __IO uint32_t CLKPSC[3];             /*!< [0x0014~0x001c] PWM Clock Pre-scale Register 0_1 ~ 4_5                    */
X    volatile uint32_t CLKPSC[3];              
N    __IO uint32_t CNTEN;                 /*!< [0x0020] PWM Counter Enable Register                                      */
X    volatile uint32_t CNTEN;                  
N    __IO uint32_t CNTCLR;                /*!< [0x0024] PWM Clear Counter Register                                       */
X    volatile uint32_t CNTCLR;                 
N    __I  uint32_t RESERVE1[2];
X    volatile const  uint32_t RESERVE1[2];
N    __IO uint32_t PERIOD[6];            /*!< [0x0030~0x0044] PWM Period Register 0/2/4                                 */
X    volatile uint32_t PERIOD[6];             
N    __I  uint32_t RESERVE2[2];
X    volatile const  uint32_t RESERVE2[2];
N    __IO uint32_t CMPDAT[6];             /*!< [0x0050~0x0064] PWM Comparator Register 0~5                               */
X    volatile uint32_t CMPDAT[6];              
N    __I  uint32_t RESERVE3[2];
X    volatile const  uint32_t RESERVE3[2];
N    __IO uint32_t DTCTL[3];              /*!< [0x0070~0x0078] PWM Dead-Time Control Register 0_1                */
X    volatile uint32_t DTCTL[3];               
N    __I  uint32_t RESERVE4[5];
X    volatile const  uint32_t RESERVE4[5];
N    __I  uint32_t CNT[6];                /*!< [0x0090~0x00a4] PWM Counter Register 0/2/4                                */
X    volatile const  uint32_t CNT[6];                 
N    __I  uint32_t RESERVE5[2];
X    volatile const  uint32_t RESERVE5[2];
N    __IO uint32_t WGCTL0;                /*!< [0x00b0] PWM Generation Register 0                                        */
X    volatile uint32_t WGCTL0;                 
N    __IO uint32_t WGCTL1;                /*!< [0x00b4] PWM Generation Register 1                                        */
X    volatile uint32_t WGCTL1;                 
N    __IO uint32_t MSKEN;                 /*!< [0x00b8] PWM Mask Enable Register                                         */
X    volatile uint32_t MSKEN;                  
N    __IO uint32_t MSK;                   /*!< [0x00bc] PWM Mask Data Register                                           */
X    volatile uint32_t MSK;                    
N    __IO uint32_t BNF;                   /*!< [0x00c0] PWM Brake Noise Filter Register                                  */
X    volatile uint32_t BNF;                    
N    __IO uint32_t FAILBRK;               /*!< [0x00c4] PWM System Fail Brake Control Register                           */
X    volatile uint32_t FAILBRK;                
N    __IO uint32_t BRKCTL[3];             /*!< [0x00c8~0x00d0] PWM Brake Edge Detect Control Register 0_5                */
X    volatile uint32_t BRKCTL[3];              
N    __IO uint32_t POLCTL;                /*!< [0x00d4] PWM Pin Polar Inverse Register                                   */
X    volatile uint32_t POLCTL;                 
N    __IO uint32_t POEN;                  /*!< [0x00d8] PWM Output Enable Register                                       */
X    volatile uint32_t POEN;                   
N    __O  uint32_t SWBRK;                 /*!< [0x00dc] PWM Software Brake Control Register                              */
X    volatile  uint32_t SWBRK;                  
N    __IO uint32_t INTEN0;                /*!< [0x00e0] PWM Interrupt Enable Register 0                                  */
X    volatile uint32_t INTEN0;                 
N    __IO uint32_t INTEN1;                /*!< [0x00e4] PWM Interrupt Enable Register 1                                  */
X    volatile uint32_t INTEN1;                 
N    __IO uint32_t INTSTS0;               /*!< [0x00e8] PWM Interrupt Flag Register 0                                    */
X    volatile uint32_t INTSTS0;                
N    __IO uint32_t INTSTS1;               /*!< [0x00ec] PWM Interrupt Flag Register 1                                    */
X    volatile uint32_t INTSTS1;                
N    __I  uint32_t RESERVE6[2];
X    volatile const  uint32_t RESERVE6[2];
N    __IO uint32_t ADCTS0;                /*!< [0x00f8] PWM Trigger ADC Source Select Register 0                         */
X    volatile uint32_t ADCTS0;                 
N    __IO uint32_t ADCTS1;                /*!< [0x00fc] PWM Trigger ADC Source Select Register 1                         */
X    volatile uint32_t ADCTS1;                 
N    __I  uint32_t RESERVE7[4];
X    volatile const  uint32_t RESERVE7[4];
N    __IO uint32_t SSCTL;                 /*!< [0x0110] PWM Synchronous Start Control Register                           */
X    volatile uint32_t SSCTL;                  
N    __O  uint32_t SSTRG;                 /*!< [0x0114] PWM Synchronous Start Trigger Register                           */
X    volatile  uint32_t SSTRG;                  
N    __I  uint32_t RESERVE8[2];
X    volatile const  uint32_t RESERVE8[2];
N    __IO uint32_t STATUS;                /*!< [0x0120] PWM Status Register                                              */
X    volatile uint32_t STATUS;                 
N    __I  uint32_t RESERVE9[55];
X    volatile const  uint32_t RESERVE9[55];
N    __IO uint32_t CAPINEN;               /*!< [0x0200] PWM Capture Input Enable Register                                */
X    volatile uint32_t CAPINEN;                
N    __IO uint32_t CAPCTL;                /*!< [0x0204] PWM Capture Control Register                                     */
X    volatile uint32_t CAPCTL;                 
N    __I  uint32_t CAPSTS;                /*!< [0x0208] PWM Capture Status Register                                      */
X    volatile const  uint32_t CAPSTS;                 
N    __I  uint32_t RCAPDAT0;              /*!< [0x020c] PWM Rising Capture Data Register 0                               */
X    volatile const  uint32_t RCAPDAT0;               
N    __I  uint32_t FCAPDAT0;              /*!< [0x0210] PWM Falling Capture Data Register 0                              */
X    volatile const  uint32_t FCAPDAT0;               
N    __I  uint32_t RCAPDAT1;              /*!< [0x0214] PWM Rising Capture Data Register 1                               */
X    volatile const  uint32_t RCAPDAT1;               
N    __I  uint32_t FCAPDAT1;              /*!< [0x0218] PWM Falling Capture Data Register 1                              */
X    volatile const  uint32_t FCAPDAT1;               
N    __I  uint32_t RCAPDAT2;              /*!< [0x021c] PWM Rising Capture Data Register 2                               */
X    volatile const  uint32_t RCAPDAT2;               
N    __I  uint32_t FCAPDAT2;              /*!< [0x0220] PWM Falling Capture Data Register 2                              */
X    volatile const  uint32_t FCAPDAT2;               
N    __I  uint32_t RCAPDAT3;              /*!< [0x0224] PWM Rising Capture Data Register 3                               */
X    volatile const  uint32_t RCAPDAT3;               
N    __I  uint32_t FCAPDAT3;              /*!< [0x0228] PWM Falling Capture Data Register 3                              */
X    volatile const  uint32_t FCAPDAT3;               
N    __I  uint32_t RCAPDAT4;              /*!< [0x022c] PWM Rising Capture Data Register 4                               */
X    volatile const  uint32_t RCAPDAT4;               
N    __I  uint32_t FCAPDAT4;              /*!< [0x0230] PWM Falling Capture Data Register 4                              */
X    volatile const  uint32_t FCAPDAT4;               
N    __I  uint32_t RCAPDAT5;              /*!< [0x0234] PWM Rising Capture Data Register 5                               */
X    volatile const  uint32_t RCAPDAT5;               
N    __I  uint32_t FCAPDAT5;              /*!< [0x0238] PWM Falling Capture Data Register 5                              */
X    volatile const  uint32_t FCAPDAT5;               
N    __IO uint32_t PDMACTL;               /*!< [0x023c] PWM PDMA Control Register                                        */
X    volatile uint32_t PDMACTL;                
N    __I  uint32_t PDMACAP0_1;            /*!< [0x0240] PWM Capture Channel 01 PDMA Register                             */
X    volatile const  uint32_t PDMACAP0_1;             
N    __I  uint32_t PDMACAP2_3;            /*!< [0x0244] PWM Capture Channel 23 PDMA Register                             */
X    volatile const  uint32_t PDMACAP2_3;             
N    __I  uint32_t PDMACAP4_5;            /*!< [0x0248] PWM Capture Channel 45 PDMA Register                             */
X    volatile const  uint32_t PDMACAP4_5;             
N    __I  uint32_t RESERVE10[1];
X    volatile const  uint32_t RESERVE10[1];
N    __IO uint32_t CAPIEN;                /*!< [0x0250] PWM Capture Interrupt Enable Register                            */
X    volatile uint32_t CAPIEN;                 
N    __IO uint32_t CAPIF;                 /*!< [0x0254] PWM Capture Interrupt Flag Register                              */
X    volatile uint32_t CAPIF;                  
N    __I  uint32_t RESERVE11[43];
X    volatile const  uint32_t RESERVE11[43];
N    __I  uint32_t PBUF[6];               /*!< [0x0304~0x0318] PWM PERIOD0/2/4 Buffer                                    */
X    volatile const  uint32_t PBUF[6];                
N    __I  uint32_t CMPBUF[6];             /*!< [0x031c~0x0330] PWM CMPDAT0~5 Buffer                                      */
X    volatile const  uint32_t CMPBUF[6];              
N} PWM_T;
N
N/**
N    @addtogroup PWM_CONST PWM Bit Field Definition
N    Constant Definitions for PWM Controller
N@{ */
N
N#define PWM_CTL0_CTRLD0_Pos              (0)                                               /*!< PWM_T::CTL0: CTRLD0 Position           */
N#define PWM_CTL0_CTRLD0_Msk              (0x1ul << PWM_CTL0_CTRLD0_Pos)                    /*!< PWM_T::CTL0: CTRLD0 Mask               */
N
N#define PWM_CTL0_CTRLD1_Pos              (1)                                               /*!< PWM_T::CTL0: CTRLD1 Position           */
N#define PWM_CTL0_CTRLD1_Msk              (0x1ul << PWM_CTL0_CTRLD1_Pos)                    /*!< PWM_T::CTL0: CTRLD1 Mask               */
N
N#define PWM_CTL0_CTRLD2_Pos              (2)                                               /*!< PWM_T::CTL0: CTRLD2 Position           */
N#define PWM_CTL0_CTRLD2_Msk              (0x1ul << PWM_CTL0_CTRLD2_Pos)                    /*!< PWM_T::CTL0: CTRLD2 Mask               */
N
N#define PWM_CTL0_CTRLD3_Pos              (3)                                               /*!< PWM_T::CTL0: CTRLD3 Position           */
N#define PWM_CTL0_CTRLD3_Msk              (0x1ul << PWM_CTL0_CTRLD3_Pos)                    /*!< PWM_T::CTL0: CTRLD3 Mask               */
N
N#define PWM_CTL0_CTRLD4_Pos              (4)                                               /*!< PWM_T::CTL0: CTRLD4 Position           */
N#define PWM_CTL0_CTRLD4_Msk              (0x1ul << PWM_CTL0_CTRLD4_Pos)                    /*!< PWM_T::CTL0: CTRLD4 Mask               */
N
N#define PWM_CTL0_CTRLD5_Pos              (5)                                               /*!< PWM_T::CTL0: CTRLD5 Position           */
N#define PWM_CTL0_CTRLD5_Msk              (0x1ul << PWM_CTL0_CTRLD5_Pos)                    /*!< PWM_T::CTL0: CTRLD5 Mask               */
N
N#define PWM_CTL0_IMMLDEN0_Pos            (16)                                              /*!< PWM_T::CTL0: IMMLDEN0 Position         */
N#define PWM_CTL0_IMMLDEN0_Msk            (0x1ul << PWM_CTL0_IMMLDEN0_Pos)                  /*!< PWM_T::CTL0: IMMLDEN0 Mask             */
N
N#define PWM_CTL0_IMMLDEN1_Pos            (17)                                              /*!< PWM_T::CTL0: IMMLDEN1 Position         */
N#define PWM_CTL0_IMMLDEN1_Msk            (0x1ul << PWM_CTL0_IMMLDEN1_Pos)                  /*!< PWM_T::CTL0: IMMLDEN1 Mask             */
N
N#define PWM_CTL0_IMMLDEN2_Pos            (18)                                              /*!< PWM_T::CTL0: IMMLDEN2 Position         */
N#define PWM_CTL0_IMMLDEN2_Msk            (0x1ul << PWM_CTL0_IMMLDEN2_Pos)                  /*!< PWM_T::CTL0: IMMLDEN2 Mask             */
N
N#define PWM_CTL0_IMMLDEN3_Pos            (19)                                              /*!< PWM_T::CTL0: IMMLDEN3 Position         */
N#define PWM_CTL0_IMMLDEN3_Msk            (0x1ul << PWM_CTL0_IMMLDEN3_Pos)                  /*!< PWM_T::CTL0: IMMLDEN3 Mask             */
N
N#define PWM_CTL0_IMMLDEN4_Pos            (20)                                              /*!< PWM_T::CTL0: IMMLDEN4 Position         */
N#define PWM_CTL0_IMMLDEN4_Msk            (0x1ul << PWM_CTL0_IMMLDEN4_Pos)                  /*!< PWM_T::CTL0: IMMLDEN4 Mask             */
N
N#define PWM_CTL0_IMMLDEN5_Pos            (21)                                              /*!< PWM_T::CTL0: IMMLDEN5 Position         */
N#define PWM_CTL0_IMMLDEN5_Msk            (0x1ul << PWM_CTL0_IMMLDEN5_Pos)                  /*!< PWM_T::CTL0: IMMLDEN5 Mask             */
N
N#define PWM_CTL0_DBGHALT_Pos             (30)                                              /*!< PWM_T::CTL0: DBGHALT Position          */
N#define PWM_CTL0_DBGHALT_Msk             (0x1ul << PWM_CTL0_DBGHALT_Pos)                   /*!< PWM_T::CTL0: DBGHALT Mask              */
N
N#define PWM_CTL0_DBGTRIOFF_Pos           (31)                                              /*!< PWM_T::CTL0: DBGTRIOFF Position        */
N#define PWM_CTL0_DBGTRIOFF_Msk           (0x1ul << PWM_CTL0_DBGTRIOFF_Pos)                 /*!< PWM_T::CTL0: DBGTRIOFF Mask            */
N
N#define PWM_CTL1_CNTTYPE0_Pos            (0)                                               /*!< PWM_T::CTL1: CNTTYPE0 Position         */
N#define PWM_CTL1_CNTTYPE0_Msk            (0x3ul << PWM_CTL1_CNTTYPE0_Pos)                  /*!< PWM_T::CTL1: CNTTYPE0 Mask             */
N
N#define PWM_CTL1_CNTTYPE2_Pos            (4)                                               /*!< PWM_T::CTL1: CNTTYPE2 Position         */
N#define PWM_CTL1_CNTTYPE2_Msk            (0x3ul << PWM_CTL1_CNTTYPE2_Pos)                  /*!< PWM_T::CTL1: CNTTYPE2 Mask             */
N
N#define PWM_CTL1_CNTTYPE4_Pos            (8)                                               /*!< PWM_T::CTL1: CNTTYPE4 Position         */
N#define PWM_CTL1_CNTTYPE4_Msk            (0x3ul << PWM_CTL1_CNTTYPE4_Pos)                  /*!< PWM_T::CTL1: CNTTYPE4 Mask             */
N
N#define PWM_CTL1_OUTMODE0_Pos            (24)                                              /*!< PWM_T::CTL1: PWMMODE0 Position         */
N#define PWM_CTL1_OUTMODE0_Msk            (0x1ul << PWM_CTL1_OUTMODE0_Pos)                  /*!< PWM_T::CTL1: PWMMODE0 Mask             */
N
N#define PWM_CTL1_OUTMODE2_Pos            (25)                                              /*!< PWM_T::CTL1: PWMMODE2 Position         */
N#define PWM_CTL1_OUTMODE2_Msk            (0x1ul << PWM_CTL1_OUTMODE2_Pos)                  /*!< PWM_T::CTL1: PWMMODE2 Mask             */
N
N#define PWM_CTL1_OUTMODE4_Pos            (26)                                              /*!< PWM_T::CTL1: PWMMODE4 Position         */
N#define PWM_CTL1_OUTMODE4_Msk            (0x1ul << PWM_CTL1_OUTMODE4_Pos)                  /*!< PWM_T::CTL1: PWMMODE4 Mask             */
N
N#define PWM_CLKSRC_ECLKSRC0_Pos          (0)                                               /*!< PWM_T::CLKSRC: ECLKSRC0 Position       */
N#define PWM_CLKSRC_ECLKSRC0_Msk          (0x7ul << PWM_CLKSRC_ECLKSRC0_Pos)                /*!< PWM_T::CLKSRC: ECLKSRC0 Mask           */
N
N#define PWM_CLKSRC_ECLKSRC2_Pos          (8)                                               /*!< PWM_T::CLKSRC: ECLKSRC2 Position       */
N#define PWM_CLKSRC_ECLKSRC2_Msk          (0x7ul << PWM_CLKSRC_ECLKSRC2_Pos)                /*!< PWM_T::CLKSRC: ECLKSRC2 Mask           */
N
N#define PWM_CLKSRC_ECLKSRC4_Pos          (16)                                              /*!< PWM_T::CLKSRC: ECLKSRC4 Position       */
N#define PWM_CLKSRC_ECLKSRC4_Msk          (0x7ul << PWM_CLKSRC_ECLKSRC4_Pos)                /*!< PWM_T::CLKSRC: ECLKSRC4 Mask           */
N
N#define PWM_CLKPSC0_1_CLKPSC_Pos         (0)                                               /*!< PWM_T::CLKPSC: CLKPSC Position      */
N#define PWM_CLKPSC0_1_CLKPSC_Msk         (0xffful << PWM_CLKPSC0_1_CLKPSC_Pos)             /*!< PWM_T::CLKPSC: CLKPSC Mask          */
N
N#define PWM_CLKPSC2_3_CLKPSC_Pos         (0)                                               /*!< PWM_T::CLKPSC: CLKPSC Position      */
N#define PWM_CLKPSC2_3_CLKPSC_Msk         (0xffful << PWM_CLKPSC2_3_CLKPSC_Pos)             /*!< PWM_T::CLKPSC: CLKPSC Mask          */
N
N#define PWM_CLKPSC4_5_CLKPSC_Pos         (0)                                               /*!< PWM_T::CLKPSC: CLKPSC Position      */
N#define PWM_CLKPSC4_5_CLKPSC_Msk         (0xffful << PWM_CLKPSC4_5_CLKPSC_Pos)             /*!< PWM_T::CLKPSC: CLKPSC Mask          */
N
N#define PWM_CNTEN_CNTEN0_Pos             (0)                                               /*!< PWM_T::CNTEN: CNTEN0 Position          */
N#define PWM_CNTEN_CNTEN0_Msk             (0x1ul << PWM_CNTEN_CNTEN0_Pos)                   /*!< PWM_T::CNTEN: CNTEN0 Mask              */
N
N#define PWM_CNTEN_CNTEN2_Pos             (2)                                               /*!< PWM_T::CNTEN: CNTEN2 Position          */
N#define PWM_CNTEN_CNTEN2_Msk             (0x1ul << PWM_CNTEN_CNTEN2_Pos)                   /*!< PWM_T::CNTEN: CNTEN2 Mask              */
N
N#define PWM_CNTEN_CNTEN4_Pos             (4)                                               /*!< PWM_T::CNTEN: CNTEN4 Position          */
N#define PWM_CNTEN_CNTEN4_Msk             (0x1ul << PWM_CNTEN_CNTEN4_Pos)                   /*!< PWM_T::CNTEN: CNTEN4 Mask              */
N
N#define PWM_CNTCLR_CNTCLR0_Pos           (0)                                               /*!< PWM_T::CNTCLR: CNTCLR0 Position        */
N#define PWM_CNTCLR_CNTCLR0_Msk           (0x1ul << PWM_CNTCLR_CNTCLR0_Pos)                 /*!< PWM_T::CNTCLR: CNTCLR0 Mask            */
N
N#define PWM_CNTCLR_CNTCLR2_Pos           (2)                                               /*!< PWM_T::CNTCLR: CNTCLR2 Position        */
N#define PWM_CNTCLR_CNTCLR2_Msk           (0x1ul << PWM_CNTCLR_CNTCLR2_Pos)                 /*!< PWM_T::CNTCLR: CNTCLR2 Mask            */
N
N#define PWM_CNTCLR_CNTCLR4_Pos           (4)                                               /*!< PWM_T::CNTCLR: CNTCLR4 Position        */
N#define PWM_CNTCLR_CNTCLR4_Msk           (0x1ul << PWM_CNTCLR_CNTCLR4_Pos)                 /*!< PWM_T::CNTCLR: CNTCLR4 Mask            */
N
N#define PWM_PERIOD_PERIOD_Pos            (0)                                               /*!< PWM_T::PERIOD: PERIOD Position         */
N#define PWM_PERIOD_PERIOD_Msk            (0xfffful << PWM_PERIOD_PERIOD_Pos)               /*!< PWM_T::PERIOD: PERIOD Mask             */
N
N#define PWM_CMPDAT_CMP_Pos               (0)                                               /*!< PWM_T::CMPDAT: CMP Position            */
N#define PWM_CMPDAT_CMP_Msk               (0xfffful << PWM_CMPDAT_CMP_Pos)                  /*!< PWM_T::CMPDAT: CMP Mask                */
N
N#define PWM_DTCTL_DTCNT_Pos             (0)                                               /*!< PWM_T::DTCTL: DTCNT Position            */
N#define PWM_DTCTL_DTCNT_Msk             (0xffful << PWM_DTCTL_DTCNT_Pos)                  /*!< PWM_T::DTCTL: DTCNT Mask                */
N
N#define PWM_DTCTL_DTEN_Pos              (16)                                              /*!< PWM_T::DTCTL: DTEN Position             */
N#define PWM_DTCTL_DTEN_Msk              (0x1ul << PWM_DTCTL_DTEN_Pos)                     /*!< PWM_T::DTCTL: DTEN Mask                 */
N
N#define PWM_DTCTL_DTCKSEL_Pos           (24)                                              /*!< PWM_T::DTCTL: DTCKSEL Position          */
N#define PWM_DTCTL_DTCKSEL_Msk           (0x1ul << PWM_DTCTL_DTCKSEL_Pos)                  /*!< PWM_T::DTCTL: DTCKSEL Mask              */
N
N#define PWM_DTCTL0_1_DTCNT_Pos           (0)                                               /*!< PWM_T::DTCTL: DTCNT Position        */
N#define PWM_DTCTL0_1_DTCNT_Msk           (0xffful << PWM_DTCTL0_1_DTCNT_Pos)               /*!< PWM_T::DTCTL: DTCNT Mask            */
N
N#define PWM_DTCTL0_1_DTEN_Pos            (16)                                              /*!< PWM_T::DTCTL: DTEN Position         */
N#define PWM_DTCTL0_1_DTEN_Msk            (0x1ul << PWM_DTCTL0_1_DTEN_Pos)                  /*!< PWM_T::DTCTL: DTEN Mask             */
N
N#define PWM_DTCTL0_1_DTCKSEL_Pos         (24)                                              /*!< PWM_T::DTCTL: DTCKSEL Position      */
N#define PWM_DTCTL0_1_DTCKSEL_Msk         (0x1ul << PWM_DTCTL0_1_DTCKSEL_Pos)               /*!< PWM_T::DTCTL: DTCKSEL Mask          */
N
N#define PWM_DTCTL2_3_DTCNT_Pos           (0)                                               /*!< PWM_T::DTCTL: DTCNT Position        */
N#define PWM_DTCTL2_3_DTCNT_Msk           (0xffful << PWM_DTCTL2_3_DTCNT_Pos)               /*!< PWM_T::DTCTL: DTCNT Mask            */
N
N#define PWM_DTCTL2_3_DTEN_Pos            (16)                                              /*!< PWM_T::DTCTL: DTEN Position         */
N#define PWM_DTCTL2_3_DTEN_Msk            (0x1ul << PWM_DTCTL2_3_DTEN_Pos)                  /*!< PWM_T::DTCTL: DTEN Mask             */
N
N#define PWM_DTCTL2_3_DTCKSEL_Pos         (24)                                              /*!< PWM_T::DTCTL: DTCKSEL Position      */
N#define PWM_DTCTL2_3_DTCKSEL_Msk         (0x1ul << PWM_DTCTL2_3_DTCKSEL_Pos)               /*!< PWM_T::DTCTL: DTCKSEL Mask          */
N
N#define PWM_DTCTL4_5_DTCNT_Pos           (0)                                               /*!< PWM_T::DTCTL: DTCNT Position        */
N#define PWM_DTCTL4_5_DTCNT_Msk           (0xffful << PWM_DTCTL4_5_DTCNT_Pos)               /*!< PWM_T::DTCTL: DTCNT Mask            */
N
N#define PWM_DTCTL4_5_DTEN_Pos            (16)                                              /*!< PWM_T::DTCTL: DTEN Position         */
N#define PWM_DTCTL4_5_DTEN_Msk            (0x1ul << PWM_DTCTL4_5_DTEN_Pos)                  /*!< PWM_T::DTCTL: DTEN Mask             */
N
N#define PWM_DTCTL4_5_DTCKSEL_Pos         (24)                                              /*!< PWM_T::DTCTL: DTCKSEL Position      */
N#define PWM_DTCTL4_5_DTCKSEL_Msk         (0x1ul << PWM_DTCTL4_5_DTCKSEL_Pos)               /*!< PWM_T::DTCTL: DTCKSEL Mask          */
N
N#define PWM_CNT_CNT_Pos                  (0)                                               /*!< PWM_T::CNT: CNT Position               */
N#define PWM_CNT_CNT_Msk                  (0xfffful << PWM_CNT_CNT_Pos)                     /*!< PWM_T::CNT: CNT Mask                   */
N
N#define PWM_CNT_DIRF_Pos                 (16)                                              /*!< PWM_T::CNT: DIRF Position              */
N#define PWM_CNT_DIRF_Msk                 (0x1ul << PWM_CNT_DIRF_Pos)                       /*!< PWM_T::CNT: DIRF Mask                  */
N
N#define PWM_WGCTL0_ZPCTL0_Pos            (0)                                               /*!< PWM_T::WGCTL0: ZPCTL0 Position         */
N#define PWM_WGCTL0_ZPCTL0_Msk            (0x3ul << PWM_WGCTL0_ZPCTL0_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL0 Mask             */
N
N#define PWM_WGCTL0_ZPCTL1_Pos            (2)                                               /*!< PWM_T::WGCTL0: ZPCTL1 Position         */
N#define PWM_WGCTL0_ZPCTL1_Msk            (0x3ul << PWM_WGCTL0_ZPCTL1_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL1 Mask             */
N
N#define PWM_WGCTL0_ZPCTL2_Pos            (4)                                               /*!< PWM_T::WGCTL0: ZPCTL2 Position         */
N#define PWM_WGCTL0_ZPCTL2_Msk            (0x3ul << PWM_WGCTL0_ZPCTL2_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL2 Mask             */
N
N#define PWM_WGCTL0_ZPCTL3_Pos            (6)                                               /*!< PWM_T::WGCTL0: ZPCTL3 Position         */
N#define PWM_WGCTL0_ZPCTL3_Msk            (0x3ul << PWM_WGCTL0_ZPCTL3_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL3 Mask             */
N
N#define PWM_WGCTL0_ZPCTL4_Pos            (8)                                               /*!< PWM_T::WGCTL0: ZPCTL4 Position         */
N#define PWM_WGCTL0_ZPCTL4_Msk            (0x3ul << PWM_WGCTL0_ZPCTL4_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL4 Mask             */
N
N#define PWM_WGCTL0_ZPCTL5_Pos            (10)                                              /*!< PWM_T::WGCTL0: ZPCTL5 Position         */
N#define PWM_WGCTL0_ZPCTL5_Msk            (0x3ul << PWM_WGCTL0_ZPCTL5_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL5 Mask             */
N
N#define PWM_WGCTL0_PRDPCTL0_Pos          (16)                                              /*!< PWM_T::WGCTL0: PRDPCTL0 Position       */
N#define PWM_WGCTL0_PRDPCTL0_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL0_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL0 Mask           */
N
N#define PWM_WGCTL0_PRDPCTL1_Pos          (18)                                              /*!< PWM_T::WGCTL0: PRDPCTL1 Position       */
N#define PWM_WGCTL0_PRDPCTL1_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL1_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL1 Mask           */
N
N#define PWM_WGCTL0_PRDPCTL2_Pos          (20)                                              /*!< PWM_T::WGCTL0: PRDPCTL2 Position       */
N#define PWM_WGCTL0_PRDPCTL2_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL2_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL2 Mask           */
N
N#define PWM_WGCTL0_PRDPCTL3_Pos          (22)                                              /*!< PWM_T::WGCTL0: PRDPCTL3 Position       */
N#define PWM_WGCTL0_PRDPCTL3_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL3_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL3 Mask           */
N
N#define PWM_WGCTL0_PRDPCTL4_Pos          (24)                                              /*!< PWM_T::WGCTL0: PRDPCTL4 Position       */
N#define PWM_WGCTL0_PRDPCTL4_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL4_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL4 Mask           */
N
N#define PWM_WGCTL0_PRDPCTL5_Pos          (26)                                              /*!< PWM_T::WGCTL0: PRDPCTL5 Position       */
N#define PWM_WGCTL0_PRDPCTL5_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL5_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL5 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL0_Pos          (0)                                               /*!< PWM_T::WGCTL1: CMPUCTL0 Position       */
N#define PWM_WGCTL1_CMPUCTL0_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL0_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL0 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL1_Pos          (2)                                               /*!< PWM_T::WGCTL1: CMPUCTL1 Position       */
N#define PWM_WGCTL1_CMPUCTL1_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL1_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL1 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL2_Pos          (4)                                               /*!< PWM_T::WGCTL1: CMPUCTL2 Position       */
N#define PWM_WGCTL1_CMPUCTL2_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL2_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL2 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL3_Pos          (6)                                               /*!< PWM_T::WGCTL1: CMPUCTL3 Position       */
N#define PWM_WGCTL1_CMPUCTL3_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL3_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL3 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL4_Pos          (8)                                               /*!< PWM_T::WGCTL1: CMPUCTL4 Position       */
N#define PWM_WGCTL1_CMPUCTL4_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL4_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL4 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL5_Pos          (10)                                              /*!< PWM_T::WGCTL1: CMPUCTL5 Position       */
N#define PWM_WGCTL1_CMPUCTL5_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL5_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL5 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL0_Pos          (16)                                              /*!< PWM_T::WGCTL1: CMPDCTL0 Position       */
N#define PWM_WGCTL1_CMPDCTL0_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL0_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL0 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL1_Pos          (18)                                              /*!< PWM_T::WGCTL1: CMPDCTL1 Position       */
N#define PWM_WGCTL1_CMPDCTL1_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL1_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL1 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL2_Pos          (20)                                              /*!< PWM_T::WGCTL1: CMPDCTL2 Position       */
N#define PWM_WGCTL1_CMPDCTL2_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL2_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL2 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL3_Pos          (22)                                              /*!< PWM_T::WGCTL1: CMPDCTL3 Position       */
N#define PWM_WGCTL1_CMPDCTL3_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL3_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL3 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL4_Pos          (24)                                              /*!< PWM_T::WGCTL1: CMPDCTL4 Position       */
N#define PWM_WGCTL1_CMPDCTL4_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL4_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL4 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL5_Pos          (26)                                              /*!< PWM_T::WGCTL1: CMPDCTL5 Position       */
N#define PWM_WGCTL1_CMPDCTL5_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL5_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL5 Mask           */
N
N#define PWM_MSKEN_MSKEN0_Pos             (0)                                               /*!< PWM_T::MSKEN: MSKEN0 Position          */
N#define PWM_MSKEN_MSKEN0_Msk             (0x1ul << PWM_MSKEN_MSKEN0_Pos)                   /*!< PWM_T::MSKEN: MSKEN0 Mask              */
N
N#define PWM_MSKEN_MSKEN1_Pos             (1)                                               /*!< PWM_T::MSKEN: MSKEN1 Position          */
N#define PWM_MSKEN_MSKEN1_Msk             (0x1ul << PWM_MSKEN_MSKEN1_Pos)                   /*!< PWM_T::MSKEN: MSKEN1 Mask              */
N
N#define PWM_MSKEN_MSKEN2_Pos             (2)                                               /*!< PWM_T::MSKEN: MSKEN2 Position          */
N#define PWM_MSKEN_MSKEN2_Msk             (0x1ul << PWM_MSKEN_MSKEN2_Pos)                   /*!< PWM_T::MSKEN: MSKEN2 Mask              */
N
N#define PWM_MSKEN_MSKEN3_Pos             (3)                                               /*!< PWM_T::MSKEN: MSKEN3 Position          */
N#define PWM_MSKEN_MSKEN3_Msk             (0x1ul << PWM_MSKEN_MSKEN3_Pos)                   /*!< PWM_T::MSKEN: MSKEN3 Mask              */
N
N#define PWM_MSKEN_MSKEN4_Pos             (4)                                               /*!< PWM_T::MSKEN: MSKEN4 Position          */
N#define PWM_MSKEN_MSKEN4_Msk             (0x1ul << PWM_MSKEN_MSKEN4_Pos)                   /*!< PWM_T::MSKEN: MSKEN4 Mask              */
N
N#define PWM_MSKEN_MSKEN5_Pos             (5)                                               /*!< PWM_T::MSKEN: MSKEN5 Position          */
N#define PWM_MSKEN_MSKEN5_Msk             (0x1ul << PWM_MSKEN_MSKEN5_Pos)                   /*!< PWM_T::MSKEN: MSKEN5 Mask              */
N
N#define PWM_MSK_MSKDAT0_Pos              (0)                                               /*!< PWM_T::MSK: MSKDAT0 Position           */
N#define PWM_MSK_MSKDAT0_Msk              (0x1ul << PWM_MSK_MSKDAT0_Pos)                    /*!< PWM_T::MSK: MSKDAT0 Mask               */
N
N#define PWM_MSK_MSKDAT1_Pos              (1)                                               /*!< PWM_T::MSK: MSKDAT1 Position           */
N#define PWM_MSK_MSKDAT1_Msk              (0x1ul << PWM_MSK_MSKDAT1_Pos)                    /*!< PWM_T::MSK: MSKDAT1 Mask               */
N
N#define PWM_MSK_MSKDAT2_Pos              (2)                                               /*!< PWM_T::MSK: MSKDAT2 Position           */
N#define PWM_MSK_MSKDAT2_Msk              (0x1ul << PWM_MSK_MSKDAT2_Pos)                    /*!< PWM_T::MSK: MSKDAT2 Mask               */
N
N#define PWM_MSK_MSKDAT3_Pos              (3)                                               /*!< PWM_T::MSK: MSKDAT3 Position           */
N#define PWM_MSK_MSKDAT3_Msk              (0x1ul << PWM_MSK_MSKDAT3_Pos)                    /*!< PWM_T::MSK: MSKDAT3 Mask               */
N
N#define PWM_MSK_MSKDAT4_Pos              (4)                                               /*!< PWM_T::MSK: MSKDAT4 Position           */
N#define PWM_MSK_MSKDAT4_Msk              (0x1ul << PWM_MSK_MSKDAT4_Pos)                    /*!< PWM_T::MSK: MSKDAT4 Mask               */
N
N#define PWM_MSK_MSKDAT5_Pos              (5)                                               /*!< PWM_T::MSK: MSKDAT5 Position           */
N#define PWM_MSK_MSKDAT5_Msk              (0x1ul << PWM_MSK_MSKDAT5_Pos)                    /*!< PWM_T::MSK: MSKDAT5 Mask               */
N
N#define PWM_BNF_BRK0NFEN_Pos             (0)                                               /*!< PWM_T::BNF: BRK0FEN Position           */
N#define PWM_BNF_BRK0NFEN_Msk             (0x1ul << PWM_BNF_BRK0NFEN_Pos)                    /*!< PWM_T::BNF: BRK0FEN Mask              */
N
N#define PWM_BNF_BRK0NFSEL_Pos            (1)                                               /*!< PWM_T::BNF: BRK0FCS Position           */
N#define PWM_BNF_BRK0NFSEL_Msk            (0x7ul << PWM_BNF_BRK0NFSEL_Pos)                  /*!< PWM_T::BNF: BRK0FCS Mask               */
N
N#define PWM_BNF_BRK0FCNT_Pos             (4)                                               /*!< PWM_T::BNF: BRK0FCNT Position          */
N#define PWM_BNF_BRK0FCNT_Msk             (0x7ul << PWM_BNF_BRK0FCNT_Pos)                   /*!< PWM_T::BNF: BRK0FCNT Mask              */
N
N#define PWM_BNF_BRK0PINV_Pos             (7)                                               /*!< PWM_T::BNF: BRK0PINV Position          */
N#define PWM_BNF_BRK0PINV_Msk             (0x1ul << PWM_BNF_BRK0PINV_Pos)                   /*!< PWM_T::BNF: BRK0PINV Mask              */
N
N#define PWM_BNF_BRK1NFEN_Pos             (8)                                               /*!< PWM_T::BNF: BRK1FEN Position           */
N#define PWM_BNF_BRK1NFEN_Msk             (0x1ul << PWM_BNF_BRK1NFEN_Pos)                   /*!< PWM_T::BNF: BRK1FEN Mask               */
N
N#define PWM_BNF_BRK1NFSEL_Pos            (9)                                               /*!< PWM_T::BNF: BRK1FCS Position           */
N#define PWM_BNF_BRK1NFSEL_Msk            (0x7ul << PWM_BNF_BRK1NFSEL_Pos)                  /*!< PWM_T::BNF: BRK1NFSEL Mask             */
N
N#define PWM_BNF_BRK1FCNT_Pos             (12)                                              /*!< PWM_T::BNF: BRK1FCNT Position          */
N#define PWM_BNF_BRK1FCNT_Msk             (0x7ul << PWM_BNF_BRK1FCNT_Pos)                   /*!< PWM_T::BNF: BRK1FCNT Mask              */
N
N#define PWM_BNF_BRK1PINV_Pos             (15)                                              /*!< PWM_T::BNF: BRK1PINV Position          */
N#define PWM_BNF_BRK1PINV_Msk             (0x1ul << PWM_BNF_BRK1PINV_Pos)                   /*!< PWM_T::BNF: BRK1PINV Mask              */
N
N#define PWM_BNF_BK0SRC_Pos               (16)                                              /*!< PWM_T::BNF: BK0SRC Position            */
N#define PWM_BNF_BK0SRC_Msk               (0x1ul << PWM_BNF_BK0SRC_Pos)                     /*!< PWM_T::BNF: BK0SRC Mask                */
N
N#define PWM_BNF_BK1SRC_Pos               (24)                                              /*!< PWM_T::BNF: BK1SRC Position            */
N#define PWM_BNF_BK1SRC_Msk               (0x1ul << PWM_BNF_BK1SRC_Pos)                     /*!< PWM_T::BNF: BK1SRC Mask                */
N
N#define PWM_FAILBRK_CSSBRKEN_Pos         (0)                                               /*!< PWM_T::FAILBRK: CSSBRKEN Position      */
N#define PWM_FAILBRK_CSSBRKEN_Msk         (0x1ul << PWM_FAILBRK_CSSBRKEN_Pos)               /*!< PWM_T::FAILBRK: CSSBRKEN Mask          */
N
N#define PWM_FAILBRK_BODBRKEN_Pos         (1)                                               /*!< PWM_T::FAILBRK: BODBRKEN Position      */
N#define PWM_FAILBRK_BODBRKEN_Msk         (0x1ul << PWM_FAILBRK_BODBRKEN_Pos)               /*!< PWM_T::FAILBRK: BODBRKEN Mask          */
N
N#define PWM_FAILBRK_CORBRKEN_Pos         (3)                                               /*!< PWM_T::FAILBRK: CORBRKEN Position      */
N#define PWM_FAILBRK_CORBRKEN_Msk         (0x1ul << PWM_FAILBRK_CORBRKEN_Pos)               /*!< PWM_T::FAILBRK: CORBRKEN Mask          */
N
N#define PWM_BRKCTL_CPO0EBEN_Pos          (0)                                               /*!< PWM_T::BRKCTL: CPO0EBEN Position    */
N#define PWM_BRKCTL_CPO0EBEN_Msk          (0x1ul << PWM_BRKCTL_CPO0EBEN_Pos)             /*!< PWM_T::BRKCTL: CPO0EBEN Mask        */
N
N#define PWM_BRKCTL_CPO1EBEN_Pos          (1)                                               /*!< PWM_T::BRKCTL: CPO1EBEN Position    */
N#define PWM_BRKCTL_CPO1EBEN_Msk          (0x1ul << PWM_BRKCTL_CPO1EBEN_Pos)             /*!< PWM_T::BRKCTL: CPO1EBEN Mask        */
N
N#define PWM_BRKCTL_BRKP0EEN_Pos          (4)                                               /*!< PWM_T::BRKCTL: BRKP0EEN Position    */
N#define PWM_BRKCTL_BRKP0EEN_Msk          (0x1ul << PWM_BRKCTL_BRKP0EEN_Pos)             /*!< PWM_T::BRKCTL: BRKP0EEN Mask        */
N
N#define PWM_BRKCTL_BRKP1EEN_Pos          (5)                                               /*!< PWM_T::BRKCTL: BRKP1EEN Position    */
N#define PWM_BRKCTL_BRKP1EEN_Msk          (0x1ul << PWM_BRKCTL_BRKP1EEN_Pos)             /*!< PWM_T::BRKCTL: BRKP1EEN Mask        */
N
N#define PWM_BRKCTL_SYSEBEN_Pos           (7)                                               /*!< PWM_T::BRKCTL: SYSEBEN Position     */
N#define PWM_BRKCTL_SYSEBEN_Msk           (0x1ul << PWM_BRKCTL_SYSEBEN_Pos)              /*!< PWM_T::BRKCTL: SYSEBEN Mask         */
N
N#define PWM_BRKCTL_CPO0LBEN_Pos          (8)                                               /*!< PWM_T::BRKCTL: CPO0LBEN Position    */
N#define PWM_BRKCTL_CPO0LBEN_Msk          (0x1ul << PWM_BRKCTL_CPO0LBEN_Pos)             /*!< PWM_T::BRKCTL: CPO0LBEN Mask        */
N
N#define PWM_BRKCTL_CPO1LBEN_Pos          (9)                                               /*!< PWM_T::BRKCTL: CPO1LBEN Position    */
N#define PWM_BRKCTL_CPO1LBEN_Msk          (0x1ul << PWM_BRKCTL_CPO1LBEN_Pos)             /*!< PWM_T::BRKCTL: CPO1LBEN Mask        */
N
N#define PWM_BRKCTL_BRKP0LEN_Pos          (12)                                              /*!< PWM_T::BRKCTL: BRKP0LEN Position    */
N#define PWM_BRKCTL_BRKP0LEN_Msk          (0x1ul << PWM_BRKCTL_BRKP0LEN_Pos)             /*!< PWM_T::BRKCTL: BRKP0LEN Mask        */
N
N#define PWM_BRKCTL_BRKP1LEN_Pos          (13)                                              /*!< PWM_T::BRKCTL: BRKP1LEN Position    */
N#define PWM_BRKCTL_BRKP1LEN_Msk          (0x1ul << PWM_BRKCTL_BRKP1LEN_Pos)             /*!< PWM_T::BRKCTL: BRKP1LEN Mask        */
N
N#define PWM_BRKCTL_SYSLBEN_Pos           (15)                                              /*!< PWM_T::BRKCTL: SYSLBEN Position     */
N#define PWM_BRKCTL_SYSLBEN_Msk           (0x1ul << PWM_BRKCTL_SYSLBEN_Pos)              /*!< PWM_T::BRKCTL: SYSLBEN Mask         */
N
N#define PWM_BRKCTL_BRKAEVEN_Pos          (16)                                              /*!< PWM_T::BRKCTL: BRKAEVEN Position    */
N#define PWM_BRKCTL_BRKAEVEN_Msk          (0x3ul << PWM_BRKCTL_BRKAEVEN_Pos)             /*!< PWM_T::BRKCTL: BRKAEVEN Mask        */
N
N#define PWM_BRKCTL_BRKAODD_Pos           (18)                                              /*!< PWM_T::BRKCTL: BRKAODD Position     */
N#define PWM_BRKCTL_BRKAODD_Msk           (0x3ul << PWM_BRKCTL_BRKAODD_Pos)              /*!< PWM_T::BRKCTL: BRKAODD Mask         */
N
N#define PWM_BRKCTL0_1_CPO0EBEN_Pos       (0)                                               /*!< PWM_T::BRKCTL: CPO0EBEN Position    */
N#define PWM_BRKCTL0_1_CPO0EBEN_Msk       (0x1ul << PWM_BRKCTL0_1_CPO0EBEN_Pos)             /*!< PWM_T::BRKCTL: CPO0EBEN Mask        */
N
N#define PWM_BRKCTL0_1_CPO1EBEN_Pos       (1)                                               /*!< PWM_T::BRKCTL: CPO1EBEN Position    */
N#define PWM_BRKCTL0_1_CPO1EBEN_Msk       (0x1ul << PWM_BRKCTL0_1_CPO1EBEN_Pos)             /*!< PWM_T::BRKCTL: CPO1EBEN Mask        */
N
N#define PWM_BRKCTL0_1_BRKP0EEN_Pos       (4)                                               /*!< PWM_T::BRKCTL: BRKP0EEN Position    */
N#define PWM_BRKCTL0_1_BRKP0EEN_Msk       (0x1ul << PWM_BRKCTL0_1_BRKP0EEN_Pos)             /*!< PWM_T::BRKCTL: BRKP0EEN Mask        */
N
N#define PWM_BRKCTL0_1_BRKP1EEN_Pos       (5)                                               /*!< PWM_T::BRKCTL: BRKP1EEN Position    */
N#define PWM_BRKCTL0_1_BRKP1EEN_Msk       (0x1ul << PWM_BRKCTL0_1_BRKP1EEN_Pos)             /*!< PWM_T::BRKCTL: BRKP1EEN Mask        */
N
N#define PWM_BRKCTL0_1_SYSEBEN_Pos        (7)                                               /*!< PWM_T::BRKCTL: SYSEBEN Position     */
N#define PWM_BRKCTL0_1_SYSEBEN_Msk        (0x1ul << PWM_BRKCTL0_1_SYSEBEN_Pos)              /*!< PWM_T::BRKCTL: SYSEBEN Mask         */
N
N#define PWM_BRKCTL0_1_CPO0LBEN_Pos       (8)                                               /*!< PWM_T::BRKCTL: CPO0LBEN Position    */
N#define PWM_BRKCTL0_1_CPO0LBEN_Msk       (0x1ul << PWM_BRKCTL0_1_CPO0LBEN_Pos)             /*!< PWM_T::BRKCTL: CPO0LBEN Mask        */
N
N#define PWM_BRKCTL0_1_CPO1LBEN_Pos       (9)                                               /*!< PWM_T::BRKCTL: CPO1LBEN Position    */
N#define PWM_BRKCTL0_1_CPO1LBEN_Msk       (0x1ul << PWM_BRKCTL0_1_CPO1LBEN_Pos)             /*!< PWM_T::BRKCTL: CPO1LBEN Mask        */
N
N#define PWM_BRKCTL0_1_BRKP0LEN_Pos       (12)                                              /*!< PWM_T::BRKCTL: BRKP0LEN Position    */
N#define PWM_BRKCTL0_1_BRKP0LEN_Msk       (0x1ul << PWM_BRKCTL0_1_BRKP0LEN_Pos)             /*!< PWM_T::BRKCTL: BRKP0LEN Mask        */
N
N#define PWM_BRKCTL0_1_BRKP1LEN_Pos       (13)                                              /*!< PWM_T::BRKCTL: BRKP1LEN Position    */
N#define PWM_BRKCTL0_1_BRKP1LEN_Msk       (0x1ul << PWM_BRKCTL0_1_BRKP1LEN_Pos)             /*!< PWM_T::BRKCTL: BRKP1LEN Mask        */
N
N#define PWM_BRKCTL0_1_SYSLBEN_Pos        (15)                                              /*!< PWM_T::BRKCTL: SYSLBEN Position     */
N#define PWM_BRKCTL0_1_SYSLBEN_Msk        (0x1ul << PWM_BRKCTL0_1_SYSLBEN_Pos)              /*!< PWM_T::BRKCTL: SYSLBEN Mask         */
N
N#define PWM_BRKCTL0_1_BRKAEVEN_Pos       (16)                                              /*!< PWM_T::BRKCTL: BRKAEVEN Position    */
N#define PWM_BRKCTL0_1_BRKAEVEN_Msk       (0x3ul << PWM_BRKCTL0_1_BRKAEVEN_Pos)             /*!< PWM_T::BRKCTL: BRKAEVEN Mask        */
N
N#define PWM_BRKCTL0_1_BRKAODD_Pos        (18)                                              /*!< PWM_T::BRKCTL: BRKAODD Position     */
N#define PWM_BRKCTL0_1_BRKAODD_Msk        (0x3ul << PWM_BRKCTL0_1_BRKAODD_Pos)              /*!< PWM_T::BRKCTL: BRKAODD Mask         */
N
N#define PWM_BRKCTL2_3_CPO0EBEN_Pos       (0)                                               /*!< PWM_T::BRKCTL: CPO0EBEN Position    */
N#define PWM_BRKCTL2_3_CPO0EBEN_Msk       (0x1ul << PWM_BRKCTL2_3_CPO0EBEN_Pos)             /*!< PWM_T::BRKCTL: CPO0EBEN Mask        */
N
N#define PWM_BRKCTL2_3_CPO1EBEN_Pos       (1)                                               /*!< PWM_T::BRKCTL: CPO1EBEN Position    */
N#define PWM_BRKCTL2_3_CPO1EBEN_Msk       (0x1ul << PWM_BRKCTL2_3_CPO1EBEN_Pos)             /*!< PWM_T::BRKCTL: CPO1EBEN Mask        */
N
N#define PWM_BRKCTL2_3_BRKP0EEN_Pos       (4)                                               /*!< PWM_T::BRKCTL: BRKP0EEN Position    */
N#define PWM_BRKCTL2_3_BRKP0EEN_Msk       (0x1ul << PWM_BRKCTL2_3_BRKP0EEN_Pos)             /*!< PWM_T::BRKCTL: BRKP0EEN Mask        */
N
N#define PWM_BRKCTL2_3_BRKP1EEN_Pos       (5)                                               /*!< PWM_T::BRKCTL: BRKP1EEN Position    */
N#define PWM_BRKCTL2_3_BRKP1EEN_Msk       (0x1ul << PWM_BRKCTL2_3_BRKP1EEN_Pos)             /*!< PWM_T::BRKCTL: BRKP1EEN Mask        */
N
N#define PWM_BRKCTL2_3_SYSEBEN_Pos        (7)                                               /*!< PWM_T::BRKCTL: SYSEBEN Position     */
N#define PWM_BRKCTL2_3_SYSEBEN_Msk        (0x1ul << PWM_BRKCTL2_3_SYSEBEN_Pos)              /*!< PWM_T::BRKCTL: SYSEBEN Mask         */
N
N#define PWM_BRKCTL2_3_CPO0LBEN_Pos       (8)                                               /*!< PWM_T::BRKCTL: CPO0LBEN Position    */
N#define PWM_BRKCTL2_3_CPO0LBEN_Msk       (0x1ul << PWM_BRKCTL2_3_CPO0LBEN_Pos)             /*!< PWM_T::BRKCTL: CPO0LBEN Mask        */
N
N#define PWM_BRKCTL2_3_CPO1LBEN_Pos       (9)                                               /*!< PWM_T::BRKCTL: CPO1LBEN Position    */
N#define PWM_BRKCTL2_3_CPO1LBEN_Msk       (0x1ul << PWM_BRKCTL2_3_CPO1LBEN_Pos)             /*!< PWM_T::BRKCTL: CPO1LBEN Mask        */
N
N#define PWM_BRKCTL2_3_BRKP0LEN_Pos       (12)                                              /*!< PWM_T::BRKCTL: BRKP0LEN Position    */
N#define PWM_BRKCTL2_3_BRKP0LEN_Msk       (0x1ul << PWM_BRKCTL2_3_BRKP0LEN_Pos)             /*!< PWM_T::BRKCTL: BRKP0LEN Mask        */
N
N#define PWM_BRKCTL2_3_BRKP1LEN_Pos       (13)                                              /*!< PWM_T::BRKCTL: BRKP1LEN Position    */
N#define PWM_BRKCTL2_3_BRKP1LEN_Msk       (0x1ul << PWM_BRKCTL2_3_BRKP1LEN_Pos)             /*!< PWM_T::BRKCTL: BRKP1LEN Mask        */
N
N#define PWM_BRKCTL2_3_SYSLBEN_Pos        (15)                                              /*!< PWM_T::BRKCTL: SYSLBEN Position     */
N#define PWM_BRKCTL2_3_SYSLBEN_Msk        (0x1ul << PWM_BRKCTL2_3_SYSLBEN_Pos)              /*!< PWM_T::BRKCTL: SYSLBEN Mask         */
N
N#define PWM_BRKCTL2_3_BRKAEVEN_Pos       (16)                                              /*!< PWM_T::BRKCTL: BRKAEVEN Position    */
N#define PWM_BRKCTL2_3_BRKAEVEN_Msk       (0x3ul << PWM_BRKCTL2_3_BRKAEVEN_Pos)             /*!< PWM_T::BRKCTL: BRKAEVEN Mask        */
N
N#define PWM_BRKCTL2_3_BRKAODD_Pos        (18)                                              /*!< PWM_T::BRKCTL: BRKAODD Position     */
N#define PWM_BRKCTL2_3_BRKAODD_Msk        (0x3ul << PWM_BRKCTL2_3_BRKAODD_Pos)              /*!< PWM_T::BRKCTL: BRKAODD Mask         */
N
N#define PWM_BRKCTL4_5_CPO0EBEN_Pos       (0)                                               /*!< PWM_T::BRKCTL: CPO0EBEN Position    */
N#define PWM_BRKCTL4_5_CPO0EBEN_Msk       (0x1ul << PWM_BRKCTL4_5_CPO0EBEN_Pos)             /*!< PWM_T::BRKCTL: CPO0EBEN Mask        */
N
N#define PWM_BRKCTL4_5_CPO1EBEN_Pos       (1)                                               /*!< PWM_T::BRKCTL: CPO1EBEN Position    */
N#define PWM_BRKCTL4_5_CPO1EBEN_Msk       (0x1ul << PWM_BRKCTL4_5_CPO1EBEN_Pos)             /*!< PWM_T::BRKCTL: CPO1EBEN Mask        */
N
N#define PWM_BRKCTL4_5_BRKP0EEN_Pos       (4)                                               /*!< PWM_T::BRKCTL: BRKP0EEN Position    */
N#define PWM_BRKCTL4_5_BRKP0EEN_Msk       (0x1ul << PWM_BRKCTL4_5_BRKP0EEN_Pos)             /*!< PWM_T::BRKCTL: BRKP0EEN Mask        */
N
N#define PWM_BRKCTL4_5_BRKP1EEN_Pos       (5)                                               /*!< PWM_T::BRKCTL: BRKP1EEN Position    */
N#define PWM_BRKCTL4_5_BRKP1EEN_Msk       (0x1ul << PWM_BRKCTL4_5_BRKP1EEN_Pos)             /*!< PWM_T::BRKCTL: BRKP1EEN Mask        */
N
N#define PWM_BRKCTL4_5_SYSEBEN_Pos        (7)                                               /*!< PWM_T::BRKCTL: SYSEBEN Position     */
N#define PWM_BRKCTL4_5_SYSEBEN_Msk        (0x1ul << PWM_BRKCTL4_5_SYSEBEN_Pos)              /*!< PWM_T::BRKCTL: SYSEBEN Mask         */
N
N#define PWM_BRKCTL4_5_CPO0LBEN_Pos       (8)                                               /*!< PWM_T::BRKCTL: CPO0LBEN Position    */
N#define PWM_BRKCTL4_5_CPO0LBEN_Msk       (0x1ul << PWM_BRKCTL4_5_CPO0LBEN_Pos)             /*!< PWM_T::BRKCTL: CPO0LBEN Mask        */
N
N#define PWM_BRKCTL4_5_CPO1LBEN_Pos       (9)                                               /*!< PWM_T::BRKCTL: CPO1LBEN Position    */
N#define PWM_BRKCTL4_5_CPO1LBEN_Msk       (0x1ul << PWM_BRKCTL4_5_CPO1LBEN_Pos)             /*!< PWM_T::BRKCTL: CPO1LBEN Mask        */
N
N#define PWM_BRKCTL4_5_BRKP0LEN_Pos       (12)                                              /*!< PWM_T::BRKCTL: BRKP0LEN Position    */
N#define PWM_BRKCTL4_5_BRKP0LEN_Msk       (0x1ul << PWM_BRKCTL4_5_BRKP0LEN_Pos)             /*!< PWM_T::BRKCTL: BRKP0LEN Mask        */
N
N#define PWM_BRKCTL4_5_BRKP1LEN_Pos       (13)                                              /*!< PWM_T::BRKCTL: BRKP1LEN Position    */
N#define PWM_BRKCTL4_5_BRKP1LEN_Msk       (0x1ul << PWM_BRKCTL4_5_BRKP1LEN_Pos)             /*!< PWM_T::BRKCTL: BRKP1LEN Mask        */
N
N#define PWM_BRKCTL4_5_SYSLBEN_Pos        (15)                                              /*!< PWM_T::BRKCTL: SYSLBEN Position     */
N#define PWM_BRKCTL4_5_SYSLBEN_Msk        (0x1ul << PWM_BRKCTL4_5_SYSLBEN_Pos)              /*!< PWM_T::BRKCTL: SYSLBEN Mask         */
N
N#define PWM_BRKCTL4_5_BRKAEVEN_Pos       (16)                                              /*!< PWM_T::BRKCTL: BRKAEVEN Position    */
N#define PWM_BRKCTL4_5_BRKAEVEN_Msk       (0x3ul << PWM_BRKCTL4_5_BRKAEVEN_Pos)             /*!< PWM_T::BRKCTL: BRKAEVEN Mask        */
N
N#define PWM_BRKCTL4_5_BRKAODD_Pos        (18)                                              /*!< PWM_T::BRKCTL: BRKAODD Position     */
N#define PWM_BRKCTL4_5_BRKAODD_Msk        (0x3ul << PWM_BRKCTL4_5_BRKAODD_Pos)              /*!< PWM_T::BRKCTL: BRKAODD Mask         */
N
N#define PWM_POLCTL_PINV0_Pos             (0)                                               /*!< PWM_T::POLCTL: PINV0 Position          */
N#define PWM_POLCTL_PINV0_Msk             (0x1ul << PWM_POLCTL_PINV0_Pos)                   /*!< PWM_T::POLCTL: PINV0 Mask              */
N
N#define PWM_POLCTL_PINV1_Pos             (1)                                               /*!< PWM_T::POLCTL: PINV1 Position          */
N#define PWM_POLCTL_PINV1_Msk             (0x1ul << PWM_POLCTL_PINV1_Pos)                   /*!< PWM_T::POLCTL: PINV1 Mask              */
N
N#define PWM_POLCTL_PINV2_Pos             (2)                                               /*!< PWM_T::POLCTL: PINV2 Position          */
N#define PWM_POLCTL_PINV2_Msk             (0x1ul << PWM_POLCTL_PINV2_Pos)                   /*!< PWM_T::POLCTL: PINV2 Mask              */
N
N#define PWM_POLCTL_PINV3_Pos             (3)                                               /*!< PWM_T::POLCTL: PINV3 Position          */
N#define PWM_POLCTL_PINV3_Msk             (0x1ul << PWM_POLCTL_PINV3_Pos)                   /*!< PWM_T::POLCTL: PINV3 Mask              */
N
N#define PWM_POLCTL_PINV4_Pos             (4)                                               /*!< PWM_T::POLCTL: PINV4 Position          */
N#define PWM_POLCTL_PINV4_Msk             (0x1ul << PWM_POLCTL_PINV4_Pos)                   /*!< PWM_T::POLCTL: PINV4 Mask              */
N
N#define PWM_POLCTL_PINV5_Pos             (5)                                               /*!< PWM_T::POLCTL: PINV5 Position          */
N#define PWM_POLCTL_PINV5_Msk             (0x1ul << PWM_POLCTL_PINV5_Pos)                   /*!< PWM_T::POLCTL: PINV5 Mask              */
N
N#define PWM_POEN_POEN0_Pos               (0)                                               /*!< PWM_T::POEN: POEN0 Position            */
N#define PWM_POEN_POEN0_Msk               (0x1ul << PWM_POEN_POEN0_Pos)                     /*!< PWM_T::POEN: POEN0 Mask                */
N
N#define PWM_POEN_POEN1_Pos               (1)                                               /*!< PWM_T::POEN: POEN1 Position            */
N#define PWM_POEN_POEN1_Msk               (0x1ul << PWM_POEN_POEN1_Pos)                     /*!< PWM_T::POEN: POEN1 Mask                */
N
N#define PWM_POEN_POEN2_Pos               (2)                                               /*!< PWM_T::POEN: POEN2 Position            */
N#define PWM_POEN_POEN2_Msk               (0x1ul << PWM_POEN_POEN2_Pos)                     /*!< PWM_T::POEN: POEN2 Mask                */
N
N#define PWM_POEN_POEN3_Pos               (3)                                               /*!< PWM_T::POEN: POEN3 Position            */
N#define PWM_POEN_POEN3_Msk               (0x1ul << PWM_POEN_POEN3_Pos)                     /*!< PWM_T::POEN: POEN3 Mask                */
N
N#define PWM_POEN_POEN4_Pos               (4)                                               /*!< PWM_T::POEN: POEN4 Position            */
N#define PWM_POEN_POEN4_Msk               (0x1ul << PWM_POEN_POEN4_Pos)                     /*!< PWM_T::POEN: POEN4 Mask                */
N
N#define PWM_POEN_POEN5_Pos               (5)                                               /*!< PWM_T::POEN: POEN5 Position            */
N#define PWM_POEN_POEN5_Msk               (0x1ul << PWM_POEN_POEN5_Pos)                     /*!< PWM_T::POEN: POEN5 Mask                */
N
N#define PWM_SWBRK_BRKETRG0_Pos           (0)                                               /*!< PWM_T::SWBRK: BRKETRG0 Position        */
N#define PWM_SWBRK_BRKETRG0_Msk           (0x1ul << PWM_SWBRK_BRKETRG0_Pos)                 /*!< PWM_T::SWBRK: BRKETRG0 Mask            */
N
N#define PWM_SWBRK_BRKETRG2_Pos           (1)                                               /*!< PWM_T::SWBRK: BRKETRG2 Position        */
N#define PWM_SWBRK_BRKETRG2_Msk           (0x1ul << PWM_SWBRK_BRKETRG2_Pos)                 /*!< PWM_T::SWBRK: BRKETRG2 Mask            */
N
N#define PWM_SWBRK_BRKETRG4_Pos           (2)                                               /*!< PWM_T::SWBRK: BRKETRG4 Position        */
N#define PWM_SWBRK_BRKETRG4_Msk           (0x1ul << PWM_SWBRK_BRKETRG4_Pos)                 /*!< PWM_T::SWBRK: BRKETRG4 Mask            */
N
N#define PWM_SWBRK_BRKLTRG0_Pos           (8)                                               /*!< PWM_T::SWBRK: BRKLTRG0 Position        */
N#define PWM_SWBRK_BRKLTRG0_Msk           (0x1ul << PWM_SWBRK_BRKLTRG0_Pos)                 /*!< PWM_T::SWBRK: BRKLTRG0 Mask            */
N
N#define PWM_SWBRK_BRKLTRG2_Pos           (9)                                               /*!< PWM_T::SWBRK: BRKLTRG2 Position        */
N#define PWM_SWBRK_BRKLTRG2_Msk           (0x1ul << PWM_SWBRK_BRKLTRG2_Pos)                 /*!< PWM_T::SWBRK: BRKLTRG2 Mask            */
N
N#define PWM_SWBRK_BRKLTRG4_Pos           (10)                                              /*!< PWM_T::SWBRK: BRKLTRG4 Position        */
N#define PWM_SWBRK_BRKLTRG4_Msk           (0x1ul << PWM_SWBRK_BRKLTRG4_Pos)                 /*!< PWM_T::SWBRK: BRKLTRG4 Mask            */
N
N#define PWM_INTEN0_ZIEN0_Pos             (0)                                               /*!< PWM_T::INTEN0: ZIEN0 Position          */
N#define PWM_INTEN0_ZIEN0_Msk             (0x1ul << PWM_INTEN0_ZIEN0_Pos)                   /*!< PWM_T::INTEN0: ZIEN0 Mask              */
N
N#define PWM_INTEN0_ZIEN2_Pos             (2)                                               /*!< PWM_T::INTEN0: ZIEN2 Position          */
N#define PWM_INTEN0_ZIEN2_Msk             (0x1ul << PWM_INTEN0_ZIEN2_Pos)                   /*!< PWM_T::INTEN0: ZIEN2 Mask              */
N
N#define PWM_INTEN0_ZIEN4_Pos             (4)                                               /*!< PWM_T::INTEN0: ZIEN4 Position          */
N#define PWM_INTEN0_ZIEN4_Msk             (0x1ul << PWM_INTEN0_ZIEN4_Pos)                   /*!< PWM_T::INTEN0: ZIEN4 Mask              */
N
N#define PWM_INTEN0_PIEN0_Pos             (8)                                               /*!< PWM_T::INTEN0: PIEN0 Position          */
N#define PWM_INTEN0_PIEN0_Msk             (0x1ul << PWM_INTEN0_PIEN0_Pos)                   /*!< PWM_T::INTEN0: PIEN0 Mask              */
N
N#define PWM_INTEN0_PIEN2_Pos             (10)                                              /*!< PWM_T::INTEN0: PIEN2 Position          */
N#define PWM_INTEN0_PIEN2_Msk             (0x1ul << PWM_INTEN0_PIEN2_Pos)                   /*!< PWM_T::INTEN0: PIEN2 Mask              */
N
N#define PWM_INTEN0_PIEN4_Pos             (12)                                              /*!< PWM_T::INTEN0: PIEN4 Position          */
N#define PWM_INTEN0_PIEN4_Msk             (0x1ul << PWM_INTEN0_PIEN4_Pos)                   /*!< PWM_T::INTEN0: PIEN4 Mask              */
N
N#define PWM_INTEN0_CMPUIEN0_Pos          (16)                                              /*!< PWM_T::INTEN0: CMPUIEN0 Position       */
N#define PWM_INTEN0_CMPUIEN0_Msk          (0x1ul << PWM_INTEN0_CMPUIEN0_Pos)                /*!< PWM_T::INTEN0: CMPUIEN0 Mask           */
N
N#define PWM_INTEN0_CMPUIEN1_Pos          (17)                                              /*!< PWM_T::INTEN0: CMPUIEN1 Position       */
N#define PWM_INTEN0_CMPUIEN1_Msk          (0x1ul << PWM_INTEN0_CMPUIEN1_Pos)                /*!< PWM_T::INTEN0: CMPUIEN1 Mask           */
N
N#define PWM_INTEN0_CMPUIEN2_Pos          (18)                                              /*!< PWM_T::INTEN0: CMPUIEN2 Position       */
N#define PWM_INTEN0_CMPUIEN2_Msk          (0x1ul << PWM_INTEN0_CMPUIEN2_Pos)                /*!< PWM_T::INTEN0: CMPUIEN2 Mask           */
N
N#define PWM_INTEN0_CMPUIEN3_Pos          (19)                                              /*!< PWM_T::INTEN0: CMPUIEN3 Position       */
N#define PWM_INTEN0_CMPUIEN3_Msk          (0x1ul << PWM_INTEN0_CMPUIEN3_Pos)                /*!< PWM_T::INTEN0: CMPUIEN3 Mask           */
N
N#define PWM_INTEN0_CMPUIEN4_Pos          (20)                                              /*!< PWM_T::INTEN0: CMPUIEN4 Position       */
N#define PWM_INTEN0_CMPUIEN4_Msk          (0x1ul << PWM_INTEN0_CMPUIEN4_Pos)                /*!< PWM_T::INTEN0: CMPUIEN4 Mask           */
N
N#define PWM_INTEN0_CMPUIEN5_Pos          (21)                                              /*!< PWM_T::INTEN0: CMPUIEN5 Position       */
N#define PWM_INTEN0_CMPUIEN5_Msk          (0x1ul << PWM_INTEN0_CMPUIEN5_Pos)                /*!< PWM_T::INTEN0: CMPUIEN5 Mask           */
N
N#define PWM_INTEN0_CMPDIEN0_Pos          (24)                                              /*!< PWM_T::INTEN0: CMPDIEN0 Position       */
N#define PWM_INTEN0_CMPDIEN0_Msk          (0x1ul << PWM_INTEN0_CMPDIEN0_Pos)                /*!< PWM_T::INTEN0: CMPDIEN0 Mask           */
N
N#define PWM_INTEN0_CMPDIEN1_Pos          (25)                                              /*!< PWM_T::INTEN0: CMPDIEN1 Position       */
N#define PWM_INTEN0_CMPDIEN1_Msk          (0x1ul << PWM_INTEN0_CMPDIEN1_Pos)                /*!< PWM_T::INTEN0: CMPDIEN1 Mask           */
N
N#define PWM_INTEN0_CMPDIEN2_Pos          (26)                                              /*!< PWM_T::INTEN0: CMPDIEN2 Position       */
N#define PWM_INTEN0_CMPDIEN2_Msk          (0x1ul << PWM_INTEN0_CMPDIEN2_Pos)                /*!< PWM_T::INTEN0: CMPDIEN2 Mask           */
N
N#define PWM_INTEN0_CMPDIEN3_Pos          (27)                                              /*!< PWM_T::INTEN0: CMPDIEN3 Position       */
N#define PWM_INTEN0_CMPDIEN3_Msk          (0x1ul << PWM_INTEN0_CMPDIEN3_Pos)                /*!< PWM_T::INTEN0: CMPDIEN3 Mask           */
N
N#define PWM_INTEN0_CMPDIEN4_Pos          (28)                                              /*!< PWM_T::INTEN0: CMPDIEN4 Position       */
N#define PWM_INTEN0_CMPDIEN4_Msk          (0x1ul << PWM_INTEN0_CMPDIEN4_Pos)                /*!< PWM_T::INTEN0: CMPDIEN4 Mask           */
N
N#define PWM_INTEN0_CMPDIEN5_Pos          (29)                                              /*!< PWM_T::INTEN0: CMPDIEN5 Position       */
N#define PWM_INTEN0_CMPDIEN5_Msk          (0x1ul << PWM_INTEN0_CMPDIEN5_Pos)                /*!< PWM_T::INTEN0: CMPDIEN5 Mask           */
N
N#define PWM_INTEN1_BRKEIEN0_1_Pos        (0)                                               /*!< PWM_T::INTEN1: BRKEIEN0_1 Position     */
N#define PWM_INTEN1_BRKEIEN0_1_Msk        (0x1ul << PWM_INTEN1_BRKEIEN0_1_Pos)              /*!< PWM_T::INTEN1: BRKEIEN0_1 Mask         */
N
N#define PWM_INTEN1_BRKEIEN2_3_Pos        (1)                                               /*!< PWM_T::INTEN1: BRKEIEN2_3 Position     */
N#define PWM_INTEN1_BRKEIEN2_3_Msk        (0x1ul << PWM_INTEN1_BRKEIEN2_3_Pos)              /*!< PWM_T::INTEN1: BRKEIEN2_3 Mask         */
N
N#define PWM_INTEN1_BRKEIEN4_5_Pos        (2)                                               /*!< PWM_T::INTEN1: BRKEIEN4_5 Position     */
N#define PWM_INTEN1_BRKEIEN4_5_Msk        (0x1ul << PWM_INTEN1_BRKEIEN4_5_Pos)              /*!< PWM_T::INTEN1: BRKEIEN4_5 Mask         */
N
N#define PWM_INTEN1_BRKLIEN0_1_Pos        (8)                                               /*!< PWM_T::INTEN1: BRKLIEN0_1 Position     */
N#define PWM_INTEN1_BRKLIEN0_1_Msk        (0x1ul << PWM_INTEN1_BRKLIEN0_1_Pos)              /*!< PWM_T::INTEN1: BRKLIEN0_1 Mask         */
N
N#define PWM_INTEN1_BRKLIEN2_3_Pos        (9)                                               /*!< PWM_T::INTEN1: BRKLIEN2_3 Position     */
N#define PWM_INTEN1_BRKLIEN2_3_Msk        (0x1ul << PWM_INTEN1_BRKLIEN2_3_Pos)              /*!< PWM_T::INTEN1: BRKLIEN2_3 Mask         */
N
N#define PWM_INTEN1_BRKLIEN4_5_Pos        (10)                                              /*!< PWM_T::INTEN1: BRKLIEN4_5 Position     */
N#define PWM_INTEN1_BRKLIEN4_5_Msk        (0x1ul << PWM_INTEN1_BRKLIEN4_5_Pos)              /*!< PWM_T::INTEN1: BRKLIEN4_5 Mask         */
N
N#define PWM_INTSTS0_ZIF0_Pos             (0)                                               /*!< PWM_T::INTSTS0: ZIF0 Position          */
N#define PWM_INTSTS0_ZIF0_Msk             (0x1ul << PWM_INTSTS0_ZIF0_Pos)                   /*!< PWM_T::INTSTS0: ZIF0 Mask              */
N
N#define PWM_INTSTS0_ZIF2_Pos             (2)                                               /*!< PWM_T::INTSTS0: ZIF2 Position          */
N#define PWM_INTSTS0_ZIF2_Msk             (0x1ul << PWM_INTSTS0_ZIF2_Pos)                   /*!< PWM_T::INTSTS0: ZIF2 Mask              */
N
N#define PWM_INTSTS0_ZIF4_Pos             (4)                                               /*!< PWM_T::INTSTS0: ZIF4 Position          */
N#define PWM_INTSTS0_ZIF4_Msk             (0x1ul << PWM_INTSTS0_ZIF4_Pos)                   /*!< PWM_T::INTSTS0: ZIF4 Mask              */
N
N#define PWM_INTSTS0_PIF0_Pos             (8)                                               /*!< PWM_T::INTSTS0: PIF0 Position          */
N#define PWM_INTSTS0_PIF0_Msk             (0x1ul << PWM_INTSTS0_PIF0_Pos)                   /*!< PWM_T::INTSTS0: PIF0 Mask              */
N
N#define PWM_INTSTS0_PIF2_Pos             (10)                                              /*!< PWM_T::INTSTS0: PIF2 Position          */
N#define PWM_INTSTS0_PIF2_Msk             (0x1ul << PWM_INTSTS0_PIF2_Pos)                   /*!< PWM_T::INTSTS0: PIF2 Mask              */
N
N#define PWM_INTSTS0_PIF4_Pos             (12)                                              /*!< PWM_T::INTSTS0: PIF4 Position          */
N#define PWM_INTSTS0_PIF4_Msk             (0x1ul << PWM_INTSTS0_PIF4_Pos)                   /*!< PWM_T::INTSTS0: PIF4 Mask              */
N
N#define PWM_INTSTS0_CMPUIF0_Pos          (16)                                              /*!< PWM_T::INTSTS0: CMPUIF0 Position       */
N#define PWM_INTSTS0_CMPUIF0_Msk          (0x1ul << PWM_INTSTS0_CMPUIF0_Pos)                /*!< PWM_T::INTSTS0: CMPUIF0 Mask           */
N
N#define PWM_INTSTS0_CMPUIF1_Pos          (17)                                              /*!< PWM_T::INTSTS0: CMPUIF1 Position       */
N#define PWM_INTSTS0_CMPUIF1_Msk          (0x1ul << PWM_INTSTS0_CMPUIF1_Pos)                /*!< PWM_T::INTSTS0: CMPUIF1 Mask           */
N
N#define PWM_INTSTS0_CMPUIF2_Pos          (18)                                              /*!< PWM_T::INTSTS0: CMPUIF2 Position       */
N#define PWM_INTSTS0_CMPUIF2_Msk          (0x1ul << PWM_INTSTS0_CMPUIF2_Pos)                /*!< PWM_T::INTSTS0: CMPUIF2 Mask           */
N
N#define PWM_INTSTS0_CMPUIF3_Pos          (19)                                              /*!< PWM_T::INTSTS0: CMPUIF3 Position       */
N#define PWM_INTSTS0_CMPUIF3_Msk          (0x1ul << PWM_INTSTS0_CMPUIF3_Pos)                /*!< PWM_T::INTSTS0: CMPUIF3 Mask           */
N
N#define PWM_INTSTS0_CMPUIF4_Pos          (20)                                              /*!< PWM_T::INTSTS0: CMPUIF4 Position       */
N#define PWM_INTSTS0_CMPUIF4_Msk          (0x1ul << PWM_INTSTS0_CMPUIF4_Pos)                /*!< PWM_T::INTSTS0: CMPUIF4 Mask           */
N
N#define PWM_INTSTS0_CMPUIF5_Pos          (21)                                              /*!< PWM_T::INTSTS0: CMPUIF5 Position       */
N#define PWM_INTSTS0_CMPUIF5_Msk          (0x1ul << PWM_INTSTS0_CMPUIF5_Pos)                /*!< PWM_T::INTSTS0: CMPUIF5 Mask           */
N
N#define PWM_INTSTS0_CMPDIF0_Pos          (24)                                              /*!< PWM_T::INTSTS0: CMPDIF0 Position       */
N#define PWM_INTSTS0_CMPDIF0_Msk          (0x1ul << PWM_INTSTS0_CMPDIF0_Pos)                /*!< PWM_T::INTSTS0: CMPDIF0 Mask           */
N
N#define PWM_INTSTS0_CMPDIF1_Pos          (25)                                              /*!< PWM_T::INTSTS0: CMPDIF1 Position       */
N#define PWM_INTSTS0_CMPDIF1_Msk          (0x1ul << PWM_INTSTS0_CMPDIF1_Pos)                /*!< PWM_T::INTSTS0: CMPDIF1 Mask           */
N
N#define PWM_INTSTS0_CMPDIF2_Pos          (26)                                              /*!< PWM_T::INTSTS0: CMPDIF2 Position       */
N#define PWM_INTSTS0_CMPDIF2_Msk          (0x1ul << PWM_INTSTS0_CMPDIF2_Pos)                /*!< PWM_T::INTSTS0: CMPDIF2 Mask           */
N
N#define PWM_INTSTS0_CMPDIF3_Pos          (27)                                              /*!< PWM_T::INTSTS0: CMPDIF3 Position       */
N#define PWM_INTSTS0_CMPDIF3_Msk          (0x1ul << PWM_INTSTS0_CMPDIF3_Pos)                /*!< PWM_T::INTSTS0: CMPDIF3 Mask           */
N
N#define PWM_INTSTS0_CMPDIF4_Pos          (28)                                              /*!< PWM_T::INTSTS0: CMPDIF4 Position       */
N#define PWM_INTSTS0_CMPDIF4_Msk          (0x1ul << PWM_INTSTS0_CMPDIF4_Pos)                /*!< PWM_T::INTSTS0: CMPDIF4 Mask           */
N
N#define PWM_INTSTS0_CMPDIF5_Pos          (29)                                              /*!< PWM_T::INTSTS0: CMPDIF5 Position       */
N#define PWM_INTSTS0_CMPDIF5_Msk          (0x1ul << PWM_INTSTS0_CMPDIF5_Pos)                /*!< PWM_T::INTSTS0: CMPDIF5 Mask           */
N
N#define PWM_INTSTS1_BRKEIF0_Pos          (0)                                               /*!< PWM_T::INTSTS1: BRKEIF0 Position       */
N#define PWM_INTSTS1_BRKEIF0_Msk          (0x1ul << PWM_INTSTS1_BRKEIF0_Pos)                /*!< PWM_T::INTSTS1: BRKEIF0 Mask           */
N
N#define PWM_INTSTS1_BRKEIF1_Pos          (1)                                               /*!< PWM_T::INTSTS1: BRKEIF1 Position       */
N#define PWM_INTSTS1_BRKEIF1_Msk          (0x1ul << PWM_INTSTS1_BRKEIF1_Pos)                /*!< PWM_T::INTSTS1: BRKEIF1 Mask           */
N
N#define PWM_INTSTS1_BRKEIF2_Pos          (2)                                               /*!< PWM_T::INTSTS1: BRKEIF2 Position       */
N#define PWM_INTSTS1_BRKEIF2_Msk          (0x1ul << PWM_INTSTS1_BRKEIF2_Pos)                /*!< PWM_T::INTSTS1: BRKEIF2 Mask           */
N
N#define PWM_INTSTS1_BRKEIF3_Pos          (3)                                               /*!< PWM_T::INTSTS1: BRKEIF3 Position       */
N#define PWM_INTSTS1_BRKEIF3_Msk          (0x1ul << PWM_INTSTS1_BRKEIF3_Pos)                /*!< PWM_T::INTSTS1: BRKEIF3 Mask           */
N
N#define PWM_INTSTS1_BRKEIF4_Pos          (4)                                               /*!< PWM_T::INTSTS1: BRKEIF4 Position       */
N#define PWM_INTSTS1_BRKEIF4_Msk          (0x1ul << PWM_INTSTS1_BRKEIF4_Pos)                /*!< PWM_T::INTSTS1: BRKEIF4 Mask           */
N
N#define PWM_INTSTS1_BRKEIF5_Pos          (5)                                               /*!< PWM_T::INTSTS1: BRKEIF5 Position       */
N#define PWM_INTSTS1_BRKEIF5_Msk          (0x1ul << PWM_INTSTS1_BRKEIF5_Pos)                /*!< PWM_T::INTSTS1: BRKEIF5 Mask           */
N
N#define PWM_INTSTS1_BRKLIF0_Pos          (8)                                               /*!< PWM_T::INTSTS1: BRKLIF0 Position       */
N#define PWM_INTSTS1_BRKLIF0_Msk          (0x1ul << PWM_INTSTS1_BRKLIF0_Pos)                /*!< PWM_T::INTSTS1: BRKLIF0 Mask           */
N
N#define PWM_INTSTS1_BRKLIF1_Pos          (9)                                               /*!< PWM_T::INTSTS1: BRKLIF1 Position       */
N#define PWM_INTSTS1_BRKLIF1_Msk          (0x1ul << PWM_INTSTS1_BRKLIF1_Pos)                /*!< PWM_T::INTSTS1: BRKLIF1 Mask           */
N
N#define PWM_INTSTS1_BRKLIF2_Pos          (10)                                              /*!< PWM_T::INTSTS1: BRKLIF2 Position       */
N#define PWM_INTSTS1_BRKLIF2_Msk          (0x1ul << PWM_INTSTS1_BRKLIF2_Pos)                /*!< PWM_T::INTSTS1: BRKLIF2 Mask           */
N
N#define PWM_INTSTS1_BRKLIF3_Pos          (11)                                              /*!< PWM_T::INTSTS1: BRKLIF3 Position       */
N#define PWM_INTSTS1_BRKLIF3_Msk          (0x1ul << PWM_INTSTS1_BRKLIF3_Pos)                /*!< PWM_T::INTSTS1: BRKLIF3 Mask           */
N
N#define PWM_INTSTS1_BRKLIF4_Pos          (12)                                              /*!< PWM_T::INTSTS1: BRKLIF4 Position       */
N#define PWM_INTSTS1_BRKLIF4_Msk          (0x1ul << PWM_INTSTS1_BRKLIF4_Pos)                /*!< PWM_T::INTSTS1: BRKLIF4 Mask           */
N
N#define PWM_INTSTS1_BRKLIF5_Pos          (13)                                              /*!< PWM_T::INTSTS1: BRKLIF5 Position       */
N#define PWM_INTSTS1_BRKLIF5_Msk          (0x1ul << PWM_INTSTS1_BRKLIF5_Pos)                /*!< PWM_T::INTSTS1: BRKLIF5 Mask           */
N
N#define PWM_INTSTS1_BRKESTS0_Pos         (16)                                              /*!< PWM_T::INTSTS1: BRKESTS0 Position      */
N#define PWM_INTSTS1_BRKESTS0_Msk         (0x1ul << PWM_INTSTS1_BRKESTS0_Pos)               /*!< PWM_T::INTSTS1: BRKESTS0 Mask          */
N
N#define PWM_INTSTS1_BRKESTS1_Pos         (17)                                              /*!< PWM_T::INTSTS1: BRKESTS1 Position      */
N#define PWM_INTSTS1_BRKESTS1_Msk         (0x1ul << PWM_INTSTS1_BRKESTS1_Pos)               /*!< PWM_T::INTSTS1: BRKESTS1 Mask          */
N
N#define PWM_INTSTS1_BRKESTS2_Pos         (18)                                              /*!< PWM_T::INTSTS1: BRKESTS2 Position      */
N#define PWM_INTSTS1_BRKESTS2_Msk         (0x1ul << PWM_INTSTS1_BRKESTS2_Pos)               /*!< PWM_T::INTSTS1: BRKESTS2 Mask          */
N
N#define PWM_INTSTS1_BRKESTS3_Pos         (19)                                              /*!< PWM_T::INTSTS1: BRKESTS3 Position      */
N#define PWM_INTSTS1_BRKESTS3_Msk         (0x1ul << PWM_INTSTS1_BRKESTS3_Pos)               /*!< PWM_T::INTSTS1: BRKESTS3 Mask          */
N
N#define PWM_INTSTS1_BRKESTS4_Pos         (20)                                              /*!< PWM_T::INTSTS1: BRKESTS4 Position      */
N#define PWM_INTSTS1_BRKESTS4_Msk         (0x1ul << PWM_INTSTS1_BRKESTS4_Pos)               /*!< PWM_T::INTSTS1: BRKESTS4 Mask          */
N
N#define PWM_INTSTS1_BRKESTS5_Pos         (21)                                              /*!< PWM_T::INTSTS1: BRKESTS5 Position      */
N#define PWM_INTSTS1_BRKESTS5_Msk         (0x1ul << PWM_INTSTS1_BRKESTS5_Pos)               /*!< PWM_T::INTSTS1: BRKESTS5 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS0_Pos         (24)                                              /*!< PWM_T::INTSTS1: BRKLSTS0 Position      */
N#define PWM_INTSTS1_BRKLSTS0_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS0_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS0 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS1_Pos         (25)                                              /*!< PWM_T::INTSTS1: BRKLSTS1 Position      */
N#define PWM_INTSTS1_BRKLSTS1_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS1_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS1 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS2_Pos         (26)                                              /*!< PWM_T::INTSTS1: BRKLSTS2 Position      */
N#define PWM_INTSTS1_BRKLSTS2_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS2_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS2 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS3_Pos         (27)                                              /*!< PWM_T::INTSTS1: BRKLSTS3 Position      */
N#define PWM_INTSTS1_BRKLSTS3_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS3_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS3 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS4_Pos         (28)                                              /*!< PWM_T::INTSTS1: BRKLSTS4 Position      */
N#define PWM_INTSTS1_BRKLSTS4_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS4_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS4 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS5_Pos         (29)                                              /*!< PWM_T::INTSTS1: BRKLSTS5 Position      */
N#define PWM_INTSTS1_BRKLSTS5_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS5_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS5 Mask          */
N
N#define PWM_ADCTS0_TRGSEL0_Pos           (0)                                               /*!< PWM_T::ADCTS0: TRGSEL0 Position        */
N#define PWM_ADCTS0_TRGSEL0_Msk           (0xful << PWM_ADCTS0_TRGSEL0_Pos)                 /*!< PWM_T::ADCTS0: TRGSEL0 Mask            */
N
N#define PWM_ADCTS0_TRGEN0_Pos            (7)                                               /*!< PWM_T::ADCTS0: TRGEN0 Position         */
N#define PWM_ADCTS0_TRGEN0_Msk            (0x1ul << PWM_ADCTS0_TRGEN0_Pos)                  /*!< PWM_T::ADCTS0: TRGEN0 Mask             */
N
N#define PWM_ADCTS0_TRGSEL1_Pos           (8)                                               /*!< PWM_T::ADCTS0: TRGSEL1 Position        */
N#define PWM_ADCTS0_TRGSEL1_Msk           (0xful << PWM_ADCTS0_TRGSEL1_Pos)                 /*!< PWM_T::ADCTS0: TRGSEL1 Mask            */
N
N#define PWM_ADCTS0_TRGEN1_Pos            (15)                                              /*!< PWM_T::ADCTS0: TRGEN1 Position         */
N#define PWM_ADCTS0_TRGEN1_Msk            (0x1ul << PWM_ADCTS0_TRGEN1_Pos)                  /*!< PWM_T::ADCTS0: TRGEN1 Mask             */
N
N#define PWM_ADCTS0_TRGSEL2_Pos           (16)                                              /*!< PWM_T::ADCTS0: TRGSEL2 Position        */
N#define PWM_ADCTS0_TRGSEL2_Msk           (0xful << PWM_ADCTS0_TRGSEL2_Pos)                 /*!< PWM_T::ADCTS0: TRGSEL2 Mask            */
N
N#define PWM_ADCTS0_TRGEN2_Pos            (23)                                              /*!< PWM_T::ADCTS0: TRGEN2 Position         */
N#define PWM_ADCTS0_TRGEN2_Msk            (0x1ul << PWM_ADCTS0_TRGEN2_Pos)                  /*!< PWM_T::ADCTS0: TRGEN2 Mask             */
N
N#define PWM_ADCTS0_TRGSEL3_Pos           (24)                                              /*!< PWM_T::ADCTS0: TRGSEL3 Position        */
N#define PWM_ADCTS0_TRGSEL3_Msk           (0xful << PWM_ADCTS0_TRGSEL3_Pos)                 /*!< PWM_T::ADCTS0: TRGSEL3 Mask            */
N
N#define PWM_ADCTS0_TRGEN3_Pos            (31)                                              /*!< PWM_T::ADCTS0: TRGEN3 Position         */
N#define PWM_ADCTS0_TRGEN3_Msk            (0x1ul << PWM_ADCTS0_TRGEN3_Pos)                  /*!< PWM_T::ADCTS0: TRGEN3 Mask             */
N
N#define PWM_ADCTS1_TRGSEL4_Pos           (0)                                               /*!< PWM_T::ADCTS1: TRGSEL4 Position        */
N#define PWM_ADCTS1_TRGSEL4_Msk           (0xful << PWM_ADCTS1_TRGSEL4_Pos)                 /*!< PWM_T::ADCTS1: TRGSEL4 Mask            */
N
N#define PWM_ADCTS1_TRGEN4_Pos            (7)                                               /*!< PWM_T::ADCTS1: TRGEN4 Position         */
N#define PWM_ADCTS1_TRGEN4_Msk            (0x1ul << PWM_ADCTS1_TRGEN4_Pos)                  /*!< PWM_T::ADCTS1: TRGEN4 Mask             */
N
N#define PWM_ADCTS1_TRGSEL5_Pos           (8)                                               /*!< PWM_T::ADCTS1: TRGSEL5 Position        */
N#define PWM_ADCTS1_TRGSEL5_Msk           (0xful << PWM_ADCTS1_TRGSEL5_Pos)                 /*!< PWM_T::ADCTS1: TRGSEL5 Mask            */
N
N#define PWM_ADCTS1_TRGEN5_Pos            (15)                                              /*!< PWM_T::ADCTS1: TRGEN5 Position         */
N#define PWM_ADCTS1_TRGEN5_Msk            (0x1ul << PWM_ADCTS1_TRGEN5_Pos)                  /*!< PWM_T::ADCTS1: TRGEN5 Mask             */
N
N#define PWM_SSCTL_SSEN0_Pos              (0)                                               /*!< PWM_T::SSCTL: SSEN0 Position           */
N#define PWM_SSCTL_SSEN0_Msk              (0x1ul << PWM_SSCTL_SSEN0_Pos)                    /*!< PWM_T::SSCTL: SSEN0 Mask               */
N
N#define PWM_SSCTL_SSEN2_Pos              (2)                                               /*!< PWM_T::SSCTL: SSEN2 Position           */
N#define PWM_SSCTL_SSEN2_Msk              (0x1ul << PWM_SSCTL_SSEN2_Pos)                    /*!< PWM_T::SSCTL: SSEN2 Mask               */
N
N#define PWM_SSCTL_SSEN4_Pos              (4)                                               /*!< PWM_T::SSCTL: SSEN4 Position           */
N#define PWM_SSCTL_SSEN4_Msk              (0x1ul << PWM_SSCTL_SSEN4_Pos)                    /*!< PWM_T::SSCTL: SSEN4 Mask               */
N
N#define PWM_SSCTL_SSRC_Pos               (8)                                               /*!< PWM_T::SSCTL: SSRC Position            */
N#define PWM_SSCTL_SSRC_Msk               (0x3ul << PWM_SSCTL_SSRC_Pos)                     /*!< PWM_T::SSCTL: SSRC Mask                */
N
N#define PWM_SSTRG_CNTSEN_Pos             (0)                                               /*!< PWM_T::SSTRG: CNTSEN Position          */
N#define PWM_SSTRG_CNTSEN_Msk             (0x1ul << PWM_SSTRG_CNTSEN_Pos)                   /*!< PWM_T::SSTRG: CNTSEN Mask              */
N
N#define PWM_STATUS_CNTMAX0_Pos           (0)                                               /*!< PWM_T::STATUS: CNTMAX0 Position        */
N#define PWM_STATUS_CNTMAX0_Msk           (0x1ul << PWM_STATUS_CNTMAX0_Pos)                 /*!< PWM_T::STATUS: CNTMAX0 Mask            */
N
N#define PWM_STATUS_CNTMAX2_Pos           (2)                                               /*!< PWM_T::STATUS: CNTMAX2 Position        */
N#define PWM_STATUS_CNTMAX2_Msk           (0x1ul << PWM_STATUS_CNTMAX2_Pos)                 /*!< PWM_T::STATUS: CNTMAX2 Mask            */
N
N#define PWM_STATUS_CNTMAX4_Pos           (4)                                               /*!< PWM_T::STATUS: CNTMAX4 Position        */
N#define PWM_STATUS_CNTMAX4_Msk           (0x1ul << PWM_STATUS_CNTMAX4_Pos)                 /*!< PWM_T::STATUS: CNTMAX4 Mask            */
N
N#define PWM_STATUS_ADCTRG0_Pos           (16)                                              /*!< PWM_T::STATUS: ADCTRGF0 Position       */
N#define PWM_STATUS_ADCTRG0_Msk           (0x1ul << PWM_STATUS_ADCTRG0_Pos)                 /*!< PWM_T::STATUS: ADCTRGF0 Mask           */
N
N#define PWM_STATUS_ADCTRG1_Pos           (17)                                              /*!< PWM_T::STATUS: ADCTRGF1 Position       */
N#define PWM_STATUS_ADCTRG1_Msk           (0x1ul << PWM_STATUS_ADCTRG1_Pos)                 /*!< PWM_T::STATUS: ADCTRGF1 Mask           */
N
N#define PWM_STATUS_ADCTRG2_Pos           (18)                                              /*!< PWM_T::STATUS: ADCTRGF2 Position       */
N#define PWM_STATUS_ADCTRG2_Msk           (0x1ul << PWM_STATUS_ADCTRG2_Pos)                 /*!< PWM_T::STATUS: ADCTRGF2 Mask           */
N
N#define PWM_STATUS_ADCTRG3_Pos           (19)                                              /*!< PWM_T::STATUS: ADCTRGF3 Position       */
N#define PWM_STATUS_ADCTRG3_Msk           (0x1ul << PWM_STATUS_ADCTRG3_Pos)                 /*!< PWM_T::STATUS: ADCTRGF3 Mask           */
N
N#define PWM_STATUS_ADCTRG4_Pos           (20)                                              /*!< PWM_T::STATUS: ADCTRGF4 Position       */
N#define PWM_STATUS_ADCTRG4_Msk           (0x1ul << PWM_STATUS_ADCTRG4_Pos)                 /*!< PWM_T::STATUS: ADCTRGF4 Mask           */
N
N#define PWM_STATUS_ADCTRG5_Pos           (21)                                              /*!< PWM_T::STATUS: ADCTRGF5 Position       */
N#define PWM_STATUS_ADCTRG5_Msk           (0x1ul << PWM_STATUS_ADCTRG5_Pos)                 /*!< PWM_T::STATUS: ADCTRGF5 Mask           */
N
N#define PWM_CAPINEN_CAPINEN0_Pos         (0)                                               /*!< PWM_T::CAPINEN: CAPINEN0 Position      */
N#define PWM_CAPINEN_CAPINEN0_Msk         (0x1ul << PWM_CAPINEN_CAPINEN0_Pos)               /*!< PWM_T::CAPINEN: CAPINEN0 Mask          */
N
N#define PWM_CAPINEN_CAPINEN1_Pos         (1)                                               /*!< PWM_T::CAPINEN: CAPINEN1 Position      */
N#define PWM_CAPINEN_CAPINEN1_Msk         (0x1ul << PWM_CAPINEN_CAPINEN1_Pos)               /*!< PWM_T::CAPINEN: CAPINEN1 Mask          */
N
N#define PWM_CAPINEN_CAPINEN2_Pos         (2)                                               /*!< PWM_T::CAPINEN: CAPINEN2 Position      */
N#define PWM_CAPINEN_CAPINEN2_Msk         (0x1ul << PWM_CAPINEN_CAPINEN2_Pos)               /*!< PWM_T::CAPINEN: CAPINEN2 Mask          */
N
N#define PWM_CAPINEN_CAPINEN3_Pos         (3)                                               /*!< PWM_T::CAPINEN: CAPINEN3 Position      */
N#define PWM_CAPINEN_CAPINEN3_Msk         (0x1ul << PWM_CAPINEN_CAPINEN3_Pos)               /*!< PWM_T::CAPINEN: CAPINEN3 Mask          */
N
N#define PWM_CAPINEN_CAPINEN4_Pos         (4)                                               /*!< PWM_T::CAPINEN: CAPINEN4 Position      */
N#define PWM_CAPINEN_CAPINEN4_Msk         (0x1ul << PWM_CAPINEN_CAPINEN4_Pos)               /*!< PWM_T::CAPINEN: CAPINEN4 Mask          */
N
N#define PWM_CAPINEN_CAPINEN5_Pos         (5)                                               /*!< PWM_T::CAPINEN: CAPINEN5 Position      */
N#define PWM_CAPINEN_CAPINEN5_Msk         (0x1ul << PWM_CAPINEN_CAPINEN5_Pos)               /*!< PWM_T::CAPINEN: CAPINEN5 Mask          */
N
N#define PWM_CAPCTL_CAPEN0_Pos            (0)                                               /*!< PWM_T::CAPCTL: CAPEN0 Position         */
N#define PWM_CAPCTL_CAPEN0_Msk            (0x1ul << PWM_CAPCTL_CAPEN0_Pos)                  /*!< PWM_T::CAPCTL: CAPEN0 Mask             */
N
N#define PWM_CAPCTL_CAPEN1_Pos            (1)                                               /*!< PWM_T::CAPCTL: CAPEN1 Position         */
N#define PWM_CAPCTL_CAPEN1_Msk            (0x1ul << PWM_CAPCTL_CAPEN1_Pos)                  /*!< PWM_T::CAPCTL: CAPEN1 Mask             */
N
N#define PWM_CAPCTL_CAPEN2_Pos            (2)                                               /*!< PWM_T::CAPCTL: CAPEN2 Position         */
N#define PWM_CAPCTL_CAPEN2_Msk            (0x1ul << PWM_CAPCTL_CAPEN2_Pos)                  /*!< PWM_T::CAPCTL: CAPEN2 Mask             */
N
N#define PWM_CAPCTL_CAPEN3_Pos            (3)                                               /*!< PWM_T::CAPCTL: CAPEN3 Position         */
N#define PWM_CAPCTL_CAPEN3_Msk            (0x1ul << PWM_CAPCTL_CAPEN3_Pos)                  /*!< PWM_T::CAPCTL: CAPEN3 Mask             */
N
N#define PWM_CAPCTL_CAPEN4_Pos            (4)                                               /*!< PWM_T::CAPCTL: CAPEN4 Position         */
N#define PWM_CAPCTL_CAPEN4_Msk            (0x1ul << PWM_CAPCTL_CAPEN4_Pos)                  /*!< PWM_T::CAPCTL: CAPEN4 Mask             */
N
N#define PWM_CAPCTL_CAPEN5_Pos            (5)                                               /*!< PWM_T::CAPCTL: CAPEN5 Position         */
N#define PWM_CAPCTL_CAPEN5_Msk            (0x1ul << PWM_CAPCTL_CAPEN5_Pos)                  /*!< PWM_T::CAPCTL: CAPEN5 Mask             */
N
N#define PWM_CAPCTL_CAPINV0_Pos           (8)                                               /*!< PWM_T::CAPCTL: CAPINV0 Position        */
N#define PWM_CAPCTL_CAPINV0_Msk           (0x1ul << PWM_CAPCTL_CAPINV0_Pos)                 /*!< PWM_T::CAPCTL: CAPINV0 Mask            */
N
N#define PWM_CAPCTL_CAPINV1_Pos           (9)                                               /*!< PWM_T::CAPCTL: CAPINV1 Position        */
N#define PWM_CAPCTL_CAPINV1_Msk           (0x1ul << PWM_CAPCTL_CAPINV1_Pos)                 /*!< PWM_T::CAPCTL: CAPINV1 Mask            */
N
N#define PWM_CAPCTL_CAPINV2_Pos           (10)                                              /*!< PWM_T::CAPCTL: CAPINV2 Position        */
N#define PWM_CAPCTL_CAPINV2_Msk           (0x1ul << PWM_CAPCTL_CAPINV2_Pos)                 /*!< PWM_T::CAPCTL: CAPINV2 Mask            */
N
N#define PWM_CAPCTL_CAPINV3_Pos           (11)                                              /*!< PWM_T::CAPCTL: CAPINV3 Position        */
N#define PWM_CAPCTL_CAPINV3_Msk           (0x1ul << PWM_CAPCTL_CAPINV3_Pos)                 /*!< PWM_T::CAPCTL: CAPINV3 Mask            */
N
N#define PWM_CAPCTL_CAPINV4_Pos           (12)                                              /*!< PWM_T::CAPCTL: CAPINV4 Position        */
N#define PWM_CAPCTL_CAPINV4_Msk           (0x1ul << PWM_CAPCTL_CAPINV4_Pos)                 /*!< PWM_T::CAPCTL: CAPINV4 Mask            */
N
N#define PWM_CAPCTL_CAPINV5_Pos           (13)                                              /*!< PWM_T::CAPCTL: CAPINV5 Position        */
N#define PWM_CAPCTL_CAPINV5_Msk           (0x1ul << PWM_CAPCTL_CAPINV5_Pos)                 /*!< PWM_T::CAPCTL: CAPINV5 Mask            */
N
N#define PWM_CAPCTL_RCRLDEN0_Pos          (16)                                              /*!< PWM_T::CAPCTL: RCRLDEN0 Position       */
N#define PWM_CAPCTL_RCRLDEN0_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN0_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN0 Mask           */
N
N#define PWM_CAPCTL_RCRLDEN1_Pos          (17)                                              /*!< PWM_T::CAPCTL: RCRLDEN1 Position       */
N#define PWM_CAPCTL_RCRLDEN1_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN1_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN1 Mask           */
N
N#define PWM_CAPCTL_RCRLDEN2_Pos          (18)                                              /*!< PWM_T::CAPCTL: RCRLDEN2 Position       */
N#define PWM_CAPCTL_RCRLDEN2_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN2_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN2 Mask           */
N
N#define PWM_CAPCTL_RCRLDEN3_Pos          (19)                                              /*!< PWM_T::CAPCTL: RCRLDEN3 Position       */
N#define PWM_CAPCTL_RCRLDEN3_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN3_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN3 Mask           */
N
N#define PWM_CAPCTL_RCRLDEN4_Pos          (20)                                              /*!< PWM_T::CAPCTL: RCRLDEN4 Position       */
N#define PWM_CAPCTL_RCRLDEN4_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN4_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN4 Mask           */
N
N#define PWM_CAPCTL_RCRLDEN5_Pos          (21)                                              /*!< PWM_T::CAPCTL: RCRLDEN5 Position       */
N#define PWM_CAPCTL_RCRLDEN5_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN5_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN5 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN0_Pos          (24)                                              /*!< PWM_T::CAPCTL: FCRLDEN0 Position       */
N#define PWM_CAPCTL_FCRLDEN0_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN0_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN0 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN1_Pos          (25)                                              /*!< PWM_T::CAPCTL: FCRLDEN1 Position       */
N#define PWM_CAPCTL_FCRLDEN1_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN1_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN1 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN2_Pos          (26)                                              /*!< PWM_T::CAPCTL: FCRLDEN2 Position       */
N#define PWM_CAPCTL_FCRLDEN2_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN2_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN2 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN3_Pos          (27)                                              /*!< PWM_T::CAPCTL: FCRLDEN3 Position       */
N#define PWM_CAPCTL_FCRLDEN3_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN3_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN3 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN4_Pos          (28)                                              /*!< PWM_T::CAPCTL: FCRLDEN4 Position       */
N#define PWM_CAPCTL_FCRLDEN4_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN4_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN4 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN5_Pos          (29)                                              /*!< PWM_T::CAPCTL: FCRLDEN5 Position       */
N#define PWM_CAPCTL_FCRLDEN5_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN5_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN5 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV0_Pos          (0)                                               /*!< PWM_T::CAPSTS: CRLIFOV0 Position       */
N#define PWM_CAPSTS_CRLIFOV0_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV0_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV0 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV1_Pos          (1)                                               /*!< PWM_T::CAPSTS: CRLIFOV1 Position       */
N#define PWM_CAPSTS_CRLIFOV1_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV1_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV1 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV2_Pos          (2)                                               /*!< PWM_T::CAPSTS: CRLIFOV2 Position       */
N#define PWM_CAPSTS_CRLIFOV2_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV2_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV2 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV3_Pos          (3)                                               /*!< PWM_T::CAPSTS: CRLIFOV3 Position       */
N#define PWM_CAPSTS_CRLIFOV3_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV3_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV3 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV4_Pos          (4)                                               /*!< PWM_T::CAPSTS: CRLIFOV4 Position       */
N#define PWM_CAPSTS_CRLIFOV4_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV4_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV4 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV5_Pos          (5)                                               /*!< PWM_T::CAPSTS: CRLIFOV5 Position       */
N#define PWM_CAPSTS_CRLIFOV5_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV5_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV5 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV0_Pos          (8)                                               /*!< PWM_T::CAPSTS: CFLIFOV0 Position       */
N#define PWM_CAPSTS_CFLIFOV0_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV0_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV0 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV1_Pos          (9)                                               /*!< PWM_T::CAPSTS: CFLIFOV1 Position       */
N#define PWM_CAPSTS_CFLIFOV1_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV1_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV1 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV2_Pos          (10)                                              /*!< PWM_T::CAPSTS: CFLIFOV2 Position       */
N#define PWM_CAPSTS_CFLIFOV2_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV2_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV2 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV3_Pos          (11)                                              /*!< PWM_T::CAPSTS: CFLIFOV3 Position       */
N#define PWM_CAPSTS_CFLIFOV3_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV3_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV3 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV4_Pos          (12)                                              /*!< PWM_T::CAPSTS: CFLIFOV4 Position       */
N#define PWM_CAPSTS_CFLIFOV4_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV4_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV4 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV5_Pos          (13)                                              /*!< PWM_T::CAPSTS: CFLIFOV5 Position       */
N#define PWM_CAPSTS_CFLIFOV5_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV5_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV5 Mask           */
N
N#define PWM_RCAPDAT0_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT0: RCAPDAT Position      */
N#define PWM_RCAPDAT0_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT0_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT0: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT0_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT0: FCAPDAT Position      */
N#define PWM_FCAPDAT0_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT0_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT0: FCAPDAT Mask          */
N
N#define PWM_RCAPDAT1_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT1: RCAPDAT Position      */
N#define PWM_RCAPDAT1_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT1_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT1: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT1_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT1: FCAPDAT Position      */
N#define PWM_FCAPDAT1_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT1_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT1: FCAPDAT Mask          */
N
N#define PWM_RCAPDAT2_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT2: RCAPDAT Position      */
N#define PWM_RCAPDAT2_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT2_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT2: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT2_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT2: FCAPDAT Position      */
N#define PWM_FCAPDAT2_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT2_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT2: FCAPDAT Mask          */
N
N#define PWM_RCAPDAT3_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT3: RCAPDAT Position      */
N#define PWM_RCAPDAT3_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT3_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT3: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT3_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT3: FCAPDAT Position      */
N#define PWM_FCAPDAT3_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT3_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT3: FCAPDAT Mask          */
N
N#define PWM_RCAPDAT4_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT4: RCAPDAT Position      */
N#define PWM_RCAPDAT4_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT4_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT4: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT4_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT4: FCAPDAT Position      */
N#define PWM_FCAPDAT4_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT4_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT4: FCAPDAT Mask          */
N
N#define PWM_RCAPDAT5_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT5: RCAPDAT Position      */
N#define PWM_RCAPDAT5_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT5_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT5: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT5_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT5: FCAPDAT Position      */
N#define PWM_FCAPDAT5_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT5_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT5: FCAPDAT Mask          */
N
N#define PWM_PDMACTL_CHEN0_1_Pos          (0)                                               /*!< PWM_T::PDMACTL: CHEN0_1 Position       */
N#define PWM_PDMACTL_CHEN0_1_Msk          (0x1ul << PWM_PDMACTL_CHEN0_1_Pos)                /*!< PWM_T::PDMACTL: CHEN0_1 Mask           */
N
N#define PWM_PDMACTL_CAPMOD0_1_Pos        (1)                                               /*!< PWM_T::PDMACTL: CAPMOD0_1 Position     */
N#define PWM_PDMACTL_CAPMOD0_1_Msk        (0x3ul << PWM_PDMACTL_CAPMOD0_1_Pos)              /*!< PWM_T::PDMACTL: CAPMOD0_1 Mask         */
N
N#define PWM_PDMACTL_CAPORD0_1_Pos        (3)                                               /*!< PWM_T::PDMACTL: CAPORD0_1 Position     */
N#define PWM_PDMACTL_CAPORD0_1_Msk        (0x1ul << PWM_PDMACTL_CAPORD0_1_Pos)              /*!< PWM_T::PDMACTL: CAPORD0_1 Mask         */
N
N#define PWM_PDMACTL_CHSEL0_1_Pos         (4)                                               /*!< PWM_T::PDMACTL: CHSEL0_1 Position      */
N#define PWM_PDMACTL_CHSEL0_1_Msk         (0x1ul << PWM_PDMACTL_CHSEL0_1_Pos)               /*!< PWM_T::PDMACTL: CHSEL0_1 Mask          */
N
N#define PWM_PDMACTL_CHEN2_3_Pos          (8)                                               /*!< PWM_T::PDMACTL: CHEN2_3 Position       */
N#define PWM_PDMACTL_CHEN2_3_Msk          (0x1ul << PWM_PDMACTL_CHEN2_3_Pos)                /*!< PWM_T::PDMACTL: CHEN2_3 Mask           */
N
N#define PWM_PDMACTL_CAPMOD2_3_Pos        (9)                                               /*!< PWM_T::PDMACTL: CAPMOD2_3 Position     */
N#define PWM_PDMACTL_CAPMOD2_3_Msk        (0x3ul << PWM_PDMACTL_CAPMOD2_3_Pos)              /*!< PWM_T::PDMACTL: CAPMOD2_3 Mask         */
N
N#define PWM_PDMACTL_CAPORD2_3_Pos        (11)                                              /*!< PWM_T::PDMACTL: CAPORD2_3 Position     */
N#define PWM_PDMACTL_CAPORD2_3_Msk        (0x1ul << PWM_PDMACTL_CAPORD2_3_Pos)              /*!< PWM_T::PDMACTL: CAPORD2_3 Mask         */
N
N#define PWM_PDMACTL_CHSEL2_3_Pos         (12)                                              /*!< PWM_T::PDMACTL: CHSEL2_3 Position      */
N#define PWM_PDMACTL_CHSEL2_3_Msk         (0x1ul << PWM_PDMACTL_CHSEL2_3_Pos)               /*!< PWM_T::PDMACTL: CHSEL2_3 Mask          */
N
N#define PWM_PDMACTL_CHEN4_5_Pos          (16)                                              /*!< PWM_T::PDMACTL: CHEN4_5 Position       */
N#define PWM_PDMACTL_CHEN4_5_Msk          (0x1ul << PWM_PDMACTL_CHEN4_5_Pos)                /*!< PWM_T::PDMACTL: CHEN4_5 Mask           */
N
N#define PWM_PDMACTL_CAPMOD4_5_Pos        (17)                                              /*!< PWM_T::PDMACTL: CAPMOD4_5 Position     */
N#define PWM_PDMACTL_CAPMOD4_5_Msk        (0x3ul << PWM_PDMACTL_CAPMOD4_5_Pos)              /*!< PWM_T::PDMACTL: CAPMOD4_5 Mask         */
N
N#define PWM_PDMACTL_CAPORD4_5_Pos        (19)                                              /*!< PWM_T::PDMACTL: CAPORD4_5 Position     */
N#define PWM_PDMACTL_CAPORD4_5_Msk        (0x1ul << PWM_PDMACTL_CAPORD4_5_Pos)              /*!< PWM_T::PDMACTL: CAPORD4_5 Mask         */
N
N#define PWM_PDMACTL_CHSEL4_5_Pos         (20)                                              /*!< PWM_T::PDMACTL: CHSEL4_5 Position      */
N#define PWM_PDMACTL_CHSEL4_5_Msk         (0x1ul << PWM_PDMACTL_CHSEL4_5_Pos)               /*!< PWM_T::PDMACTL: CHSEL4_5 Mask          */
N
N#define PWM_PDMACAP0_1_CAPBUF_Pos        (0)                                               /*!< PWM_T::PDMACAP0_1: CAPBUF Position     */
N#define PWM_PDMACAP0_1_CAPBUF_Msk        (0xfffful << PWM_PDMACAP0_1_CAPBUF_Pos)           /*!< PWM_T::PDMACAP0_1: CAPBUF Mask         */
N
N#define PWM_PDMACAP2_3_CAPBUF_Pos        (0)                                               /*!< PWM_T::PDMACAP2_3: CAPBUF Position     */
N#define PWM_PDMACAP2_3_CAPBUF_Msk        (0xfffful << PWM_PDMACAP2_3_CAPBUF_Pos)           /*!< PWM_T::PDMACAP2_3: CAPBUF Mask         */
N
N#define PWM_PDMACAP4_5_CAPBUF_Pos        (0)                                               /*!< PWM_T::PDMACAP4_5: CAPBUF Position     */
N#define PWM_PDMACAP4_5_CAPBUF_Msk        (0xfffful << PWM_PDMACAP4_5_CAPBUF_Pos)           /*!< PWM_T::PDMACAP4_5: CAPBUF Mask         */
N
N#define PWM_CAPIEN_CAPRIEN0_Pos          (0)                                               /*!< PWM_T::CAPIEN: CAPRIEN0 Position       */
N#define PWM_CAPIEN_CAPRIEN0_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN0_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN0 Mask           */
N
N#define PWM_CAPIEN_CAPRIEN1_Pos          (1)                                               /*!< PWM_T::CAPIEN: CAPRIEN1 Position       */
N#define PWM_CAPIEN_CAPRIEN1_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN1_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN1 Mask           */
N
N#define PWM_CAPIEN_CAPRIEN2_Pos          (2)                                               /*!< PWM_T::CAPIEN: CAPRIEN2 Position       */
N#define PWM_CAPIEN_CAPRIEN2_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN2_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN2 Mask           */
N
N#define PWM_CAPIEN_CAPRIEN3_Pos          (3)                                               /*!< PWM_T::CAPIEN: CAPRIEN3 Position       */
N#define PWM_CAPIEN_CAPRIEN3_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN3_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN3 Mask           */
N
N#define PWM_CAPIEN_CAPRIEN4_Pos          (4)                                               /*!< PWM_T::CAPIEN: CAPRIEN4 Position       */
N#define PWM_CAPIEN_CAPRIEN4_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN4_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN4 Mask           */
N
N#define PWM_CAPIEN_CAPRIEN5_Pos          (5)                                               /*!< PWM_T::CAPIEN: CAPRIEN5 Position       */
N#define PWM_CAPIEN_CAPRIEN5_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN5_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN5 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN0_Pos          (8)                                               /*!< PWM_T::CAPIEN: CAPFIEN0 Position       */
N#define PWM_CAPIEN_CAPFIEN0_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN0_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN0 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN1_Pos          (9)                                               /*!< PWM_T::CAPIEN: CAPFIEN1 Position       */
N#define PWM_CAPIEN_CAPFIEN1_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN1_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN1 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN2_Pos          (10)                                              /*!< PWM_T::CAPIEN: CAPFIEN2 Position       */
N#define PWM_CAPIEN_CAPFIEN2_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN2_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN2 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN3_Pos          (11)                                              /*!< PWM_T::CAPIEN: CAPFIEN3 Position       */
N#define PWM_CAPIEN_CAPFIEN3_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN3_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN3 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN4_Pos          (12)                                              /*!< PWM_T::CAPIEN: CAPFIEN4 Position       */
N#define PWM_CAPIEN_CAPFIEN4_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN4_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN4 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN5_Pos          (13)                                              /*!< PWM_T::CAPIEN: CAPFIEN5 Position       */
N#define PWM_CAPIEN_CAPFIEN5_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN5_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN5 Mask           */
N
N#define PWM_CAPIF_CRLIF0_Pos             (0)                                               /*!< PWM_T::CAPIF: CRLIF0 Position          */
N#define PWM_CAPIF_CRLIF0_Msk             (0x1ul << PWM_CAPIF_CRLIF0_Pos)                   /*!< PWM_T::CAPIF: CRLIF0 Mask              */
N
N#define PWM_CAPIF_CRLIF1_Pos             (1)                                               /*!< PWM_T::CAPIF: CRLIF1 Position          */
N#define PWM_CAPIF_CRLIF1_Msk             (0x1ul << PWM_CAPIF_CRLIF1_Pos)                   /*!< PWM_T::CAPIF: CRLIF1 Mask              */
N
N#define PWM_CAPIF_CRLIF2_Pos             (2)                                               /*!< PWM_T::CAPIF: CRLIF2 Position          */
N#define PWM_CAPIF_CRLIF2_Msk             (0x1ul << PWM_CAPIF_CRLIF2_Pos)                   /*!< PWM_T::CAPIF: CRLIF2 Mask              */
N
N#define PWM_CAPIF_CRLIF3_Pos             (3)                                               /*!< PWM_T::CAPIF: CRLIF3 Position          */
N#define PWM_CAPIF_CRLIF3_Msk             (0x1ul << PWM_CAPIF_CRLIF3_Pos)                   /*!< PWM_T::CAPIF: CRLIF3 Mask              */
N
N#define PWM_CAPIF_CRLIF4_Pos             (4)                                               /*!< PWM_T::CAPIF: CRLIF4 Position          */
N#define PWM_CAPIF_CRLIF4_Msk             (0x1ul << PWM_CAPIF_CRLIF4_Pos)                   /*!< PWM_T::CAPIF: CRLIF4 Mask              */
N
N#define PWM_CAPIF_CRLIF5_Pos             (5)                                               /*!< PWM_T::CAPIF: CRLIF5 Position          */
N#define PWM_CAPIF_CRLIF5_Msk             (0x1ul << PWM_CAPIF_CRLIF5_Pos)                   /*!< PWM_T::CAPIF: CRLIF5 Mask              */
N
N#define PWM_CAPIF_CFLIF0_Pos             (8)                                               /*!< PWM_T::CAPIF: CFLIF0 Position          */
N#define PWM_CAPIF_CFLIF0_Msk             (0x1ul << PWM_CAPIF_CFLIF0_Pos)                   /*!< PWM_T::CAPIF: CFLIF0 Mask              */
N
N#define PWM_CAPIF_CFLIF1_Pos             (9)                                               /*!< PWM_T::CAPIF: CFLIF1 Position          */
N#define PWM_CAPIF_CFLIF1_Msk             (0x1ul << PWM_CAPIF_CFLIF1_Pos)                   /*!< PWM_T::CAPIF: CFLIF1 Mask              */
N
N#define PWM_CAPIF_CFLIF2_Pos             (10)                                              /*!< PWM_T::CAPIF: CFLIF2 Position          */
N#define PWM_CAPIF_CFLIF2_Msk             (0x1ul << PWM_CAPIF_CFLIF2_Pos)                   /*!< PWM_T::CAPIF: CFLIF2 Mask              */
N
N#define PWM_CAPIF_CFLIF3_Pos             (11)                                              /*!< PWM_T::CAPIF: CFLIF3 Position          */
N#define PWM_CAPIF_CFLIF3_Msk             (0x1ul << PWM_CAPIF_CFLIF3_Pos)                   /*!< PWM_T::CAPIF: CFLIF3 Mask              */
N
N#define PWM_CAPIF_CFLIF4_Pos             (12)                                              /*!< PWM_T::CAPIF: CFLIF4 Position          */
N#define PWM_CAPIF_CFLIF4_Msk             (0x1ul << PWM_CAPIF_CFLIF4_Pos)                   /*!< PWM_T::CAPIF: CFLIF4 Mask              */
N
N#define PWM_CAPIF_CFLIF5_Pos             (13)                                              /*!< PWM_T::CAPIF: CFLIF5 Position          */
N#define PWM_CAPIF_CFLIF5_Msk             (0x1ul << PWM_CAPIF_CFLIF5_Pos)                   /*!< PWM_T::CAPIF: CFLIF5 Mask              */
N
N#define PWM_PBUF_PBUF_Pos                (0)                                               /*!< PWM_T::PBUF: PBUF Position             */
N#define PWM_PBUF_PBUF_Msk                (0xfffful << PWM_PBUF_PBUF_Pos)                   /*!< PWM_T::PBUF: PBUF Mask                 */
N
N#define PWM_CMPBUF_CMPBUF_Pos            (0)                                               /*!< PWM_T::CMPBUF: CMPBUF Position         */
N#define PWM_CMPBUF_CMPBUF_Msk            (0xfffful << PWM_CMPBUF_CMPBUF_Pos)               /*!< PWM_T::CMPBUF: CMPBUF Mask             */
N
N/**@}*/ /* PWM_CONST */
N/**@}*/ /* end of PWM register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __PWM_REG_H__ */
L 171 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "bpwm_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\bpwm_reg.h" 1
N/**************************************************************************//**
N * @file     bpwm_reg.h
N * @version  V1.00
N * @brief    BPWM register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __BPWM_REG_H__
N#define __BPWM_REG_H__
N
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup BPWM Basic Pulse Width Modulation Controller (BPWM)
N    Memory Mapped Structure for BPWM Controller
N@{ */
Ntypedef struct
N{
N    /**
N     * @var BCAPDAT_T::RCAPDAT
N     * Offset: 0x20C~0x238  BPWM Rising Capture Data Register 0~5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |BPWM Rising Capture Data (Read Only)
N     * |        |          |When rising capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BCAPDAT_T::FCAPDAT
N     * Offset: 0x210  BPWM Falling Capture Data Register 0~5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |BPWM Falling Capture Data (Read Only)
N     * |        |          |When falling capture condition happened, the BPWM counter value will be saved in this register.
N     */
N    __IO uint32_t RCAPDAT; /*!< [0x20C/0x214/0x21C/0x224/0x22C/0x234] BPWM Rising Capture Data Register 0~5 */
X    volatile uint32_t RCAPDAT;  
N    __IO uint32_t FCAPDAT; /*!< [0x210/0x218/0x220/0x228/0x230/0x238] BPWM Falling Capture Data Register 0~5 */
X    volatile uint32_t FCAPDAT;  
N} BCAPDAT_T;
N
Ntypedef struct
N{
N
N
N    /**
N     * @var BPWM_T::CTL0
N     * Offset: 0x00  BPWM Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CTRLD0    |Center Re-load
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |In up-down counter type, PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the center point of a period
N     * |[1]     |CTRLD1    |Center Re-load
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |In up-down counter type, PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the center point of a period
N     * |[2]     |CTRLD2    |Center Re-load
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |In up-down counter type, PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the center point of a period
N     * |[3]     |CTRLD3    |Center Re-load
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |In up-down counter type, PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the center point of a period
N     * |[4]     |CTRLD4    |Center Re-load
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |In up-down counter type, PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the center point of a period
N     * |[5]     |CTRLD5    |Center Re-load
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |In up-down counter type, PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the center point of a period
N     * |[16]    |IMMLDEN0  |Immediately Load Enable Bit(S)
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the end point or center point of each period by setting CTRLD bit.
N     * |        |          |1 = PERIOD/CMPDAT will load to PBUF and CMPBUF immediately when software update PERIOD/CMPDAT.
N     * |        |          |Note: If IMMLDENn is Enabled, WINLDENn and CTRLDn will be invalid.
N     * |[17]    |IMMLDEN1  |Immediately Load Enable Bit(S)
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the end point or center point of each period by setting CTRLD bit.
N     * |        |          |1 = PERIOD/CMPDAT will load to PBUF and CMPBUF immediately when software update PERIOD/CMPDAT.
N     * |        |          |Note: If IMMLDENn is Enabled, WINLDENn and CTRLDn will be invalid.
N     * |[18]    |IMMLDEN2  |Immediately Load Enable Bit(S)
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the end point or center point of each period by setting CTRLD bit.
N     * |        |          |1 = PERIOD/CMPDAT will load to PBUF and CMPBUF immediately when software update PERIOD/CMPDAT.
N     * |        |          |Note: If IMMLDENn is Enabled, WINLDENn and CTRLDn will be invalid.
N     * |[19]    |IMMLDEN3  |Immediately Load Enable Bit(S)
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the end point or center point of each period by setting CTRLD bit.
N     * |        |          |1 = PERIOD/CMPDAT will load to PBUF and CMPBUF immediately when software update PERIOD/CMPDAT.
N     * |        |          |Note: If IMMLDENn is Enabled, WINLDENn and CTRLDn will be invalid.
N     * |[20]    |IMMLDEN4  |Immediately Load Enable Bit(S)
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the end point or center point of each period by setting CTRLD bit.
N     * |        |          |1 = PERIOD/CMPDAT will load to PBUF and CMPBUF immediately when software update PERIOD/CMPDAT.
N     * |        |          |Note: If IMMLDENn is Enabled, WINLDENn and CTRLDn will be invalid.
N     * |[21]    |IMMLDEN5  |Immediately Load Enable Bit(S)
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the end point or center point of each period by setting CTRLD bit.
N     * |        |          |1 = PERIOD/CMPDAT will load to PBUF and CMPBUF immediately when software update PERIOD/CMPDAT.
N     * |        |          |Note: If IMMLDENn is Enabled, WINLDENn and CTRLDn will be invalid.
N     * |[30]    |DBGHALT   |ICE Debug Mode Counter Halt (Write Protect)
N     * |        |          |If counter halt is enabled, BPWM all counters will keep current value until exit ICE debug mode.
N     * |        |          |0 = ICE debug mode counter halt Disabled.
N     * |        |          |1 = ICE debug mode counter halt Enabled.
N     * |        |          |Note: This bit is write protected. Refer to SYS_REGLCTL register.
N     * |[31]    |DBGTRIOFF |ICE Debug Mode Acknowledge Disable (Write Protect)
N     * |        |          |0 = ICE debug mode acknowledgement effects BPWM output.
N     * |        |          |BPWM pin will be forced as tri-state while ICE debug mode acknowledged.
N     * |        |          |1 = ICE debug mode acknowledgement Disabled.
N     * |        |          |BPWM pin will keep output no matter ICE debug mode acknowledged or not.
N     * |        |          |Note: This bit is write protected. Refer to SYS_REGLCTL register.
N     * @var BPWM_T::CTL1
N     * Offset: 0x04  BPWM Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |CNTTYPE0  |BPWM Counter Behavior Type 0
N     * |        |          |Each bit n controls corresponding BPWM channel n.
N     * |        |          |00 = Up counter type (supports in capture mode).
N     * |        |          |01 = Down count type (supports in capture mode).
N     * |        |          |10 = Up-down counter type.
N     * |        |          |11 = Reserved.
N     * @var BPWM_T::CLKSRC
N     * Offset: 0x10  BPWM Clock Source Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |ECLKSRC0  |BPWM_CH01 External Clock Source Select
N     * |        |          |000 = BPWMx_CLK, x denotes 0 or 1.
N     * |        |          |001 = TIMER0 overflow.
N     * |        |          |010 = TIMER1 overflow.
N     * |        |          |011 = TIMER2 overflow.
N     * |        |          |100 = TIMER3 overflow.
N     * |        |          |Others = Reserved.
N     * @var BPWM_T::CLKPSC
N     * Offset: 0x14  BPWM Clock Prescale Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |CLKPSC    |BPWM Counter Clock Prescale
N     * |        |          |The clock of BPWM counter is decided by clock prescaler
N     * |        |          |Each BPWM pair share one BPWM counter clock prescaler
N     * |        |          |The clock of BPWM counter is divided by (CLKPSC+ 1)
N     * @var BPWM_T::CNTEN
N     * Offset: 0x20  BPWM Counter Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTEN0    |BPWM Counter 0 Enable Bit
N     * |        |          |0 = BPWM Counter and clock prescaler stop running.
N     * |        |          |1 = BPWM Counter and clock prescaler start running.
N     * @var BPWM_T::CNTCLR
N     * Offset: 0x24  BPWM Clear Counter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTCLR0   |Clear BPWM Counter Control Bit 0
N     * |        |          |It is automatically cleared by hardware.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear 16-bit BPWM counter to 0000H.
N     * @var BPWM_T::PERIOD
N     * Offset: 0x30  BPWM Period Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |PERIOD    |BPWM Period Register
N     * |        |          |Up-Count mode: In this mode, BPWM counter counts from 0 to PERIOD, and restarts from 0.
N     * |        |          |Down-Count mode: In this mode, BPWM counter counts from PERIOD to 0, and restarts from PERIOD.
N     * |        |          |BPWM period time = (PERIOD+1) * BPWM_CLK period.
N     * |        |          |Up-Down-Count mode: In this mode, BPWM counter counts from 0 to PERIOD, then decrements to 0 and repeats again.
N     * |        |          |BPWM period time = 2 * PERIOD * BPWM_CLK period.
N     * @var BPWM_T::CMPDAT[6]
N     * Offset: 0x50~0x64  BPWM Comparator Register 0~5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CMPDAT    |BPWM Comparator Register
N     * |        |          |CMPDAT use to compare with CNTR to generate BPWM waveform, interrupt and trigger EADC.
N     * |        |          |In independent mode, CMPDAT0~5 denote as 6 independent BPWM_CH0~5 compared point.
N     * @var BPWM_T::CNT
N     * Offset: 0x90  BPWM Counter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CNT       |BPWM Data Register (Read Only)
N     * |        |          |User can monitor CNTR to know the current value in 16-bit period counter.
N     * |[16]    |DIRF      |BPWM Direction Indicator Flag (Read Only)
N     * |        |          |0 = Counter is Down count.
N     * |        |          |1 = Counter is UP count.
N     * @var BPWM_T::WGCTL0
N     * Offset: 0xB0  BPWM Generation Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |ZPCTL0    |BPWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM zero point output Low.
N     * |        |          |10 = BPWM zero point output High.
N     * |        |          |11 = BPWM zero point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to zero.
N     * |[3:2]   |ZPCTL1    |BPWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM zero point output Low.
N     * |        |          |10 = BPWM zero point output High.
N     * |        |          |11 = BPWM zero point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to zero.
N     * |[5:4]   |ZPCTL2    |BPWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM zero point output Low.
N     * |        |          |10 = BPWM zero point output High.
N     * |        |          |11 = BPWM zero point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to zero.
N     * |[7:6]   |ZPCTL3    |BPWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM zero point output Low.
N     * |        |          |10 = BPWM zero point output High.
N     * |        |          |11 = BPWM zero point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to zero.
N     * |[9:8]   |ZPCTL4    |BPWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM zero point output Low.
N     * |        |          |10 = BPWM zero point output High.
N     * |        |          |11 = BPWM zero point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to zero.
N     * |[11:10] |ZPCTL5    |BPWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM zero point output Low.
N     * |        |          |10 = BPWM zero point output High.
N     * |        |          |11 = BPWM zero point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to zero.
N     * |[17:16] |PRDPCTL0  |BPWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM period (center) point output Low.
N     * |        |          |10 = BPWM period (center) point output High.
N     * |        |          |11 = BPWM period (center) point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to (PERIOD+1).
N     * |        |          |Note: This bit is center point control when BPWM counter operating in up-down counter type.
N     * |[19:18] |PRDPCTL1  |BPWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM period (center) point output Low.
N     * |        |          |10 = BPWM period (center) point output High.
N     * |        |          |11 = BPWM period (center) point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to (PERIOD+1).
N     * |        |          |Note: This bit is center point control when BPWM counter operating in up-down counter type.
N     * |[21:20] |PRDPCTL2  |BPWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM period (center) point output Low.
N     * |        |          |10 = BPWM period (center) point output High.
N     * |        |          |11 = BPWM period (center) point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to (PERIOD+1).
N     * |        |          |Note: This bit is center point control when BPWM counter operating in up-down counter type.
N     * |[23:22] |PRDPCTL3  |BPWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM period (center) point output Low.
N     * |        |          |10 = BPWM period (center) point output High.
N     * |        |          |11 = BPWM period (center) point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to (PERIOD+1).
N     * |        |          |Note: This bit is center point control when BPWM counter operating in up-down counter type.
N     * |[25:24] |PRDPCTL4  |BPWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM period (center) point output Low.
N     * |        |          |10 = BPWM period (center) point output High.
N     * |        |          |11 = BPWM period (center) point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to (PERIOD+1).
N     * |        |          |Note: This bit is center point control when BPWM counter operating in up-down counter type.
N     * |[27:26] |PRDPCTL5  |BPWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM period (center) point output Low.
N     * |        |          |10 = BPWM period (center) point output High.
N     * |        |          |11 = BPWM period (center) point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to (PERIOD+1).
N     * |        |          |Note: This bit is center point control when BPWM counter operating in up-down counter type.
N     * @var BPWM_T::WGCTL1
N     * Offset: 0xB4  BPWM Generation Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |CMPUCTL0  |BPWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare up point output Low.
N     * |        |          |10 = BPWM compare up point output High.
N     * |        |          |11 = BPWM compare up point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter up count to CMPDAT.
N     * |[3:2]   |CMPUCTL1  |BPWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare up point output Low.
N     * |        |          |10 = BPWM compare up point output High.
N     * |        |          |11 = BPWM compare up point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter up count to CMPDAT.
N     * |[5:4]   |CMPUCTL2  |BPWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare up point output Low.
N     * |        |          |10 = BPWM compare up point output High.
N     * |        |          |11 = BPWM compare up point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter up count to CMPDAT.
N     * |[7:6]   |CMPUCTL3  |BPWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare up point output Low.
N     * |        |          |10 = BPWM compare up point output High.
N     * |        |          |11 = BPWM compare up point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter up count to CMPDAT.
N     * |[9:8]   |CMPUCTL4  |BPWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare up point output Low.
N     * |        |          |10 = BPWM compare up point output High.
N     * |        |          |11 = BPWM compare up point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter up count to CMPDAT.
N     * |[11:10] |CMPUCTL5  |BPWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare up point output Low.
N     * |        |          |10 = BPWM compare up point output High.
N     * |        |          |11 = BPWM compare up point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter up count to CMPDAT.
N     * |[17:16] |CMPDCTL0  |BPWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare down point output Low.
N     * |        |          |10 = BPWM compare down point output High.
N     * |        |          |11 = BPWM compare down point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter down count to CMPDAT.
N     * |[19:18] |CMPDCTL1  |BPWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare down point output Low.
N     * |        |          |10 = BPWM compare down point output High.
N     * |        |          |11 = BPWM compare down point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter down count to CMPDAT.
N     * |[21:20] |CMPDCTL2  |BPWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare down point output Low.
N     * |        |          |10 = BPWM compare down point output High.
N     * |        |          |11 = BPWM compare down point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter down count to CMPDAT.
N     * |[23:22] |CMPDCTL3  |BPWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare down point output Low.
N     * |        |          |10 = BPWM compare down point output High.
N     * |        |          |11 = BPWM compare down point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter down count to CMPDAT.
N     * |[25:24] |CMPDCTL4  |BPWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare down point output Low.
N     * |        |          |10 = BPWM compare down point output High.
N     * |        |          |11 = BPWM compare down point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter down count to CMPDAT.
N     * |[27:26] |CMPDCTL5  |BPWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare down point output Low.
N     * |        |          |10 = BPWM compare down point output High.
N     * |        |          |11 = BPWM compare down point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter down count to CMPDAT.
N     * @var BPWM_T::MSKEN
N     * Offset: 0xB8  BPWM Mask Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |MSKEN0    |BPWM Mask Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |The BPWM output signal will be masked when this bit is enabled
N     * |        |          |The corresponding BPWM channel n will output MSKDATn (BPWM_MSK[5:0]) data.
N     * |        |          |0 = BPWM output signal is non-masked.
N     * |        |          |1 = BPWM output signal is masked and output MSKDATn data.
N     * |[1]     |MSKEN1    |BPWM Mask Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |The BPWM output signal will be masked when this bit is enabled
N     * |        |          |The corresponding BPWM channel n will output MSKDATn (BPWM_MSK[5:0]) data.
N     * |        |          |0 = BPWM output signal is non-masked.
N     * |        |          |1 = BPWM output signal is masked and output MSKDATn data.
N     * |[2]     |MSKEN2    |BPWM Mask Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |The BPWM output signal will be masked when this bit is enabled
N     * |        |          |The corresponding BPWM channel n will output MSKDATn (BPWM_MSK[5:0]) data.
N     * |        |          |0 = BPWM output signal is non-masked.
N     * |        |          |1 = BPWM output signal is masked and output MSKDATn data.
N     * |[3]     |MSKEN3    |BPWM Mask Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |The BPWM output signal will be masked when this bit is enabled
N     * |        |          |The corresponding BPWM channel n will output MSKDATn (BPWM_MSK[5:0]) data.
N     * |        |          |0 = BPWM output signal is non-masked.
N     * |        |          |1 = BPWM output signal is masked and output MSKDATn data.
N     * |[4]     |MSKEN4    |BPWM Mask Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |The BPWM output signal will be masked when this bit is enabled
N     * |        |          |The corresponding BPWM channel n will output MSKDATn (BPWM_MSK[5:0]) data.
N     * |        |          |0 = BPWM output signal is non-masked.
N     * |        |          |1 = BPWM output signal is masked and output MSKDATn data.
N     * |[5]     |MSKEN5    |BPWM Mask Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |The BPWM output signal will be masked when this bit is enabled
N     * |        |          |The corresponding BPWM channel n will output MSKDATn (BPWM_MSK[5:0]) data.
N     * |        |          |0 = BPWM output signal is non-masked.
N     * |        |          |1 = BPWM output signal is masked and output MSKDATn data.
N     * @var BPWM_T::MSK
N     * Offset: 0xBC  BPWM Mask Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |MSKDAT0   |BPWM Mask Data Bit
N     * |        |          |This data bit control the state of BPWMn output pin, if corresponding mask function is enabled
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Output logic low to BPWMn.
N     * |        |          |1 = Output logic high to BPWMn.
N     * |[1]     |MSKDAT1   |BPWM Mask Data Bit
N     * |        |          |This data bit control the state of BPWMn output pin, if corresponding mask function is enabled
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Output logic low to BPWMn.
N     * |        |          |1 = Output logic high to BPWMn.
N     * |[2]     |MSKDAT2   |BPWM Mask Data Bit
N     * |        |          |This data bit control the state of BPWMn output pin, if corresponding mask function is enabled
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Output logic low to BPWMn.
N     * |        |          |1 = Output logic high to BPWMn.
N     * |[3]     |MSKDAT3   |BPWM Mask Data Bit
N     * |        |          |This data bit control the state of BPWMn output pin, if corresponding mask function is enabled
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Output logic low to BPWMn.
N     * |        |          |1 = Output logic high to BPWMn.
N     * |[4]     |MSKDAT4   |BPWM Mask Data Bit
N     * |        |          |This data bit control the state of BPWMn output pin, if corresponding mask function is enabled
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Output logic low to BPWMn.
N     * |        |          |1 = Output logic high to BPWMn.
N     * |[5]     |MSKDAT5   |BPWM Mask Data Bit
N     * |        |          |This data bit control the state of BPWMn output pin, if corresponding mask function is enabled
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Output logic low to BPWMn.
N     * |        |          |1 = Output logic high to BPWMn.
N     * @var BPWM_T::POLCTL
N     * Offset: 0xD4  BPWM Pin Polar Inverse Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |PINV0     |BPWM PIN Polar Inverse Control
N     * |        |          |The register controls polarity state of BPWM output
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM output polar inverse Disabled.
N     * |        |          |1 = BPWM output polar inverse Enabled.
N     * |[1]     |PINV1     |BPWM PIN Polar Inverse Control
N     * |        |          |The register controls polarity state of BPWM output
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM output polar inverse Disabled.
N     * |        |          |1 = BPWM output polar inverse Enabled.
N     * |[2]     |PINV2     |BPWM PIN Polar Inverse Control
N     * |        |          |The register controls polarity state of BPWM output
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM output polar inverse Disabled.
N     * |        |          |1 = BPWM output polar inverse Enabled.
N     * |[3]     |PINV3     |BPWM PIN Polar Inverse Control
N     * |        |          |The register controls polarity state of BPWM output
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM output polar inverse Disabled.
N     * |        |          |1 = BPWM output polar inverse Enabled.
N     * |[4]     |PINV4     |BPWM PIN Polar Inverse Control
N     * |        |          |The register controls polarity state of BPWM output
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM output polar inverse Disabled.
N     * |        |          |1 = BPWM output polar inverse Enabled.
N     * |[5]     |PINV5     |BPWM PIN Polar Inverse Control
N     * |        |          |The register controls polarity state of BPWM output
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM output polar inverse Disabled.
N     * |        |          |1 = BPWM output polar inverse Enabled.
N     * @var BPWM_T::POEN
N     * Offset: 0xD8  BPWM Output Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |POEN0     |BPWM Pin Output Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM pin at tri-state.
N     * |        |          |1 = BPWM pin in output mode.
N     * |[1]     |POEN1     |BPWM Pin Output Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM pin at tri-state.
N     * |        |          |1 = BPWM pin in output mode.
N     * |[2]     |POEN2     |BPWM Pin Output Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM pin at tri-state.
N     * |        |          |1 = BPWM pin in output mode.
N     * |[3]     |POEN3     |BPWM Pin Output Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM pin at tri-state.
N     * |        |          |1 = BPWM pin in output mode.
N     * |[4]     |POEN4     |BPWM Pin Output Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM pin at tri-state.
N     * |        |          |1 = BPWM pin in output mode.
N     * |[5]     |POEN5     |BPWM Pin Output Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM pin at tri-state.
N     * |        |          |1 = BPWM pin in output mode.
N     * @var BPWM_T::INTEN
N     * Offset: 0xE0  BPWM Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ZIEN0     |BPWM Zero Point Interrupt 0 Enable Bit
N     * |        |          |0 = Zero point interrupt Disabled.
N     * |        |          |1 = Zero point interrupt Enabled.
N     * |[8]     |PIEN0     |BPWM Period Point Interrupt 0 Enable Bit
N     * |        |          |0 = Period point interrupt Disabled.
N     * |        |          |1 = Period point interrupt Enabled.
N     * |        |          |Note: When up-down counter type period point means center point.
N     * |[16]    |CMPUIEN0  |BPWM Compare Up Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare up count interrupt Disabled.
N     * |        |          |1 = Compare up count interrupt Enabled.
N     * |[17]    |CMPUIEN1  |BPWM Compare Up Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare up count interrupt Disabled.
N     * |        |          |1 = Compare up count interrupt Enabled.
N     * |[18]    |CMPUIEN2  |BPWM Compare Up Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare up count interrupt Disabled.
N     * |        |          |1 = Compare up count interrupt Enabled.
N     * |[19]    |CMPUIEN3  |BPWM Compare Up Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare up count interrupt Disabled.
N     * |        |          |1 = Compare up count interrupt Enabled.
N     * |[20]    |CMPUIEN4  |BPWM Compare Up Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare up count interrupt Disabled.
N     * |        |          |1 = Compare up count interrupt Enabled.
N     * |[21]    |CMPUIEN5  |BPWM Compare Up Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare up count interrupt Disabled.
N     * |        |          |1 = Compare up count interrupt Enabled.
N     * |[24]    |CMPDIEN0  |BPWM Compare Down Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare down count interrupt Disabled.
N     * |        |          |1 = Compare down count interrupt Enabled.
N     * |[25]    |CMPDIEN1  |BPWM Compare Down Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare down count interrupt Disabled.
N     * |        |          |1 = Compare down count interrupt Enabled.
N     * |[26]    |CMPDIEN2  |BPWM Compare Down Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare down count interrupt Disabled.
N     * |        |          |1 = Compare down count interrupt Enabled.
N     * |[27]    |CMPDIEN3  |BPWM Compare Down Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare down count interrupt Disabled.
N     * |        |          |1 = Compare down count interrupt Enabled.
N     * |[28]    |CMPDIEN4  |BPWM Compare Down Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare down count interrupt Disabled.
N     * |        |          |1 = Compare down count interrupt Enabled.
N     * |[29]    |CMPDIEN5  |BPWM Compare Down Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare down count interrupt Disabled.
N     * |        |          |1 = Compare down count interrupt Enabled.
N     * @var BPWM_T::INTSTS
N     * Offset: 0xE8  BPWM Interrupt Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ZIF0      |BPWM Zero Point Interrupt Flag 0
N     * |        |          |This bit is set by hardware when BPWM_CH0 counter reaches 0, software can write 1 to clear this bit to 0.
N     * |[8]     |PIF0      |BPWM Period Point Interrupt Flag 0
N     * |        |          |This bit is set by hardware when BPWM_CH0 counter reaches BPWM_PERIOD0, software can write 1 to clear this bit to 0.
N     * |[16]    |CMPUIF0   |BPWM Compare Up Count Interrupt Flag
N     * |        |          |Flag is set by hardware when BPWM counter up count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in up counter type selection.
N     * |[17]    |CMPUIF1   |BPWM Compare Up Count Interrupt Flag
N     * |        |          |Flag is set by hardware when BPWM counter up count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in up counter type selection.
N     * |[18]    |CMPUIF2   |BPWM Compare Up Count Interrupt Flag
N     * |        |          |Flag is set by hardware when BPWM counter up count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in up counter type selection.
N     * |[19]    |CMPUIF3   |BPWM Compare Up Count Interrupt Flag
N     * |        |          |Flag is set by hardware when BPWM counter up count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in up counter type selection.
N     * |[20]    |CMPUIF4   |BPWM Compare Up Count Interrupt Flag
N     * |        |          |Flag is set by hardware when BPWM counter up count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in up counter type selection.
N     * |[21]    |CMPUIF5   |BPWM Compare Up Count Interrupt Flag
N     * |        |          |Flag is set by hardware when BPWM counter up count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in up counter type selection.
N     * |[24]    |CMPDIF0   |BPWM Compare Down Count Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Flag is set by hardware when BPWM counter down count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in down counter type selection.
N     * |[25]    |CMPDIF1   |BPWM Compare Down Count Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Flag is set by hardware when BPWM counter down count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in down counter type selection.
N     * |[26]    |CMPDIF2   |BPWM Compare Down Count Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Flag is set by hardware when BPWM counter down count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in down counter type selection.
N     * |[27]    |CMPDIF3   |BPWM Compare Down Count Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Flag is set by hardware when BPWM counter down count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in down counter type selection.
N     * |[28]    |CMPDIF4   |BPWM Compare Down Count Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Flag is set by hardware when BPWM counter down count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in down counter type selection.
N     * |[29]    |CMPDIF5   |BPWM Compare Down Count Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Flag is set by hardware when BPWM counter down count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it.
N     * |        |          |Note: If CMPDAT equal to PERIOD, this flag is not working in down counter type selection.
N     * @var BPWM_T::EADCTS0
N     * Offset: 0xF8  BPWM Trigger EADC Source Select Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |TRGSEL0   |BPWM_CH0 Trigger EADC Source Select
N     * |        |          |0000 = BPWM_CH0 zero point.
N     * |        |          |0001 = BPWM_CH0 period point.
N     * |        |          |0010 = BPWM_CH0 zero or period point.
N     * |        |          |0011 = BPWM_CH0 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH0 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH1 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH1 down-count CMPDAT point.
N     * |        |          |Others reserved
N     * |[7]     |TRGEN0    |BPWM_CH0 Trigger EADC Enable Bit
N     * |[11:8]  |TRGSEL1   |BPWM_CH1 Trigger EADC Source Select
N     * |        |          |0000 = BPWM_CH0 zero point.
N     * |        |          |0001 = BPWM_CH0 period point.
N     * |        |          |0010 = BPWM_CH0 zero or period point.
N     * |        |          |0011 = BPWM_CH0 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH0 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH1 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH1 down-count CMPDAT point.
N     * |        |          |Others reserved
N     * |[15]    |TRGEN1    |BPWM_CH1 Trigger EADC Enable Bit
N     * |[19:16] |TRGSEL2   |BPWM_CH2 Trigger EADC Source Select
N     * |        |          |0000 = BPWM_CH2 zero point.
N     * |        |          |0001 = BPWM_CH2 period point.
N     * |        |          |0010 = BPWM_CH2 zero or period point.
N     * |        |          |0011 = BPWM_CH2 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH2 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH3 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH3 down-count CMPDAT point.
N     * |        |          |Others reserved
N     * |[23]    |TRGEN2    |BPWM_CH2 Trigger EADC Enable Bit
N     * |[27:24] |TRGSEL3   |BPWM_CH3 Trigger EADC Source Select
N     * |        |          |0000 = BPWM_CH2 zero point.
N     * |        |          |0001 = BPWM_CH2 period point.
N     * |        |          |0010 = BPWM_CH2 zero or period point.
N     * |        |          |0011 = BPWM_CH2 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH2 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH3 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH3 down-count CMPDAT point.
N     * |        |          |Others reserved.
N     * |[31]    |TRGEN3    |BPWM_CH3 Trigger EADC Enable Bit
N     * @var BPWM_T::EADCTS1
N     * Offset: 0xFC  BPWM Trigger EADC Source Select Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |TRGSEL4   |BPWM_CH4 Trigger EADC Source Select
N     * |        |          |0000 = BPWM_CH4 zero point.
N     * |        |          |0001 = BPWM_CH4 period point.
N     * |        |          |0010 = BPWM_CH4 zero or period point.
N     * |        |          |0011 = BPWM_CH4 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH4 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH5 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH5 down-count CMPDAT point.
N     * |        |          |Others reserved
N     * |[7]     |TRGEN4    |BPWM_CH4 Trigger EADC Enable Bit
N     * |[11:8]  |TRGSEL5   |BPWM_CH5 Trigger EADC Source Select
N     * |        |          |0000 = BPWM_CH4 zero point.
N     * |        |          |0001 = BPWM_CH4 period point.
N     * |        |          |0010 = BPWM_CH4 zero or period point.
N     * |        |          |0011 = BPWM_CH4 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH4 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH5 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH5 down-count CMPDAT point.
N     * |        |          |Others reserved
N     * |[15]    |TRGEN5    |BPWM_CH5 Trigger EADC Enable Bit
N     * @var BPWM_T::SSCTL
N     * Offset: 0x110  BPWM Synchronous Start Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SSEN0     |BPWM Synchronous Start Function 0 Enable Bit
N     * |        |          |When synchronous start function is enabled, the BPWM_CH0 counter enable bit (CNTEN0) can be enabled by writing BPWM synchronous start trigger bit (CNTSEN).
N     * |        |          |0 = BPWM synchronous start function Disabled.
N     * |        |          |1 = BPWM synchronous start function Enabled.
N     * |[9:8]   |SSRC      |BPWM Synchronous Start Source Select
N     * |        |          |00 = Synchronous start source come from PWM0.
N     * |        |          |01 = Synchronous start source come from PWM1.
N     * |        |          |10 = Synchronous start source come from BPWM0.
N     * |        |          |11 = Synchronous start source come from BPWM1.
N     * @var BPWM_T::SSTRG
N     * Offset: 0x114  BPWM Synchronous Start Trigger Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTSEN    |BPWM Counter Synchronous Start Enable Bit(Write Only)
N     * |        |          |BPMW counter synchronous enable function is used to make PWM or BPWM channels start counting at the same time.
N     * |        |          |Writing this bit to 1 will also set the counter enable bit if correlated BPWM channel counter synchronous start function is enabled.
N     * @var BPWM_T::STATUS
N     * Offset: 0x120  BPWM Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTMAX0   |Time-base Counter 0 Equal to 0xFFFF Latched Status
N     * |        |          |0 = The time-base counter never reached its maximum value 0xFFFF.
N     * |        |          |1 = The time-base counter reached its maximum value. Software can write 1 to clear this bit.
N     * |[16]    |EADCTRG0  |EADC Start of Conversion Status
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No EADC start of conversion trigger event has occurred.
N     * |        |          |1 = An EADC start of conversion trigger event has occurred. Software can write 1 to clear this bit.
N     * |[17]    |EADCTRG1  |EADC Start of Conversion Status
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No EADC start of conversion trigger event has occurred.
N     * |        |          |1 = An EADC start of conversion trigger event has occurred. Software can write 1 to clear this bit.
N     * |[18]    |EADCTRG2  |EADC Start of Conversion Status
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No EADC start of conversion trigger event has occurred.
N     * |        |          |1 = An EADC start of conversion trigger event has occurred. Software can write 1 to clear this bit.
N     * |[19]    |EADCTRG3  |EADC Start of Conversion Status
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No EADC start of conversion trigger event has occurred.
N     * |        |          |1 = An EADC start of conversion trigger event has occurred. Software can write 1 to clear this bit.
N     * |[20]    |EADCTRG4  |EADC Start of Conversion Status
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No EADC start of conversion trigger event has occurred.
N     * |        |          |1 = An EADC start of conversion trigger event has occurred. Software can write 1 to clear this bit.
N     * |[21]    |EADCTRG5  |EADC Start of Conversion Status
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No EADC start of conversion trigger event has occurred.
N     * |        |          |1 = An EADC start of conversion trigger event has occurred. Software can write 1 to clear this bit.
N     * @var BPWM_T::CAPINEN
N     * Offset: 0x200  BPWM Capture Input Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CAPINEN0  |Capture Input Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM Channel capture input path Disabled
N     * |        |          |The input of BPWM channel capture function is always regarded as 0.
N     * |        |          |1 = BPWM Channel capture input path Enabled
N     * |        |          |The input of BPWM channel capture function comes from correlative multifunction pin.
N     * |[1]     |CAPINEN1  |Capture Input Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM Channel capture input path Disabled
N     * |        |          |The input of BPWM channel capture function is always regarded as 0.
N     * |        |          |1 = BPWM Channel capture input path Enabled
N     * |        |          |The input of BPWM channel capture function comes from correlative multifunction pin.
N     * |[2]     |CAPINEN2  |Capture Input Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM Channel capture input path Disabled
N     * |        |          |The input of BPWM channel capture function is always regarded as 0.
N     * |        |          |1 = BPWM Channel capture input path Enabled
N     * |        |          |The input of BPWM channel capture function comes from correlative multifunction pin.
N     * |[3]     |CAPINEN3  |Capture Input Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM Channel capture input path Disabled
N     * |        |          |The input of BPWM channel capture function is always regarded as 0.
N     * |        |          |1 = BPWM Channel capture input path Enabled
N     * |        |          |The input of BPWM channel capture function comes from correlative multifunction pin.
N     * |[4]     |CAPINEN4  |Capture Input Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM Channel capture input path Disabled
N     * |        |          |The input of BPWM channel capture function is always regarded as 0.
N     * |        |          |1 = BPWM Channel capture input path Enabled
N     * |        |          |The input of BPWM channel capture function comes from correlative multifunction pin.
N     * |[5]     |CAPINEN5  |Capture Input Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM Channel capture input path Disabled
N     * |        |          |The input of BPWM channel capture function is always regarded as 0.
N     * |        |          |1 = BPWM Channel capture input path Enabled
N     * |        |          |The input of BPWM channel capture function comes from correlative multifunction pin.
N     * @var BPWM_T::CAPCTL
N     * Offset: 0x204  BPWM Capture Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CAPEN0    |Capture Function Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture function Disabled. RCAPDAT/FCAPDAT register will not be updated.
N     * |        |          |1 = Capture function Enabled
N     * |        |          |Capture latched the BPWM counter value when detected rising or falling edge of input signal and saved to RCAPDAT (Rising latch) and FCAPDAT (Falling latch).
N     * |[1]     |CAPEN1    |Capture Function Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture function Disabled. RCAPDAT/FCAPDAT register will not be updated.
N     * |        |          |1 = Capture function Enabled
N     * |        |          |Capture latched the BPWM counter value when detected rising or falling edge of input signal and saved to RCAPDAT (Rising latch) and FCAPDAT (Falling latch).
N     * |[2]     |CAPEN2    |Capture Function Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture function Disabled. RCAPDAT/FCAPDAT register will not be updated.
N     * |        |          |1 = Capture function Enabled
N     * |        |          |Capture latched the BPWM counter value when detected rising or falling edge of input signal and saved to RCAPDAT (Rising latch) and FCAPDAT (Falling latch).
N     * |[3]     |CAPEN3    |Capture Function Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture function Disabled. RCAPDAT/FCAPDAT register will not be updated.
N     * |        |          |1 = Capture function Enabled
N     * |        |          |Capture latched the BPWM counter value when detected rising or falling edge of input signal and saved to RCAPDAT (Rising latch) and FCAPDAT (Falling latch).
N     * |[4]     |CAPEN4    |Capture Function Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture function Disabled. RCAPDAT/FCAPDAT register will not be updated.
N     * |        |          |1 = Capture function Enabled
N     * |        |          |Capture latched the BPWM counter value when detected rising or falling edge of input signal and saved to RCAPDAT (Rising latch) and FCAPDAT (Falling latch).
N     * |[5]     |CAPEN5    |Capture Function Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture function Disabled. RCAPDAT/FCAPDAT register will not be updated.
N     * |        |          |1 = Capture function Enabled
N     * |        |          |Capture latched the BPWM counter value when detected rising or falling edge of input signal and saved to RCAPDAT (Rising latch) and FCAPDAT (Falling latch).
N     * |[8]     |CAPINV0   |Capture Inverter Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture source inverter Disabled.
N     * |        |          |1 = Capture source inverter Enabled. Reverse the input signal from GPIO.
N     * |[9]     |CAPINV1   |Capture Inverter Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture source inverter Disabled.
N     * |        |          |1 = Capture source inverter Enabled. Reverse the input signal from GPIO.
N     * |[10]    |CAPINV2   |Capture Inverter Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture source inverter Disabled.
N     * |        |          |1 = Capture source inverter Enabled. Reverse the input signal from GPIO.
N     * |[11]    |CAPINV3   |Capture Inverter Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture source inverter Disabled.
N     * |        |          |1 = Capture source inverter Enabled. Reverse the input signal from GPIO.
N     * |[12]    |CAPINV4   |Capture Inverter Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture source inverter Disabled.
N     * |        |          |1 = Capture source inverter Enabled. Reverse the input signal from GPIO.
N     * |[13]    |CAPINV5   |Capture Inverter Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture source inverter Disabled.
N     * |        |          |1 = Capture source inverter Enabled. Reverse the input signal from GPIO.
N     * |[16]    |RCRLDEN0  |Rising Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Rising capture reload counter Disabled.
N     * |        |          |1 = Rising capture reload counter Enabled.
N     * |[17]    |RCRLDEN1  |Rising Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Rising capture reload counter Disabled.
N     * |        |          |1 = Rising capture reload counter Enabled.
N     * |[18]    |RCRLDEN2  |Rising Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Rising capture reload counter Disabled.
N     * |        |          |1 = Rising capture reload counter Enabled.
N     * |[19]    |RCRLDEN3  |Rising Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Rising capture reload counter Disabled.
N     * |        |          |1 = Rising capture reload counter Enabled.
N     * |[20]    |RCRLDEN4  |Rising Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Rising capture reload counter Disabled.
N     * |        |          |1 = Rising capture reload counter Enabled.
N     * |[21]    |RCRLDEN5  |Rising Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Rising capture reload counter Disabled.
N     * |        |          |1 = Rising capture reload counter Enabled.
N     * |[24]    |FCRLDEN0  |Falling Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Falling capture reload counter Disabled.
N     * |        |          |1 = Falling capture reload counter Enabled.
N     * |[25]    |FCRLDEN1  |Falling Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Falling capture reload counter Disabled.
N     * |        |          |1 = Falling capture reload counter Enabled.
N     * |[26]    |FCRLDEN2  |Falling Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Falling capture reload counter Disabled.
N     * |        |          |1 = Falling capture reload counter Enabled.
N     * |[27]    |FCRLDEN3  |Falling Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Falling capture reload counter Disabled.
N     * |        |          |1 = Falling capture reload counter Enabled.
N     * |[28]    |FCRLDEN4  |Falling Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Falling capture reload counter Disabled.
N     * |        |          |1 = Falling capture reload counter Enabled.
N     * |[29]    |FCRLDEN5  |Falling Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Falling capture reload counter Disabled.
N     * |        |          |1 = Falling capture reload counter Enabled.
N     * @var BPWM_T::CAPSTS
N     * Offset: 0x208  BPWM Capture Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CRIFOV0   |Capture Rising Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if rising latch happened when the corresponding CAPRIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPRIF.
N     * |[1]     |CRIFOV1   |Capture Rising Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if rising latch happened when the corresponding CAPRIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPRIF.
N     * |[2]     |CRIFOV2   |Capture Rising Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if rising latch happened when the corresponding CAPRIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPRIF.
N     * |[3]     |CRIFOV3   |Capture Rising Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if rising latch happened when the corresponding CAPRIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPRIF.
N     * |[4]     |CRIFOV4   |Capture Rising Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if rising latch happened when the corresponding CAPRIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPRIF.
N     * |[5]     |CRIFOV5   |Capture Rising Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if rising latch happened when the corresponding CAPRIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPRIF.
N     * |[8]     |CFIFOV0   |Capture Falling Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if falling latch happened when the corresponding CAPFIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPFIF.
N     * |[9]     |CFIFOV1   |Capture Falling Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if falling latch happened when the corresponding CAPFIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPFIF.
N     * |[10]    |CFIFOV2   |Capture Falling Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if falling latch happened when the corresponding CAPFIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPFIF.
N     * |[11]    |CFIFOV3   |Capture Falling Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if falling latch happened when the corresponding CAPFIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPFIF.
N     * |[12]    |CFIFOV4   |Capture Falling Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if falling latch happened when the corresponding CAPFIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPFIF.
N     * |[13]    |CFIFOV5   |Capture Falling Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if falling latch happened when the corresponding CAPFIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CAPFIF.
N     * @var BPWM_T::CAPIEN
N     * Offset: 0x250  BPWM Capture Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CAPRIENn  |BPWM Capture Rising Latch Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture rising edge latch interrupt Disabled.
N     * |        |          |1 = Capture rising edge latch interrupt Enabled.
N     * |[13:8]  |CAPFIENn  |BPWM Capture Falling Latch Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture falling edge latch interrupt Disabled.
N     * |        |          |1 = Capture falling edge latch interrupt Enabled.
N     * @var BPWM_T::CAPIF
N     * Offset: 0x254  BPWM Capture Interrupt Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CAPRIF0   |BPWM Capture Rising Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture rising latch condition happened.
N     * |        |          |1 = Capture rising latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[1]     |CAPRIF1   |BPWM Capture Rising Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture rising latch condition happened.
N     * |        |          |1 = Capture rising latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[2]     |CAPRIF2   |BPWM Capture Rising Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture rising latch condition happened.
N     * |        |          |1 = Capture rising latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[3]     |CAPRIF3   |BPWM Capture Rising Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture rising latch condition happened.
N     * |        |          |1 = Capture rising latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[4]     |CAPRIF4   |BPWM Capture Rising Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture rising latch condition happened.
N     * |        |          |1 = Capture rising latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[5]     |CAPRIF5   |BPWM Capture Rising Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture rising latch condition happened.
N     * |        |          |1 = Capture rising latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[8]     |CAPFIF0   |BPWM Capture Falling Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture falling latch condition happened.
N     * |        |          |1 = Capture falling latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[9]     |CAPFIF1   |BPWM Capture Falling Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture falling latch condition happened.
N     * |        |          |1 = Capture falling latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[10]    |CAPFIF2   |BPWM Capture Falling Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture falling latch condition happened.
N     * |        |          |1 = Capture falling latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[11]    |CAPFIF3   |BPWM Capture Falling Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture falling latch condition happened.
N     * |        |          |1 = Capture falling latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[12]    |CAPFIF4   |BPWM Capture Falling Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture falling latch condition happened.
N     * |        |          |1 = Capture falling latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[13]    |CAPFIF5   |BPWM Capture Falling Latch Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture falling latch condition happened.
N     * |        |          |1 = Capture falling latch condition happened, this flag will be set to high.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * @var BPWM_T::PBUF
N     * Offset: 0x304  BPWM PERIOD Buffer
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |PBUF      |BPWM Period Buffer (Read Only)
N     * |        |          |Used as PERIOD active register.
N     * @var BPWM_T::CMPBUF[6]
N     * Offset: 0x31C~0x330  BPWM CMPDAT 0~5 Buffer
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CMPBUF    |BPWM Comparator Buffer (Read Only)
N     * |        |          |Used as CMP active register.
N     */
N    __IO uint32_t CTL0;                  /*!< [0x0000] BPWM Control Register 0                                          */
X    volatile uint32_t CTL0;                   
N    __IO uint32_t CTL1;                  /*!< [0x0004] BPWM Control Register 1                                          */
X    volatile uint32_t CTL1;                   
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __IO uint32_t CLKSRC;                /*!< [0x0010] BPWM Clock Source Register                                       */
X    volatile uint32_t CLKSRC;                 
N    __IO uint32_t CLKPSC;                /*!< [0x0014] BPWM Clock Prescale Register                                     */
X    volatile uint32_t CLKPSC;                 
N    __I  uint32_t RESERVE1[2];
X    volatile const  uint32_t RESERVE1[2];
N    __IO uint32_t CNTEN;                 /*!< [0x0020] BPWM Counter Enable Register                                     */
X    volatile uint32_t CNTEN;                  
N    __IO uint32_t CNTCLR;                /*!< [0x0024] BPWM Clear Counter Register                                      */
X    volatile uint32_t CNTCLR;                 
N    __I  uint32_t RESERVE2[2];
X    volatile const  uint32_t RESERVE2[2];
N    __IO uint32_t PERIOD;                /*!< [0x0030] BPWM Period Register                                             */
X    volatile uint32_t PERIOD;                 
N    __I  uint32_t RESERVE3[7];
X    volatile const  uint32_t RESERVE3[7];
N    __IO uint32_t CMPDAT[6];             /*!< [0x0050 ~ 0x0064] BPWM Comparator Register 0 ~ 6                          */
X    volatile uint32_t CMPDAT[6];              
N    __I  uint32_t RESERVE4[10];
X    volatile const  uint32_t RESERVE4[10];
N    __I  uint32_t CNT;                   /*!< [0x0090] BPWM Counter Register                                            */
X    volatile const  uint32_t CNT;                    
N    __I  uint32_t RESERVE5[7];
X    volatile const  uint32_t RESERVE5[7];
N    __IO uint32_t WGCTL0;                /*!< [0x00b0] BPWM Generation Register 0                                       */
X    volatile uint32_t WGCTL0;                 
N    __IO uint32_t WGCTL1;                /*!< [0x00b4] BPWM Generation Register 1                                       */
X    volatile uint32_t WGCTL1;                 
N    __IO uint32_t MSKEN;                 /*!< [0x00b8] BPWM Mask Enable Register                                        */
X    volatile uint32_t MSKEN;                  
N    __IO uint32_t MSK;                   /*!< [0x00bc] BPWM Mask Data Register                                          */
X    volatile uint32_t MSK;                    
N    __I  uint32_t RESERVE6[5];
X    volatile const  uint32_t RESERVE6[5];
N    __IO uint32_t POLCTL;                /*!< [0x00d4] BPWM Pin Polar Inverse Register                                  */
X    volatile uint32_t POLCTL;                 
N    __IO uint32_t POEN;                  /*!< [0x00d8] BPWM Output Enable Register                                      */
X    volatile uint32_t POEN;                   
N    __I  uint32_t RESERVE7[1];
X    volatile const  uint32_t RESERVE7[1];
N    __IO uint32_t INTEN;                 /*!< [0x00e0] BPWM Interrupt Enable Register                                   */
X    volatile uint32_t INTEN;                  
N    __I  uint32_t RESERVE8[1];
X    volatile const  uint32_t RESERVE8[1];
N    __IO uint32_t INTSTS;                /*!< [0x00e8] BPWM Interrupt Flag Register                                     */
X    volatile uint32_t INTSTS;                 
N    __I  uint32_t RESERVE9[3];
X    volatile const  uint32_t RESERVE9[3];
N    __IO uint32_t EADCTS0;               /*!< [0x00f8] BPWM Trigger EADC Source Select Register 0                       */
X    volatile uint32_t EADCTS0;                
N    __IO uint32_t EADCTS1;               /*!< [0x00fc] BPWM Trigger EADC Source Select Register 1                       */
X    volatile uint32_t EADCTS1;                
N    __I  uint32_t RESERVE10[4];
X    volatile const  uint32_t RESERVE10[4];
N    __IO uint32_t SSCTL;                 /*!< [0x0110] BPWM Synchronous Start Control Register                          */
X    volatile uint32_t SSCTL;                  
N    __O  uint32_t SSTRG;                 /*!< [0x0114] BPWM Synchronous Start Trigger Register                          */
X    volatile  uint32_t SSTRG;                  
N    __I  uint32_t RESERVE11[2];
X    volatile const  uint32_t RESERVE11[2];
N    __IO uint32_t STATUS;                /*!< [0x0120] BPWM Status Register                                             */
X    volatile uint32_t STATUS;                 
N    __I  uint32_t RESERVE12[55];
X    volatile const  uint32_t RESERVE12[55];
N    __IO uint32_t CAPINEN;               /*!< [0x0200] BPWM Capture Input Enable Register                               */
X    volatile uint32_t CAPINEN;                
N    __IO uint32_t CAPCTL;                /*!< [0x0204] BPWM Capture Control Register                                    */
X    volatile uint32_t CAPCTL;                 
N    __I  uint32_t CAPSTS;                /*!< [0x0208] BPWM Capture Status Register                                     */
X    volatile const  uint32_t CAPSTS;                 
N    BCAPDAT_T CAPDAT[6];                 /*!< [0x020C ~ 0x0238] BPWM Rising and Falling Capture Data Register 0~5       */
N    __I  uint32_t RESERVE13[5];
X    volatile const  uint32_t RESERVE13[5];
N    __IO uint32_t CAPIEN;                /*!< [0x0250] BPWM Capture Interrupt Enable Register                           */
X    volatile uint32_t CAPIEN;                 
N    __IO uint32_t CAPIF;                 /*!< [0x0254] BPWM Capture Interrupt Flag Register                             */
X    volatile uint32_t CAPIF;                  
N    __I  uint32_t RESERVE14[43];
X    volatile const  uint32_t RESERVE14[43];
N    __I  uint32_t PBUF;                  /*!< [0x0304] BPWM PERIOD Buffer                                               */
X    volatile const  uint32_t PBUF;                   
N    __I  uint32_t RESERVE15[5];
X    volatile const  uint32_t RESERVE15[5];
N    __I  uint32_t CMPBUF[6];             /*!< [0x031c ~ 0x0330] BPWM CMPDAT 0 ~ 5 Buffer                                */
X    volatile const  uint32_t CMPBUF[6];              
N
N} BPWM_T;
N
N/**
N    @addtogroup BPWM_CONST BPWM Bit Field Definition
N    Constant Definitions for BPWM Controller
N@{ */
N
N#define BPWM_CTL0_CTRLD0_Pos            (0)                                               /*!< BPWM_T::CTL0: CTRLD0 Position         */
N#define BPWM_CTL0_CTRLD0_Msk            (0x1ul << BPWM_CTL0_CTRLD0_Pos)                   /*!< BPWM_T::CTL0: CTRLD0 Mask             */
N
N#define BPWM_CTL0_CTRLD1_Pos            (1)                                               /*!< BPWM_T::CTL0: CTRLD1 Position         */
N#define BPWM_CTL0_CTRLD1_Msk            (0x1ul << BPWM_CTL0_CTRLD1_Pos)                   /*!< BPWM_T::CTL0: CTRLD1 Mask             */
N
N#define BPWM_CTL0_CTRLD2_Pos            (2)                                               /*!< BPWM_T::CTL0: CTRLD2 Position         */
N#define BPWM_CTL0_CTRLD2_Msk            (0x1ul << BPWM_CTL0_CTRLD2_Pos)                   /*!< BPWM_T::CTL0: CTRLD2 Mask             */
N
N#define BPWM_CTL0_CTRLD3_Pos            (3)                                               /*!< BPWM_T::CTL0: CTRLD3 Position         */
N#define BPWM_CTL0_CTRLD3_Msk            (0x1ul << BPWM_CTL0_CTRLD3_Pos)                   /*!< BPWM_T::CTL0: CTRLD3 Mask             */
N
N#define BPWM_CTL0_CTRLD4_Pos            (4)                                               /*!< BPWM_T::CTL0: CTRLD4 Position         */
N#define BPWM_CTL0_CTRLD4_Msk            (0x1ul << BPWM_CTL0_CTRLD4_Pos)                   /*!< BPWM_T::CTL0: CTRLD4 Mask             */
N
N#define BPWM_CTL0_CTRLD5_Pos            (5)                                               /*!< BPWM_T::CTL0: CTRLD5 Position         */
N#define BPWM_CTL0_CTRLD5_Msk            (0x1ul << BPWM_CTL0_CTRLD5_Pos)                   /*!< BPWM_T::CTL0: CTRLD5 Mask             */
N
N#define BPWM_CTL0_IMMLDEN0_Pos          (16)                                              /*!< BPWM_T::CTL0: IMMLDEN0 Position       */
N#define BPWM_CTL0_IMMLDEN0_Msk          (0x1ul << BPWM_CTL0_IMMLDEN0_Pos)                 /*!< BPWM_T::CTL0: IMMLDEN0 Mask           */
N
N#define BPWM_CTL0_IMMLDEN1_Pos          (17)                                              /*!< BPWM_T::CTL0: IMMLDEN1 Position       */
N#define BPWM_CTL0_IMMLDEN1_Msk          (0x1ul << BPWM_CTL0_IMMLDEN1_Pos)                 /*!< BPWM_T::CTL0: IMMLDEN1 Mask           */
N
N#define BPWM_CTL0_IMMLDEN2_Pos          (18)                                              /*!< BPWM_T::CTL0: IMMLDEN2 Position       */
N#define BPWM_CTL0_IMMLDEN2_Msk          (0x1ul << BPWM_CTL0_IMMLDEN2_Pos)                 /*!< BPWM_T::CTL0: IMMLDEN2 Mask           */
N
N#define BPWM_CTL0_IMMLDEN3_Pos          (19)                                              /*!< BPWM_T::CTL0: IMMLDEN3 Position       */
N#define BPWM_CTL0_IMMLDEN3_Msk          (0x1ul << BPWM_CTL0_IMMLDEN3_Pos)                 /*!< BPWM_T::CTL0: IMMLDEN3 Mask           */
N
N#define BPWM_CTL0_IMMLDEN4_Pos          (20)                                              /*!< BPWM_T::CTL0: IMMLDEN4 Position       */
N#define BPWM_CTL0_IMMLDEN4_Msk          (0x1ul << BPWM_CTL0_IMMLDEN4_Pos)                 /*!< BPWM_T::CTL0: IMMLDEN4 Mask           */
N
N#define BPWM_CTL0_IMMLDEN5_Pos          (21)                                              /*!< BPWM_T::CTL0: IMMLDEN5 Position       */
N#define BPWM_CTL0_IMMLDEN5_Msk          (0x1ul << BPWM_CTL0_IMMLDEN5_Pos)                 /*!< BPWM_T::CTL0: IMMLDEN5 Mask           */
N
N#define BPWM_CTL0_DBGHALT_Pos           (30)                                              /*!< BPWM_T::CTL0: DBGHALT Position        */
N#define BPWM_CTL0_DBGHALT_Msk           (0x1ul << BPWM_CTL0_DBGHALT_Pos)                  /*!< BPWM_T::CTL0: DBGHALT Mask            */
N
N#define BPWM_CTL0_DBGTRIOFF_Pos         (31)                                              /*!< BPWM_T::CTL0: DBGTRIOFF Position      */
N#define BPWM_CTL0_DBGTRIOFF_Msk         (0x1ul << BPWM_CTL0_DBGTRIOFF_Pos)                /*!< BPWM_T::CTL0: DBGTRIOFF Mask          */
N
N#define BPWM_CTL1_CNTTYPE0_Pos          (0)                                               /*!< BPWM_T::CTL1: CNTTYPE0 Position       */
N#define BPWM_CTL1_CNTTYPE0_Msk          (0x3ul << BPWM_CTL1_CNTTYPE0_Pos)                 /*!< BPWM_T::CTL1: CNTTYPE0 Mask           */
N
N#define BPWM_CLKSRC_ECLKSRC0_Pos        (0)                                               /*!< BPWM_T::CLKSRC: ECLKSRC0 Position     */
N#define BPWM_CLKSRC_ECLKSRC0_Msk        (0x7ul << BPWM_CLKSRC_ECLKSRC0_Pos)               /*!< BPWM_T::CLKSRC: ECLKSRC0 Mask         */
N
N#define BPWM_CLKPSC_CLKPSC_Pos          (0)                                               /*!< BPWM_T::CLKPSC: CLKPSC Position       */
N#define BPWM_CLKPSC_CLKPSC_Msk          (0xffful << BPWM_CLKPSC_CLKPSC_Pos)               /*!< BPWM_T::CLKPSC: CLKPSC Mask           */
N
N#define BPWM_CNTEN_CNTEN0_Pos           (0)                                               /*!< BPWM_T::CNTEN: CNTEN0 Position        */
N#define BPWM_CNTEN_CNTEN0_Msk           (0x1ul << BPWM_CNTEN_CNTEN0_Pos)                  /*!< BPWM_T::CNTEN: CNTEN0 Mask            */
N
N#define BPWM_CNTCLR_CNTCLR0_Pos         (0)                                               /*!< BPWM_T::CNTCLR: CNTCLR0 Position      */
N#define BPWM_CNTCLR_CNTCLR0_Msk         (0x1ul << BPWM_CNTCLR_CNTCLR0_Pos)                /*!< BPWM_T::CNTCLR: CNTCLR0 Mask          */
N
N#define BPWM_PERIOD_PERIOD_Pos          (0)                                               /*!< BPWM_T::PERIOD: PERIOD Position       */
N#define BPWM_PERIOD_PERIOD_Msk          (0xfffful << BPWM_PERIOD_PERIOD_Pos)              /*!< BPWM_T::PERIOD: PERIOD Mask           */
N
N#define BPWM_CMPDAT_CMPDAT_Pos          (0)                                               /*!< BPWM_T::CMPDAT0: CMPDAT Position      */
N#define BPWM_CMPDAT_CMPDAT_Msk          (0xfffful << BPWM_CMPDAT_CMPDAT_Pos)              /*!< BPWM_T::CMPDAT0: CMPDAT Mask          */
N
N#define BPWM_CNT_CNT_Pos                (0)                                               /*!< BPWM_T::CNT: CNT Position             */
N#define BPWM_CNT_CNT_Msk                (0xfffful << BPWM_CNT_CNT_Pos)                    /*!< BPWM_T::CNT: CNT Mask                 */
N
N#define BPWM_CNT_DIRF_Pos               (16)                                              /*!< BPWM_T::CNT: DIRF Position            */
N#define BPWM_CNT_DIRF_Msk               (0x1ul << BPWM_CNT_DIRF_Pos)                      /*!< BPWM_T::CNT: DIRF Mask                */
N
N#define BPWM_WGCTL0_ZPCTL0_Pos          (0)                                               /*!< BPWM_T::WGCTL0: ZPCTL0 Position       */
N#define BPWM_WGCTL0_ZPCTL0_Msk          (0x3ul << BPWM_WGCTL0_ZPCTL0_Pos)                 /*!< BPWM_T::WGCTL0: ZPCTL0 Mask           */
N
N#define BPWM_WGCTL0_ZPCTL1_Pos          (2)                                               /*!< BPWM_T::WGCTL0: ZPCTL1 Position       */
N#define BPWM_WGCTL0_ZPCTL1_Msk          (0x3ul << BPWM_WGCTL0_ZPCTL1_Pos)                 /*!< BPWM_T::WGCTL0: ZPCTL1 Mask           */
N
N#define BPWM_WGCTL0_ZPCTL2_Pos          (4)                                               /*!< BPWM_T::WGCTL0: ZPCTL2 Position       */
N#define BPWM_WGCTL0_ZPCTL2_Msk          (0x3ul << BPWM_WGCTL0_ZPCTL2_Pos)                 /*!< BPWM_T::WGCTL0: ZPCTL2 Mask           */
N
N#define BPWM_WGCTL0_ZPCTL3_Pos          (6)                                               /*!< BPWM_T::WGCTL0: ZPCTL3 Position       */
N#define BPWM_WGCTL0_ZPCTL3_Msk          (0x3ul << BPWM_WGCTL0_ZPCTL3_Pos)                 /*!< BPWM_T::WGCTL0: ZPCTL3 Mask           */
N
N#define BPWM_WGCTL0_ZPCTL4_Pos          (8)                                               /*!< BPWM_T::WGCTL0: ZPCTL4 Position       */
N#define BPWM_WGCTL0_ZPCTL4_Msk          (0x3ul << BPWM_WGCTL0_ZPCTL4_Pos)                 /*!< BPWM_T::WGCTL0: ZPCTL4 Mask           */
N
N#define BPWM_WGCTL0_ZPCTL5_Pos          (10)                                              /*!< BPWM_T::WGCTL0: ZPCTL5 Position       */
N#define BPWM_WGCTL0_ZPCTL5_Msk          (0x3ul << BPWM_WGCTL0_ZPCTL5_Pos)                 /*!< BPWM_T::WGCTL0: ZPCTL5 Mask           */
N
N#define BPWM_WGCTL0_PRDPCTL0_Pos        (16)                                              /*!< BPWM_T::WGCTL0: PRDPCTL0 Position     */
N#define BPWM_WGCTL0_PRDPCTL0_Msk        (0x3ul << BPWM_WGCTL0_PRDPCTL0_Pos)               /*!< BPWM_T::WGCTL0: PRDPCTL0 Mask         */
N
N#define BPWM_WGCTL0_PRDPCTL1_Pos        (18)                                              /*!< BPWM_T::WGCTL0: PRDPCTL1 Position     */
N#define BPWM_WGCTL0_PRDPCTL1_Msk        (0x3ul << BPWM_WGCTL0_PRDPCTL1_Pos)               /*!< BPWM_T::WGCTL0: PRDPCTL1 Mask         */
N
N#define BPWM_WGCTL0_PRDPCTL2_Pos        (20)                                              /*!< BPWM_T::WGCTL0: PRDPCTL2 Position     */
N#define BPWM_WGCTL0_PRDPCTL2_Msk        (0x3ul << BPWM_WGCTL0_PRDPCTL2_Pos)               /*!< BPWM_T::WGCTL0: PRDPCTL2 Mask         */
N
N#define BPWM_WGCTL0_PRDPCTL3_Pos        (22)                                              /*!< BPWM_T::WGCTL0: PRDPCTL3 Position     */
N#define BPWM_WGCTL0_PRDPCTL3_Msk        (0x3ul << BPWM_WGCTL0_PRDPCTL3_Pos)               /*!< BPWM_T::WGCTL0: PRDPCTL3 Mask         */
N
N#define BPWM_WGCTL0_PRDPCTL4_Pos        (24)                                              /*!< BPWM_T::WGCTL0: PRDPCTL4 Position     */
N#define BPWM_WGCTL0_PRDPCTL4_Msk        (0x3ul << BPWM_WGCTL0_PRDPCTL4_Pos)               /*!< BPWM_T::WGCTL0: PRDPCTL4 Mask         */
N
N#define BPWM_WGCTL0_PRDPCTL5_Pos        (26)                                              /*!< BPWM_T::WGCTL0: PRDPCTL5 Position     */
N#define BPWM_WGCTL0_PRDPCTL5_Msk        (0x3ul << BPWM_WGCTL0_PRDPCTL5_Pos)               /*!< BPWM_T::WGCTL0: PRDPCTL5 Mask         */
N
N#define BPWM_WGCTL1_CMPUCTL0_Pos        (0)                                               /*!< BPWM_T::WGCTL1: CMPUCTL0 Position     */
N#define BPWM_WGCTL1_CMPUCTL0_Msk        (0x3ul << BPWM_WGCTL1_CMPUCTL0_Pos)               /*!< BPWM_T::WGCTL1: CMPUCTL0 Mask         */
N
N#define BPWM_WGCTL1_CMPUCTL1_Pos        (2)                                               /*!< BPWM_T::WGCTL1: CMPUCTL1 Position     */
N#define BPWM_WGCTL1_CMPUCTL1_Msk        (0x3ul << BPWM_WGCTL1_CMPUCTL1_Pos)               /*!< BPWM_T::WGCTL1: CMPUCTL1 Mask         */
N
N#define BPWM_WGCTL1_CMPUCTL2_Pos        (4)                                               /*!< BPWM_T::WGCTL1: CMPUCTL2 Position     */
N#define BPWM_WGCTL1_CMPUCTL2_Msk        (0x3ul << BPWM_WGCTL1_CMPUCTL2_Pos)               /*!< BPWM_T::WGCTL1: CMPUCTL2 Mask         */
N
N#define BPWM_WGCTL1_CMPUCTL3_Pos        (6)                                               /*!< BPWM_T::WGCTL1: CMPUCTL3 Position     */
N#define BPWM_WGCTL1_CMPUCTL3_Msk        (0x3ul << BPWM_WGCTL1_CMPUCTL3_Pos)               /*!< BPWM_T::WGCTL1: CMPUCTL3 Mask         */
N
N#define BPWM_WGCTL1_CMPUCTL4_Pos        (8)                                               /*!< BPWM_T::WGCTL1: CMPUCTL4 Position     */
N#define BPWM_WGCTL1_CMPUCTL4_Msk        (0x3ul << BPWM_WGCTL1_CMPUCTL4_Pos)               /*!< BPWM_T::WGCTL1: CMPUCTL4 Mask         */
N
N#define BPWM_WGCTL1_CMPUCTL5_Pos        (10)                                              /*!< BPWM_T::WGCTL1: CMPUCTL5 Position     */
N#define BPWM_WGCTL1_CMPUCTL5_Msk        (0x3ul << BPWM_WGCTL1_CMPUCTL5_Pos)               /*!< BPWM_T::WGCTL1: CMPUCTL5 Mask         */
N
N#define BPWM_WGCTL1_CMPDCTL0_Pos        (16)                                              /*!< BPWM_T::WGCTL1: CMPDCTL0 Position     */
N#define BPWM_WGCTL1_CMPDCTL0_Msk        (0x3ul << BPWM_WGCTL1_CMPDCTL0_Pos)               /*!< BPWM_T::WGCTL1: CMPDCTL0 Mask         */
N
N#define BPWM_WGCTL1_CMPDCTL1_Pos        (18)                                              /*!< BPWM_T::WGCTL1: CMPDCTL1 Position     */
N#define BPWM_WGCTL1_CMPDCTL1_Msk        (0x3ul << BPWM_WGCTL1_CMPDCTL1_Pos)               /*!< BPWM_T::WGCTL1: CMPDCTL1 Mask         */
N
N#define BPWM_WGCTL1_CMPDCTL2_Pos        (20)                                              /*!< BPWM_T::WGCTL1: CMPDCTL2 Position     */
N#define BPWM_WGCTL1_CMPDCTL2_Msk        (0x3ul << BPWM_WGCTL1_CMPDCTL2_Pos)               /*!< BPWM_T::WGCTL1: CMPDCTL2 Mask         */
N
N#define BPWM_WGCTL1_CMPDCTL3_Pos        (22)                                              /*!< BPWM_T::WGCTL1: CMPDCTL3 Position     */
N#define BPWM_WGCTL1_CMPDCTL3_Msk        (0x3ul << BPWM_WGCTL1_CMPDCTL3_Pos)               /*!< BPWM_T::WGCTL1: CMPDCTL3 Mask         */
N
N#define BPWM_WGCTL1_CMPDCTL4_Pos        (24)                                              /*!< BPWM_T::WGCTL1: CMPDCTL4 Position     */
N#define BPWM_WGCTL1_CMPDCTL4_Msk        (0x3ul << BPWM_WGCTL1_CMPDCTL4_Pos)               /*!< BPWM_T::WGCTL1: CMPDCTL4 Mask         */
N
N#define BPWM_WGCTL1_CMPDCTL5_Pos        (26)                                              /*!< BPWM_T::WGCTL1: CMPDCTL5 Position     */
N#define BPWM_WGCTL1_CMPDCTL5_Msk        (0x3ul << BPWM_WGCTL1_CMPDCTL5_Pos)               /*!< BPWM_T::WGCTL1: CMPDCTL5 Mask         */
N
N#define BPWM_MSKEN_MSKEN0_Pos           (0)                                               /*!< BPWM_T::MSKEN: MSKEN0 Position        */
N#define BPWM_MSKEN_MSKEN0_Msk           (0x1ul << BPWM_MSKEN_MSKEN0_Pos)                  /*!< BPWM_T::MSKEN: MSKEN0 Mask            */
N
N#define BPWM_MSKEN_MSKEN1_Pos           (1)                                               /*!< BPWM_T::MSKEN: MSKEN1 Position        */
N#define BPWM_MSKEN_MSKEN1_Msk           (0x1ul << BPWM_MSKEN_MSKEN1_Pos)                  /*!< BPWM_T::MSKEN: MSKEN1 Mask            */
N
N#define BPWM_MSKEN_MSKEN2_Pos           (2)                                               /*!< BPWM_T::MSKEN: MSKEN2 Position        */
N#define BPWM_MSKEN_MSKEN2_Msk           (0x1ul << BPWM_MSKEN_MSKEN2_Pos)                  /*!< BPWM_T::MSKEN: MSKEN2 Mask            */
N
N#define BPWM_MSKEN_MSKEN3_Pos           (3)                                               /*!< BPWM_T::MSKEN: MSKEN3 Position        */
N#define BPWM_MSKEN_MSKEN3_Msk           (0x1ul << BPWM_MSKEN_MSKEN3_Pos)                  /*!< BPWM_T::MSKEN: MSKEN3 Mask            */
N
N#define BPWM_MSKEN_MSKEN4_Pos           (4)                                               /*!< BPWM_T::MSKEN: MSKEN4 Position        */
N#define BPWM_MSKEN_MSKEN4_Msk           (0x1ul << BPWM_MSKEN_MSKEN4_Pos)                  /*!< BPWM_T::MSKEN: MSKEN4 Mask            */
N
N#define BPWM_MSKEN_MSKEN5_Pos           (5)                                               /*!< BPWM_T::MSKEN: MSKEN5 Position        */
N#define BPWM_MSKEN_MSKEN5_Msk           (0x1ul << BPWM_MSKEN_MSKEN5_Pos)                  /*!< BPWM_T::MSKEN: MSKEN5 Mask            */
N
N#define BPWM_MSK_MSKDAT0_Pos            (0)                                               /*!< BPWM_T::MSK: MSKDAT0 Position         */
N#define BPWM_MSK_MSKDAT0_Msk            (0x1ul << BPWM_MSK_MSKDAT0_Pos)                   /*!< BPWM_T::MSK: MSKDAT0 Mask             */
N
N#define BPWM_MSK_MSKDAT1_Pos            (1)                                               /*!< BPWM_T::MSK: MSKDAT1 Position         */
N#define BPWM_MSK_MSKDAT1_Msk            (0x1ul << BPWM_MSK_MSKDAT1_Pos)                   /*!< BPWM_T::MSK: MSKDAT1 Mask             */
N
N#define BPWM_MSK_MSKDAT2_Pos            (2)                                               /*!< BPWM_T::MSK: MSKDAT2 Position         */
N#define BPWM_MSK_MSKDAT2_Msk            (0x1ul << BPWM_MSK_MSKDAT2_Pos)                   /*!< BPWM_T::MSK: MSKDAT2 Mask             */
N
N#define BPWM_MSK_MSKDAT3_Pos            (3)                                               /*!< BPWM_T::MSK: MSKDAT3 Position         */
N#define BPWM_MSK_MSKDAT3_Msk            (0x1ul << BPWM_MSK_MSKDAT3_Pos)                   /*!< BPWM_T::MSK: MSKDAT3 Mask             */
N
N#define BPWM_MSK_MSKDAT4_Pos            (4)                                               /*!< BPWM_T::MSK: MSKDAT4 Position         */
N#define BPWM_MSK_MSKDAT4_Msk            (0x1ul << BPWM_MSK_MSKDAT4_Pos)                   /*!< BPWM_T::MSK: MSKDAT4 Mask             */
N
N#define BPWM_MSK_MSKDAT5_Pos            (5)                                               /*!< BPWM_T::MSK: MSKDAT5 Position         */
N#define BPWM_MSK_MSKDAT5_Msk            (0x1ul << BPWM_MSK_MSKDAT5_Pos)                   /*!< BPWM_T::MSK: MSKDAT5 Mask             */
N
N#define BPWM_POLCTL_PINV0_Pos           (0)                                               /*!< BPWM_T::POLCTL: PINV0 Position        */
N#define BPWM_POLCTL_PINV0_Msk           (0x1ul << BPWM_POLCTL_PINV0_Pos)                  /*!< BPWM_T::POLCTL: PINV0 Mask            */
N
N#define BPWM_POLCTL_PINV1_Pos           (1)                                               /*!< BPWM_T::POLCTL: PINV1 Position        */
N#define BPWM_POLCTL_PINV1_Msk           (0x1ul << BPWM_POLCTL_PINV1_Pos)                  /*!< BPWM_T::POLCTL: PINV1 Mask            */
N
N#define BPWM_POLCTL_PINV2_Pos           (2)                                               /*!< BPWM_T::POLCTL: PINV2 Position        */
N#define BPWM_POLCTL_PINV2_Msk           (0x1ul << BPWM_POLCTL_PINV2_Pos)                  /*!< BPWM_T::POLCTL: PINV2 Mask            */
N
N#define BPWM_POLCTL_PINV3_Pos           (3)                                               /*!< BPWM_T::POLCTL: PINV3 Position        */
N#define BPWM_POLCTL_PINV3_Msk           (0x1ul << BPWM_POLCTL_PINV3_Pos)                  /*!< BPWM_T::POLCTL: PINV3 Mask            */
N
N#define BPWM_POLCTL_PINV4_Pos           (4)                                               /*!< BPWM_T::POLCTL: PINV4 Position        */
N#define BPWM_POLCTL_PINV4_Msk           (0x1ul << BPWM_POLCTL_PINV4_Pos)                  /*!< BPWM_T::POLCTL: PINV4 Mask            */
N
N#define BPWM_POLCTL_PINV5_Pos           (5)                                               /*!< BPWM_T::POLCTL: PINV5 Position        */
N#define BPWM_POLCTL_PINV5_Msk           (0x1ul << BPWM_POLCTL_PINV5_Pos)                  /*!< BPWM_T::POLCTL: PINV5 Mask            */
N
N#define BPWM_POEN_POEN0_Pos             (0)                                               /*!< BPWM_T::POEN: POEN0 Position          */
N#define BPWM_POEN_POEN0_Msk             (0x1ul << BPWM_POEN_POEN0_Pos)                    /*!< BPWM_T::POEN: POEN0 Mask              */
N
N#define BPWM_POEN_POEN1_Pos             (1)                                               /*!< BPWM_T::POEN: POEN1 Position          */
N#define BPWM_POEN_POEN1_Msk             (0x1ul << BPWM_POEN_POEN1_Pos)                    /*!< BPWM_T::POEN: POEN1 Mask              */
N
N#define BPWM_POEN_POEN2_Pos             (2)                                               /*!< BPWM_T::POEN: POEN2 Position          */
N#define BPWM_POEN_POEN2_Msk             (0x1ul << BPWM_POEN_POEN2_Pos)                    /*!< BPWM_T::POEN: POEN2 Mask              */
N
N#define BPWM_POEN_POEN3_Pos             (3)                                               /*!< BPWM_T::POEN: POEN3 Position          */
N#define BPWM_POEN_POEN3_Msk             (0x1ul << BPWM_POEN_POEN3_Pos)                    /*!< BPWM_T::POEN: POEN3 Mask              */
N
N#define BPWM_POEN_POEN4_Pos             (4)                                               /*!< BPWM_T::POEN: POEN4 Position          */
N#define BPWM_POEN_POEN4_Msk             (0x1ul << BPWM_POEN_POEN4_Pos)                    /*!< BPWM_T::POEN: POEN4 Mask              */
N
N#define BPWM_POEN_POEN5_Pos             (5)                                               /*!< BPWM_T::POEN: POEN5 Position          */
N#define BPWM_POEN_POEN5_Msk             (0x1ul << BPWM_POEN_POEN5_Pos)                    /*!< BPWM_T::POEN: POEN5 Mask              */
N
N#define BPWM_INTEN_ZIEN0_Pos            (0)                                               /*!< BPWM_T::INTEN: ZIEN0 Position         */
N#define BPWM_INTEN_ZIEN0_Msk            (0x1ul << BPWM_INTEN_ZIEN0_Pos)                   /*!< BPWM_T::INTEN: ZIEN0 Mask             */
N
N#define BPWM_INTEN_PIEN0_Pos            (8)                                               /*!< BPWM_T::INTEN: PIEN0 Position         */
N#define BPWM_INTEN_PIEN0_Msk            (0x1ul << BPWM_INTEN_PIEN0_Pos)                   /*!< BPWM_T::INTEN: PIEN0 Mask             */
N
N#define BPWM_INTEN_CMPUIEN0_Pos         (16)                                              /*!< BPWM_T::INTEN: CMPUIEN0 Position      */
N#define BPWM_INTEN_CMPUIEN0_Msk         (0x1ul << BPWM_INTEN_CMPUIEN0_Pos)                /*!< BPWM_T::INTEN: CMPUIEN0 Mask          */
N
N#define BPWM_INTEN_CMPUIEN1_Pos         (17)                                              /*!< BPWM_T::INTEN: CMPUIEN1 Position      */
N#define BPWM_INTEN_CMPUIEN1_Msk         (0x1ul << BPWM_INTEN_CMPUIEN1_Pos)                /*!< BPWM_T::INTEN: CMPUIEN1 Mask          */
N
N#define BPWM_INTEN_CMPUIEN2_Pos         (18)                                              /*!< BPWM_T::INTEN: CMPUIEN2 Position      */
N#define BPWM_INTEN_CMPUIEN2_Msk         (0x1ul << BPWM_INTEN_CMPUIEN2_Pos)                /*!< BPWM_T::INTEN: CMPUIEN2 Mask          */
N
N#define BPWM_INTEN_CMPUIEN3_Pos         (19)                                              /*!< BPWM_T::INTEN: CMPUIEN3 Position      */
N#define BPWM_INTEN_CMPUIEN3_Msk         (0x1ul << BPWM_INTEN_CMPUIEN3_Pos)                /*!< BPWM_T::INTEN: CMPUIEN3 Mask          */
N
N#define BPWM_INTEN_CMPUIEN4_Pos         (20)                                              /*!< BPWM_T::INTEN: CMPUIEN4 Position      */
N#define BPWM_INTEN_CMPUIEN4_Msk         (0x1ul << BPWM_INTEN_CMPUIEN4_Pos)                /*!< BPWM_T::INTEN: CMPUIEN4 Mask          */
N
N#define BPWM_INTEN_CMPUIEN5_Pos         (21)                                              /*!< BPWM_T::INTEN: CMPUIEN5 Position      */
N#define BPWM_INTEN_CMPUIEN5_Msk         (0x1ul << BPWM_INTEN_CMPUIEN5_Pos)                /*!< BPWM_T::INTEN: CMPUIEN5 Mask          */
N
N#define BPWM_INTEN_CMPDIEN0_Pos         (24)                                              /*!< BPWM_T::INTEN: CMPDIEN0 Position      */
N#define BPWM_INTEN_CMPDIEN0_Msk         (0x1ul << BPWM_INTEN_CMPDIEN0_Pos)                /*!< BPWM_T::INTEN: CMPDIEN0 Mask          */
N
N#define BPWM_INTEN_CMPDIEN1_Pos         (25)                                              /*!< BPWM_T::INTEN: CMPDIEN1 Position      */
N#define BPWM_INTEN_CMPDIEN1_Msk         (0x1ul << BPWM_INTEN_CMPDIEN1_Pos)                /*!< BPWM_T::INTEN: CMPDIEN1 Mask          */
N
N#define BPWM_INTEN_CMPDIEN2_Pos         (26)                                              /*!< BPWM_T::INTEN: CMPDIEN2 Position      */
N#define BPWM_INTEN_CMPDIEN2_Msk         (0x1ul << BPWM_INTEN_CMPDIEN2_Pos)                /*!< BPWM_T::INTEN: CMPDIEN2 Mask          */
N
N#define BPWM_INTEN_CMPDIEN3_Pos         (27)                                              /*!< BPWM_T::INTEN: CMPDIEN3 Position      */
N#define BPWM_INTEN_CMPDIEN3_Msk         (0x1ul << BPWM_INTEN_CMPDIEN3_Pos)                /*!< BPWM_T::INTEN: CMPDIEN3 Mask          */
N
N#define BPWM_INTEN_CMPDIEN4_Pos         (28)                                              /*!< BPWM_T::INTEN: CMPDIEN4 Position      */
N#define BPWM_INTEN_CMPDIEN4_Msk         (0x1ul << BPWM_INTEN_CMPDIEN4_Pos)                /*!< BPWM_T::INTEN: CMPDIEN4 Mask          */
N
N#define BPWM_INTEN_CMPDIEN5_Pos         (29)                                              /*!< BPWM_T::INTEN: CMPDIEN5 Position      */
N#define BPWM_INTEN_CMPDIEN5_Msk         (0x1ul << BPWM_INTEN_CMPDIEN5_Pos)                /*!< BPWM_T::INTEN: CMPDIEN5 Mask          */
N
N#define BPWM_INTSTS_ZIF0_Pos            (0)                                               /*!< BPWM_T::INTSTS: ZIF0 Position         */
N#define BPWM_INTSTS_ZIF0_Msk            (0x1ul << BPWM_INTSTS_ZIF0_Pos)                   /*!< BPWM_T::INTSTS: ZIF0 Mask             */
N
N#define BPWM_INTSTS_PIF0_Pos            (8)                                               /*!< BPWM_T::INTSTS: PIF0 Position         */
N#define BPWM_INTSTS_PIF0_Msk            (0x1ul << BPWM_INTSTS_PIF0_Pos)                   /*!< BPWM_T::INTSTS: PIF0 Mask             */
N
N#define BPWM_INTSTS_CMPUIF0_Pos         (16)                                              /*!< BPWM_T::INTSTS: CMPUIF0 Position      */
N#define BPWM_INTSTS_CMPUIF0_Msk         (0x1ul << BPWM_INTSTS_CMPUIF0_Pos)                /*!< BPWM_T::INTSTS: CMPUIF0 Mask          */
N
N#define BPWM_INTSTS_CMPUIF1_Pos         (17)                                              /*!< BPWM_T::INTSTS: CMPUIF1 Position      */
N#define BPWM_INTSTS_CMPUIF1_Msk         (0x1ul << BPWM_INTSTS_CMPUIF1_Pos)                /*!< BPWM_T::INTSTS: CMPUIF1 Mask          */
N
N#define BPWM_INTSTS_CMPUIF2_Pos         (18)                                              /*!< BPWM_T::INTSTS: CMPUIF2 Position      */
N#define BPWM_INTSTS_CMPUIF2_Msk         (0x1ul << BPWM_INTSTS_CMPUIF2_Pos)                /*!< BPWM_T::INTSTS: CMPUIF2 Mask          */
N
N#define BPWM_INTSTS_CMPUIF3_Pos         (19)                                              /*!< BPWM_T::INTSTS: CMPUIF3 Position      */
N#define BPWM_INTSTS_CMPUIF3_Msk         (0x1ul << BPWM_INTSTS_CMPUIF3_Pos)                /*!< BPWM_T::INTSTS: CMPUIF3 Mask          */
N
N#define BPWM_INTSTS_CMPUIF4_Pos         (20)                                              /*!< BPWM_T::INTSTS: CMPUIF4 Position      */
N#define BPWM_INTSTS_CMPUIF4_Msk         (0x1ul << BPWM_INTSTS_CMPUIF4_Pos)                /*!< BPWM_T::INTSTS: CMPUIF4 Mask          */
N
N#define BPWM_INTSTS_CMPUIF5_Pos         (21)                                              /*!< BPWM_T::INTSTS: CMPUIF5 Position      */
N#define BPWM_INTSTS_CMPUIF5_Msk         (0x1ul << BPWM_INTSTS_CMPUIF5_Pos)                /*!< BPWM_T::INTSTS: CMPUIF5 Mask          */
N
N#define BPWM_INTSTS_CMPDIF0_Pos         (24)                                              /*!< BPWM_T::INTSTS: CMPDIF0 Position      */
N#define BPWM_INTSTS_CMPDIF0_Msk         (0x1ul << BPWM_INTSTS_CMPDIF0_Pos)                /*!< BPWM_T::INTSTS: CMPDIF0 Mask          */
N
N#define BPWM_INTSTS_CMPDIF1_Pos         (25)                                              /*!< BPWM_T::INTSTS: CMPDIF1 Position      */
N#define BPWM_INTSTS_CMPDIF1_Msk         (0x1ul << BPWM_INTSTS_CMPDIF1_Pos)                /*!< BPWM_T::INTSTS: CMPDIF1 Mask          */
N
N#define BPWM_INTSTS_CMPDIF2_Pos         (26)                                              /*!< BPWM_T::INTSTS: CMPDIF2 Position      */
N#define BPWM_INTSTS_CMPDIF2_Msk         (0x1ul << BPWM_INTSTS_CMPDIF2_Pos)                /*!< BPWM_T::INTSTS: CMPDIF2 Mask          */
N
N#define BPWM_INTSTS_CMPDIF3_Pos         (27)                                              /*!< BPWM_T::INTSTS: CMPDIF3 Position      */
N#define BPWM_INTSTS_CMPDIF3_Msk         (0x1ul << BPWM_INTSTS_CMPDIF3_Pos)                /*!< BPWM_T::INTSTS: CMPDIF3 Mask          */
N
N#define BPWM_INTSTS_CMPDIF4_Pos         (28)                                              /*!< BPWM_T::INTSTS: CMPDIF4 Position      */
N#define BPWM_INTSTS_CMPDIF4_Msk         (0x1ul << BPWM_INTSTS_CMPDIF4_Pos)                /*!< BPWM_T::INTSTS: CMPDIF4 Mask          */
N
N#define BPWM_INTSTS_CMPDIF5_Pos         (29)                                              /*!< BPWM_T::INTSTS: CMPDIF5 Position      */
N#define BPWM_INTSTS_CMPDIF5_Msk         (0x1ul << BPWM_INTSTS_CMPDIF5_Pos)                /*!< BPWM_T::INTSTS: CMPDIF5 Mask          */
N
N#define BPWM_EADCTS0_TRGSEL0_Pos        (0)                                               /*!< BPWM_T::EADCTS0: TRGSEL0 Position     */
N#define BPWM_EADCTS0_TRGSEL0_Msk        (0xful << BPWM_EADCTS0_TRGSEL0_Pos)               /*!< BPWM_T::EADCTS0: TRGSEL0 Mask         */
N
N#define BPWM_EADCTS0_TRGEN0_Pos         (7)                                               /*!< BPWM_T::EADCTS0: TRGEN0 Position      */
N#define BPWM_EADCTS0_TRGEN0_Msk         (0x1ul << BPWM_EADCTS0_TRGEN0_Pos)                /*!< BPWM_T::EADCTS0: TRGEN0 Mask          */
N
N#define BPWM_EADCTS0_TRGSEL1_Pos        (8)                                               /*!< BPWM_T::EADCTS0: TRGSEL1 Position     */
N#define BPWM_EADCTS0_TRGSEL1_Msk        (0xful << BPWM_EADCTS0_TRGSEL1_Pos)               /*!< BPWM_T::EADCTS0: TRGSEL1 Mask         */
N
N#define BPWM_EADCTS0_TRGEN1_Pos         (15)                                              /*!< BPWM_T::EADCTS0: TRGEN1 Position      */
N#define BPWM_EADCTS0_TRGEN1_Msk         (0x1ul << BPWM_EADCTS0_TRGEN1_Pos)                /*!< BPWM_T::EADCTS0: TRGEN1 Mask          */
N
N#define BPWM_EADCTS0_TRGSEL2_Pos        (16)                                              /*!< BPWM_T::EADCTS0: TRGSEL2 Position     */
N#define BPWM_EADCTS0_TRGSEL2_Msk        (0xful << BPWM_EADCTS0_TRGSEL2_Pos)               /*!< BPWM_T::EADCTS0: TRGSEL2 Mask         */
N
N#define BPWM_EADCTS0_TRGEN2_Pos         (23)                                              /*!< BPWM_T::EADCTS0: TRGEN2 Position      */
N#define BPWM_EADCTS0_TRGEN2_Msk         (0x1ul << BPWM_EADCTS0_TRGEN2_Pos)                /*!< BPWM_T::EADCTS0: TRGEN2 Mask          */
N
N#define BPWM_EADCTS0_TRGSEL3_Pos        (24)                                              /*!< BPWM_T::EADCTS0: TRGSEL3 Position     */
N#define BPWM_EADCTS0_TRGSEL3_Msk        (0xful << BPWM_EADCTS0_TRGSEL3_Pos)               /*!< BPWM_T::EADCTS0: TRGSEL3 Mask         */
N
N#define BPWM_EADCTS0_TRGEN3_Pos         (31)                                              /*!< BPWM_T::EADCTS0: TRGEN3 Position      */
N#define BPWM_EADCTS0_TRGEN3_Msk         (0x1ul << BPWM_EADCTS0_TRGEN3_Pos)                /*!< BPWM_T::EADCTS0: TRGEN3 Mask          */
N
N#define BPWM_EADCTS1_TRGSEL4_Pos        (0)                                               /*!< BPWM_T::EADCTS1: TRGSEL4 Position     */
N#define BPWM_EADCTS1_TRGSEL4_Msk        (0xful << BPWM_EADCTS1_TRGSEL4_Pos)               /*!< BPWM_T::EADCTS1: TRGSEL4 Mask         */
N
N#define BPWM_EADCTS1_TRGEN4_Pos         (7)                                               /*!< BPWM_T::EADCTS1: TRGEN4 Position      */
N#define BPWM_EADCTS1_TRGEN4_Msk         (0x1ul << BPWM_EADCTS1_TRGEN4_Pos)                /*!< BPWM_T::EADCTS1: TRGEN4 Mask          */
N
N#define BPWM_EADCTS1_TRGSEL5_Pos        (8)                                               /*!< BPWM_T::EADCTS1: TRGSEL5 Position     */
N#define BPWM_EADCTS1_TRGSEL5_Msk        (0xful << BPWM_EADCTS1_TRGSEL5_Pos)               /*!< BPWM_T::EADCTS1: TRGSEL5 Mask         */
N
N#define BPWM_EADCTS1_TRGEN5_Pos         (15)                                              /*!< BPWM_T::EADCTS1: TRGEN5 Position      */
N#define BPWM_EADCTS1_TRGEN5_Msk         (0x1ul << BPWM_EADCTS1_TRGEN5_Pos)                /*!< BPWM_T::EADCTS1: TRGEN5 Mask          */
N
N#define BPWM_SSCTL_SSEN0_Pos            (0)                                               /*!< BPWM_T::SSCTL: SSEN0 Position         */
N#define BPWM_SSCTL_SSEN0_Msk            (0x1ul << BPWM_SSCTL_SSEN0_Pos)                   /*!< BPWM_T::SSCTL: SSEN0 Mask             */
N
N#define BPWM_SSCTL_SSRC_Pos             (8)                                               /*!< BPWM_T::SSCTL: SSRC Position          */
N#define BPWM_SSCTL_SSRC_Msk             (0x3ul << BPWM_SSCTL_SSRC_Pos)                    /*!< BPWM_T::SSCTL: SSRC Mask              */
N
N#define BPWM_SSTRG_CNTSEN_Pos           (0)                                               /*!< BPWM_T::SSTRG: CNTSEN Position        */
N#define BPWM_SSTRG_CNTSEN_Msk           (0x1ul << BPWM_SSTRG_CNTSEN_Pos)                  /*!< BPWM_T::SSTRG: CNTSEN Mask            */
N
N#define BPWM_STATUS_CNTMAX0_Pos         (0)                                               /*!< BPWM_T::STATUS: CNTMAX0 Position      */
N#define BPWM_STATUS_CNTMAX0_Msk         (0x1ul << BPWM_STATUS_CNTMAX0_Pos)                /*!< BPWM_T::STATUS: CNTMAX0 Mask          */
N
N#define BPWM_STATUS_EADCTRG0_Pos        (16)                                              /*!< BPWM_T::STATUS: EADCTRG0 Position     */
N#define BPWM_STATUS_EADCTRG0_Msk        (0x1ul << BPWM_STATUS_EADCTRG0_Pos)               /*!< BPWM_T::STATUS: EADCTRG0 Mask         */
N
N#define BPWM_STATUS_EADCTRG1_Pos        (17)                                              /*!< BPWM_T::STATUS: EADCTRG1 Position     */
N#define BPWM_STATUS_EADCTRG1_Msk        (0x1ul << BPWM_STATUS_EADCTRG1_Pos)               /*!< BPWM_T::STATUS: EADCTRG1 Mask         */
N
N#define BPWM_STATUS_EADCTRG2_Pos        (18)                                              /*!< BPWM_T::STATUS: EADCTRG2 Position     */
N#define BPWM_STATUS_EADCTRG2_Msk        (0x1ul << BPWM_STATUS_EADCTRG2_Pos)               /*!< BPWM_T::STATUS: EADCTRG2 Mask         */
N
N#define BPWM_STATUS_EADCTRG3_Pos        (19)                                              /*!< BPWM_T::STATUS: EADCTRG3 Position     */
N#define BPWM_STATUS_EADCTRG3_Msk        (0x1ul << BPWM_STATUS_EADCTRG3_Pos)               /*!< BPWM_T::STATUS: EADCTRG3 Mask         */
N
N#define BPWM_STATUS_EADCTRG4_Pos        (20)                                              /*!< BPWM_T::STATUS: EADCTRG4 Position     */
N#define BPWM_STATUS_EADCTRG4_Msk        (0x1ul << BPWM_STATUS_EADCTRG4_Pos)               /*!< BPWM_T::STATUS: EADCTRG4 Mask         */
N
N#define BPWM_STATUS_EADCTRG5_Pos        (21)                                              /*!< BPWM_T::STATUS: EADCTRG5 Position     */
N#define BPWM_STATUS_EADCTRG5_Msk        (0x1ul << BPWM_STATUS_EADCTRG5_Pos)               /*!< BPWM_T::STATUS: EADCTRG5 Mask         */
N
N#define BPWM_CAPINEN_CAPINEN0_Pos       (0)                                               /*!< BPWM_T::CAPINEN: CAPINEN0 Position    */
N#define BPWM_CAPINEN_CAPINEN0_Msk       (0x1ul << BPWM_CAPINEN_CAPINEN0_Pos)              /*!< BPWM_T::CAPINEN: CAPINEN0 Mask        */
N
N#define BPWM_CAPINEN_CAPINEN1_Pos       (1)                                               /*!< BPWM_T::CAPINEN: CAPINEN1 Position    */
N#define BPWM_CAPINEN_CAPINEN1_Msk       (0x1ul << BPWM_CAPINEN_CAPINEN1_Pos)              /*!< BPWM_T::CAPINEN: CAPINEN1 Mask        */
N
N#define BPWM_CAPINEN_CAPINEN2_Pos       (2)                                               /*!< BPWM_T::CAPINEN: CAPINEN2 Position    */
N#define BPWM_CAPINEN_CAPINEN2_Msk       (0x1ul << BPWM_CAPINEN_CAPINEN2_Pos)              /*!< BPWM_T::CAPINEN: CAPINEN2 Mask        */
N
N#define BPWM_CAPINEN_CAPINEN3_Pos       (3)                                               /*!< BPWM_T::CAPINEN: CAPINEN3 Position    */
N#define BPWM_CAPINEN_CAPINEN3_Msk       (0x1ul << BPWM_CAPINEN_CAPINEN3_Pos)              /*!< BPWM_T::CAPINEN: CAPINEN3 Mask        */
N
N#define BPWM_CAPINEN_CAPINEN4_Pos       (4)                                               /*!< BPWM_T::CAPINEN: CAPINEN4 Position    */
N#define BPWM_CAPINEN_CAPINEN4_Msk       (0x1ul << BPWM_CAPINEN_CAPINEN4_Pos)              /*!< BPWM_T::CAPINEN: CAPINEN4 Mask        */
N
N#define BPWM_CAPINEN_CAPINEN5_Pos       (5)                                               /*!< BPWM_T::CAPINEN: CAPINEN5 Position    */
N#define BPWM_CAPINEN_CAPINEN5_Msk       (0x1ul << BPWM_CAPINEN_CAPINEN5_Pos)              /*!< BPWM_T::CAPINEN: CAPINEN5 Mask        */
N
N#define BPWM_CAPCTL_CAPEN0_Pos          (0)                                               /*!< BPWM_T::CAPCTL: CAPEN0 Position       */
N#define BPWM_CAPCTL_CAPEN0_Msk          (0x1ul << BPWM_CAPCTL_CAPEN0_Pos)                 /*!< BPWM_T::CAPCTL: CAPEN0 Mask           */
N
N#define BPWM_CAPCTL_CAPEN1_Pos          (1)                                               /*!< BPWM_T::CAPCTL: CAPEN1 Position       */
N#define BPWM_CAPCTL_CAPEN1_Msk          (0x1ul << BPWM_CAPCTL_CAPEN1_Pos)                 /*!< BPWM_T::CAPCTL: CAPEN1 Mask           */
N
N#define BPWM_CAPCTL_CAPEN2_Pos          (2)                                               /*!< BPWM_T::CAPCTL: CAPEN2 Position       */
N#define BPWM_CAPCTL_CAPEN2_Msk          (0x1ul << BPWM_CAPCTL_CAPEN2_Pos)                 /*!< BPWM_T::CAPCTL: CAPEN2 Mask           */
N
N#define BPWM_CAPCTL_CAPEN3_Pos          (3)                                               /*!< BPWM_T::CAPCTL: CAPEN3 Position       */
N#define BPWM_CAPCTL_CAPEN3_Msk          (0x1ul << BPWM_CAPCTL_CAPEN3_Pos)                 /*!< BPWM_T::CAPCTL: CAPEN3 Mask           */
N
N#define BPWM_CAPCTL_CAPEN4_Pos          (4)                                               /*!< BPWM_T::CAPCTL: CAPEN4 Position       */
N#define BPWM_CAPCTL_CAPEN4_Msk          (0x1ul << BPWM_CAPCTL_CAPEN4_Pos)                 /*!< BPWM_T::CAPCTL: CAPEN4 Mask           */
N
N#define BPWM_CAPCTL_CAPEN5_Pos          (5)                                               /*!< BPWM_T::CAPCTL: CAPEN5 Position       */
N#define BPWM_CAPCTL_CAPEN5_Msk          (0x1ul << BPWM_CAPCTL_CAPEN5_Pos)                 /*!< BPWM_T::CAPCTL: CAPEN5 Mask           */
N
N#define BPWM_CAPCTL_CAPINV0_Pos         (8)                                               /*!< BPWM_T::CAPCTL: CAPINV0 Position      */
N#define BPWM_CAPCTL_CAPINV0_Msk         (0x1ul << BPWM_CAPCTL_CAPINV0_Pos)                /*!< BPWM_T::CAPCTL: CAPINV0 Mask          */
N
N#define BPWM_CAPCTL_CAPINV1_Pos         (9)                                               /*!< BPWM_T::CAPCTL: CAPINV1 Position      */
N#define BPWM_CAPCTL_CAPINV1_Msk         (0x1ul << BPWM_CAPCTL_CAPINV1_Pos)                /*!< BPWM_T::CAPCTL: CAPINV1 Mask          */
N
N#define BPWM_CAPCTL_CAPINV2_Pos         (10)                                              /*!< BPWM_T::CAPCTL: CAPINV2 Position      */
N#define BPWM_CAPCTL_CAPINV2_Msk         (0x1ul << BPWM_CAPCTL_CAPINV2_Pos)                /*!< BPWM_T::CAPCTL: CAPINV2 Mask          */
N
N#define BPWM_CAPCTL_CAPINV3_Pos         (11)                                              /*!< BPWM_T::CAPCTL: CAPINV3 Position      */
N#define BPWM_CAPCTL_CAPINV3_Msk         (0x1ul << BPWM_CAPCTL_CAPINV3_Pos)                /*!< BPWM_T::CAPCTL: CAPINV3 Mask          */
N
N#define BPWM_CAPCTL_CAPINV4_Pos         (12)                                              /*!< BPWM_T::CAPCTL: CAPINV4 Position      */
N#define BPWM_CAPCTL_CAPINV4_Msk         (0x1ul << BPWM_CAPCTL_CAPINV4_Pos)                /*!< BPWM_T::CAPCTL: CAPINV4 Mask          */
N
N#define BPWM_CAPCTL_CAPINV5_Pos         (13)                                              /*!< BPWM_T::CAPCTL: CAPINV5 Position      */
N#define BPWM_CAPCTL_CAPINV5_Msk         (0x1ul << BPWM_CAPCTL_CAPINV5_Pos)                /*!< BPWM_T::CAPCTL: CAPINV5 Mask          */
N
N#define BPWM_CAPCTL_RCRLDEN0_Pos        (16)                                              /*!< BPWM_T::CAPCTL: RCRLDEN0 Position     */
N#define BPWM_CAPCTL_RCRLDEN0_Msk        (0x1ul << BPWM_CAPCTL_RCRLDEN0_Pos)               /*!< BPWM_T::CAPCTL: RCRLDEN0 Mask         */
N
N#define BPWM_CAPCTL_RCRLDEN1_Pos        (17)                                              /*!< BPWM_T::CAPCTL: RCRLDEN1 Position     */
N#define BPWM_CAPCTL_RCRLDEN1_Msk        (0x1ul << BPWM_CAPCTL_RCRLDEN1_Pos)               /*!< BPWM_T::CAPCTL: RCRLDEN1 Mask         */
N
N#define BPWM_CAPCTL_RCRLDEN2_Pos        (18)                                              /*!< BPWM_T::CAPCTL: RCRLDEN2 Position     */
N#define BPWM_CAPCTL_RCRLDEN2_Msk        (0x1ul << BPWM_CAPCTL_RCRLDEN2_Pos)               /*!< BPWM_T::CAPCTL: RCRLDEN2 Mask         */
N
N#define BPWM_CAPCTL_RCRLDEN3_Pos        (19)                                              /*!< BPWM_T::CAPCTL: RCRLDEN3 Position     */
N#define BPWM_CAPCTL_RCRLDEN3_Msk        (0x1ul << BPWM_CAPCTL_RCRLDEN3_Pos)               /*!< BPWM_T::CAPCTL: RCRLDEN3 Mask         */
N
N#define BPWM_CAPCTL_RCRLDEN4_Pos        (20)                                              /*!< BPWM_T::CAPCTL: RCRLDEN4 Position     */
N#define BPWM_CAPCTL_RCRLDEN4_Msk        (0x1ul << BPWM_CAPCTL_RCRLDEN4_Pos)               /*!< BPWM_T::CAPCTL: RCRLDEN4 Mask         */
N
N#define BPWM_CAPCTL_RCRLDEN5_Pos        (21)                                              /*!< BPWM_T::CAPCTL: RCRLDEN5 Position     */
N#define BPWM_CAPCTL_RCRLDEN5_Msk        (0x1ul << BPWM_CAPCTL_RCRLDEN5_Pos)               /*!< BPWM_T::CAPCTL: RCRLDEN5 Mask         */
N
N#define BPWM_CAPCTL_FCRLDEN0_Pos        (24)                                              /*!< BPWM_T::CAPCTL: FCRLDEN0 Position     */
N#define BPWM_CAPCTL_FCRLDEN0_Msk        (0x1ul << BPWM_CAPCTL_FCRLDEN0_Pos)               /*!< BPWM_T::CAPCTL: FCRLDEN0 Mask         */
N
N#define BPWM_CAPCTL_FCRLDEN1_Pos        (25)                                              /*!< BPWM_T::CAPCTL: FCRLDEN1 Position     */
N#define BPWM_CAPCTL_FCRLDEN1_Msk        (0x1ul << BPWM_CAPCTL_FCRLDEN1_Pos)               /*!< BPWM_T::CAPCTL: FCRLDEN1 Mask         */
N
N#define BPWM_CAPCTL_FCRLDEN2_Pos        (26)                                              /*!< BPWM_T::CAPCTL: FCRLDEN2 Position     */
N#define BPWM_CAPCTL_FCRLDEN2_Msk        (0x1ul << BPWM_CAPCTL_FCRLDEN2_Pos)               /*!< BPWM_T::CAPCTL: FCRLDEN2 Mask         */
N
N#define BPWM_CAPCTL_FCRLDEN3_Pos        (27)                                              /*!< BPWM_T::CAPCTL: FCRLDEN3 Position     */
N#define BPWM_CAPCTL_FCRLDEN3_Msk        (0x1ul << BPWM_CAPCTL_FCRLDEN3_Pos)               /*!< BPWM_T::CAPCTL: FCRLDEN3 Mask         */
N
N#define BPWM_CAPCTL_FCRLDEN4_Pos        (28)                                              /*!< BPWM_T::CAPCTL: FCRLDEN4 Position     */
N#define BPWM_CAPCTL_FCRLDEN4_Msk        (0x1ul << BPWM_CAPCTL_FCRLDEN4_Pos)               /*!< BPWM_T::CAPCTL: FCRLDEN4 Mask         */
N
N#define BPWM_CAPCTL_FCRLDEN5_Pos        (29)                                              /*!< BPWM_T::CAPCTL: FCRLDEN5 Position     */
N#define BPWM_CAPCTL_FCRLDEN5_Msk        (0x1ul << BPWM_CAPCTL_FCRLDEN5_Pos)               /*!< BPWM_T::CAPCTL: FCRLDEN5 Mask         */
N
N#define BPWM_CAPSTS_CRIFOV0_Pos         (0)                                               /*!< BPWM_T::CAPSTS: CRIFOV0 Position      */
N#define BPWM_CAPSTS_CRIFOV0_Msk         (0x1ul << BPWM_CAPSTS_CRIFOV0_Pos)                /*!< BPWM_T::CAPSTS: CRIFOV0 Mask          */
N
N#define BPWM_CAPSTS_CRIFOV1_Pos         (1)                                               /*!< BPWM_T::CAPSTS: CRIFOV1 Position      */
N#define BPWM_CAPSTS_CRIFOV1_Msk         (0x1ul << BPWM_CAPSTS_CRIFOV1_Pos)                /*!< BPWM_T::CAPSTS: CRIFOV1 Mask          */
N
N#define BPWM_CAPSTS_CRIFOV2_Pos         (2)                                               /*!< BPWM_T::CAPSTS: CRIFOV2 Position      */
N#define BPWM_CAPSTS_CRIFOV2_Msk         (0x1ul << BPWM_CAPSTS_CRIFOV2_Pos)                /*!< BPWM_T::CAPSTS: CRIFOV2 Mask          */
N
N#define BPWM_CAPSTS_CRIFOV3_Pos         (3)                                               /*!< BPWM_T::CAPSTS: CRIFOV3 Position      */
N#define BPWM_CAPSTS_CRIFOV3_Msk         (0x1ul << BPWM_CAPSTS_CRIFOV3_Pos)                /*!< BPWM_T::CAPSTS: CRIFOV3 Mask          */
N
N#define BPWM_CAPSTS_CRIFOV4_Pos         (4)                                               /*!< BPWM_T::CAPSTS: CRIFOV4 Position      */
N#define BPWM_CAPSTS_CRIFOV4_Msk         (0x1ul << BPWM_CAPSTS_CRIFOV4_Pos)                /*!< BPWM_T::CAPSTS: CRIFOV4 Mask          */
N
N#define BPWM_CAPSTS_CRIFOV5_Pos         (5)                                               /*!< BPWM_T::CAPSTS: CRIFOV5 Position      */
N#define BPWM_CAPSTS_CRIFOV5_Msk         (0x1ul << BPWM_CAPSTS_CRIFOV5_Pos)                /*!< BPWM_T::CAPSTS: CRIFOV5 Mask          */
N
N#define BPWM_CAPSTS_CFIFOV0_Pos         (8)                                               /*!< BPWM_T::CAPSTS: CFIFOV0 Position      */
N#define BPWM_CAPSTS_CFIFOV0_Msk         (0x1ul << BPWM_CAPSTS_CFIFOV0_Pos)                /*!< BPWM_T::CAPSTS: CFIFOV0 Mask          */
N
N#define BPWM_CAPSTS_CFIFOV1_Pos         (9)                                               /*!< BPWM_T::CAPSTS: CFIFOV1 Position      */
N#define BPWM_CAPSTS_CFIFOV1_Msk         (0x1ul << BPWM_CAPSTS_CFIFOV1_Pos)                /*!< BPWM_T::CAPSTS: CFIFOV1 Mask          */
N
N#define BPWM_CAPSTS_CFIFOV2_Pos         (10)                                              /*!< BPWM_T::CAPSTS: CFIFOV2 Position      */
N#define BPWM_CAPSTS_CFIFOV2_Msk         (0x1ul << BPWM_CAPSTS_CFIFOV2_Pos)                /*!< BPWM_T::CAPSTS: CFIFOV2 Mask          */
N
N#define BPWM_CAPSTS_CFIFOV3_Pos         (11)                                              /*!< BPWM_T::CAPSTS: CFIFOV3 Position      */
N#define BPWM_CAPSTS_CFIFOV3_Msk         (0x1ul << BPWM_CAPSTS_CFIFOV3_Pos)                /*!< BPWM_T::CAPSTS: CFIFOV3 Mask          */
N
N#define BPWM_CAPSTS_CFIFOV4_Pos         (12)                                              /*!< BPWM_T::CAPSTS: CFIFOV4 Position      */
N#define BPWM_CAPSTS_CFIFOV4_Msk         (0x1ul << BPWM_CAPSTS_CFIFOV4_Pos)                /*!< BPWM_T::CAPSTS: CFIFOV4 Mask          */
N
N#define BPWM_CAPSTS_CFIFOV5_Pos         (13)                                              /*!< BPWM_T::CAPSTS: CFIFOV5 Position      */
N#define BPWM_CAPSTS_CFIFOV5_Msk         (0x1ul << BPWM_CAPSTS_CFIFOV5_Pos)                /*!< BPWM_T::CAPSTS: CFIFOV5 Mask          */
N
N#define BPWM_RCAPDAT_RCAPDAT_Pos        (0)                                               /*!< BPWM_T::RCAPDAT: RCAPDAT Position     */
N#define BPWM_RCAPDAT_RCAPDAT_Msk        (0xfffful << BPWM_RCAPDAT_RCAPDAT_Pos)            /*!< BPWM_T::RCAPDAT: RCAPDAT Mask         */
N
N#define BPWM_FCAPDAT_FCAPDAT_Pos        (0)                                               /*!< BPWM_T::FCAPDAT: FCAPDAT Position     */
N#define BPWM_FCAPDAT_FCAPDAT_Msk        (0xfffful << BPWM_FCAPDAT_FCAPDAT_Pos)            /*!< BPWM_T::FCAPDAT: FCAPDAT Mask         */
N
N#define BPWM_RCAPDAT0_RCAPDAT_Pos       (0)                                               /*!< BPWM_T::RCAPDAT0: RCAPDAT Position    */
N#define BPWM_RCAPDAT0_RCAPDAT_Msk       (0xfffful << BPWM_RCAPDAT0_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT0: RCAPDAT Mask        */
N
N#define BPWM_FCAPDAT0_FCAPDAT_Pos       (0)                                               /*!< BPWM_T::FCAPDAT0: FCAPDAT Position    */
N#define BPWM_FCAPDAT0_FCAPDAT_Msk       (0xfffful << BPWM_FCAPDAT0_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT0: FCAPDAT Mask        */
N
N#define BPWM_RCAPDAT1_RCAPDAT_Pos       (0)                                               /*!< BPWM_T::RCAPDAT1: RCAPDAT Position    */
N#define BPWM_RCAPDAT1_RCAPDAT_Msk       (0xfffful << BPWM_RCAPDAT1_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT1: RCAPDAT Mask        */
N
N#define BPWM_FCAPDAT1_FCAPDAT_Pos       (0)                                               /*!< BPWM_T::FCAPDAT1: FCAPDAT Position    */
N#define BPWM_FCAPDAT1_FCAPDAT_Msk       (0xfffful << BPWM_FCAPDAT1_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT1: FCAPDAT Mask        */
N
N#define BPWM_RCAPDAT2_RCAPDAT_Pos       (0)                                               /*!< BPWM_T::RCAPDAT2: RCAPDAT Position    */
N#define BPWM_RCAPDAT2_RCAPDAT_Msk       (0xfffful << BPWM_RCAPDAT2_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT2: RCAPDAT Mask        */
N
N#define BPWM_FCAPDAT2_FCAPDAT_Pos       (0)                                               /*!< BPWM_T::FCAPDAT2: FCAPDAT Position    */
N#define BPWM_FCAPDAT2_FCAPDAT_Msk       (0xfffful << BPWM_FCAPDAT2_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT2: FCAPDAT Mask        */
N
N#define BPWM_RCAPDAT3_RCAPDAT_Pos       (0)                                               /*!< BPWM_T::RCAPDAT3: RCAPDAT Position    */
N#define BPWM_RCAPDAT3_RCAPDAT_Msk       (0xfffful << BPWM_RCAPDAT3_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT3: RCAPDAT Mask        */
N
N#define BPWM_FCAPDAT3_FCAPDAT_Pos       (0)                                               /*!< BPWM_T::FCAPDAT3: FCAPDAT Position    */
N#define BPWM_FCAPDAT3_FCAPDAT_Msk       (0xfffful << BPWM_FCAPDAT3_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT3: FCAPDAT Mask        */
N
N#define BPWM_RCAPDAT4_RCAPDAT_Pos       (0)                                               /*!< BPWM_T::RCAPDAT4: RCAPDAT Position    */
N#define BPWM_RCAPDAT4_RCAPDAT_Msk       (0xfffful << BPWM_RCAPDAT4_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT4: RCAPDAT Mask        */
N
N#define BPWM_FCAPDAT4_FCAPDAT_Pos       (0)                                               /*!< BPWM_T::FCAPDAT4: FCAPDAT Position    */
N#define BPWM_FCAPDAT4_FCAPDAT_Msk       (0xfffful << BPWM_FCAPDAT4_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT4: FCAPDAT Mask        */
N
N#define BPWM_RCAPDAT5_RCAPDAT_Pos       (0)                                               /*!< BPWM_T::RCAPDAT5: RCAPDAT Position    */
N#define BPWM_RCAPDAT5_RCAPDAT_Msk       (0xfffful << BPWM_RCAPDAT5_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT5: RCAPDAT Mask        */
N
N#define BPWM_FCAPDAT5_FCAPDAT_Pos       (0)                                               /*!< BPWM_T::FCAPDAT5: FCAPDAT Position    */
N#define BPWM_FCAPDAT5_FCAPDAT_Msk       (0xfffful << BPWM_FCAPDAT5_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT5: FCAPDAT Mask        */
N
N#define BPWM_CAPIEN_CAPRIENn_Pos        (0)                                               /*!< BPWM_T::CAPIEN: CAPRIENn Position     */
N#define BPWM_CAPIEN_CAPRIENn_Msk        (0x3ful << BPWM_CAPIEN_CAPRIENn_Pos)              /*!< BPWM_T::CAPIEN: CAPRIENn Mask         */
N
N#define BPWM_CAPIEN_CAPFIENn_Pos        (8)                                               /*!< BPWM_T::CAPIEN: CAPFIENn Position     */
N#define BPWM_CAPIEN_CAPFIENn_Msk        (0x3ful << BPWM_CAPIEN_CAPFIENn_Pos)              /*!< BPWM_T::CAPIEN: CAPFIENn Mask         */
N
N#define BPWM_CAPIF_CAPRIF0_Pos          (0)                                               /*!< BPWM_T::CAPIF: CAPRIF0 Position       */
N#define BPWM_CAPIF_CAPRIF0_Msk          (0x1ul << BPWM_CAPIF_CAPRIF0_Pos)                 /*!< BPWM_T::CAPIF: CAPRIF0 Mask           */
N
N#define BPWM_CAPIF_CAPRIF1_Pos          (1)                                               /*!< BPWM_T::CAPIF: CAPRIF1 Position       */
N#define BPWM_CAPIF_CAPRIF1_Msk          (0x1ul << BPWM_CAPIF_CAPRIF1_Pos)                 /*!< BPWM_T::CAPIF: CAPRIF1 Mask           */
N
N#define BPWM_CAPIF_CAPRIF2_Pos          (2)                                               /*!< BPWM_T::CAPIF: CAPRIF2 Position       */
N#define BPWM_CAPIF_CAPRIF2_Msk          (0x1ul << BPWM_CAPIF_CAPRIF2_Pos)                 /*!< BPWM_T::CAPIF: CAPRIF2 Mask           */
N
N#define BPWM_CAPIF_CAPRIF3_Pos          (3)                                               /*!< BPWM_T::CAPIF: CAPRIF3 Position       */
N#define BPWM_CAPIF_CAPRIF3_Msk          (0x1ul << BPWM_CAPIF_CAPRIF3_Pos)                 /*!< BPWM_T::CAPIF: CAPRIF3 Mask           */
N
N#define BPWM_CAPIF_CAPRIF4_Pos          (4)                                               /*!< BPWM_T::CAPIF: CAPRIF4 Position       */
N#define BPWM_CAPIF_CAPRIF4_Msk          (0x1ul << BPWM_CAPIF_CAPRIF4_Pos)                 /*!< BPWM_T::CAPIF: CAPRIF4 Mask           */
N
N#define BPWM_CAPIF_CAPRIF5_Pos          (5)                                               /*!< BPWM_T::CAPIF: CAPRIF5 Position       */
N#define BPWM_CAPIF_CAPRIF5_Msk          (0x1ul << BPWM_CAPIF_CAPRIF5_Pos)                 /*!< BPWM_T::CAPIF: CAPRIF5 Mask           */
N
N#define BPWM_CAPIF_CAPFIF0_Pos          (8)                                               /*!< BPWM_T::CAPIF: CAPFIF0 Position       */
N#define BPWM_CAPIF_CAPFIF0_Msk          (0x1ul << BPWM_CAPIF_CAPFIF0_Pos)                 /*!< BPWM_T::CAPIF: CAPFIF0 Mask           */
N
N#define BPWM_CAPIF_CAPFIF1_Pos          (9)                                               /*!< BPWM_T::CAPIF: CAPFIF1 Position       */
N#define BPWM_CAPIF_CAPFIF1_Msk          (0x1ul << BPWM_CAPIF_CAPFIF1_Pos)                 /*!< BPWM_T::CAPIF: CAPFIF1 Mask           */
N
N#define BPWM_CAPIF_CAPFIF2_Pos          (10)                                              /*!< BPWM_T::CAPIF: CAPFIF2 Position       */
N#define BPWM_CAPIF_CAPFIF2_Msk          (0x1ul << BPWM_CAPIF_CAPFIF2_Pos)                 /*!< BPWM_T::CAPIF: CAPFIF2 Mask           */
N
N#define BPWM_CAPIF_CAPFIF3_Pos          (11)                                              /*!< BPWM_T::CAPIF: CAPFIF3 Position       */
N#define BPWM_CAPIF_CAPFIF3_Msk          (0x1ul << BPWM_CAPIF_CAPFIF3_Pos)                 /*!< BPWM_T::CAPIF: CAPFIF3 Mask           */
N
N#define BPWM_CAPIF_CAPFIF4_Pos          (12)                                              /*!< BPWM_T::CAPIF: CAPFIF4 Position       */
N#define BPWM_CAPIF_CAPFIF4_Msk          (0x1ul << BPWM_CAPIF_CAPFIF4_Pos)                 /*!< BPWM_T::CAPIF: CAPFIF4 Mask           */
N
N#define BPWM_CAPIF_CAPFIF5_Pos          (13)                                              /*!< BPWM_T::CAPIF: CAPFIF5 Position       */
N#define BPWM_CAPIF_CAPFIF5_Msk          (0x1ul << BPWM_CAPIF_CAPFIF5_Pos)                 /*!< BPWM_T::CAPIF: CAPFIF5 Mask           */
N
N#define BPWM_PBUF_PBUF_Pos              (0)                                               /*!< BPWM_T::PBUF: PBUF Position           */
N#define BPWM_PBUF_PBUF_Msk              (0xfffful << BPWM_PBUF_PBUF_Pos)                  /*!< BPWM_T::PBUF: PBUF Mask               */
N
N#define BPWM_CMPBUF_CMPBUF_Pos          (0)                                               /*!< BPWM_T::CMPBUF0: CMPBUF Position      */
N#define BPWM_CMPBUF_CMPBUF_Msk          (0xfffful << BPWM_CMPBUFn_CMPBUF_Pos)             /*!< BPWM_T::CMPBUF0: CMPBUF Mask          */
N
N#define BPWM_CMPBUF0_CMPBUF_Pos         (0)                                               /*!< BPWM_T::CMPBUF0: CMPBUF Position      */
N#define BPWM_CMPBUF0_CMPBUF_Msk         (0xfffful << BPWM_CMPBUF0_CMPBUF_Pos)             /*!< BPWM_T::CMPBUF0: CMPBUF Mask          */
N
N#define BPWM_CMPBUF1_CMPBUF_Pos         (0)                                               /*!< BPWM_T::CMPBUF1: CMPBUF Position      */
N#define BPWM_CMPBUF1_CMPBUF_Msk         (0xfffful << BPWM_CMPBUF1_CMPBUF_Pos)             /*!< BPWM_T::CMPBUF1: CMPBUF Mask          */
N
N#define BPWM_CMPBUF2_CMPBUF_Pos         (0)                                               /*!< BPWM_T::CMPBUF2: CMPBUF Position      */
N#define BPWM_CMPBUF2_CMPBUF_Msk         (0xfffful << BPWM_CMPBUF2_CMPBUF_Pos)             /*!< BPWM_T::CMPBUF2: CMPBUF Mask          */
N
N#define BPWM_CMPBUF3_CMPBUF_Pos         (0)                                               /*!< BPWM_T::CMPBUF3: CMPBUF Position      */
N#define BPWM_CMPBUF3_CMPBUF_Msk         (0xfffful << BPWM_CMPBUF3_CMPBUF_Pos)             /*!< BPWM_T::CMPBUF3: CMPBUF Mask          */
N
N#define BPWM_CMPBUF4_CMPBUF_Pos         (0)                                               /*!< BPWM_T::CMPBUF4: CMPBUF Position      */
N#define BPWM_CMPBUF4_CMPBUF_Msk         (0xfffful << BPWM_CMPBUF4_CMPBUF_Pos)             /*!< BPWM_T::CMPBUF4: CMPBUF Mask          */
N
N#define BPWM_CMPBUF5_CMPBUF_Pos         (0)                                               /*!< BPWM_T::CMPBUF5: CMPBUF Position      */
N#define BPWM_CMPBUF5_CMPBUF_Msk         (0xfffful << BPWM_CMPBUF5_CMPBUF_Pos)             /*!< BPWM_T::CMPBUF5: CMPBUF Mask          */
N
N/**@}*/ /* BPWM_CONST */
N/**@}*/ /* end of BPWM register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __BPWM_REG_H__ */
L 172 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "qspi_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\qspi_reg.h" 1
N/**************************************************************************//**
N * @file     qspi_reg.h
N * @version  V1.00
N * @brief    QSPI register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __QSPI_REG_H__
N#define __QSPI_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup QSPI Quad Serial Peripheral Interface Controller (QSPI)
N    Memory Mapped Structure for QSPI Controller
N@{ */
Ntypedef struct
N{
N
N
N    /**
N     * @var QSPI_T::CTL
N     * Offset: 0x00  QSPI Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SPIEN     |QSPI Transfer Control Enable Bit
N     * |        |          |In Master mode, the transfer will start when there is data in the FIFO buffer after this bit is set to 1.
N     * |        |          |In Slave mode, this device is ready to receive data when this bit is set to 1.
N     * |        |          |0 = Transfer control Disabled.
N     * |        |          |1 = Transfer control Enabled.
N     * |        |          |Note: Before changing the configurations of QSPIx_CTL, QSPIx_CLKDIV, QSPIx_SSCTL and QSPIx_FIFOCTL registers, user shall clear the SPIEN (QSPIx_CTL[0]) and confirm the SPIENSTS (QSPIx_STATUS[15]) is 0.
N     * |[1]     |RXNEG     |Receive on Negative Edge
N     * |        |          |0 = Received data input signal is latched on the rising edge of QSPI bus clock.
N     * |        |          |1 = Received data input signal is latched on the falling edge of QSPI bus clock.
N     * |[2]     |TXNEG     |Transmit on Negative Edge
N     * |        |          |0 = Transmitted data output signal is changed on the rising edge of QSPI bus clock.
N     * |        |          |1 = Transmitted data output signal is changed on the falling edge of QSPI bus clock.
N     * |[3]     |CLKPOL    |Clock Polarity
N     * |        |          |0 = QSPI bus clock is idle low.
N     * |        |          |1 = QSPI bus clock is idle high.
N     * |[7:4]   |SUSPITV   |Suspend Interval (Master Only)
N     * |        |          |The four bits provide configurable suspend interval between two successive transmit/receive transaction in a transfer.
N     * |        |          |The definition of the suspend interval is the interval between the last clock edge of the preceding transaction word and the first clock edge of the following transaction word.
N     * |        |          |The default value is 0x3.
N     * |        |          |The period of the suspend interval is obtained according to the following equation.
N     * |        |          |(SUSPITV[3:0] + 0.5) * period of QSPICLK clock cycle
N     * |        |          |Example:
N     * |        |          |SUSPITV = 0x0 .... 0.5 QSPICLK clock cycle.
N     * |        |          |SUSPITV = 0x1 .... 1.5 QSPICLK clock cycle.
N     * |        |          |.....
N     * |        |          |SUSPITV = 0xE .... 14.5 QSPICLK clock cycle.
N     * |        |          |SUSPITV = 0xF .... 15.5 QSPICLK clock cycle.
N     * |[12:8]  |DWIDTH    |Data Width
N     * |        |          |This field specifies how many bits can be transmitted / received in one transaction.
N     * |        |          |The minimum bit length is 8 bits and can up to 32 bits.
N     * |        |          |DWIDTH = 0x08 .... 8 bits.
N     * |        |          |DWIDTH = 0x09 .... 9 bits.
N     * |        |          |.....
N     * |        |          |DWIDTH = 0x1F .... 31 bits.
N     * |        |          |DWIDTH = 0x00 .... 32 bits.
N     * |[13]    |LSB       |Send LSB First
N     * |        |          |0 = The MSB, which bit of transmit/receive register depends on the setting of DWIDTH, is transmitted/received first.
N     * |        |          |1 = The LSB, bit 0 of the QSPI TX register, is sent first to the QSPI data output pin, and the first bit received from the QSPI data input pin will be put in the LSB position of the RX register (bit 0 of QSPI_RX).
N     * |[14]    |HALFDPX   |QSPI Half-duplex Transfer Enable Bit
N     * |        |          |This bit is used to select full-duplex or half-duplex for QSPI transfer.
N     * |        |          |The bit field DATDIR (QSPIx_CTL[20]) can be used to set the data direction in half-duplex transfer.
N     * |        |          |0 = QSPI operates in full-duplex transfer.
N     * |        |          |1 = QSPI operates in half-duplex transfer.
N     * |[15]    |RXONLY    |Receive-only Mode Enable Bit (Master Only)
N     * |        |          |This bit field is only available in Master mode.
N     * |        |          |In receive-only mode, QSPI Master will generate QSPI bus clock continuously for receiving data bit from QSPI slave device and assert the BUSY status.
N     * |        |          |0 = Receive-only mode Disabled.
N     * |        |          |1 = Receive-only mode Enabled.
N     * |[16]    |TWOBIT    |2-bit Transfer Mode Enable Bit
N     * |        |          |0 = 2-Bit Transfer mode Disabled.
N     * |        |          |1 = 2-Bit Transfer mode Enabled.
N     * |        |          |Note: When 2-Bit Transfer mode is enabled, the first serial transmitted bit data is from the first FIFO buffer data, and the 2nd serial transmitted bit data is from the second FIFO buffer data.
N     * |        |          |As the same as transmitted function, the first received bit data is stored into the first FIFO buffer and the 2nd received bit data is stored into the second FIFO buffer at the same time.
N     * |[17]    |UNITIEN   |Unit Transfer Interrupt Enable Bit
N     * |        |          |0 = QSPI unit transfer interrupt Disabled.
N     * |        |          |1 = QSPI unit transfer interrupt Enabled.
N     * |[18]    |SLAVE     |Slave Mode Control
N     * |        |          |0 = Master mode.
N     * |        |          |1 = Slave mode.
N     * |[19]    |REORDER   |Byte Reorder Function Enable Bit
N     * |        |          |0 = Byte Reorder function Disabled.
N     * |        |          |1 = Byte Reorder function Enabled.
N     * |        |          |A byte suspend interval will be inserted among each byte.
N     * |        |          |The period of the byte suspend interval depends on the setting of SUSPITV.
N     * |        |          |Note: Byte Reorder function is only available if DWIDTH is defined as 16, 24, and 32 bits.
N     * |[20]    |DATDIR    |Data Port Direction Control
N     * |        |          |This bit is used to select the data input/output direction in half-duplex transfer and Dual/Quad transfer.
N     * |        |          |0 = QSPI data is input direction.
N     * |        |          |1 = QSPI data is output direction.
N     * |[21]    |DUALIOEN  |Dual I/O Mode Enable Bit
N     * |        |          |0 = Dual I/O mode Disabled.
N     * |        |          |1 = Dual I/O mode Enabled.
N     * |[22]    |QUADIOEN  |Quad I/O Mode Enable Bit
N     * |        |          |0 = Quad I/O mode Disabled.
N     * |        |          |1 = Quad I/O mode Enabled.
N     * @var QSPI_T::CLKDIV
N     * Offset: 0x04  QSPI Clock Divider Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]   |DIVIDER   |Clock Divider
N     * |        |          |The value in this field is the frequency divider for generating the peripheral clock, fspi_eclk, and the QSPI bus clock of QSPI Master.
N     * |        |          |The frequency is obtained according to the following equation.
N     * |        |          |fspi_eclk = fspi_clock_src / (DIVIDER + 1)
N     * |        |          |where
N     * |        |          |fspi_clock_src is the peripheral clock source, which is defined in the clock control register, CLK_CLKSEL2.
N     * |        |          |Note: The time interval must be larger than or equal 8 peripheral clock cycles between releasing QSPI IP software reset and setting this clock divider register.
N     * @var QSPI_T::SSCTL
N     * Offset: 0x08  QSPI Slave Select Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SS        |Slave Selection Control (Master Only)
N     * |        |          |If AUTOSS bit is cleared to 0,
N     * |        |          |0 = set the QSPIx_SS line to inactive state.
N     * |        |          |1 = set the QSPIx_SS line to active state.
N     * |        |          |If the AUTOSS bit is set to 1,
N     * |        |          |0 = Keep the QSPIx_SS line at inactive state.
N     * |        |          |1 = QSPIx_SS line will be automatically driven to active state for the duration of data transfer, and will be driven to inactive state for the rest of the time.
N     * |        |          |The active state of QSPIx_SS is specified in SSACTPOL (QSPIx_SSCTL[2]).
N     * |[2]     |SSACTPOL  |Slave Selection Active Polarity
N     * |        |          |This bit defines the active polarity of slave selection signal (QSPIx_SS).
N     * |        |          |0 = The slave selection signal QSPIx_SS is active low.
N     * |        |          |1 = The slave selection signal QSPIx_SS is active high.
N     * |[3]     |AUTOSS    |Automatic Slave Selection Function Enable Bit (Master Only)
N     * |        |          |0 = Automatic slave selection function Disabled
N     * |        |          |Slave selection signal will be asserted/de-asserted according to SS (QSPIx_SSCTL[0]).
N     * |        |          |1 = Automatic slave selection function Enabled.
N     * |[4]     |SLV3WIRE  |Slave 3-wire Mode Enable Bit
N     * |        |          |In Slave 3-wire mode, the QSPI controller can work with 3-wire interface including QSPI0_CLK, QSPI0_MISO and QSPI0_MOSI pins.
N     * |        |          |0 = 4-wire bi-direction interface.
N     * |        |          |1 = 3-wire bi-direction interface.
N     * |[5]     |SLVTOIEN  |Slave Mode Time-out Interrupt Enable Bit
N     * |        |          |0 = Slave mode time-out interrupt Disabled.
N     * |        |          |1 = Slave mode time-out interrupt Enabled.
N     * |[6]     |SLVTORST  |Slave Mode Time-out Reset Control
N     * |        |          |0 = When Slave mode time-out event occurs, the TX and RX control circuit will not be reset.
N     * |        |          |1 = When Slave mode time-out event occurs, the TX and RX control circuit will be reset by hardware.
N     * |[8]     |SLVBEIEN  |Slave Mode Bit Count Error Interrupt Enable Bit
N     * |        |          |0 = Slave mode bit count error interrupt Disabled.
N     * |        |          |1 = Slave mode bit count error interrupt Enabled.
N     * |[9]     |SLVURIEN  |Slave Mode TX Under Run Interrupt Enable Bit
N     * |        |          |0 = Slave mode TX under run interrupt Disabled.
N     * |        |          |1 = Slave mode TX under run interrupt Enabled.
N     * |[12]    |SSACTIEN  |Slave Select Active Interrupt Enable Bit
N     * |        |          |0 = Slave select active interrupt Disabled.
N     * |        |          |1 = Slave select active interrupt Enabled.
N     * |[13]    |SSINAIEN  |Slave Select Inactive Interrupt Enable Bit
N     * |        |          |0 = Slave select inactive interrupt Disabled.
N     * |        |          |1 = Slave select inactive interrupt Enabled.
N     * |[31:16] |SLVTOCNT  |Slave Mode Time-out Period
N     * |        |          |In Slave mode, these bits indicate the time-out period when there is bus clock input during slave select active.
N     * |        |          |The clock source of the time-out counter is Slave peripheral clock.
N     * |        |          |If the value is 0, it indicates the slave mode time-out function is disabled.
N     * @var QSPI_T::PDMACTL
N     * Offset: 0x0C  QSPI PDMA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TXPDMAEN  |Transmit PDMA Enable Bit
N     * |        |          |0 = Transmit PDMA function Disabled.
N     * |        |          |1 = Transmit PDMA function Enabled.
N     * |        |          |Note: In QSPI Master mode with full duplex transfer, if both TX and RX PDMA functions are enabled, RX PDMA function cannot be enabled prior to TX PDMA function.
N     * |        |          |User can enable TX PDMA function firstly or enable both functions simultaneously.
N     * |[1]     |RXPDMAEN  |Receive PDMA Enable Bit
N     * |        |          |0 = Receive PDMA function Disabled.
N     * |        |          |1 = Receive PDMA function Enabled.
N     * |[2]     |PDMARST   |PDMA Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the PDMA control logic of the QSPI controller. This bit will be automatically cleared to 0.
N     * @var QSPI_T::FIFOCTL
N     * Offset: 0x10  QSPI FIFO Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RXRST     |Receive Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset receive FIFO pointer and receive circuit.
N     * |        |          |The RXFULL bit will be cleared to 0 and the RXEMPTY bit will be set to 1.
N     * |        |          |This bit will be cleared to 0 by hardware about 3 system clock cycles + 2 peripheral clock cycles after it is set to 1.
N     * |        |          |User can read TXRXRST (QSPIx_STATUS[23]) to check if reset is accomplished or not.
N     * |[1]     |TXRST     |Transmit Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset transmit FIFO pointer and transmit circuit.
N     * |        |          |The TXFULL bit will be cleared to 0 and the TXEMPTY bit will be set to 1.
N     * |        |          |This bit will be cleared to 0 by hardware about 3 system clock cycles + 2 peripheral clock cycles after it is set to 1.
N     * |        |          |User can read TXRXRST (QSPIx_STATUS[23]) to check if reset is accomplished or not.
N     * |        |          |Note: If TX underflow event occurs in QSPI Slave mode, this bit can be used to make QSPI return to idle state.
N     * |[2]     |RXTHIEN   |Receive FIFO Threshold Interrupt Enable Bit
N     * |        |          |0 = RX FIFO threshold interrupt Disabled.
N     * |        |          |1 = RX FIFO threshold interrupt Enabled.
N     * |[3]     |TXTHIEN   |Transmit FIFO Threshold Interrupt Enable Bit
N     * |        |          |0 = TX FIFO threshold interrupt Disabled.
N     * |        |          |1 = TX FIFO threshold interrupt Enabled.
N     * |[4]     |RXTOIEN   |Receive Time-out Interrupt Enable Bit
N     * |        |          |0 = Receive time-out interrupt Disabled.
N     * |        |          |1 = Receive time-out interrupt Enabled.
N     * |[5]     |RXOVIEN   |Receive FIFO Overrun Interrupt Enable Bit
N     * |        |          |0 = Receive FIFO overrun interrupt Disabled.
N     * |        |          |1 = Receive FIFO overrun interrupt Enabled.
N     * |[6]     |TXUFPOL   |TX Underflow Data Polarity
N     * |        |          |0 = The QSPI data out is keep 0 if there is TX underflow event in Slave mode.
N     * |        |          |1 = The QSPI data out is keep 1 if there is TX underflow event in Slave mode.
N     * |        |          |Note:
N     * |        |          |1. The TX underflow event occurs if there is no any data in TX FIFO when the slave selection signal is active.
N     * |        |          |2. When TX underflow event occurs, QSPIx_MISO pin state will be determined by this setting even though TX FIFO is not empty afterward.
N     * |        |          |Data stored in TX FIFO will be sent through QSPIx_MISO pin in the next transfer frame.
N     * |[7]     |TXUFIEN   |TX Underflow Interrupt Enable Bit
N     * |        |          |When TX underflow event occurs in Slave mode, TXUFIF (QSPIx_STATUS[19]) will be set to 1
N     * |        |          |This bit is used to enable the TX underflow interrupt.
N     * |        |          |0 = Slave TX underflow interrupt Disabled.
N     * |        |          |1 = Slave TX underflow interrupt Enabled.
N     * |[8]     |RXFBCLR   |Receive FIFO Buffer Clear
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear receive FIFO pointer.
N     * |        |          |The RXFULL bit will be cleared to 0 and the RXEMPTY bit will be set to 1.
N     * |        |          |This bit will be cleared to 0 by hardware about 1 system clock after it is set to 1.
N     * |        |          |Note: The RX shift register will not be cleared.
N     * |[9]     |TXFBCLR   |Transmit FIFO Buffer Clear
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear transmit FIFO pointer.
N     * |        |          |The TXFULL bit will be cleared to 0 and the TXEMPTY bit will be set to 1.
N     * |        |          |This bit will be cleared to 0 by hardware about 1 system clock after it is set to 1.
N     * |        |          |Note: The TX shift register will not be cleared.
N     * |[26:24] |RXTH      |Receive FIFO Threshold
N     * |        |          |If the valid data count of the receive FIFO buffer is larger than the RXTH setting, the RXTHIF bit will be set to 1, else the RXTHIF bit will be cleared to 0.
N     * |[30:28] |TXTH      |Transmit FIFO Threshold
N     * |        |          |If the valid data count of the transmit FIFO buffer is less than or equal to the TXTH setting, the TXTHIF bit will be set to 1, else the TXTHIF bit will be cleared to 0.
N     * @var QSPI_T::STATUS
N     * Offset: 0x14  QSPI Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BUSY      |Busy Status (Read Only)
N     * |        |          |0 = QSPI controller is in idle state.
N     * |        |          |1 = QSPI controller is in busy state.
N     * |        |          |The following lists the bus busy conditions:
N     * |        |          |a. QSPIx_CTL[0] = 1 and TXEMPTY = 0.
N     * |        |          |b. For QSPI Master mode, QSPIx_CTL[0] = 1 and TXEMPTY = 1 but the current transaction is not finished yet.
N     * |        |          |c. For QSPI Master mode, QSPIx_CTL[0] = 1 and RXONLY = 1.
N     * |        |          |d. For QSPI Slave mode, the QSPIx_CTL[0] = 1 and there is serial clock input into the QSPI core logic when slave select is active.
N     * |        |          |e. For QSPI Slave mode, the QSPIx_CTL[0] = 1 and the transmit buffer or transmit shift register is not empty even if the slave select is inactive.
N     * |[1]     |UNITIF    |Unit Transfer Interrupt Flag
N     * |        |          |0 = No transaction has been finished since this bit was cleared to 0.
N     * |        |          |1 = QSPI controller has finished one unit transfer.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[2]     |SSACTIF   |Slave Select Active Interrupt Flag
N     * |        |          |0 = Slave select active interrupt was cleared or not occurred.
N     * |        |          |1 = Slave select active interrupt event occurred.
N     * |        |          |Note: Only available in Slave mode. This bit will be cleared by writing 1 to it.
N     * |[3]     |SSINAIF   |Slave Select Inactive Interrupt Flag
N     * |        |          |0 = Slave select inactive interrupt was cleared or not occurred.
N     * |        |          |1 = Slave select inactive interrupt event occurred.
N     * |        |          |Note: Only available in Slave mode. This bit will be cleared by writing 1 to it.
N     * |[4]     |SSLINE    |Slave Select Line Bus Status (Read Only)
N     * |        |          |0 = The slave select line status is 0.
N     * |        |          |1 = The slave select line status is 1.
N     * |        |          |Note: This bit is only available in Slave mode.
N     * |        |          |If SSACTPOL (QSPIx_SSCTL[2]) is set 0, and the SSLINE is 1, the QSPI slave select is in inactive status.
N     * |[5]     |SLVTOIF   |Slave Time-out Interrupt Flag
N     * |        |          |When the slave select is active and the value of SLVTOCNT is not 0, as the bus clock is detected, the slave time-out counter in QSPI controller logic will be started.
N     * |        |          |When the value of time-out counter is greater than or equal to the value of SLVTOCNT (QSPI_SSCTL[31:16]) before one transaction is done, the slave time-out interrupt event will be asserted.
N     * |        |          |0 = Slave time-out is not active.
N     * |        |          |1 = Slave time-out is active.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[6]     |SLVBEIF   |Slave Mode Bit Count Error Interrupt Flag
N     * |        |          |In Slave mode, when the slave select line goes to inactive state, if bit counter is mismatch with DWIDTH, this interrupt flag will be set to 1.
N     * |        |          |0 = No Slave mode bit count error event.
N     * |        |          |1 = Slave mode bit count error event occurs.
N     * |        |          |Note: If the slave select active but there is no any bus clock input, the SLVBEIF also active when the slave select goes to inactive state.
N     * |        |          |This bit will be cleared by writing 1 to it.
N     * |[7]     |SLVURIF   |Slave Mode TX Under Run Interrupt Flag
N     * |        |          |In Slave mode, if TX underflow event occurs and the slave select line goes to inactive state, this interrupt flag will be set to 1.
N     * |        |          |0 = No Slave TX under run event.
N     * |        |          |1 = Slave TX under run event occurs.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[8]     |RXEMPTY   |Receive FIFO Buffer Empty Indicator (Read Only)
N     * |        |          |0 = Receive FIFO buffer is not empty.
N     * |        |          |1 = Receive FIFO buffer is empty.
N     * |[9]     |RXFULL    |Receive FIFO Buffer Full Indicator (Read Only)
N     * |        |          |0 = Receive FIFO buffer is not full.
N     * |        |          |1 = Receive FIFO buffer is full.
N     * |[10]    |RXTHIF    |Receive FIFO Threshold Interrupt Flag (Read Only)
N     * |        |          |0 = The valid data count within the receive FIFO buffer is smaller than or equal to the setting value of RXTH.
N     * |        |          |1 = The valid data count within the receive FIFO buffer is larger than the setting value of RXTH.
N     * |[11]    |RXOVIF    |Receive FIFO Overrun Interrupt Flag
N     * |        |          |When the receive FIFO buffer is full, the follow-up data will be dropped and this bit will be set to 1.
N     * |        |          |0 = No FIFO is overrun.
N     * |        |          |1 = Receive FIFO is overrun.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[12]    |RXTOIF    |Receive Time-out Interrupt Flag
N     * |        |          |0 = No receive FIFO time-out event.
N     * |        |          |1 = Receive FIFO buffer is not empty and no read operation on receive FIFO buffer over 64 QSPI peripheral clock periods in Master mode or over 576 QSPI peripheral clock periods in Slave mode.
N     * |        |          |When the received FIFO buffer is read by software, the time-out status will be cleared automatically.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[15]    |SPIENSTS  |QSPI Enable Status (Read Only)
N     * |        |          |0 = The QSPI controller is disabled.
N     * |        |          |1 = The QSPI controller is enabled.
N     * |        |          |Note: The QSPI peripheral clock is asynchronous with the system clock.
N     * |        |          |In order to make sure the QSPI control logic is disabled, this bit indicates the real status of QSPI controller.
N     * |[16]    |TXEMPTY   |Transmit FIFO Buffer Empty Indicator (Read Only)
N     * |        |          |0 = Transmit FIFO buffer is not empty.
N     * |        |          |1 = Transmit FIFO buffer is empty.
N     * |[17]    |TXFULL    |Transmit FIFO Buffer Full Indicator (Read Only)
N     * |        |          |0 = Transmit FIFO buffer is not full.
N     * |        |          |1 = Transmit FIFO buffer is full.
N     * |[18]    |TXTHIF    |Transmit FIFO Threshold Interrupt Flag (Read Only)
N     * |        |          |0 = The valid data count within the transmit FIFO buffer is larger than the setting value of TXTH.
N     * |        |          |1 = The valid data count within the transmit FIFO buffer is less than or equal to the setting value of TXTH.
N     * |[19]    |TXUFIF    |TX Underflow Interrupt Flag
N     * |        |          |When the TX underflow event occurs, this bit will be set to 1, the state of data output pin depends on the setting of TXUFPOL.
N     * |        |          |0 = No effect.
N     * |        |          |1 = No data in Transmit FIFO and TX shift register when the slave selection signal is active.
N     * |        |          |Note 1: This bit will be cleared by writing 1 to it.
N     * |        |          |Note 2: If reset slave's transmission circuit when slave selection signal is active, this flag will be set to 1 after 2 peripheral clock cycles + 3 system clock cycles since the reset operation is done.
N     * |[23]    |TXRXRST   |TX or RX Reset Status (Read Only)
N     * |        |          |0 = The reset function of TXRST or RXRST is done.
N     * |        |          |1 = Doing the reset function of TXRST or RXRST.
N     * |        |          |Note: Both the reset operations of TXRST and RXRST need 3 system clock cycles + 2 peripheral clock cycles.
N     * |        |          |User can check the status of this bit to monitor the reset function is doing or done.
N     * |[27:24] |RXCNT     |Receive FIFO Data Count (Read Only)
N     * |        |          |This bit field indicates the valid data count of receive FIFO buffer.
N     * |[31:28] |TXCNT     |Transmit FIFO Data Count (Read Only)
N     * |        |          |This bit field indicates the valid data count of transmit FIFO buffer.
N     * @var QSPI_T::TX
N     * Offset: 0x20  QSPI Data Transmit Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |TX        |Data Transmit Register
N     * |        |          |The data transmit registers pass through the transmitted data into the 8-level transmit FIFO buffers.
N     * |        |          |The number of valid bits depends on the setting of DWIDTH (QSPIx_CTL[12:8]).
N     * |        |          |If DWIDTH is set to 0x08, the bits TX[7:0] will be transmitted.
N     * |        |          |If DWIDTH is set to 0x00 , the QSPI controller will perform a 32-bit transfer.
N     * |        |          |Note: In Master mode, QSPI controller will start to transfer the QSPI bus clock after 1 APB clock and 6 peripheral clock cycles after user writes to this register.
N     * @var QSPI_T::RX
N     * Offset: 0x30  QSPI Data Receive Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |RX        |Data Receive Register (Read Only)
N     * |        |          |There are 8-level FIFO buffers in this controller.
N     * |        |          |The data receive register holds the data received from QSPI data input pin.
N     * |        |          |If the RXEMPTY (QSPIx_STATUS[8]) is not set to 1, the receive FIFO buffers can be accessed through software by reading this register.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] QSPI Control Register                                             */
X    volatile uint32_t CTL;                    
N    __IO uint32_t CLKDIV;                /*!< [0x0004] QSPI Clock Divider Register                                       */
X    volatile uint32_t CLKDIV;                 
N    __IO uint32_t SSCTL;                 /*!< [0x0008] QSPI Slave Select Control Register                                */
X    volatile uint32_t SSCTL;                  
N    __IO uint32_t PDMACTL;               /*!< [0x000c] QSPI PDMA Control Register                                        */
X    volatile uint32_t PDMACTL;                
N    __IO uint32_t FIFOCTL;               /*!< [0x0010] QSPI FIFO Control Register                                        */
X    volatile uint32_t FIFOCTL;                
N    __IO uint32_t STATUS;                /*!< [0x0014] QSPI Status Register                                              */
X    volatile uint32_t STATUS;                 
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __O  uint32_t TX;                    /*!< [0x0020] QSPI Data Transmit Register                                       */
X    volatile  uint32_t TX;                     
N    __I  uint32_t RESERVE1[3];
X    volatile const  uint32_t RESERVE1[3];
N    __I  uint32_t RX;                    /*!< [0x0030] QSPI Data Receive Register                                        */
X    volatile const  uint32_t RX;                     
N
N} QSPI_T;
N
N/**
N    @addtogroup QSPI_CONST QSPI Bit Field Definition
N    Constant Definitions for QSPI Controller
N@{ */
N
N#define QSPI_CTL_SPIEN_Pos                (0)                                                /*!< QSPI_T::CTL: SPIEN Position             */
N#define QSPI_CTL_SPIEN_Msk                (0x1ul << QSPI_CTL_SPIEN_Pos)                      /*!< QSPI_T::CTL: SPIEN Mask                 */
N
N#define QSPI_CTL_RXNEG_Pos                (1)                                                /*!< QSPI_T::CTL: RXNEG Position             */
N#define QSPI_CTL_RXNEG_Msk                (0x1ul << QSPI_CTL_RXNEG_Pos)                      /*!< QSPI_T::CTL: RXNEG Mask                 */
N
N#define QSPI_CTL_TXNEG_Pos                (2)                                                /*!< QSPI_T::CTL: TXNEG Position             */
N#define QSPI_CTL_TXNEG_Msk                (0x1ul << QSPI_CTL_TXNEG_Pos)                      /*!< QSPI_T::CTL: TXNEG Mask                 */
N
N#define QSPI_CTL_CLKPOL_Pos               (3)                                                /*!< QSPI_T::CTL: CLKPOL Position            */
N#define QSPI_CTL_CLKPOL_Msk               (0x1ul << QSPI_CTL_CLKPOL_Pos)                     /*!< QSPI_T::CTL: CLKPOL Mask                */
N
N#define QSPI_CTL_SUSPITV_Pos              (4)                                                /*!< QSPI_T::CTL: SUSPITV Position           */
N#define QSPI_CTL_SUSPITV_Msk              (0xful << QSPI_CTL_SUSPITV_Pos)                    /*!< QSPI_T::CTL: SUSPITV Mask               */
N
N#define QSPI_CTL_DWIDTH_Pos               (8)                                                /*!< QSPI_T::CTL: DWIDTH Position            */
N#define QSPI_CTL_DWIDTH_Msk               (0x1ful << QSPI_CTL_DWIDTH_Pos)                    /*!< QSPI_T::CTL: DWIDTH Mask                */
N
N#define QSPI_CTL_LSB_Pos                  (13)                                               /*!< QSPI_T::CTL: LSB Position               */
N#define QSPI_CTL_LSB_Msk                  (0x1ul << QSPI_CTL_LSB_Pos)                        /*!< QSPI_T::CTL: LSB Mask                   */
N
N#define QSPI_CTL_HALFDPX_Pos              (14)                                               /*!< QSPI_T::CTL: HALFDPX Position           */
N#define QSPI_CTL_HALFDPX_Msk              (0x1ul << QSPI_CTL_HALFDPX_Pos)                    /*!< QSPI_T::CTL: HALFDPX Mask               */
N
N#define QSPI_CTL_RXONLY_Pos               (15)                                               /*!< QSPI_T::CTL: RXONLY Position            */
N#define QSPI_CTL_RXONLY_Msk               (0x1ul << QSPI_CTL_RXONLY_Pos)                     /*!< QSPI_T::CTL: RXONLY Mask                */
N
N#define QSPI_CTL_TWOBIT_Pos               (16)                                               /*!< QSPI_T::CTL: TWOBIT Position            */
N#define QSPI_CTL_TWOBIT_Msk               (0x1ul << QSPI_CTL_TWOBIT_Pos)                     /*!< QSPI_T::CTL: TWOBIT Mask                */
N
N#define QSPI_CTL_UNITIEN_Pos              (17)                                               /*!< QSPI_T::CTL: UNITIEN Position           */
N#define QSPI_CTL_UNITIEN_Msk              (0x1ul << QSPI_CTL_UNITIEN_Pos)                    /*!< QSPI_T::CTL: UNITIEN Mask               */
N
N#define QSPI_CTL_SLAVE_Pos                (18)                                               /*!< QSPI_T::CTL: SLAVE Position             */
N#define QSPI_CTL_SLAVE_Msk                (0x1ul << QSPI_CTL_SLAVE_Pos)                      /*!< QSPI_T::CTL: SLAVE Mask                 */
N
N#define QSPI_CTL_REORDER_Pos              (19)                                               /*!< QSPI_T::CTL: REORDER Position           */
N#define QSPI_CTL_REORDER_Msk              (0x1ul << QSPI_CTL_REORDER_Pos)                    /*!< QSPI_T::CTL: REORDER Mask               */
N
N#define QSPI_CTL_DATDIR_Pos               (20)                                               /*!< QSPI_T::CTL: DATDIR Position            */
N#define QSPI_CTL_DATDIR_Msk               (0x1ul << QSPI_CTL_DATDIR_Pos)                     /*!< QSPI_T::CTL: DATDIR Mask                */
N
N#define QSPI_CTL_DUALIOEN_Pos             (21)                                               /*!< QSPI_T::CTL: DUALIOEN Position          */
N#define QSPI_CTL_DUALIOEN_Msk             (0x1ul << QSPI_CTL_DUALIOEN_Pos)                   /*!< QSPI_T::CTL: DUALIOEN Mask              */
N
N#define QSPI_CTL_QUADIOEN_Pos             (22)                                               /*!< QSPI_T::CTL: QUADIOEN Position          */
N#define QSPI_CTL_QUADIOEN_Msk             (0x1ul << QSPI_CTL_QUADIOEN_Pos)                   /*!< QSPI_T::CTL: QUADIOEN Mask              */
N
N#define QSPI_CLKDIV_DIVIDER_Pos           (0)                                                /*!< QSPI_T::CLKDIV: DIVIDER Position        */
N#define QSPI_CLKDIV_DIVIDER_Msk           (0x1fful << QSPI_CLKDIV_DIVIDER_Pos)               /*!< QSPI_T::CLKDIV: DIVIDER Mask            */
N
N#define QSPI_SSCTL_SS_Pos                 (0)                                                /*!< QSPI_T::SSCTL: SS Position              */
N#define QSPI_SSCTL_SS_Msk                 (0x1ul << QSPI_SSCTL_SS_Pos)                       /*!< QSPI_T::SSCTL: SS Mask                  */
N
N#define QSPI_SSCTL_SSACTPOL_Pos           (2)                                                /*!< QSPI_T::SSCTL: SSACTPOL Position        */
N#define QSPI_SSCTL_SSACTPOL_Msk           (0x1ul << QSPI_SSCTL_SSACTPOL_Pos)                 /*!< QSPI_T::SSCTL: SSACTPOL Mask            */
N
N#define QSPI_SSCTL_AUTOSS_Pos             (3)                                                /*!< QSPI_T::SSCTL: AUTOSS Position          */
N#define QSPI_SSCTL_AUTOSS_Msk             (0x1ul << QSPI_SSCTL_AUTOSS_Pos)                   /*!< QSPI_T::SSCTL: AUTOSS Mask              */
N
N#define QSPI_SSCTL_SLV3WIRE_Pos           (4)                                                /*!< QSPI_T::SSCTL: SLV3WIRE Position        */
N#define QSPI_SSCTL_SLV3WIRE_Msk           (0x1ul << QSPI_SSCTL_SLV3WIRE_Pos)                 /*!< QSPI_T::SSCTL: SLV3WIRE Mask            */
N
N#define QSPI_SSCTL_SLVTOIEN_Pos           (5)                                                /*!< QSPI_T::SSCTL: SLVTOIEN Position        */
N#define QSPI_SSCTL_SLVTOIEN_Msk           (0x1ul << QSPI_SSCTL_SLVTOIEN_Pos)                 /*!< QSPI_T::SSCTL: SLVTOIEN Mask            */
N
N#define QSPI_SSCTL_SLVTORST_Pos           (6)                                                /*!< QSPI_T::SSCTL: SLVTORST Position        */
N#define QSPI_SSCTL_SLVTORST_Msk           (0x1ul << QSPI_SSCTL_SLVTORST_Pos)                 /*!< QSPI_T::SSCTL: SLVTORST Mask            */
N
N#define QSPI_SSCTL_SLVBEIEN_Pos           (8)                                                /*!< QSPI_T::SSCTL: SLVBEIEN Position        */
N#define QSPI_SSCTL_SLVBEIEN_Msk           (0x1ul << QSPI_SSCTL_SLVBEIEN_Pos)                 /*!< QSPI_T::SSCTL: SLVBEIEN Mask            */
N
N#define QSPI_SSCTL_SLVURIEN_Pos           (9)                                                /*!< QSPI_T::SSCTL: SLVURIEN Position        */
N#define QSPI_SSCTL_SLVURIEN_Msk           (0x1ul << QSPI_SSCTL_SLVURIEN_Pos)                 /*!< QSPI_T::SSCTL: SLVURIEN Mask            */
N
N#define QSPI_SSCTL_SSACTIEN_Pos           (12)                                               /*!< QSPI_T::SSCTL: SSACTIEN Position        */
N#define QSPI_SSCTL_SSACTIEN_Msk           (0x1ul << QSPI_SSCTL_SSACTIEN_Pos)                 /*!< QSPI_T::SSCTL: SSACTIEN Mask            */
N
N#define QSPI_SSCTL_SSINAIEN_Pos           (13)                                               /*!< QSPI_T::SSCTL: SSINAIEN Position        */
N#define QSPI_SSCTL_SSINAIEN_Msk           (0x1ul << QSPI_SSCTL_SSINAIEN_Pos)                 /*!< QSPI_T::SSCTL: SSINAIEN Mask            */
N
N#define QSPI_SSCTL_SLVTOCNT_Pos           (16)                                               /*!< QSPI_T::SSCTL: SLVTOCNT Position        */
N#define QSPI_SSCTL_SLVTOCNT_Msk           (0xfffful << QSPI_SSCTL_SLVTOCNT_Pos)              /*!< QSPI_T::SSCTL: SLVTOCNT Mask            */
N
N#define QSPI_PDMACTL_TXPDMAEN_Pos         (0)                                                /*!< QSPI_T::PDMACTL: TXPDMAEN Position      */
N#define QSPI_PDMACTL_TXPDMAEN_Msk         (0x1ul << QSPI_PDMACTL_TXPDMAEN_Pos)               /*!< QSPI_T::PDMACTL: TXPDMAEN Mask          */
N
N#define QSPI_PDMACTL_RXPDMAEN_Pos         (1)                                                /*!< QSPI_T::PDMACTL: RXPDMAEN Position      */
N#define QSPI_PDMACTL_RXPDMAEN_Msk         (0x1ul << QSPI_PDMACTL_RXPDMAEN_Pos)               /*!< QSPI_T::PDMACTL: RXPDMAEN Mask          */
N
N#define QSPI_PDMACTL_PDMARST_Pos          (2)                                                /*!< QSPI_T::PDMACTL: PDMARST Position       */
N#define QSPI_PDMACTL_PDMARST_Msk          (0x1ul << QSPI_PDMACTL_PDMARST_Pos)                /*!< QSPI_T::PDMACTL: PDMARST Mask           */
N
N#define QSPI_FIFOCTL_RXRST_Pos            (0)                                                /*!< QSPI_T::FIFOCTL: RXRST Position         */
N#define QSPI_FIFOCTL_RXRST_Msk            (0x1ul << QSPI_FIFOCTL_RXRST_Pos)                  /*!< QSPI_T::FIFOCTL: RXRST Mask             */
N
N#define QSPI_FIFOCTL_TXRST_Pos            (1)                                                /*!< QSPI_T::FIFOCTL: TXRST Position         */
N#define QSPI_FIFOCTL_TXRST_Msk            (0x1ul << QSPI_FIFOCTL_TXRST_Pos)                  /*!< QSPI_T::FIFOCTL: TXRST Mask             */
N
N#define QSPI_FIFOCTL_RXTHIEN_Pos          (2)                                                /*!< QSPI_T::FIFOCTL: RXTHIEN Position       */
N#define QSPI_FIFOCTL_RXTHIEN_Msk          (0x1ul << QSPI_FIFOCTL_RXTHIEN_Pos)                /*!< QSPI_T::FIFOCTL: RXTHIEN Mask           */
N
N#define QSPI_FIFOCTL_TXTHIEN_Pos          (3)                                                /*!< QSPI_T::FIFOCTL: TXTHIEN Position       */
N#define QSPI_FIFOCTL_TXTHIEN_Msk          (0x1ul << QSPI_FIFOCTL_TXTHIEN_Pos)                /*!< QSPI_T::FIFOCTL: TXTHIEN Mask           */
N
N#define QSPI_FIFOCTL_RXTOIEN_Pos          (4)                                                /*!< QSPI_T::FIFOCTL: RXTOIEN Position       */
N#define QSPI_FIFOCTL_RXTOIEN_Msk          (0x1ul << QSPI_FIFOCTL_RXTOIEN_Pos)                /*!< QSPI_T::FIFOCTL: RXTOIEN Mask           */
N
N#define QSPI_FIFOCTL_RXOVIEN_Pos          (5)                                                /*!< QSPI_T::FIFOCTL: RXOVIEN Position       */
N#define QSPI_FIFOCTL_RXOVIEN_Msk          (0x1ul << QSPI_FIFOCTL_RXOVIEN_Pos)                /*!< QSPI_T::FIFOCTL: RXOVIEN Mask           */
N
N#define QSPI_FIFOCTL_TXUFPOL_Pos          (6)                                                /*!< QSPI_T::FIFOCTL: TXUFPOL Position       */
N#define QSPI_FIFOCTL_TXUFPOL_Msk          (0x1ul << QSPI_FIFOCTL_TXUFPOL_Pos)                /*!< QSPI_T::FIFOCTL: TXUFPOL Mask           */
N
N#define QSPI_FIFOCTL_TXUFIEN_Pos          (7)                                                /*!< QSPI_T::FIFOCTL: TXUFIEN Position       */
N#define QSPI_FIFOCTL_TXUFIEN_Msk          (0x1ul << QSPI_FIFOCTL_TXUFIEN_Pos)                /*!< QSPI_T::FIFOCTL: TXUFIEN Mask           */
N
N#define QSPI_FIFOCTL_RXFBCLR_Pos          (8)                                                /*!< QSPI_T::FIFOCTL: RXFBCLR Position       */
N#define QSPI_FIFOCTL_RXFBCLR_Msk          (0x1ul << QSPI_FIFOCTL_RXFBCLR_Pos)                /*!< QSPI_T::FIFOCTL: RXFBCLR Mask           */
N
N#define QSPI_FIFOCTL_TXFBCLR_Pos          (9)                                                /*!< QSPI_T::FIFOCTL: TXFBCLR Position       */
N#define QSPI_FIFOCTL_TXFBCLR_Msk          (0x1ul << QSPI_FIFOCTL_TXFBCLR_Pos)                /*!< QSPI_T::FIFOCTL: TXFBCLR Mask           */
N
N#define QSPI_FIFOCTL_RXTH_Pos             (24)                                               /*!< QSPI_T::FIFOCTL: RXTH Position          */
N#define QSPI_FIFOCTL_RXTH_Msk             (0x7ul << QSPI_FIFOCTL_RXTH_Pos)                   /*!< QSPI_T::FIFOCTL: RXTH Mask              */
N
N#define QSPI_FIFOCTL_TXTH_Pos             (28)                                               /*!< QSPI_T::FIFOCTL: TXTH Position          */
N#define QSPI_FIFOCTL_TXTH_Msk             (0x7ul << QSPI_FIFOCTL_TXTH_Pos)                   /*!< QSPI_T::FIFOCTL: TXTH Mask              */
N
N#define QSPI_STATUS_BUSY_Pos              (0)                                                /*!< QSPI_T::STATUS: BUSY Position           */
N#define QSPI_STATUS_BUSY_Msk              (0x1ul << QSPI_STATUS_BUSY_Pos)                    /*!< QSPI_T::STATUS: BUSY Mask               */
N
N#define QSPI_STATUS_UNITIF_Pos            (1)                                                /*!< QSPI_T::STATUS: UNITIF Position         */
N#define QSPI_STATUS_UNITIF_Msk            (0x1ul << QSPI_STATUS_UNITIF_Pos)                  /*!< QSPI_T::STATUS: UNITIF Mask             */
N
N#define QSPI_STATUS_SSACTIF_Pos           (2)                                                /*!< QSPI_T::STATUS: SSACTIF Position        */
N#define QSPI_STATUS_SSACTIF_Msk           (0x1ul << QSPI_STATUS_SSACTIF_Pos)                 /*!< QSPI_T::STATUS: SSACTIF Mask            */
N
N#define QSPI_STATUS_SSINAIF_Pos           (3)                                                /*!< QSPI_T::STATUS: SSINAIF Position        */
N#define QSPI_STATUS_SSINAIF_Msk           (0x1ul << QSPI_STATUS_SSINAIF_Pos)                 /*!< QSPI_T::STATUS: SSINAIF Mask            */
N
N#define QSPI_STATUS_SSLINE_Pos            (4)                                                /*!< QSPI_T::STATUS: SSLINE Position         */
N#define QSPI_STATUS_SSLINE_Msk            (0x1ul << QSPI_STATUS_SSLINE_Pos)                  /*!< QSPI_T::STATUS: SSLINE Mask             */
N
N#define QSPI_STATUS_SLVTOIF_Pos           (5)                                                /*!< QSPI_T::STATUS: SLVTOIF Position        */
N#define QSPI_STATUS_SLVTOIF_Msk           (0x1ul << QSPI_STATUS_SLVTOIF_Pos)                 /*!< QSPI_T::STATUS: SLVTOIF Mask            */
N
N#define QSPI_STATUS_SLVBEIF_Pos           (6)                                                /*!< QSPI_T::STATUS: SLVBEIF Position        */
N#define QSPI_STATUS_SLVBEIF_Msk           (0x1ul << QSPI_STATUS_SLVBEIF_Pos)                 /*!< QSPI_T::STATUS: SLVBEIF Mask            */
N
N#define QSPI_STATUS_SLVURIF_Pos           (7)                                                /*!< QSPI_T::STATUS: SLVURIF Position        */
N#define QSPI_STATUS_SLVURIF_Msk           (0x1ul << QSPI_STATUS_SLVURIF_Pos)                 /*!< QSPI_T::STATUS: SLVURIF Mask            */
N
N#define QSPI_STATUS_RXEMPTY_Pos           (8)                                                /*!< QSPI_T::STATUS: RXEMPTY Position        */
N#define QSPI_STATUS_RXEMPTY_Msk           (0x1ul << QSPI_STATUS_RXEMPTY_Pos)                 /*!< QSPI_T::STATUS: RXEMPTY Mask            */
N
N#define QSPI_STATUS_RXFULL_Pos            (9)                                                /*!< QSPI_T::STATUS: RXFULL Position         */
N#define QSPI_STATUS_RXFULL_Msk            (0x1ul << QSPI_STATUS_RXFULL_Pos)                  /*!< QSPI_T::STATUS: RXFULL Mask             */
N
N#define QSPI_STATUS_RXTHIF_Pos            (10)                                               /*!< QSPI_T::STATUS: RXTHIF Position         */
N#define QSPI_STATUS_RXTHIF_Msk            (0x1ul << QSPI_STATUS_RXTHIF_Pos)                  /*!< QSPI_T::STATUS: RXTHIF Mask             */
N
N#define QSPI_STATUS_RXOVIF_Pos            (11)                                               /*!< QSPI_T::STATUS: RXOVIF Position         */
N#define QSPI_STATUS_RXOVIF_Msk            (0x1ul << QSPI_STATUS_RXOVIF_Pos)                  /*!< QSPI_T::STATUS: RXOVIF Mask             */
N
N#define QSPI_STATUS_RXTOIF_Pos            (12)                                               /*!< QSPI_T::STATUS: RXTOIF Position         */
N#define QSPI_STATUS_RXTOIF_Msk            (0x1ul << QSPI_STATUS_RXTOIF_Pos)                  /*!< QSPI_T::STATUS: RXTOIF Mask             */
N
N#define QSPI_STATUS_SPIENSTS_Pos          (15)                                               /*!< QSPI_T::STATUS: SPIENSTS Position       */
N#define QSPI_STATUS_SPIENSTS_Msk          (0x1ul << QSPI_STATUS_SPIENSTS_Pos)                /*!< QSPI_T::STATUS: SPIENSTS Mask           */
N
N#define QSPI_STATUS_TXEMPTY_Pos           (16)                                               /*!< QSPI_T::STATUS: TXEMPTY Position        */
N#define QSPI_STATUS_TXEMPTY_Msk           (0x1ul << QSPI_STATUS_TXEMPTY_Pos)                 /*!< QSPI_T::STATUS: TXEMPTY Mask            */
N
N#define QSPI_STATUS_TXFULL_Pos            (17)                                               /*!< QSPI_T::STATUS: TXFULL Position         */
N#define QSPI_STATUS_TXFULL_Msk            (0x1ul << QSPI_STATUS_TXFULL_Pos)                  /*!< QSPI_T::STATUS: TXFULL Mask             */
N
N#define QSPI_STATUS_TXTHIF_Pos            (18)                                               /*!< QSPI_T::STATUS: TXTHIF Position         */
N#define QSPI_STATUS_TXTHIF_Msk            (0x1ul << QSPI_STATUS_TXTHIF_Pos)                  /*!< QSPI_T::STATUS: TXTHIF Mask             */
N
N#define QSPI_STATUS_TXUFIF_Pos            (19)                                               /*!< QSPI_T::STATUS: TXUFIF Position         */
N#define QSPI_STATUS_TXUFIF_Msk            (0x1ul << QSPI_STATUS_TXUFIF_Pos)                  /*!< QSPI_T::STATUS: TXUFIF Mask             */
N
N#define QSPI_STATUS_TXRXRST_Pos           (23)                                               /*!< QSPI_T::STATUS: TXRXRST Position        */
N#define QSPI_STATUS_TXRXRST_Msk           (0x1ul << QSPI_STATUS_TXRXRST_Pos)                 /*!< QSPI_T::STATUS: TXRXRST Mask            */
N
N#define QSPI_STATUS_RXCNT_Pos             (24)                                               /*!< QSPI_T::STATUS: RXCNT Position          */
N#define QSPI_STATUS_RXCNT_Msk             (0xful << QSPI_STATUS_RXCNT_Pos)                   /*!< QSPI_T::STATUS: RXCNT Mask              */
N
N#define QSPI_STATUS_TXCNT_Pos             (28)                                               /*!< QSPI_T::STATUS: TXCNT Position          */
N#define QSPI_STATUS_TXCNT_Msk             (0xful << QSPI_STATUS_TXCNT_Pos)                   /*!< QSPI_T::STATUS: TXCNT Mask              */
N
N#define QSPI_TX_TX_Pos                    (0)                                                /*!< QSPI_T::TX: TX Position                 */
N#define QSPI_TX_TX_Msk                    (0xfffffffful << QSPI_TX_TX_Pos)                   /*!< QSPI_T::TX: TX Mask                     */
N
N#define QSPI_RX_RX_Pos                    (0)                                                /*!< QSPI_T::RX: RX Position                 */
N#define QSPI_RX_RX_Msk                    (0xfffffffful << QSPI_RX_RX_Pos)                   /*!< QSPI_T::RX: RX Mask                     */
N
N
N
N/**@}*/ /* QSPI_CONST */
N/**@}*/ /* end of QSPI register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __QSPI_REG_H__ */
L 173 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "spi_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\spi_reg.h" 1
N/**************************************************************************//**
N * @file     spi_reg.h
N * @version  V1.00
N * @brief    SPI register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __SPI_REG_H__
N#define __SPI_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup SPI Serial Peripheral Interface Controller(SPI)
N    Memory Mapped Structure for SPI Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var SPI_T::CTL
N     * Offset: 0x00  SPI Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SPIEN     |SPI Transfer Control Enable Bit
N     * |        |          |In Master mode, the transfer will start when there is data in the FIFO buffer after this bit is set to 1.
N     * |        |          |In Slave mode, this device is ready to receive data when this bit is set to 1.
N     * |        |          |0 = Transfer control Disabled.
N     * |        |          |1 = Transfer control Enabled.
N     * |        |          |Note: Before changing the configurations of SPIx_CTL, SPIx_CLKDIV, SPIx_SSCTL and SPIx_FIFOCTL registers, user shall clear the SPIEN (SPIx_CTL[0]) and confirm the SPIENSTS (SPIx_STATUS[15]) is 0.
N     * |[1]     |RXNEG     |Receive on Negative Edge
N     * |        |          |0 = Received data input signal is latched on the rising edge of SPI bus clock.
N     * |        |          |1 = Received data input signal is latched on the falling edge of SPI bus clock.
N     * |[2]     |TXNEG     |Transmit on Negative Edge
N     * |        |          |0 = Transmitted data output signal is changed on the rising edge of SPI bus clock.
N     * |        |          |1 = Transmitted data output signal is changed on the falling edge of SPI bus clock.
N     * |[3]     |CLKPOL    |Clock Polarity
N     * |        |          |0 = SPI bus clock is idle low.
N     * |        |          |1 = SPI bus clock is idle high.
N     * |[7:4]   |SUSPITV   |Suspend Interval (Master Only)
N     * |        |          |The four bits provide configurable suspend interval between two successive transmit/receive transaction in a transfer.
N     * |        |          |The definition of the suspend interval is the interval between the last clock edge of the preceding transaction word and the first clock edge of the following transaction word.
N     * |        |          |The default value is 0x3.
N     * |        |          |The period of the suspend interval is obtained according to the following equation.
N     * |        |          |(SUSPITV[3:0] + 0.5) * period of SPICLK clock cycle
N     * |        |          |Example:
N     * |        |          |SUSPITV = 0x0 u2026. 0.5 SPICLK clock cycle.
N     * |        |          |SUSPITV = 0x1 u2026. 1.5 SPICLK clock cycle.
N     * |        |          |......
N     * |        |          |SUSPITV = 0xE u2026. 14.5 SPICLK clock cycle.
N     * |        |          |SUSPITV = 0xF u2026. 15.5 SPICLK clock cycle.
N     * |[12:8]  |DWIDTH    |Data Width
N     * |        |          |This field specifies how many bits can be transmitted / received in one transaction
N     * |        |          |The minimum bit length is 8 bits and can up to 32 bits.
N     * |        |          |DWIDTH = 0x08 ... 8 bits.
N     * |        |          |DWIDTH = 0x09 ... 9 bits.
N     * |        |          |......
N     * |        |          |DWIDTH = 0x1F ... 31 bits.
N     * |        |          |DWIDTH = 0x00 ... 32 bits.
N     * |[13]    |LSB       |Send LSB First
N     * |        |          |0 = The MSB, which bit of transmit/receive register depends on the setting of DWIDTH, is transmitted/received first.
N     * |        |          |1 = The LSB, bit 0 of the SPI TX register, is sent first to the SPI data output pin, and the first bit received from the SPI data input pin will be put in the LSB position of the RX register (bit 0 of SPI_RX).
N     * |[14]    |HALFDPX   |SPI Half-duplex Transfer Enable Bit
N     * |        |          |This bit is used to select full-duplex or half-duplex for SPI transfer
N     * |        |          |The bit field DATDIR (SPIx_CTL[20]) can be used to set the data direction while in half-duplex transfer.
N     * |        |          |0 = SPI operates in full-duplex transfer.
N     * |        |          |1 = SPI operates in half-duplex transfer.
N     * |[15]    |RXONLY    |Receive-only FUNCTION Mode Enable Bit (Master Only)
N     * |        |          |This bit field is only available in Master mode.
N     * |        |          |In receive-only mode, SPI Master will generate SPI bus clock continuously for receiving data bit from SPI slave device and assert the BUSY status.
N     * |        |          |If both AUTOSS (SPI_SSCTL[3]) and RXONLY are enabled, the output slave select signal will be activated.
N     * |        |          |0 = Receive-only function mode Disabled.
N     * |        |          |1 = Receive-only functionmode Enabled.
N     * |        |          |Note: We suggest users switch to receive-only mode when BUSY (SPI_STATUS[0]) is low.
N     * |[17]    |UNITIEN   |Unit Transfer Interrupt Enable Bit
N     * |        |          |0 = SPI unit transfer interrupt Disabled.
N     * |        |          |1 = SPI unit transfer interrupt Enabled.
N     * |[18]    |SLAVE     |Slave Mode Control
N     * |        |          |0 = Master mode.
N     * |        |          |1 = Slave mode.
N     * |[19]    |REORDER   |Byte Reorder Function Enable Bit
N     * |        |          |0 = Byte Reorder function Disabled.
N     * |        |          |1 = Byte Reorder function Enabled.
N     * |        |          |A byte suspend interval will be inserted among each byte.
N     * |        |          |The period of the byte suspend interval depends on the setting of SUSPITV.
N     * |        |          |Note:
N     * |        |          |Byte Reorder function is only available if DWIDTH is defined as 16, 24, and 32 bits.
N     * |[20]    |DATDIR    |Data Port Direction Control
N     * |        |          |This bit is used to select the data input/output direction while in half-duplex transfer.
N     * |        |          |0 = SPI data is input direction.
N     * |        |          |1 = SPI data is output direction.
N     * @var SPI_T::CLKDIV
N     * Offset: 0x04  SPI Clock Divider Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |DIVIDER   |Clock Divider
N     * |        |          |The value in this field is the frequency divider for generating the peripheral clock, fspi_eclk, and the SPI bus clock of SPI Master
N     * |        |          |The frequency is obtained according to the following equation.
N     * |        |          |    FREQ_spi_eclk = FREQ_spi_clock_src/(DIVIDER+1)
N     * |        |          |where
N     * |        |          |    FREQ_spi_clock_src is the peripheral clock source, which is defined in the clock control register, CLK_CLKSEL2.
N     * |        |          |Note: Not supported in I2S mode.
N     * @var SPI_T::SSCTL
N     * Offset: 0x08  SPI Slave Select Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SS        |Slave Selection Control (Master Only)
N     * |        |          |If AUTOSS bit is cleared to 0,
N     * |        |          |0 = set the SPIx_SS line to inactive state.
N     * |        |          |1 = set the SPIx_SS line to active state.
N     * |        |          |If the AUTOSS bit is set to 1,
N     * |        |          |0 = Keep the SPIx_SS line at inactive state.
N     * |        |          |1 = SPIx_SS line will be automatically driven to active state for the duration of data transfer, and will be driven to inactive state for the rest of the time.
N     * |        |          |The active state of SPIx_SS is specified in SSACTPOL (SPIx_SSCTL[2]).
N     * |[2]     |SSACTPOL  |Slave Selection Active Polarity
N     * |        |          |This bit defines the active polarity of slave selection signal (SPIx_SS).
N     * |        |          |0 = The slave selection signal SPIx_SS is active low.
N     * |        |          |1 = The slave selection signal SPIx_SS is active high.
N     * |[3]     |AUTOSS    |Automatic Slave Selection Function Enable Bit (Master Only)
N     * |        |          |0 = Automatic slave selection function Disabled.
N     * |        |          |Slave selection signal will be asserted/de-asserted according to SS (SPIx_SSCTL[0]).
N     * |        |          |1 = Automatic slave selection function Enabled.
N     * |[8]     |SLVBEIEN  |Slave Mode Bit Count Error Interrupt Enable Bit
N     * |        |          |0 = Slave mode bit count error interrupt Disabled.
N     * |        |          |1 = Slave mode bit count error interrupt Enabled.
N     * |[9]     |SLVURIEN  |Slave Mode TX Under Run Interrupt Enable Bit
N     * |        |          |0 = Slave mode TX under run interrupt Disabled.
N     * |        |          |1 = Slave mode TX under run interrupt Enabled.
N     * |[12]    |SSACTIEN  |Slave Select Active Interrupt Enable Bit
N     * |        |          |0 = Slave select active interrupt Disabled.
N     * |        |          |1 = Slave select active interrupt Enabled.
N     * |[13]    |SSINAIEN  |Slave Select Inactive Interrupt Enable Bit
N     * |        |          |0 = Slave select inactive interrupt Disabled.
N     * |        |          |1 = Slave select inactive interrupt Enabled.
N     * @var SPI_T::PDMACTL
N     * Offset: 0x0C  SPI PDMA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TXPDMAEN  |Transmit PDMA Enable Bit
N     * |        |          |0 = Transmit PDMA function Disabled.
N     * |        |          |1 = Transmit PDMA function Enabled.
N     * |        |          |Note: In SPI Master mode with full duplex transfer, if both TX and RX PDMA functions are enabled, RX PDMA function cannot be enabled prior to TX PDMA function
N     * |        |          |User can enable TX PDMA function firstly or enable both functions simultaneously.
N     * |[1]     |RXPDMAEN  |Receive PDMA Enable Bit
N     * |        |          |0 = Receiver PDMA function Disabled.
N     * |        |          |1 = Receiver PDMA function Enabled.
N     * |[2]     |PDMARST   |PDMA Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the PDMA control logic of the SPI controller. This bit will be automatically cleared to 0.
N     * @var SPI_T::FIFOCTL
N     * Offset: 0x10  SPI FIFO Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RXRST     |Receive Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset receive FIFO pointer and receive circuit.
N     * |        |          |The RXFULL bit will be cleared to 0 and the RXEMPTY bit will be set to 1.
N     * |        |          |This bit will be cleared to 0 by hardware about 3 system clock cycles + 2 peripheral clock cycles after it is set to 1.
N     * |        |          |User can read TXRXRST (SPIx_STATUS[23]) to check if reset is accomplished or not.
N     * |[1]     |TXRST     |Transmit Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset transmit FIFO pointer and transmit circuit.
N     * |        |          |The TXFULL bit will be cleared to 0 and the TXEMPTY bit will be set to 1.
N     * |        |          |This bit will be cleared to 0 by hardware about 3 system clock cycles + 2 peripheral clock cycles after it is set to 1.
N     * |        |          |User can read TXRXRST (SPIx_STATUS[23]) to check if reset is accomplished or not.
N     * |[2]     |RXTHIEN   |Receive FIFO Threshold Interrupt Enable Bit
N     * |        |          |0 = RX FIFO threshold interrupt Disabled.
N     * |        |          |1 = RX FIFO threshold interrupt Enabled.
N     * |[3]     |TXTHIEN   |Transmit FIFO Threshold Interrupt Enable Bit
N     * |        |          |0 = TX FIFO threshold interrupt Disabled.
N     * |        |          |1 = TX FIFO threshold interrupt Enabled.
N     * |[4]     |RXTOIEN   |Slave Receive Time-out Interrupt Enable Bit
N     * |        |          |0 = Receive time-out interrupt Disabled.
N     * |        |          |1 = Receive time-out interrupt Enabled.
N     * |[5]     |RXOVIEN   |Receive FIFO Overrun Interrupt Enable Bit
N     * |        |          |0 = Receive FIFO overrun interrupt Disabled.
N     * |        |          |1 = Receive FIFO overrun interrupt Enabled.
N     * |[6]     |TXUFPOL   |TX Underflow Data Polarity
N     * |        |          |0 = The SPI data out is keep 0 if there is TX underflow event in Slave mode.
N     * |        |          |1 = The SPI data out is keep 1 if there is TX underflow event in Slave mode.
N     * |        |          |Note:
N     * |        |          |1. The TX underflow event occurs if there is not any data in TX FIFO when the slave selection signal is active.
N     * |        |          |2. This bit should be set as 0 in I2S mode.
N     * |        |          |3. When TX underflow event occurs, SPIx_MISO pin state will be determined by this setting even though TX FIFO is not empty afterward.
N     * |        |          |Data stored in TX FIFO will be sent through SPIx_MISO pin in the next transfer frame.
N     * |[7]     |TXUFIEN   |TX Underflow Interrupt Enable Bit
N     * |        |          |0 = Slave TX underflow interrupt Disabled.
N     * |        |          |1 = Slave TX underflow interrupt Enabled.
N     * |[8]     |RXFBCLR   |Receive FIFO Buffer Clear
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear receive FIFO pointer.
N     * |        |          |The RXFULL bit will be cleared to 0 and the RXEMPTY bit will be set to 1.
N     * |        |          |This bit will be cleared to 0 by hardware about 1 system clock after it is set to 1.
N     * |        |          |Note: The RX shift register will not be cleared.
N     * |[9]     |TXFBCLR   |Transmit FIFO Buffer Clear
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear transmit FIFO pointer.
N     * |        |          |The TXFULL bit will be cleared to 0 and the TXEMPTY bit will be set to 1.
N     * |        |          |This bit will be cleared to 0 by hardware about 1 system clock after it is set to 1.
N     * |        |          |Note: The TX shift register will not be cleared.
N     * |[25:24] |RXTH      |Receive FIFO Threshold
N     * |        |          |If the valid data count of the receive FIFO buffer is larger than the RXTH setting, the RXTHIF bit will be set to 1, else the RXTHIF bit will be cleared to 0.
N     * |        |          |The MSB of this bit field is only meaningful while SPI mode 8~16 bits of data length.
N     * |[29:28] |TXTH      |Transmit FIFO Threshold
N     * |        |          |If the valid data count of the transmit FIFO buffer is less than or equal to the TXTH setting, the TXTHIF bit will be set to 1, else the TXTHIF bit will be cleared to 0.
N     * |        |          |The MSB of this bit field is only meaningful while SPI mode 8~16 bits of data length.
N     * @var SPI_T::STATUS
N     * Offset: 0x14  SPI Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BUSY      |Busy Status (Read Only)
N     * |        |          |0 = SPI controller is in idle state.
N     * |        |          |1 = SPI controller is in busy state.
N     * |        |          |The following listing are the bus busy conditions:
N     * |        |          |a. SPIx_CTL[0] = 1 and the TXEMPTY = 0.
N     * |        |          |b. For SPI Master mode, SPIx_CTL[0] = 1 and the TXEMPTY = 1 but the current transaction is not finished yet.
N     * |        |          |c. For SPI Master mode, SPIx_CTL[0] = 1 and RXONLY = 1.
N     * |        |          |d. For SPI Slave mode, the SPIx_CTL[0] = 1 and there is serial clock input into the SPI core logic when slave select is active.
N     * |        |          |e. For SPI Slave mode, the SPIx_CTL[0] = 1 and the transmit buffer or transmit shift register is not empty even if the slave select is inactive.
N     * |[1]     |UNITIF    |Unit Transfer Interrupt Flag
N     * |        |          |0 = No transaction has been finished since this bit was cleared to 0.
N     * |        |          |1 = SPI controller has finished one unit transfer.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[2]     |SSACTIF   |Slave Select Active Interrupt Flag
N     * |        |          |0 = Slave select active interrupt was cleared or not occurred.
N     * |        |          |1 = Slave select active interrupt event occurred.
N     * |        |          |Note: Only available in Slave mode. This bit will be cleared by writing 1 to it.
N     * |[3]     |SSINAIF   |Slave Select Inactive Interrupt Flag
N     * |        |          |0 = Slave select inactive interrupt was cleared or not occurred.
N     * |        |          |1 = Slave select inactive interrupt event occurred.
N     * |        |          |Note: Only available in Slave mode. This bit will be cleared by writing 1 to it.
N     * |[4]     |SSLINE    |Slave Select Line Bus Status (Read Only)
N     * |        |          |0 = The slave select line status is 0.
N     * |        |          |1 = The slave select line status is 1.
N     * |        |          |Note: This bit is only available in Slave mode.
N     * |        |          |If SSACTPOL (SPIx_SSCTL[2]) is set 0, and the SSLINE is 1, the SPI slave select is in inactive status.
N     * |[6]     |SLVBEIF   |Slave Mode Bit Count Error Interrupt Flag
N     * |        |          |In Slave mode, when the slave select line goes to inactive state, if bit counter is mismatch with DWIDTH, this interrupt flag will be set to 1.
N     * |        |          |0 = No Slave mode bit count error event.
N     * |        |          |1 = Slave mode bit count error event occurs.
N     * |        |          |Note: If the slave select active but there is no any bus clock input, the SLVBCEEIF also active when the slave select goes to inactive state
N     * |        |          |This bit will be cleared by writing 1 to it.
N     * |[7]     |SLVURIF   |Slave Mode TX Under Run Interrupt Flag
N     * |        |          |In Slave mode, if TX underflow event occurs and the slave select line goes to inactive state, this interrupt flag will be set to 1.
N     * |        |          |0 = No Slave TX under run event.
N     * |        |          |1 = Slave TX under run event occurs.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[8]     |RXEMPTY   |Receive FIFO Buffer Empty Indicator (Read Only)
N     * |        |          |0 = Receive FIFO buffer is not empty.
N     * |        |          |1 = Receive FIFO buffer is empty.
N     * |[9]     |RXFULL    |Receive FIFO Buffer Full Indicator (Read Only)
N     * |        |          |0 = Receive FIFO buffer is not full.
N     * |        |          |1 = Receive FIFO buffer is full.
N     * |[10]    |RXTHIF    |Receive FIFO Threshold Interrupt Flag (Read Only)
N     * |        |          |0 = The valid data count within the RXreceive FIFO buffer is smaller than or equal to the setting value of RXTH.
N     * |        |          |1 = The valid data count within the receive FIFO buffer is larger than the setting value of RXTH.
N     * |[11]    |RXOVIF    |Receive FIFO Overrun Interrupt Flag
N     * |        |          |When the receive FIFO buffer is full, the follow-up data will be dropped and this bit will be set to 1.
N     * |        |          |0 = No FIFO is over run.
N     * |        |          |1 = Receive FIFO is over run.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[12]    |RXTOIF    |Receive Time-out Interrupt Flag
N     * |        |          |0 = No receive FIFO time-out event.
N     * |        |          |1 = Receive FIFO buffer is not empty and no read operation on receive FIFO buffer over 64 SPI peripheral clock periods in Master mode or over 576 SPI peripheral clock periods in Slave mode.
N     * |        |          |When the received FIFO buffer is read by software, the time-out status will be cleared automatically.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[15]    |SPIENSTS  |SPI Enable Status (Read Only)
N     * |        |          |0 = The SPI controller is disabled.
N     * |        |          |1 = The SPI controller is enabled.
N     * |        |          |Note: The SPI peripheral clock is asynchronous with the system clock.
N     * |        |          |In order to make sure the SPI control logic is disabled, this bit indicates the real status of SPI controller.
N     * |[16]    |TXEMPTY   |Transmit FIFO Buffer Empty Indicator (Read Only)
N     * |        |          |0 = Transmit FIFO buffer is not empty.
N     * |        |          |1 = Transmit FIFO buffer is empty.
N     * |[17]    |TXFULL    |Transmit FIFO Buffer Full Indicator (Read Only)
N     * |        |          |0 = Transmit FIFO buffer is not full.
N     * |        |          |1 = Transmit FIFO buffer is full.
N     * |[18]    |TXTHIF    |Transmit FIFO Threshold Interrupt Flag (Read Only)
N     * |        |          |0 = The valid data count within the transmit FIFO buffer is larger than the setting value of TXTH.
N     * |        |          |1 = The valid data count within the transmit FIFO buffer is less than or equal to the setting value of TXTH.
N     * |[19]    |TXUFIF    |TX Underflow Interrupt Flag
N     * |        |          |When the TX underflow event occurs, this bit will be set to 1, the state of data output pin depends on the setting of TXUFPOL.
N     * |        |          |0 = No effect.
N     * |        |          |1 = No data in Transmit FIFO and TX shift register when the slave selection signal is active.
N     * |        |          |Note 1: This bit will be cleared by writing 1 to it.
N     * |        |          |Note 2: If reset slaveu2019s transmission circuit when slave selection signal is active, this flag will be set to 1 after 2 peripheral clock cycles + 3 system clock cycles since the reset operation is done.
N     * |[23]    |TXRXRST   |TX or RX Reset Status (Read Only)
N     * |        |          |0 = The reset function of TXRST or RXRST is done.
N     * |        |          |1 = Doing the reset function of TXRST or RXRST.
N     * |        |          |Note: Both the reset operations of TXRST and RXRST need 3 system clock cycles + 2 peripheral clock cycles.
N     * |        |          |User can check the status of this bit to monitor the reset function is doing or done.
N     * |[27:24] |RXCNT     |Receive FIFO Data Count (Read Only)
N     * |        |          |This bit field indicates the valid data count of receive FIFO buffer.
N     * |[31:28] |TXCNT     |Transmit FIFO Data Count (Read Only)
N     * |        |          |This bit field indicates the valid data count of transmit FIFO buffer.
N     * @var SPI_T::TX
N     * Offset: 0x20  SPI Data Transmit Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |TX        |Data Transmit Register
N     * |        |          |The data transmit registers pass through the transmitted data into the 4-level transmit FIFO buffers.
N     * |        |          |The number of valid bits depends on the setting of DWIDTH (SPIx_CTL[12:8]) in SPI mode or WDWIDTH (SPIx_I2SCTL[5:4]) in I2S mode.
N     * |        |          |For exampleIn SPI mode, if DWIDTH is set to 0x08, the bits TX[7:0] will be transmitted.
N     * |        |          |If DWIDTH is set to 0x00 , the SPI controller will perform a 32-bit transfer.
N     * |        |          |In I2S mode, if WDWIDTH (SPIx_I2SCTL[5:4]) is set to 0x2, the data width of audio channel is 24-bit and corresponding to TX[243:0].
N     * |        |          |If WDWIDTH is set as 0x0, 0x1, or 0x3, all bits of this field are valid and referred to the data arrangement in I2S mode FIFO operation section.
N     * |        |          |Note: In Master mode, SPI controller will start to transfer the SPI bus clock after 1 APB clock and 6 peripheral clock cycles after user writes to this register.
N     * @var SPI_T::RX
N     * Offset: 0x30  SPI Data Receive Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |RX        |Data Receive Register
N     * |        |          |There are 8-/4-level FIFO buffers in this controller.
N     * |        |          |The data receive register holds the data received from SPI data input pin.
N     * |        |          |If the RXEMPTY (SPIx_STATUS[8] or SPIx_I2SSTS[8]) is not set to 1, the receive FIFO buffers can be accessed through software by reading this register.
N     * |        |          |This is a read only register.
N     * @var SPI_T::I2SCTL
N     * Offset: 0x60  I2S Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |I2SEN     |I2S Controller Enable Bit
N     * |        |          |0 = Disabled I2S mode.
N     * |        |          |1 = Enabled I2S mode.
N     * |        |          |Note:
N     * |        |          |1. If enable this bit, I2Sx_BCLK will start to output in master Master mode.
N     * |        |          |2. Before changing the configurations of SPIx_I2SCTL, SPIx_I2SCLK, and SPIx_FIFOCTL registers, user shall clear the I2SEN (SPIx_I2SCTL[0]) and confirm the I2SENSTS (SPIx_I2SSTS[15]) is 0.
N     * |[1]     |TXEN      |Transmit Enable Bit
N     * |        |          |0 = Data transmit Disabled.
N     * |        |          |1 = Data transmit Enabled.
N     * |[2]     |RXEN      |Receive Enable Bit
N     * |        |          |0 = Data receiving receive Disabled.
N     * |        |          |1 = Data receiving receive Enabled.
N     * |[3]     |MUTE      |Transmit Mute Enable Bit
N     * |        |          |0 = Transmit data is shifted from buffer.
N     * |        |          |1 = Transmit channel zero.
N     * |[5:4]   |WDWIDTH   |Word Width
N     * |        |          |00 = data size is 8-bit.
N     * |        |          |01 = data size is 16-bit.
N     * |        |          |10 = data size is 24-bit.
N     * |        |          |11 = data size is 32-bit.
N     * |[6]     |MONO      |Monaural Data
N     * |        |          |0 = Data is stereo format.
N     * |        |          |1 = Data is monaural format.
N     * |[7]     |ORDER     |Stereo Data Order in FIFO
N     * |        |          |0 = Left channel data at high byte.
N     * |        |          |1 = Left channel data at low byte.
N     * |[8]     |SLAVE     |Slave Mode
N     * |        |          |I2S can operate as master or slave
N     * |        |          |In Master mode, I2Sx_BCLK and I2Sx_LRCLK pins are output mode and send bit clock from M031 series to Audio audio CODEC chip.
N     * |        |          |In Slave mode, I2Sx_BCLK and I2Sx_LRCLK pins are input mode and I2Sx_BCLK and I2Sx_LRCLK signals are received from outer Audio audio CODEC chip.
N     * |        |          |0 = Master mode.
N     * |        |          |1 = Slave mode.
N     * |[15]    |MCLKEN    |Master Clock Enable Bit
N     * |        |          |If MCLKEN is set to 1, I2S controller will generate master clock on SPIx_I2SMCLK pin for external audio devices.
N     * |        |          |0 = Master clock Disabled.
N     * |        |          |1 = Master clock Enabled.
N     * |[16]    |RZCEN     |Right Channel Zero Cross Detection Enable Bit
N     * |        |          |If this bit is set to 1, when right channel data sign bit change or next shift data bits are all 0 then RZCIF flag in SPIx_I2SSTS register is set to 1.
N     * |        |          |This function is only available in transmit operation.
N     * |        |          |0 = Right channel zero cross detection Disabled.
N     * |        |          |1 = Right channel zero cross detection Enabled.
N     * |[17]    |LZCEN     |Left Channel Zero Cross Detection Enable Bit
N     * |        |          |If this bit is set to 1, when left channel data sign bit changes or next shift data bits are all 0 then LZCIF flag in SPIx_I2SSTS register is set to 1.
N     * |        |          |This function is only available in transmit operation.
N     * |        |          |0 = Left channel zero cross detection Disabled.
N     * |        |          |1 = Left channel zero cross detection Enabled.
N     * |[23]    |RXLCH     |Receive Left Channel Enable Bit
N     * |        |          |When monaural format is selected (MONO = 1), I2S controller will receive right channel data if RXLCH is set to 0, and receive left channel data if RXLCH is set to 1.
N     * |        |          |0 = Receive right channel data in Mono mode.
N     * |        |          |1 = Receive left channel data in Mono mode.
N     * |[24]    |RZCIEN    |Right Channel Zero- CCross Interrupt Enable Bit
N     * |        |          |Interrupt occurs if this bit is set to 1 and right channel zero- cross event occurs.
N     * |        |          |0 = Interrupt Disabled.
N     * |        |          |1 = Interrupt Enabled.
N     * |[25]    |LZCIEN    |Left Channel Zero- CCross Interrupt Enable Bit
N     * |        |          |Interrupt occurs if this bit is set to 1 and left channel zero- cross event occurs.
N     * |        |          |0 = Interrupt Disabled.
N     * |        |          |1 = Interrupt Enabled.
N     * |[29:28] |FORMAT    |Data Format Selection
N     * |        |          |00 = I2S data format.
N     * |        |          |01 = MSB justified data format.
N     * |        |          |10 = PCM mode A.
N     * |        |          |11 = PCM mode B.
N     * @var SPI_T::I2SCLK
N     * Offset: 0x64  I2S Clock Divider Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[6:0]   |MCLKDIV   |Master Clock Divider
N     * |        |          |If MCLKEN is set to 1, I2S controller will generate master clock for external audio devices.
N     * |        |          |The master clock rate, F_MCLK, is determined by the following expressions.
N     * |        |          |If MCLKDIV >= 1, F_MCLK = F_I2SCLK/(2x(MCLKDIV)).
N     * |        |          |If MCLKDIV = 0, F_MCLK = F_I2SCLK.
N     * |        |          |F_I2SCLK is the frequency of I2S peripheral clock.
N     * |        |          |In general, the master clock rate is 256 times sampling clock rate.
N     * |[17:8]  |BCLKDIV   |Bit Clock Divider
N     * |        |          |The I2S controller will generate bit clock in Master mode.
N     * |        |          |The bit clock rate, F_BCLK, is determined by the following expression.
N     * |        |          |F_BCLK = F_I2SCLK /(2x(BCLKDIV + 1)) , where F_I2SCLK is the frequency of I2S peripheral clock.
N     * @var SPI_T::I2SSTS
N     * Offset: 0x68  I2S Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |RIGHT     |Right Channel (Read Only)
N     * |        |          |This bit indicates the current transmit data is belong to which channel.
N     * |        |          |0 = Left channel.
N     * |        |          |1 = Right channel.
N     * |[8]     |RXEMPTY   |Receive FIFO Buffer Empty Indicator (Read Only)
N     * |        |          |0 = Receive FIFO buffer is not empty.
N     * |        |          |1 = Receive FIFO buffer is empty.
N     * |[9]     |RXFULL    |Receive FIFO Buffer Full Indicator (Read Only)
N     * |        |          |0 = Receive FIFO buffer is not full.
N     * |        |          |1 = Receive FIFO buffer is full.
N     * |[10]    |RXTHIF    |Receive FIFO Threshold Interrupt Flag (Read Only)
N     * |        |          |0 = The valid data count within the Rxreceive FIFO buffer is smaller than or equal to the setting value of RXTH.
N     * |        |          |1 = The valid data count within the receive FIFO buffer is larger than the setting value of RXTH.
N     * |        |          |Note: If RXTHIEN = 1 and RXTHIF = 1, the SPI/I2S controller will generate a SPI interrupt request.
N     * |[11]    |RXOVIF    |Receive FIFO Overrun Interrupt Flag
N     * |        |          |When the receive FIFO buffer is full, the follow-up data will be dropped and this bit will be set to 1.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[12]    |RXTOIF    |Receive Time-out Interrupt Flag
N     * |        |          |0 = No receive FIFO time-out event.
N     * |        |          |1 = Receive FIFO buffer is not empty and no read operation on receive FIFO buffer over 64 SPI peripheral clock period in Master mode or over 576 SPI peripheral clock period in Slave mode.
N     * |        |          |When the received FIFO buffer is read by software, the time-out status will be cleared automatically.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[15]    |I2SENSTS  |I2S Enable Status (Read Only)
N     * |        |          |0 = The SPI/I2S control logic is disabled.
N     * |        |          |1 = The SPI/I2S control logic is enabled.
N     * |        |          |Note: The SPI peripheral clock is asynchronous with the system clock
N     * |        |          |In order to make sure the SPI/I2S controller logic is disabled, this bit indicates the real status of SPI/I2S controller logic for user.
N     * |[16]    |TXEMPTY   |Transmit FIFO Buffer Empty Indicator (Read Only)
N     * |        |          |0 = Transmit FIFO buffer is not empty.
N     * |        |          |1 = Transmit FIFO buffer is empty.
N     * |[17]    |TXFULL    |Transmit FIFO Buffer Full Indicator (Read Only)
N     * |        |          |0 = Transmit FIFO buffer is not full.
N     * |        |          |1 = Transmit FIFO buffer is full.
N     * |[18]    |TXTHIF    |Transmit FIFO Threshold Interrupt Flag (Read Only)
N     * |        |          |0 = The valid data count within the transmit FIFO buffer is larger than the setting value of TXTH.
N     * |        |          |1 = The valid data count within the transmit FIFO buffer is less than or equal to the setting value of TXTH.
N     * |        |          |Note: If TXTHIEN = 1 and TXTHIF = 1, the SPI/I2S controller will generate a SPI interrupt request.
N     * |[19]    |TXUFIF    |Transmit FIFO Underflow Interrupt Flag
N     * |        |          |When the transmit FIFO buffer is empty and there is no datum written into the FIFO buffer, if there is more bus clock input, this bit will be set to 1.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[20]    |RZCIF     |Right Channel Zero Cross Interrupt Flag
N     * |        |          |0 = No zero cross event occurred on right channel.
N     * |        |          |1 = Zero cross event occurred on right channel.
N     * |[21]    |LZCIF     |Left Channel Zero Cross Interrupt Flag
N     * |        |          |0 = No zero cross event occurred on left channel.
N     * |        |          |1 = Zero cross event occurred on left channel.
N     * |[23]    |TXRXRST   |TX or RX Reset Status (Read Only)
N     * |        |          |0 = The reset function of TXRST or RXRST is done.
N     * |        |          |1 = Doing the reset function of TXRST or RXRST.
N     * |        |          |Note: Both the reset operations of TXRST and RXRST need 3 system clock cycles + 2 peripheral clock cycles.
N     * |        |          |User can check the status of this bit to monitor the reset function is doing or done.
N     * |[26:24] |RXCNT     |Receive FIFO Data Count (Read Only)
N     * |        |          |This bit field indicates the valid data count of receive FIFO buffer.
N     * |[30:28] |TXCNT     |Transmit FIFO Data Count (Read Only)
N     * |        |          |This bit field indicates the valid data count of transmit FIFO buffer.
N     */
N
N    __IO uint32_t CTL;                   /*!< [0x0000] SPI Control Register                                             */
X    volatile uint32_t CTL;                    
N    __IO uint32_t CLKDIV;                /*!< [0x0004] SPI Clock Divider Register                                       */
X    volatile uint32_t CLKDIV;                 
N    __IO uint32_t SSCTL;                 /*!< [0x0008] SPI Slave Select Control Register                                */
X    volatile uint32_t SSCTL;                  
N    __IO uint32_t PDMACTL;               /*!< [0x000c] SPI PDMA Control Register                                        */
X    volatile uint32_t PDMACTL;                
N    __IO uint32_t FIFOCTL;               /*!< [0x0010] SPI FIFO Control Register                                        */
X    volatile uint32_t FIFOCTL;                
N    __IO uint32_t STATUS;                /*!< [0x0014] SPI Status Register                                              */
X    volatile uint32_t STATUS;                 
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __O  uint32_t TX;                    /*!< [0x0020] SPI Data Transmit Register                                       */
X    volatile  uint32_t TX;                     
N    __I  uint32_t RESERVE1[3];
X    volatile const  uint32_t RESERVE1[3];
N    __I  uint32_t RX;                    /*!< [0x0030] SPI Data Receive Register                                        */
X    volatile const  uint32_t RX;                     
N    __I  uint32_t RESERVE2[11];
X    volatile const  uint32_t RESERVE2[11];
N    __IO uint32_t I2SCTL;                /*!< [0x0060] I2S Control Register                                             */
X    volatile uint32_t I2SCTL;                 
N    __IO uint32_t I2SCLK;                /*!< [0x0064] I2S Clock Divider Control Register                               */
X    volatile uint32_t I2SCLK;                 
N    __IO uint32_t I2SSTS;                /*!< [0x0068] I2S Status Register                                              */
X    volatile uint32_t I2SSTS;                 
N
N} SPI_T;
N
N/**
N    @addtogroup SPI_CONST SPI Bit Field Definition
N    Constant Definitions for SPI Controller
N@{ */
N
N#define SPI_CTL_SPIEN_Pos                (0)                                               /*!< SPI_T::CTL: SPIEN Position             */
N#define SPI_CTL_SPIEN_Msk                (0x1ul << SPI_CTL_SPIEN_Pos)                      /*!< SPI_T::CTL: SPIEN Mask                 */
N
N#define SPI_CTL_RXNEG_Pos                (1)                                               /*!< SPI_T::CTL: RXNEG Position             */
N#define SPI_CTL_RXNEG_Msk                (0x1ul << SPI_CTL_RXNEG_Pos)                      /*!< SPI_T::CTL: RXNEG Mask                 */
N
N#define SPI_CTL_TXNEG_Pos                (2)                                               /*!< SPI_T::CTL: TXNEG Position             */
N#define SPI_CTL_TXNEG_Msk                (0x1ul << SPI_CTL_TXNEG_Pos)                      /*!< SPI_T::CTL: TXNEG Mask                 */
N
N#define SPI_CTL_CLKPOL_Pos               (3)                                               /*!< SPI_T::CTL: CLKPOL Position            */
N#define SPI_CTL_CLKPOL_Msk               (0x1ul << SPI_CTL_CLKPOL_Pos)                     /*!< SPI_T::CTL: CLKPOL Mask                */
N
N#define SPI_CTL_SUSPITV_Pos              (4)                                               /*!< SPI_T::CTL: SUSPITV Position           */
N#define SPI_CTL_SUSPITV_Msk              (0xful << SPI_CTL_SUSPITV_Pos)                    /*!< SPI_T::CTL: SUSPITV Mask               */
N
N#define SPI_CTL_DWIDTH_Pos               (8)                                               /*!< SPI_T::CTL: DWIDTH Position            */
N#define SPI_CTL_DWIDTH_Msk               (0x1ful << SPI_CTL_DWIDTH_Pos)                    /*!< SPI_T::CTL: DWIDTH Mask                */
N
N#define SPI_CTL_LSB_Pos                  (13)                                              /*!< SPI_T::CTL: LSB Position               */
N#define SPI_CTL_LSB_Msk                  (0x1ul << SPI_CTL_LSB_Pos)                        /*!< SPI_T::CTL: LSB Mask                   */
N
N#define SPI_CTL_HALFDPX_Pos              (14)                                              /*!< SPI_T::CTL: HALFDPX Position           */
N#define SPI_CTL_HALFDPX_Msk              (0x1ul << SPI_CTL_HALFDPX_Pos)                    /*!< SPI_T::CTL: HALFDPX Mask               */
N
N#define SPI_CTL_RXONLY_Pos               (15)                                              /*!< SPI_T::CTL: RXONLY Position            */
N#define SPI_CTL_RXONLY_Msk               (0x1ul << SPI_CTL_RXONLY_Pos)                     /*!< SPI_T::CTL: RXONLY Mask                */
N
N#define SPI_CTL_UNITIEN_Pos              (17)                                              /*!< SPI_T::CTL: UNITIEN Position           */
N#define SPI_CTL_UNITIEN_Msk              (0x1ul << SPI_CTL_UNITIEN_Pos)                    /*!< SPI_T::CTL: UNITIEN Mask               */
N
N#define SPI_CTL_SLAVE_Pos                (18)                                              /*!< SPI_T::CTL: SLAVE Position             */
N#define SPI_CTL_SLAVE_Msk                (0x1ul << SPI_CTL_SLAVE_Pos)                      /*!< SPI_T::CTL: SLAVE Mask                 */
N
N#define SPI_CTL_REORDER_Pos              (19)                                              /*!< SPI_T::CTL: REORDER Position           */
N#define SPI_CTL_REORDER_Msk              (0x1ul << SPI_CTL_REORDER_Pos)                    /*!< SPI_T::CTL: REORDER Mask               */
N
N#define SPI_CTL_DATDIR_Pos               (20)                                              /*!< SPI_T::CTL: DATDIR Position            */
N#define SPI_CTL_DATDIR_Msk               (0x1ul << SPI_CTL_DATDIR_Pos)                     /*!< SPI_T::CTL: DATDIR Mask                */
N
N#define SPI_CLKDIV_DIVIDER_Pos           (0)                                               /*!< SPI_T::CLKDIV: DIVIDER Position        */
N#define SPI_CLKDIV_DIVIDER_Msk           (0x1fful << SPI_CLKDIV_DIVIDER_Pos)                /*!< SPI_T::CLKDIV: DIVIDER Mask            */
N
N#define SPI_SSCTL_SS_Pos                 (0)                                               /*!< SPI_T::SSCTL: SS Position              */
N#define SPI_SSCTL_SS_Msk                 (0x1ul << SPI_SSCTL_SS_Pos)                       /*!< SPI_T::SSCTL: SS Mask                  */
N
N#define SPI_SSCTL_SSACTPOL_Pos           (2)                                               /*!< SPI_T::SSCTL: SSACTPOL Position        */
N#define SPI_SSCTL_SSACTPOL_Msk           (0x1ul << SPI_SSCTL_SSACTPOL_Pos)                 /*!< SPI_T::SSCTL: SSACTPOL Mask            */
N
N#define SPI_SSCTL_AUTOSS_Pos             (3)                                               /*!< SPI_T::SSCTL: AUTOSS Position          */
N#define SPI_SSCTL_AUTOSS_Msk             (0x1ul << SPI_SSCTL_AUTOSS_Pos)                   /*!< SPI_T::SSCTL: AUTOSS Mask              */
N
N#define SPI_SSCTL_SLVBEIEN_Pos           (8)                                               /*!< SPI_T::SSCTL: SLVBEIEN Position        */
N#define SPI_SSCTL_SLVBEIEN_Msk           (0x1ul << SPI_SSCTL_SLVBEIEN_Pos)                 /*!< SPI_T::SSCTL: SLVBEIEN Mask            */
N
N#define SPI_SSCTL_SLVURIEN_Pos           (9)                                               /*!< SPI_T::SSCTL: SLVURIEN Position        */
N#define SPI_SSCTL_SLVURIEN_Msk           (0x1ul << SPI_SSCTL_SLVURIEN_Pos)                 /*!< SPI_T::SSCTL: SLVURIEN Mask            */
N
N#define SPI_SSCTL_SSACTIEN_Pos           (12)                                              /*!< SPI_T::SSCTL: SSACTIEN Position        */
N#define SPI_SSCTL_SSACTIEN_Msk           (0x1ul << SPI_SSCTL_SSACTIEN_Pos)                 /*!< SPI_T::SSCTL: SSACTIEN Mask            */
N
N#define SPI_SSCTL_SSINAIEN_Pos           (13)                                              /*!< SPI_T::SSCTL: SSINAIEN Position        */
N#define SPI_SSCTL_SSINAIEN_Msk           (0x1ul << SPI_SSCTL_SSINAIEN_Pos)                 /*!< SPI_T::SSCTL: SSINAIEN Mask            */
N
N#define SPI_PDMACTL_TXPDMAEN_Pos         (0)                                               /*!< SPI_T::PDMACTL: TXPDMAEN Position      */
N#define SPI_PDMACTL_TXPDMAEN_Msk         (0x1ul << SPI_PDMACTL_TXPDMAEN_Pos)               /*!< SPI_T::PDMACTL: TXPDMAEN Mask          */
N
N#define SPI_PDMACTL_RXPDMAEN_Pos         (1)                                               /*!< SPI_T::PDMACTL: RXPDMAEN Position      */
N#define SPI_PDMACTL_RXPDMAEN_Msk         (0x1ul << SPI_PDMACTL_RXPDMAEN_Pos)               /*!< SPI_T::PDMACTL: RXPDMAEN Mask          */
N
N#define SPI_PDMACTL_PDMARST_Pos          (2)                                               /*!< SPI_T::PDMACTL: PDMARST Position       */
N#define SPI_PDMACTL_PDMARST_Msk          (0x1ul << SPI_PDMACTL_PDMARST_Pos)                /*!< SPI_T::PDMACTL: PDMARST Mask           */
N
N#define SPI_FIFOCTL_RXRST_Pos            (0)                                               /*!< SPI_T::FIFOCTL: RXRST Position         */
N#define SPI_FIFOCTL_RXRST_Msk            (0x1ul << SPI_FIFOCTL_RXRST_Pos)                  /*!< SPI_T::FIFOCTL: RXRST Mask             */
N
N#define SPI_FIFOCTL_TXRST_Pos            (1)                                               /*!< SPI_T::FIFOCTL: TXRST Position         */
N#define SPI_FIFOCTL_TXRST_Msk            (0x1ul << SPI_FIFOCTL_TXRST_Pos)                  /*!< SPI_T::FIFOCTL: TXRST Mask             */
N
N#define SPI_FIFOCTL_RXTHIEN_Pos          (2)                                               /*!< SPI_T::FIFOCTL: RXTHIEN Position       */
N#define SPI_FIFOCTL_RXTHIEN_Msk          (0x1ul << SPI_FIFOCTL_RXTHIEN_Pos)                /*!< SPI_T::FIFOCTL: RXTHIEN Mask           */
N
N#define SPI_FIFOCTL_TXTHIEN_Pos          (3)                                               /*!< SPI_T::FIFOCTL: TXTHIEN Position       */
N#define SPI_FIFOCTL_TXTHIEN_Msk          (0x1ul << SPI_FIFOCTL_TXTHIEN_Pos)                /*!< SPI_T::FIFOCTL: TXTHIEN Mask           */
N
N#define SPI_FIFOCTL_RXTOIEN_Pos          (4)                                               /*!< SPI_T::FIFOCTL: RXTOIEN Position       */
N#define SPI_FIFOCTL_RXTOIEN_Msk          (0x1ul << SPI_FIFOCTL_RXTOIEN_Pos)                /*!< SPI_T::FIFOCTL: RXTOIEN Mask           */
N
N#define SPI_FIFOCTL_RXOVIEN_Pos          (5)                                               /*!< SPI_T::FIFOCTL: RXOVIEN Position       */
N#define SPI_FIFOCTL_RXOVIEN_Msk          (0x1ul << SPI_FIFOCTL_RXOVIEN_Pos)                /*!< SPI_T::FIFOCTL: RXOVIEN Mask           */
N
N#define SPI_FIFOCTL_TXUFPOL_Pos          (6)                                               /*!< SPI_T::FIFOCTL: TXUFPOL Position       */
N#define SPI_FIFOCTL_TXUFPOL_Msk          (0x1ul << SPI_FIFOCTL_TXUFPOL_Pos)                /*!< SPI_T::FIFOCTL: TXUFPOL Mask           */
N
N#define SPI_FIFOCTL_TXUFIEN_Pos          (7)                                               /*!< SPI_T::FIFOCTL: TXUFIEN Position       */
N#define SPI_FIFOCTL_TXUFIEN_Msk          (0x1ul << SPI_FIFOCTL_TXUFIEN_Pos)                /*!< SPI_T::FIFOCTL: TXUFIEN Mask           */
N
N#define SPI_FIFOCTL_RXFBCLR_Pos          (8)                                               /*!< SPI_T::FIFOCTL: RXFBCLR Position       */
N#define SPI_FIFOCTL_RXFBCLR_Msk          (0x1ul << SPI_FIFOCTL_RXFBCLR_Pos)                /*!< SPI_T::FIFOCTL: RXFBCLR Mask           */
N
N#define SPI_FIFOCTL_TXFBCLR_Pos          (9)                                               /*!< SPI_T::FIFOCTL: TXFBCLR Position       */
N#define SPI_FIFOCTL_TXFBCLR_Msk          (0x1ul << SPI_FIFOCTL_TXFBCLR_Pos)                /*!< SPI_T::FIFOCTL: TXFBCLR Mask           */
N
N#define SPI_FIFOCTL_RXTH_Pos             (24)                                              /*!< SPI_T::FIFOCTL: RXTH Position          */
N#define SPI_FIFOCTL_RXTH_Msk             (0x7ul << SPI_FIFOCTL_RXTH_Pos)                   /*!< SPI_T::FIFOCTL: RXTH Mask              */
N
N#define SPI_FIFOCTL_TXTH_Pos             (28)                                              /*!< SPI_T::FIFOCTL: TXTH Position          */
N#define SPI_FIFOCTL_TXTH_Msk             (0x7ul << SPI_FIFOCTL_TXTH_Pos)                   /*!< SPI_T::FIFOCTL: TXTH Mask              */
N
N#define SPI_STATUS_BUSY_Pos              (0)                                               /*!< SPI_T::STATUS: BUSY Position           */
N#define SPI_STATUS_BUSY_Msk              (0x1ul << SPI_STATUS_BUSY_Pos)                    /*!< SPI_T::STATUS: BUSY Mask               */
N
N#define SPI_STATUS_UNITIF_Pos            (1)                                               /*!< SPI_T::STATUS: UNITIF Position         */
N#define SPI_STATUS_UNITIF_Msk            (0x1ul << SPI_STATUS_UNITIF_Pos)                  /*!< SPI_T::STATUS: UNITIF Mask             */
N
N#define SPI_STATUS_SSACTIF_Pos           (2)                                               /*!< SPI_T::STATUS: SSACTIF Position        */
N#define SPI_STATUS_SSACTIF_Msk           (0x1ul << SPI_STATUS_SSACTIF_Pos)                 /*!< SPI_T::STATUS: SSACTIF Mask            */
N
N#define SPI_STATUS_SSINAIF_Pos           (3)                                               /*!< SPI_T::STATUS: SSINAIF Position        */
N#define SPI_STATUS_SSINAIF_Msk           (0x1ul << SPI_STATUS_SSINAIF_Pos)                 /*!< SPI_T::STATUS: SSINAIF Mask            */
N
N#define SPI_STATUS_SSLINE_Pos            (4)                                               /*!< SPI_T::STATUS: SSLINE Position         */
N#define SPI_STATUS_SSLINE_Msk            (0x1ul << SPI_STATUS_SSLINE_Pos)                  /*!< SPI_T::STATUS: SSLINE Mask             */
N
N#define SPI_STATUS_SLVBEIF_Pos           (6)                                               /*!< SPI_T::STATUS: SLVBEIF Position        */
N#define SPI_STATUS_SLVBEIF_Msk           (0x1ul << SPI_STATUS_SLVBEIF_Pos)                 /*!< SPI_T::STATUS: SLVBEIF Mask            */
N
N#define SPI_STATUS_SLVURIF_Pos           (7)                                               /*!< SPI_T::STATUS: SLVURIF Position        */
N#define SPI_STATUS_SLVURIF_Msk           (0x1ul << SPI_STATUS_SLVURIF_Pos)                 /*!< SPI_T::STATUS: SLVURIF Mask            */
N
N#define SPI_STATUS_RXEMPTY_Pos           (8)                                               /*!< SPI_T::STATUS: RXEMPTY Position        */
N#define SPI_STATUS_RXEMPTY_Msk           (0x1ul << SPI_STATUS_RXEMPTY_Pos)                 /*!< SPI_T::STATUS: RXEMPTY Mask            */
N
N#define SPI_STATUS_RXFULL_Pos            (9)                                               /*!< SPI_T::STATUS: RXFULL Position         */
N#define SPI_STATUS_RXFULL_Msk            (0x1ul << SPI_STATUS_RXFULL_Pos)                  /*!< SPI_T::STATUS: RXFULL Mask             */
N
N#define SPI_STATUS_RXTHIF_Pos            (10)                                              /*!< SPI_T::STATUS: RXTHIF Position         */
N#define SPI_STATUS_RXTHIF_Msk            (0x1ul << SPI_STATUS_RXTHIF_Pos)                  /*!< SPI_T::STATUS: RXTHIF Mask             */
N
N#define SPI_STATUS_RXOVIF_Pos            (11)                                              /*!< SPI_T::STATUS: RXOVIF Position         */
N#define SPI_STATUS_RXOVIF_Msk            (0x1ul << SPI_STATUS_RXOVIF_Pos)                  /*!< SPI_T::STATUS: RXOVIF Mask             */
N
N#define SPI_STATUS_RXTOIF_Pos            (12)                                              /*!< SPI_T::STATUS: RXTOIF Position         */
N#define SPI_STATUS_RXTOIF_Msk            (0x1ul << SPI_STATUS_RXTOIF_Pos)                  /*!< SPI_T::STATUS: RXTOIF Mask             */
N
N#define SPI_STATUS_SPIENSTS_Pos          (15)                                              /*!< SPI_T::STATUS: SPIENSTS Position       */
N#define SPI_STATUS_SPIENSTS_Msk          (0x1ul << SPI_STATUS_SPIENSTS_Pos)                /*!< SPI_T::STATUS: SPIENSTS Mask           */
N
N#define SPI_STATUS_TXEMPTY_Pos           (16)                                              /*!< SPI_T::STATUS: TXEMPTY Position        */
N#define SPI_STATUS_TXEMPTY_Msk           (0x1ul << SPI_STATUS_TXEMPTY_Pos)                 /*!< SPI_T::STATUS: TXEMPTY Mask            */
N
N#define SPI_STATUS_TXFULL_Pos            (17)                                              /*!< SPI_T::STATUS: TXFULL Position         */
N#define SPI_STATUS_TXFULL_Msk            (0x1ul << SPI_STATUS_TXFULL_Pos)                  /*!< SPI_T::STATUS: TXFULL Mask             */
N
N#define SPI_STATUS_TXTHIF_Pos            (18)                                              /*!< SPI_T::STATUS: TXTHIF Position         */
N#define SPI_STATUS_TXTHIF_Msk            (0x1ul << SPI_STATUS_TXTHIF_Pos)                  /*!< SPI_T::STATUS: TXTHIF Mask             */
N
N#define SPI_STATUS_TXUFIF_Pos            (19)                                              /*!< SPI_T::STATUS: TXUFIF Position         */
N#define SPI_STATUS_TXUFIF_Msk            (0x1ul << SPI_STATUS_TXUFIF_Pos)                  /*!< SPI_T::STATUS: TXUFIF Mask             */
N
N#define SPI_STATUS_TXRXRST_Pos           (23)                                              /*!< SPI_T::STATUS: TXRXRST Position        */
N#define SPI_STATUS_TXRXRST_Msk           (0x1ul << SPI_STATUS_TXRXRST_Pos)                 /*!< SPI_T::STATUS: TXRXRST Mask            */
N
N#define SPI_STATUS_RXCNT_Pos             (24)                                              /*!< SPI_T::STATUS: RXCNT Position          */
N#define SPI_STATUS_RXCNT_Msk             (0xful << SPI_STATUS_RXCNT_Pos)                   /*!< SPI_T::STATUS: RXCNT Mask              */
N
N#define SPI_STATUS_TXCNT_Pos             (28)                                              /*!< SPI_T::STATUS: TXCNT Position          */
N#define SPI_STATUS_TXCNT_Msk             (0xful << SPI_STATUS_TXCNT_Pos)                   /*!< SPI_T::STATUS: TXCNT Mask              */
N
N#define SPI_TX_TX_Pos                    (0)                                               /*!< SPI_T::TX: TX Position                 */
N#define SPI_TX_TX_Msk                    (0xfffffffful << SPI_TX_TX_Pos)                   /*!< SPI_T::TX: TX Mask                     */
N
N#define SPI_RX_RX_Pos                    (0)                                               /*!< SPI_T::RX: RX Position                 */
N#define SPI_RX_RX_Msk                    (0xfffffffful << SPI_RX_RX_Pos)                   /*!< SPI_T::RX: RX Mask                     */
N
N#define SPI_I2SCTL_I2SEN_Pos             (0)                                               /*!< SPI_T::I2SCTL: I2SEN Position          */
N#define SPI_I2SCTL_I2SEN_Msk             (0x1ul << SPI_I2SCTL_I2SEN_Pos)                   /*!< SPI_T::I2SCTL: I2SEN Mask              */
N
N#define SPI_I2SCTL_TXEN_Pos              (1)                                               /*!< SPI_T::I2SCTL: TXEN Position           */
N#define SPI_I2SCTL_TXEN_Msk              (0x1ul << SPI_I2SCTL_TXEN_Pos)                    /*!< SPI_T::I2SCTL: TXEN Mask               */
N
N#define SPI_I2SCTL_RXEN_Pos              (2)                                               /*!< SPI_T::I2SCTL: RXEN Position           */
N#define SPI_I2SCTL_RXEN_Msk              (0x1ul << SPI_I2SCTL_RXEN_Pos)                    /*!< SPI_T::I2SCTL: RXEN Mask               */
N
N#define SPI_I2SCTL_MUTE_Pos              (3)                                               /*!< SPI_T::I2SCTL: MUTE Position           */
N#define SPI_I2SCTL_MUTE_Msk              (0x1ul << SPI_I2SCTL_MUTE_Pos)                    /*!< SPI_T::I2SCTL: MUTE Mask               */
N
N#define SPI_I2SCTL_WDWIDTH_Pos           (4)                                               /*!< SPI_T::I2SCTL: WDWIDTH Position        */
N#define SPI_I2SCTL_WDWIDTH_Msk           (0x3ul << SPI_I2SCTL_WDWIDTH_Pos)                 /*!< SPI_T::I2SCTL: WDWIDTH Mask            */
N
N#define SPI_I2SCTL_MONO_Pos              (6)                                               /*!< SPI_T::I2SCTL: MONO Position           */
N#define SPI_I2SCTL_MONO_Msk              (0x1ul << SPI_I2SCTL_MONO_Pos)                    /*!< SPI_T::I2SCTL: MONO Mask               */
N
N#define SPI_I2SCTL_ORDER_Pos             (7)                                               /*!< SPI_T::I2SCTL: ORDER Position          */
N#define SPI_I2SCTL_ORDER_Msk             (0x1ul << SPI_I2SCTL_ORDER_Pos)                   /*!< SPI_T::I2SCTL: ORDER Mask              */
N
N#define SPI_I2SCTL_SLAVE_Pos             (8)                                               /*!< SPI_T::I2SCTL: SLAVE Position          */
N#define SPI_I2SCTL_SLAVE_Msk             (0x1ul << SPI_I2SCTL_SLAVE_Pos)                   /*!< SPI_T::I2SCTL: SLAVE Mask              */
N
N#define SPI_I2SCTL_MCLKEN_Pos            (15)                                              /*!< SPI_T::I2SCTL: MCLKEN Position         */
N#define SPI_I2SCTL_MCLKEN_Msk            (0x1ul << SPI_I2SCTL_MCLKEN_Pos)                  /*!< SPI_T::I2SCTL: MCLKEN Mask             */
N
N#define SPI_I2SCTL_RZCEN_Pos             (16)                                              /*!< SPI_T::I2SCTL: RZCEN Position          */
N#define SPI_I2SCTL_RZCEN_Msk             (0x1ul << SPI_I2SCTL_RZCEN_Pos)                   /*!< SPI_T::I2SCTL: RZCEN Mask              */
N
N#define SPI_I2SCTL_LZCEN_Pos             (17)                                              /*!< SPI_T::I2SCTL: LZCEN Position          */
N#define SPI_I2SCTL_LZCEN_Msk             (0x1ul << SPI_I2SCTL_LZCEN_Pos)                   /*!< SPI_T::I2SCTL: LZCEN Mask              */
N
N#define SPI_I2SCTL_RXLCH_Pos             (23)                                              /*!< SPI_T::I2SCTL: RXLCH Position          */
N#define SPI_I2SCTL_RXLCH_Msk             (0x1ul << SPI_I2SCTL_RXLCH_Pos)                   /*!< SPI_T::I2SCTL: RXLCH Mask              */
N
N#define SPI_I2SCTL_RZCIEN_Pos            (24)                                              /*!< SPI_T::I2SCTL: RZCIEN Position         */
N#define SPI_I2SCTL_RZCIEN_Msk            (0x1ul << SPI_I2SCTL_RZCIEN_Pos)                  /*!< SPI_T::I2SCTL: RZCIEN Mask             */
N
N#define SPI_I2SCTL_LZCIEN_Pos            (25)                                              /*!< SPI_T::I2SCTL: LZCIEN Position         */
N#define SPI_I2SCTL_LZCIEN_Msk            (0x1ul << SPI_I2SCTL_LZCIEN_Pos)                  /*!< SPI_T::I2SCTL: LZCIEN Mask             */
N
N#define SPI_I2SCTL_FORMAT_Pos            (28)                                              /*!< SPI_T::I2SCTL: FORMAT Position         */
N#define SPI_I2SCTL_FORMAT_Msk            (0x3ul << SPI_I2SCTL_FORMAT_Pos)                  /*!< SPI_T::I2SCTL: FORMAT Mask             */
N
N#define SPI_I2SCLK_MCLKDIV_Pos           (0)                                               /*!< SPI_T::I2SCLK: MCLKDIV Position        */
N#define SPI_I2SCLK_MCLKDIV_Msk           (0x7ful << SPI_I2SCLK_MCLKDIV_Pos)                /*!< SPI_T::I2SCLK: MCLKDIV Mask            */
N
N#define SPI_I2SCLK_BCLKDIV_Pos           (8)                                               /*!< SPI_T::I2SCLK: BCLKDIV Position        */
N#define SPI_I2SCLK_BCLKDIV_Msk           (0x3fful << SPI_I2SCLK_BCLKDIV_Pos)               /*!< SPI_T::I2SCLK: BCLKDIV Mask            */
N
N#define SPI_I2SSTS_RIGHT_Pos             (4)                                               /*!< SPI_T::I2SSTS: RIGHT Position          */
N#define SPI_I2SSTS_RIGHT_Msk             (0x1ul << SPI_I2SSTS_RIGHT_Pos)                   /*!< SPI_T::I2SSTS: RIGHT Mask              */
N
N#define SPI_I2SSTS_RXEMPTY_Pos           (8)                                               /*!< SPI_T::I2SSTS: RXEMPTY Position        */
N#define SPI_I2SSTS_RXEMPTY_Msk           (0x1ul << SPI_I2SSTS_RXEMPTY_Pos)                 /*!< SPI_T::I2SSTS: RXEMPTY Mask            */
N
N#define SPI_I2SSTS_RXFULL_Pos            (9)                                               /*!< SPI_T::I2SSTS: RXFULL Position         */
N#define SPI_I2SSTS_RXFULL_Msk            (0x1ul << SPI_I2SSTS_RXFULL_Pos)                  /*!< SPI_T::I2SSTS: RXFULL Mask             */
N
N#define SPI_I2SSTS_RXTHIF_Pos            (10)                                              /*!< SPI_T::I2SSTS: RXTHIF Position         */
N#define SPI_I2SSTS_RXTHIF_Msk            (0x1ul << SPI_I2SSTS_RXTHIF_Pos)                  /*!< SPI_T::I2SSTS: RXTHIF Mask             */
N
N#define SPI_I2SSTS_RXOVIF_Pos            (11)                                              /*!< SPI_T::I2SSTS: RXOVIF Position         */
N#define SPI_I2SSTS_RXOVIF_Msk            (0x1ul << SPI_I2SSTS_RXOVIF_Pos)                  /*!< SPI_T::I2SSTS: RXOVIF Mask             */
N
N#define SPI_I2SSTS_RXTOIF_Pos            (12)                                              /*!< SPI_T::I2SSTS: RXTOIF Position         */
N#define SPI_I2SSTS_RXTOIF_Msk            (0x1ul << SPI_I2SSTS_RXTOIF_Pos)                  /*!< SPI_T::I2SSTS: RXTOIF Mask             */
N
N#define SPI_I2SSTS_I2SENSTS_Pos          (15)                                              /*!< SPI_T::I2SSTS: I2SENSTS Position       */
N#define SPI_I2SSTS_I2SENSTS_Msk          (0x1ul << SPI_I2SSTS_I2SENSTS_Pos)                /*!< SPI_T::I2SSTS: I2SENSTS Mask           */
N
N#define SPI_I2SSTS_TXEMPTY_Pos           (16)                                              /*!< SPI_T::I2SSTS: TXEMPTY Position        */
N#define SPI_I2SSTS_TXEMPTY_Msk           (0x1ul << SPI_I2SSTS_TXEMPTY_Pos)                 /*!< SPI_T::I2SSTS: TXEMPTY Mask            */
N
N#define SPI_I2SSTS_TXFULL_Pos            (17)                                              /*!< SPI_T::I2SSTS: TXFULL Position         */
N#define SPI_I2SSTS_TXFULL_Msk            (0x1ul << SPI_I2SSTS_TXFULL_Pos)                  /*!< SPI_T::I2SSTS: TXFULL Mask             */
N
N#define SPI_I2SSTS_TXTHIF_Pos            (18)                                              /*!< SPI_T::I2SSTS: TXTHIF Position         */
N#define SPI_I2SSTS_TXTHIF_Msk            (0x1ul << SPI_I2SSTS_TXTHIF_Pos)                  /*!< SPI_T::I2SSTS: TXTHIF Mask             */
N
N#define SPI_I2SSTS_TXUFIF_Pos            (19)                                              /*!< SPI_T::I2SSTS: TXUFIF Position         */
N#define SPI_I2SSTS_TXUFIF_Msk            (0x1ul << SPI_I2SSTS_TXUFIF_Pos)                  /*!< SPI_T::I2SSTS: TXUFIF Mask             */
N
N#define SPI_I2SSTS_RZCIF_Pos             (20)                                              /*!< SPI_T::I2SSTS: RZCIF Position          */
N#define SPI_I2SSTS_RZCIF_Msk             (0x1ul << SPI_I2SSTS_RZCIF_Pos)                   /*!< SPI_T::I2SSTS: RZCIF Mask              */
N
N#define SPI_I2SSTS_LZCIF_Pos             (21)                                              /*!< SPI_T::I2SSTS: LZCIF Position          */
N#define SPI_I2SSTS_LZCIF_Msk             (0x1ul << SPI_I2SSTS_LZCIF_Pos)                   /*!< SPI_T::I2SSTS: LZCIF Mask              */
N
N#define SPI_I2SSTS_TXRXRST_Pos           (23)                                              /*!< SPI_T::I2SSTS: TXRXRST Position        */
N#define SPI_I2SSTS_TXRXRST_Msk           (0x1ul << SPI_I2SSTS_TXRXRST_Pos)                 /*!< SPI_T::I2SSTS: TXRXRST Mask            */
N
N#define SPI_I2SSTS_RXCNT_Pos             (24)                                              /*!< SPI_T::I2SSTS: RXCNT Position          */
N#define SPI_I2SSTS_RXCNT_Msk             (0x7ul << SPI_I2SSTS_RXCNT_Pos)                   /*!< SPI_T::I2SSTS: RXCNT Mask              */
N
N#define SPI_I2SSTS_TXCNT_Pos             (28)                                              /*!< SPI_T::I2SSTS: TXCNT Position          */
N#define SPI_I2SSTS_TXCNT_Msk             (0x7ul << SPI_I2SSTS_TXCNT_Pos)                   /*!< SPI_T::I2SSTS: TXCNT Mask              */
N
N/**@}*/ /* SPI_CONST */
N/**@}*/ /* end of SPI register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __SPI_REG_H__ */
L 174 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "sys_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\sys_reg.h" 1
N/**************************************************************************//**
N * @file     sys_reg.h
N * @version  V1.00
N * @brief    SYS register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __SYS_REG_H__
N#define __SYS_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup SYS System Manger Controller (SYS)
N    Memory Mapped Structure for SYS Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var SYS_T::PDID
N     * Offset: 0x00  Part Device Identification Number Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |PDID      |Part Device Identification Number (Read Only)
N     * |        |          |This register reflects device part number code. Software can read this register to identify which device is used.
N     * @var SYS_T::RSTSTS
N     * Offset: 0x04  System Reset Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |PORF      |POR Reset Flag
N     * |        |          |The POR reset flag is set by the "Reset Signal" from the Power-on Reset (POR) Controller or bit CHIPRST (SYS_IPRST0[0]) to indicate the previous reset source.
N     * |        |          |0 = No reset from POR or CHIPRST.
N     * |        |          |1 = Power-on Reset (POR) or CHIPRST had issued the reset signal to reset the system.
N     * |        |          |Note: Write 1 to clear this bit to 0.
N     * |[1]     |PINRF     |NRESET Pin Reset Flag
N     * |        |          |The nRESET pin reset flag is set by the "Reset Signal" from the nRESET Pin to indicate the previous reset source.
N     * |        |          |0 = No reset from nRESET pin.
N     * |        |          |1 = Pin nRESET had issued the reset signal to reset the system.
N     * |        |          |Note: Write 1 to clear this bit to 0.
N     * |[2]     |WDTRF     |WDT Reset Flag
N     * |        |          |The WDT reset flag is set by the "Reset Signal" from the Watchdog Timer or Window Watchdog Timer to indicate the previous reset source.
N     * |        |          |0 = No reset from watchdog timer or window watchdog timer.
N     * |        |          |1 = The watchdog timer or window watchdog timer had issued the reset signal to reset the system.
N     * |        |          |Note1: Write 1 to clear this bit to 0.
N     * |        |          |Note2: Watchdog Timer register RSTF(WDT_CTL[2]) bit is set if the system has been reset by WDT time-out reset
N     * |        |          |Window Watchdog Timer register WWDTRF(WWDT_STATUS[1]) bit is set if the system has been reset by WWDT time-out reset.
N     * |[3]     |LVRF      |LVR Reset Flag
N     * |        |          |The LVR reset flag is set by the "Reset Signal" from the Low Voltage Reset Controller to indicate the previous reset source.
N     * |        |          |0 = No reset from LVR.
N     * |        |          |1 = LVR controller had issued the reset signal to reset the system.
N     * |        |          |Note: Write 1 to clear this bit to 0.
N     * |[4]     |BODRF     |BOD Reset Flag
N     * |        |          |The BOD reset flag is set by the "Reset Signal" from the Brown-Out Detector to indicate the previous reset source.
N     * |        |          |0 = No reset from BOD.
N     * |        |          |1 = The BOD had issued the reset signal to reset the system.
N     * |        |          |Note: Write 1 to clear this bit to 0.
N     * |[5]     |SYSRF     |System Reset Flag
N     * |        |          |The system reset flag is set by the "Reset Signal" from the Cortex-M0 Core to indicate the previous reset source.
N     * |        |          |0 = No reset from Cortex-M0.
N     * |        |          |1 = The Cortex- M0 had issued the reset signal to reset the system by writing 1 to the bit SYSRESETREQ(AIRCR[2], Application Interrupt and Reset Control Register, address = 0xE000ED0C) in system control registers of Cortex-M0 core.
N     * |        |          |Note: Write 1 to clear this bit to 0.
N     * |[7]     |CPURF     |CPU Reset Flag
N     * |        |          |The CPU reset flag is set by hardware if software writes CPURST (SYS_IPRST0[1]) 1 to reset Cortex- M0 Core and Flash Memory Controller (FMC).
N     * |        |          |0 = No reset from CPU.
N     * |        |          |1 = The Cortex-M0 Core and FMC are reset by software setting CPURST to 1.
N     * |        |          |Note: Write to clear this bit to 0.
N     * |[8]     |CPULKRF   |CPU Lockup Reset Flag
N     * |        |          |0 = No reset from CPU lockup happened.
N     * |        |          |1 = The Cortex-M0 lockup happened and chip is reset.
N     * |        |          |Note1: Write 1 to clear this bit to 0.
N     * |        |          |Note2: When CPU lockup happened under ICE is connected, This flag will set to 1 but chip will not reset.
N     * @var SYS_T::IPRST0
N     * Offset: 0x08  Peripheral  Reset Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CHIPRST   |Chip One-shot Reset (Write Protect)
N     * |        |          |Setting this bit will reset the whole chip, including Processor core and all peripherals, and this bit will automatically return to 0 after the 2 clock cycles.
N     * |        |          |The CHIPRST is same as the POR reset, all the chip controllers is reset and the chip setting from flash are also reload.
N     * |        |          |About the difference between CHIPRST and SYSRESETREQ(AIRCR[2]), please refer to section 6.2.2.
N     * |        |          |0 = Chip normal operation.
N     * |        |          |1 = Chip one-shot reset.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: Reset by powr on reset.
N     * |[1]     |CPURST    |Processor Core One-shot Reset (Write Protect)
N     * |        |          |Setting this bit will only reset the processor core and Flash Memory Controller(FMC), and this bit will automatically return to 0 after the 2 clock cycles.
N     * |        |          |0 = Processor core normal operation.
N     * |        |          |1 = Processor core one-shot reset.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[2]     |PDMARST   |PDMA Controller Reset (Write Protect)
N     * |        |          |Setting this bit to 1 will generate a reset signal to the PDMA
N     * |        |          |User needs to set this bit to 0 to release from reset state.
N     * |        |          |0 = PDMA controller normal operation.
N     * |        |          |1 = PDMA controller reset.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[3]     |EBIRST    |EBI Controller Reset (Write Protect)
N     * |        |          |Set this bit to 1 will generate a reset signal to the EBI
N     * |        |          |User needs to set this bit to 0 to release from the reset state.
N     * |        |          |0 = EBI controller normal operation.
N     * |        |          |1 = EBI controller reset.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[4]     |HDIVRST   |HDIV Controller Reset (Write Protect)
N     * |        |          |Set this bit to 1 will generate a reset signal to the hardware divider.
N     * |        |          |User needs to set this bit to 0 to release from the reset state.
N     * |        |          |0 = Hardware divider controller normal operation.
N     * |        |          |1 = Hardware divider controller reset.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[7]     |CRCRST    |CRC Calculation Controller Reset (Write Protect)
N     * |        |          |Set this bit to 1 will generate a reset signal to the CRC calculation controller
N     * |        |          |User needs to set this bit to 0 to release from the reset state.
N     * |        |          |0 = CRC calculation controller normal operation.
N     * |        |          |1 = CRC calculation controller reset.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var SYS_T::IPRST1
N     * Offset: 0x0C  Peripheral Reset Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |GPIORST   |GPIO Controller Reset
N     * |        |          |0 = GPIO controller normal operation.
N     * |        |          |1 = GPIO controller reset.
N     * |[2]     |TMR0RST   |Timer0 Controller Reset
N     * |        |          |0 = Timer0 controller normal operation.
N     * |        |          |1 = Timer0 controller reset.
N     * |[3]     |TMR1RST   |Timer1 Controller Reset
N     * |        |          |0 = Timer1 controller normal operation.
N     * |        |          |1 = Timer1 controller reset.
N     * |[4]     |TMR2RST   |Timer2 Controller Reset
N     * |        |          |0 = Timer2 controller normal operation.
N     * |        |          |1 = Timer2 controller reset.
N     * |[5]     |TMR3RST   |Timer3 Controller Reset
N     * |        |          |0 = Timer3 controller normal operation.
N     * |        |          |1 = Timer3 controller reset.
N     * |[7]     |ACMP01RST |Analog Comparator 0/1 Controller Reset
N     * |        |          |0 = Analog Comparator 0/1 controller normal operation.
N     * |        |          |1 = Analog Comparator 0/1 controller reset.
N     * |[8]     |I2C0RST   |I2C0 Controller Reset
N     * |        |          |0 = I2C0 controller normal operation.
N     * |        |          |1 = I2C0 controller reset.
N     * |[9]     |I2C1RST   |I2C1 Controller Reset
N     * |        |          |0 = I2C1 controller normal operation.
N     * |        |          |1 = I2C1 controller reset.
N     * |[13]    |SPI0RST   |SPI0 Controller Reset
N     * |        |          |0 = SPI0 controller normal operation.
N     * |        |          |1 = SPI0 controller reset.
N     * |[16]    |UART0RST  |UART0 Controller Reset
N     * |        |          |0 = UART0 controller normal operation.
N     * |        |          |1 = UART0 controller reset.
N     * |[17]    |UART1RST  |UART1 Controller Reset
N     * |        |          |0 = UART1 controller normal operation.
N     * |        |          |1 = UART1 controller reset.
N     * |[18]    |UART2RST  |UART2 Controller Reset
N     * |        |          |0 = UART2 controller normal operation.
N     * |        |          |1 = UART2 controller reset.
N     * |[27]    |USBDRST   |USBD Controller Reset
N     * |        |          |0 = USBD controller normal operation.
N     * |        |          |1 = USBD controller reset.
N     * |[28]    |ADCRST    |ADC Controller Reset
N     * |        |          |0 = ADC controller normal operation.
N     * |        |          |1 = ADC controller reset.
N     * @var SYS_T::IPRST2
N     * Offset: 0x10  Peripheral Reset Control Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8]     |USCI0RST  |USCI0 Controller Reset
N     * |        |          |0 = USCI0 controller normal operation.
N     * |        |          |1 = USCI0 controller reset.
N     * |[16]    |PWM0RST   |PWM0 Controller Reset
N     * |        |          |0 = PWM0 controller normal operation.
N     * |        |          |1 = PWM0 controller reset.
N     * |[17]    |PWM1RST   |PWM1 Controller Reset
N     * |        |          |0 = PWM1 controller normal operation.
N     * |        |          |1 = PWM1 controller reset.
N     * @var SYS_T::BODCTL
N     * Offset: 0x18  Brown-out Detector Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BODEN     |Brown-out Detector Enable Bit (Write Protect)
N     * |        |          |The default value is set by flash controller user configuration register CBODEN (CONFIG0 [19]).
N     * |        |          |0 = Brown-out Detector function Disabled.
N     * |        |          |1 = Brown-out Detector function Enabled.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: Reset by powr on reset.
N     * |[3]     |BODRSTEN  |Brown-out Reset Enable Bit (Write Protect)
N     * |        |          |The default value is set by flash controller user configuration register CBORST(CONFIG0[20]) bit .
N     * |        |          |0 = Brown-out "INTERRUPT" function Enabled.
N     * |        |          |1 = Brown-out "RESET" function Enabled.
N     * |        |          |Note1:
N     * |        |          |While the Brown-out Detector function is enabled (BODEN high) and BOD reset function is enabled (BODRSTEN high), BOD will assert a signal to reset chip when the detected voltage is lower than the threshold (BODOUT high).
N     * |        |          |While the BOD function is enabled (BODEN high) and BOD interrupt function is enabled (BODRSTEN low), BOD will assert an interrupt if BODOUT is high. BOD interrupt will keep till to the BODEN set to 0. BOD interrupt can be blocked by disabling the NVIC BOD interrupt or disabling BOD function (set BODEN low).
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note3: Reset by powr on reset.
N     * |[4]     |BODIF     |Brown-out Detector Interrupt Flag
N     * |        |          |0 = Brown-out Detector does not detect any voltage draft at VDD down through or up through the voltage of BODVL setting.
N     * |        |          |1 = When Brown-out Detector detects the VDD is dropped down through the voltage of BODVL setting or the VDD is raised up through the voltage of BODVL setting, this bit is set to 1 and the brown-out interrupt is requested if brown-out interrupt is enabled.
N     * |        |          |Note: Write 1 to clear this bit to 0.
N     * |[5]     |BODLPM    |Brown-out Detector Low Power Mode (Write Protect)
N     * |        |          |0 = BOD operate in normal mode (default).
N     * |        |          |1 = BOD Low Power mode Enabled.
N     * |        |          |Note1: The BOD consumes about 100uA in normal mode, the low power mode can reduce the current to about 1/10 but slow the BOD response.
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[6]     |BODOUT    |Brown-out Detector Output Status
N     * |        |          |0 = Brown-out Detector output status is 0.
N     * |        |          |It means the detected voltage is higher than BODVL setting or BODEN is 0.
N     * |        |          |1 = Brown-out Detector output status is 1.
N     * |        |          |It means the detected voltage is lower than BODVL setting. If the BODEN is 0, BOD function disabled , this bit always responds 0000.
N     * |[7]     |LVREN     |Low Voltage Reset Enable Bit (Write Protect)
N     * |        |          |The LVR function resets the chip when the input power voltage is lower than LVR circuit setting. LVR function is enabled by default.
N     * |        |          |0 = Low Voltage Reset function Disabled.
N     * |        |          |1 = Low Voltage Reset function Enabled.
N     * |        |          |Note1: After enabling the bit, the LVR function will be active with 200us delay for LVR output stable (default).
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[10:8]  |BODDGSEL  |Brown-out Detector Output De-glitch Time Select (Write Protect)
N     * |        |          |000 = BOD output is sampled by RC32K clock.
N     * |        |          |001 = 64 system clock (HCLK).
N     * |        |          |010 = 128 system clock (HCLK).
N     * |        |          |011 = 256 system clock (HCLK).
N     * |        |          |100 = 512 system clock (HCLK).
N     * |        |          |101 = 1024 system clock (HCLK).
N     * |        |          |110 = 2048 system clock (HCLK).
N     * |        |          |111 = 4096 system clock (HCLK).
N     * |        |          |Note: These bits are write protected. Refer to the SYS_REGLCTL register.
N     * |[14:12] |LVRDGSEL  |LVR Output De-glitch Time Select (Write Protect)
N     * |        |          |000 = Without de-glitch function.
N     * |        |          |001 = 64 system clock (HCLK).
N     * |        |          |010 = 128 system clock (HCLK).
N     * |        |          |011 = 256 system clock (HCLK).
N     * |        |          |100 = 512 system clock (HCLK).
N     * |        |          |101 = 1024 system clock (HCLK).
N     * |        |          |110 = 2048 system clock (HCLK).
N     * |        |          |111 = 4096 system clock (HCLK).
N     * |        |          |Note: These bits are write protected. Refer to the SYS_REGLCTL register.
N     * |[16]    |BODVL     |Brown-out Detector Threshold Voltage Selection (Write Protect)
N     * |        |          |The default value is set by flash controller user configuration register CBOV (CONFIG0 [21]).
N     * |        |          |0 = Brown-Out Detector threshold voltage is 2.0V.
N     * |        |          |1 = Brown-Out Detector threshold voltage is 2.5V.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: Reset by powr on reset.
N     * @var SYS_T::PORCTL
N     * Offset: 0x24  Power-On-reset Controller Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |POROFF    |Power-on Reset Enable Bit (Write Protect)
N     * |        |          |When powered on, the POR circuit generates a reset signal to reset the whole chip function, but noise on the power may cause the POR active again. User can disable internal POR circuit to avoid unpredictable noise to cause chip reset by writing 0x5AA5 to this field.
N     * |        |          |The POR function will be active again when this field is set to another value or chip is reset by other reset source, including:
N     * |        |          |nRESET, Watchdog, LVR reset, BOD reset, ICE reset command and the software-chip reset function.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var SYS_T::GPA_MFPL
N     * Offset: 0x30  GPIOA Low Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PA0MFP    |PA.0 Multi-function Pin Selection
N     * |[7:4]   |PA1MFP    |PA.1 Multi-function Pin Selection
N     * |[11:8]  |PA2MFP    |PA.2 Multi-function Pin Selection
N     * |[15:12] |PA3MFP    |PA.3 Multi-function Pin Selection
N     * |[19:16] |PA4MFP    |PA.4 Multi-function Pin Selection
N     * |[23:20] |PA5MFP    |PA.5 Multi-function Pin Selection
N     * |[27:24] |PA6MFP    |PA.6 Multi-function Pin Selection
N     * |[31:28] |PA7MFP    |PA.7 Multi-function Pin Selection
N     * @var SYS_T::GPA_MFPH
N     * Offset: 0x34  GPIOA High Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PA8MFP    |PA.8 Multi-function Pin Selection
N     * |[7:4]   |PA9MFP    |PA.9 Multi-function Pin Selection
N     * |[11:8]  |PA10MFP   |PA.10 Multi-function Pin Selection
N     * |[15:12] |PA11MFP   |PA.11 Multi-function Pin Selection
N     * |[19:16] |PA12MFP   |PA.12 Multi-function Pin Selection
N     * |[23:20] |PA13MFP   |PA.13 Multi-function Pin Selection
N     * |[27:24] |PA14MFP   |PA.14 Multi-function Pin Selection
N     * |[31:28] |PA15MFP   |PA.15 Multi-function Pin Selection
N     * @var SYS_T::GPB_MFPL
N     * Offset: 0x38  GPIOB Low Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PB0MFP    |PB.0 Multi-function Pin Selection
N     * |[7:4]   |PB1MFP    |PB.1 Multi-function Pin Selection
N     * |[11:8]  |PB2MFP    |PB.2 Multi-function Pin Selection
N     * |[15:12] |PB3MFP    |PB.3 Multi-function Pin Selection
N     * |[19:16] |PB4MFP    |PB.4 Multi-function Pin Selection
N     * |[23:20] |PB5MFP    |PB.5 Multi-function Pin Selection
N     * |[27:24] |PB6MFP    |PB.6 Multi-function Pin Selection
N     * |[31:28] |PB7MFP    |PB.7 Multi-function Pin Selection
N     * @var SYS_T::GPB_MFPH
N     * Offset: 0x3C  GPIOB High Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PB8MFP    |PB.8 Multi-function Pin Selection
N     * |[7:4]   |PB9MFP    |PB.9 Multi-function Pin Selection
N     * |[11:8]  |PB10MFP   |PB.10 Multi-function Pin Selection
N     * |[15:12] |PB11MFP   |PB.11 Multi-function Pin Selection
N     * |[19:16] |PB12MFP   |PB.12 Multi-function Pin Selection
N     * |[23:20] |PB13MFP   |PB.13 Multi-function Pin Selection
N     * |[27:24] |PB14MFP   |PB.14 Multi-function Pin Selection
N     * |[31:28] |PB15MFP   |PB.15 Multi-function Pin Selection
N     * @var SYS_T::GPC_MFPL
N     * Offset: 0x40  GPIOC Low Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PC0MFP    |PC.0 Multi-function Pin Selection
N     * |[7:4]   |PC1MFP    |PC.1 Multi-function Pin Selection
N     * |[11:8]  |PC2MFP    |PC.2 Multi-function Pin Selection
N     * |[15:12] |PC3MFP    |PC.3 Multi-function Pin Selection
N     * |[19:16] |PC4MFP    |PC.4 Multi-function Pin Selection
N     * |[23:20] |PC5MFP    |PC.5 Multi-function Pin Selection
N     * |[27:24] |PC6MFP    |PC.6 Multi-function Pin Selection
N     * |[31:28] |PC7MFP    |PC.7 Multi-function Pin Selection
N     * @var SYS_T::GPC_MFPH
N     * Offset: 0x44  GPIOC High Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PC8MFP    |PC.8 Multi-function Pin Selection
N     * |[7:4]   |PC9MFP    |PC.9 Multi-function Pin Selection
N     * |[11:8]  |PC10MFP   |PC.10 Multi-function Pin Selection
N     * |[15:12] |PC11MFP   |PC.11 Multi-function Pin Selection
N     * |[19:16] |PC12MFP   |PC.12 Multi-function Pin Selection
N     * |[23:20] |PC13MFP   |PC.13 Multi-function Pin Selection
N     * |[27:24] |PC14MFP   |PC.14 Multi-function Pin Selection
N     * |[31:28] |PC15MFP   |PC.15 Multi-function Pin Selection
N     * @var SYS_T::GPD_MFPL
N     * Offset: 0x48  GPIOD Low Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PD0MFP    |PD.0 Multi-function Pin Selection
N     * |[7:4]   |PD1MFP    |PD.1 Multi-function Pin Selection
N     * |[11:8]  |PD2MFP    |PD.2 Multi-function Pin Selection
N     * |[15:12] |PD3MFP    |PD.3 Multi-function Pin Selection
N     * |[19:16] |PD4MFP    |PD.4 Multi-function Pin Selection
N     * |[23:20] |PD5MFP    |PD.5 Multi-function Pin Selection
N     * |[27:24] |PD6MFP    |PD.6 Multi-function Pin Selection
N     * |[31:28] |PD7MFP    |PD.7 Multi-function Pin Selection
N     * @var SYS_T::GPD_MFPH
N     * Offset: 0x4C  GPIOD High Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PD8MFP    |PD.8 Multi-function Pin Selection
N     * |[7:4]   |PD9MFP    |PD.9 Multi-function Pin Selection
N     * |[11:8]  |PD10MFP   |PD.10 Multi-function Pin Selection
N     * |[15:12] |PD11MFP   |PD.11 Multi-function Pin Selection
N     * |[19:16] |PD12MFP   |PD.12 Multi-function Pin Selection
N     * |[23:20] |PD13MFP   |PD.13 Multi-function Pin Selection
N     * |[27:24] |PD14MFP   |PD.14 Multi-function Pin Selection
N     * |[31:28] |PD15MFP   |PD.15 Multi-function Pin Selection
N     * @var SYS_T::GPF_MFPL
N     * Offset: 0x58  GPIOF Low Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PF0MFP    |PF.0 Multi-function Pin Selection
N     * |[7:4]   |PF1MFP    |PF.1 Multi-function Pin Selection
N     * |[11:8]  |PF2MFP    |PF.2 Multi-function Pin Selection
N     * |[15:12] |PF3MFP    |PF.3 Multi-function Pin Selection
N     * |[19:16] |PF4MFP    |PF.4 Multi-function Pin Selection
N     * |[23:20] |PF5MFP    |PF.5 Multi-function Pin Selection
N     * |[27:24] |PF6MFP    |PF.6 Multi-function Pin Selection
N     * |[31:28] |PF7MFP    |PF.7 Multi-function Pin Selection
N     * @var SYS_T::GPF_MFPH
N     * Offset: 0x5C  GPIOF High Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PF8MFP    |PF.8 Multi-function Pin Selection
N     * |[7:4]   |PF9MFP    |PF.9 Multi-function Pin Selection
N     * |[11:8]  |PF10MFP   |PF.10 Multi-function Pin Selection
N     * |[15:12] |PF11MFP   |PF.11 Multi-function Pin Selection
N     * |[19:16] |PF12MFP   |PF.12 Multi-function Pin Selection
N     * |[23:20] |PF13MFP   |PF.13 Multi-function Pin Selection
N     * |[27:24] |PF14MFP   |PF.14 Multi-function Pin Selection
N     * |[31:28] |PF15MFP   |PF.15 Multi-function Pin Selection
N     * @var SYS_T::LPLDOCTL
N     * Offset: 0x78  Low Power LDO Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |LPLDO_EN  |Low Power LDO Enalbe Bit
N     * |        |          |This bit enables uLDO voltage output.
N     * |        |          |0 = uLDO Voltage Output Disabled.
N     * |        |          |1 = uLDO Voltage Output Enabled.
N     * @var SYS_T::MODCTL
N     * Offset: 0xC0  Modulation Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |MODEN     |Modulation Function Enable Bit
N     * |        |          |This bit enables modulation funcion by modulating with PWM0 channel output and USCI0(USCI0_DAT0) or UART0(UART0_TXD) output.
N     * |        |          |0 = Modulation Function Disabled.
N     * |        |          |1 = Modulation Function Enabled.
N     * |[1]     |MODH      |Modulation at Data High
N     * |        |          |Select modulation pulse(PWM0) at high or low of UART0_TXD or USCI0_DAT0.
N     * |        |          |0: Modulation pulse at UART0_TXD low or USCI0_DAT0 low.
N     * |        |          |1: Modulation pulse at UART0_TXD high or USCI0_DAT0 high.
N     * |[7:4]   |MODPWMSEL |PWM0 Channel Select for Modulation
N     * |        |          |Select the PWM0 channel to modulate with the UART0_TXD or USCI0_DAT0.
N     * |        |          |0000: PWM0 Channel 0 modulate with UART0_TXD.
N     * |        |          |0001: PWM0 Channel 1 modulate with UART0_TXD.
N     * |        |          |0010: PWM0 Channel 2 modulate with UART0_TXD.
N     * |        |          |0011: PWM0 Channel 3 modulete with UART0_TXD.
N     * |        |          |0100: PWM0 Channel 4 modulete with UART0_TXD.
N     * |        |          |0101: PWM0 Channel 5 modulete with UART0_TXD.
N     * |        |          |0110: Reserved.
N     * |        |          |0111: Reserved.
N     * |        |          |1000: PWM0 Channel 0 modulate with USCI0_DAT0.
N     * |        |          |1001: PWM0 Channel 1 modulate with USCI0_DAT0.
N     * |        |          |1010: PWM0 Channel 2 modulate with USCI0_DAT0.
N     * |        |          |1011: PWM0 Channel 3 modulete with USCI0_DAT0.
N     * |        |          |1100: PWM0 Channel 4 modulete with USCI0_DAT0.
N     * |        |          |1101: PWM0 Channel 5 modulete with USCI0_DAT0.
N     * |        |          |1110: Reserved.
N     * |        |          |1111: Reserved.
N     * |        |          |Note: This bis is valid while MODEN (SYS_MODCTL[0]) is set to 1.
N     * @var SYS_T::SRAM_BISTCTL
N     * Offset: 0xD0  System SRAM BIST Test Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |USBBIST   |USB BIST Enable Bit (Write Protect)
N     * |        |          |This bit enables BIST test for USB RAM.
N     * |        |          |0 = system USB BIST Disabled.
N     * |        |          |1 = system USB BIST Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[7]     |PDMABIST  |PDMA BIST Enable Bit (Write Protect)
N     * |        |          |This bit enables BIST test for PDMA RAM.
N     * |        |          |0 = system PDMA BIST Disabled.
N     * |        |          |1 = system PDMA BIST Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var SYS_T::SRAM_BISTSTS
N     * Offset: 0xD4  System SRAM BIST Test Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |USBBEF    |USB SRAM BIST Fail Flag
N     * |        |          |0 = USB SRAM BIST test pass.
N     * |        |          |1 = USB SRAM BIST test fail.
N     * |[7]     |PDMABISTF |PDMA SRAM BIST Failed Flag
N     * |        |          |0 = PDMA SRAM BIST pass.
N     * |        |          |1 = PDMA SRAM BIST failed.
N     * |[20]    |USBBEND   |USB SRAM BIST Test Finish
N     * |        |          |0 = USB SRAM BIST is active.
N     * |        |          |1 = USB SRAM BIST test finish.
N     * |[23]    |PDMAEND   |PDMA SRAM BIST Test Finish
N     * |        |          |0 = PDMA SRAM BIST is active.
N     * |        |          |1 = PDMA SRAM BIST test finish.
N     * @var SYS_T::HIRCTRIMCTL
N     * Offset: 0xF0  HIRC Trim Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |FREQSEL   |Trim Frequency Selection
N     * |        |          |This field indicates the target frequency of 48 MHz internal high speed RC oscillator (HIRC) auto trim.
N     * |        |          |During auto trim operation, if clock error detected with CESTOPEN is set to 1 or trim retry limitation count reached, this field will be cleared to 00 automatically.
N     * |        |          |00 = Disable HIRC auto trim function.
N     * |        |          |01 = Enable HIRC auto trim function and trim HIRC to 48 MHz.
N     * |        |          |10 = Reserved..
N     * |        |          |11 = Reserved.
N     * |[5:4]   |LOOPSEL   |Trim Calculation Loop Selection
N     * |        |          |This field defines that trim value calculation is based on how many reference clocks.
N     * |        |          |00 = Trim value calculation is based on average difference in 4 clocks of reference clock.
N     * |        |          |01 = Trim value calculation is based on average difference in 8 clocks of reference clock.
N     * |        |          |10 = Trim value calculation is based on average difference in 16 clocks of reference clock.
N     * |        |          |11 = Trim value calculation is based on average difference in 32 clocks of reference clock.
N     * |        |          |Note: For example, if LOOPSEL is set as 00, auto trim circuit will calculate trim value based on the average frequency difference in 4 clocks of reference clock.
N     * |[7:6]   |RETRYCNT  |Trim Value Update Limitation Count
N     * |        |          |This field defines that how many times the auto trim circuit will try to update the HIRC trim value before the frequency of HIRC locked.
N     * |        |          |Once the HIRC locked, the internal trim value update counter will be reset.
N     * |        |          |If the trim value update counter reached this limitation value and frequency of HIRC still doesn't lock, the auto trim operation will be disabled and FREQSEL will be cleared to 00.
N     * |        |          |00 = Trim retry count limitation is 64 loops.
N     * |        |          |01 = Trim retry count limitation is 128 loops.
N     * |        |          |10 = Trim retry count limitation is 256 loops.
N     * |        |          |11 = Trim retry count limitation is 512 loops.
N     * |[8]     |CESTOPEN  |Clock Error Stop Enable Bit
N     * |        |          |0 = The trim operation is keep going if clock is inaccuracy.
N     * |        |          |1 = The trim operation is stopped if clock is inaccuracy.
N     * |[9]     |BOUNDEN   |Boundary Enable Bit
N     * |        |          |0 = Boundary function is disable.
N     * |        |          |1 = Boundary function is enable.
N     * |[10]    |REFCKSEL  |Reference Clock Selection
N     * |        |          |0 = HIRC trim reference clock is from LXT (32.768 kHz).
N     * |        |          |1 = HIRC trim reference clock is from USB SOF (Start-Of-Frame) packet.
N     * |        |          |Note1: HIRC trim reference clock is 40Khz in test mode.
N     * |        |          |Note2: HIRC trim reference clock support LXT or HXT or SOF depends on the chip spec.
N     * |        |          |For M031 16k/2k, RC trim supports HXT as reference clock .
N     * |        |          |For M031 32k/4k, RC trim supports LXT and HXT as reference clock .
N     * |        |          |For M031 64k/8k, RC trim supports LXT as reference clock .
N     * |        |          |For M031 128k/16k, RC trim supports LXT and SOF as reference clock .
N     * |[20:16] |BOUNDARY  |Boundary Selection
N     * |        |          |Fill the boundary range from 0x1 to 0x1F, 0x0 is reserved.Reserved.
N     * |        |          |Note: This field is effective only when the BOUNDEN(SYS_HIRCTRIMCTL[9]) is enable.
N     * @var SYS_T::HIRCTRIMIEN
N     * Offset: 0xF4  HIRC Trim Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TFALIEN   |Trim Failure Interrupt Enable Bit
N     * |        |          |This bit controls if an interrupt will be triggered while HIRC trim value update limitation count reached and HIRC frequency still not locked on target frequency set by FREQSEL(SYS_HIRCTRIMCTL[1:0]).
N     * |        |          |If this bit is high and TFAILIF(SYS_HIRCTRIMSTS[1]) is set during auto trim operation, an interrupt will be triggered to notify that HIRC trim value update limitation count was reached.
N     * |        |          |0 = Disable TFAILIF(SYS_HIRCTRIMSTS[1]) status to trigger an interrupt to CPU.
N     * |        |          |1 = Enable TFAILIF(SYS_HIRCTRIMSTS[1]) status to trigger an interrupt to CPU.
N     * |[2]     |CLKEIEN   |Clock Error Interrupt Enable Bit
N     * |        |          |This bit controls if CPU would get an interrupt while clock is inaccuracy during auto trim operation.
N     * |        |          |If this bit is set to1, and CLKERRIF(SYS_HIRCTRIMSTS[2]) is set during auto trim operation, an interrupt will be triggered to notify the clock frequency is inaccuracy.
N     * |        |          |0 = Disable CLKERRIF(SYS_HIRCTRIMSTS[2]) status to trigger an interrupt to CPU.
N     * |        |          |1 = Enable CLKERRIF(SYS_HIRCTRIMSTS[2]) status to trigger an interrupt to CPU.
N     * @var SYS_T::HIRCTRIMSTS
N     * Offset: 0xF8  HIRC Trim Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |FREQLOCK  |HIRC Frequency Lock Status
N     * |        |          |This bit indicates the HIRC frequency is locked.
N     * |        |          |This is a status bit and doesn't trigger any interrupt. Write 1 to clear this to 0. This bit will be set automatically, if the frequecy is lock and the RC_TRIM is enabled.
N     * |        |          |0 = The internal high-speed oscillator frequency doesn't lock at 48 MHz yet.
N     * |        |          |1 = The internal high-speed oscillator frequency locked at 48 MHz.
N     * |        |          |Note: Reset by powr on reset.
N     * |[1]     |TFAILIF   |Trim Failure Interrupt Status
N     * |        |          |This bit indicates that HIRC trim value update limitation count reached and the HIRC clock frequency still doesn't be locked
N     * |        |          |Once this bit is set, the auto trim operation stopped and FREQSEL(SYS_HIRCTRIMCTL[1:0]) will be cleared to 00 by hardware automatically.
N     * |        |          |If this bit is set and TFAILIEN(SYS_HIRCIEN[1]) is high, an interrupt will be triggered to notify that HIRC trim value update limitation count was reached. Write 1 to clear this to 0.
N     * |        |          |0 = Trim value update limitation count does not reach.
N     * |        |          |1 = Trim value update limitation count reached and HIRC frequency still not locked.
N     * |        |          |Note: Reset by powr on reset.
N     * |[2]     |CLKERIF   |Clock Error Interrupt Status
N     * |        |          |When the frequency of 38.4 kHz external low speed crystal oscillator (LXT) or 48MHz internal high speed RC oscillator (HIRC) is shift larger to unreasonable value, this bit will be set and to be an indicate that clock frequency is inaccuracy. Once this bit is set to 1, the auto trim operation stopped and FREQSEL(SYS_HIRCTRIMCTL[1:0]) will be cleared to 00 by hardware automatically if CESTOPEN(SYS_HIRCTRIMCTL[8]) is set to 1.
N     * |        |          |If this bit is set and CLKEIEN(SYS_HIRCTIEN[2]) is high, an interrupt will be triggered to notify the clock frequency is inaccuracy. Write 1 to clear this to 0.
N     * |        |          |0 = Clock frequency is accuracy.
N     * |        |          |1 = Clock frequency is inaccuracy.
N     * |        |          |Note: Reset by powr on reset.
N     * |[3]     |OVBDIF    |Over Boundary Status
N     * |        |          |When the over boundary function is set, if there occurs the over boundary condition, this flag will be set.
N     * |        |          |0 = Over boundary coundition did not occur.
N     * |        |          |1 = Over boundary coundition occurred.
N     * |        |          |Note: Write 1 to clear this flag.
N     * @var SYS_T::REGLCTL
N     * Offset: 0x100  Register Lock Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |REGLCTL   |Register Lock Control Code (Write Only)
N     * |        |          |Some registers have write-protection function.
N     * |        |          |Writing these registers have to disable the protected function by writing the sequence value "59h", "16h", "88h" to this field. After this sequence is completed, the REGLCTL bit will be set to 1 and write-protection registers can be normal write.
N     * |        |          |REGLCTL[0]
N     * |        |          |Register Lock Control Disable Index (Read Only)
N     * |        |          |0 = Write-protection Enabled for writing protected registers. Any write to the protected register is ignored.
N     * |        |          |1 = Write-protection Disabled for writing protected registers.
N     * @var SYS_T::PORDISAN
N     * Offset: 0x1EC  Analog POR Disable Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |POROFFAN  |Power-on Reset Enable Bit (Write Protect)
N     * |        |          |After powered on, User can turn off internal analog POR circuit to save power by writing 0x5AA5 to this field.
N     * |        |          |The analog POR circuit will be active again when this field is set to another value or chip is reset by other reset source, including:
N     * |        |          |nRESET, Watchdog, LVR reset, BOD reset, ICE reset command and the software-chip reset function.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     */
N    __I  uint32_t PDID;                  /*!< [0x0000] Part Device Identification Number Register                       */
X    volatile const  uint32_t PDID;                   
N    __IO uint32_t RSTSTS;                /*!< [0x0004] System Reset Status Register                                     */
X    volatile uint32_t RSTSTS;                 
N    __IO uint32_t IPRST0;                /*!< [0x0008] Peripheral  Reset Control Register 0                             */
X    volatile uint32_t IPRST0;                 
N    __IO uint32_t IPRST1;                /*!< [0x000c] Peripheral Reset Control Register 1                              */
X    volatile uint32_t IPRST1;                 
N    __IO uint32_t IPRST2;                /*!< [0x0010] Peripheral Reset Control Register 2                              */
X    volatile uint32_t IPRST2;                 
N    __I  uint32_t RESERVE0[1];
X    volatile const  uint32_t RESERVE0[1];
N    __IO uint32_t BODCTL;                /*!< [0x0018] Brown-out Detector Control Register                              */
X    volatile uint32_t BODCTL;                 
N    __I  uint32_t RESERVE1[2];
X    volatile const  uint32_t RESERVE1[2];
N    __IO uint32_t PORCTL;                /*!< [0x0024] Power-On-reset Controller Register                               */
X    volatile uint32_t PORCTL;                 
N    __I  uint32_t RESERVE2[2];
X    volatile const  uint32_t RESERVE2[2];
N    __IO uint32_t GPA_MFPL;              /*!< [0x0030] GPIOA Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPA_MFPL;               
N    __IO uint32_t GPA_MFPH;              /*!< [0x0034] GPIOA High Byte Multiple Function Control Register               */
X    volatile uint32_t GPA_MFPH;               
N    __IO uint32_t GPB_MFPL;              /*!< [0x0038] GPIOB Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPB_MFPL;               
N    __IO uint32_t GPB_MFPH;              /*!< [0x003c] GPIOB High Byte Multiple Function Control Register               */
X    volatile uint32_t GPB_MFPH;               
N    __IO uint32_t GPC_MFPL;              /*!< [0x0040] GPIOC Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPC_MFPL;               
N    __IO uint32_t GPC_MFPH;              /*!< [0x0044] GPIOC High Byte Multiple Function Control Register               */
X    volatile uint32_t GPC_MFPH;               
N    __IO uint32_t GPD_MFPL;              /*!< [0x0048] GPIOD Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPD_MFPL;               
N    __IO uint32_t GPD_MFPH;              /*!< [0x004c] GPIOD High Byte Multiple Function Control Register               */
X    volatile uint32_t GPD_MFPH;               
N    __IO uint32_t GPE_MFPL;              /*!< [0x0050] GPIOE Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPE_MFPL;               
N    __IO uint32_t GPE_MFPH;              /*!< [0x0054] GPIOE High Byte Multiple Function Control Register               */
X    volatile uint32_t GPE_MFPH;               
N    __IO uint32_t GPF_MFPL;              /*!< [0x0058] GPIOF Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPF_MFPL;               
N    __IO uint32_t GPF_MFPH;              /*!< [0x005c] GPIOF High Byte Multiple Function Control Register               */
X    volatile uint32_t GPF_MFPH;               
N    __IO uint32_t GPG_MFPL;              /*!< [0x0060] GPIOG High Byte Multiple Function Control Register               */
X    volatile uint32_t GPG_MFPL;               
N    __IO uint32_t GPG_MFPH;              /*!< [0x0064] GPIOG High Byte Multiple Function Control Register               */
X    volatile uint32_t GPG_MFPH;               
N    __IO uint32_t GPH_MFPL;              /*!< [0x0068] GPIOH High Byte Multiple Function Control Register               */
X    volatile uint32_t GPH_MFPL;               
N    __IO uint32_t GPH_MFPH;              /*!< [0x006c] GPIOH High Byte Multiple Function Control Register               */
X    volatile uint32_t GPH_MFPH;               
N    __I  uint32_t RESERVE3[2];
X    volatile const  uint32_t RESERVE3[2];
N    __IO uint32_t LPLDOCTL;              /*!< [0x0078] Low Power LDO Control Register                                   */
X    volatile uint32_t LPLDOCTL;               
N    __I  uint32_t RESERVE4[17];
X    volatile const  uint32_t RESERVE4[17];
N    __IO uint32_t MODCTL;                /*!< [0x00c0] Modulation Control Register                                      */
X    volatile uint32_t MODCTL;                 
N    __I  uint32_t RESERVE5[3];
X    volatile const  uint32_t RESERVE5[3];
N    __IO uint32_t SRAM_BISTCTL;          /*!< [0x00d0] System SRAM BIST Test Control Register                           */
X    volatile uint32_t SRAM_BISTCTL;           
N    __I  uint32_t SRAM_BISTSTS;          /*!< [0x00d4] System SRAM BIST Test Status Register                            */
X    volatile const  uint32_t SRAM_BISTSTS;           
N    __IO uint32_t SRAM_PARITY;           /*!< [0x00d8] System SRAM Parity Test Control Register (Only for Testing)      */
X    volatile uint32_t SRAM_PARITY;            
N    __IO uint32_t SRAM_INTCTL;           /*!< [0x00dc] System SRAM Interrupt Enable Control Register                    */
X    volatile uint32_t SRAM_INTCTL;            
N    __IO uint32_t SRAM_STATUS;           /*!< [0x00e0] System SRAM Parity Error Status Register                         */
X    volatile uint32_t SRAM_STATUS;            
N    __I  uint32_t SRAM_ERRADDR;          /*!< [0x00e4] System SRAM Parity Check Error Address Register                  */
X    volatile const  uint32_t SRAM_ERRADDR;           
N    __I  uint32_t RESERVE6[2];
X    volatile const  uint32_t RESERVE6[2];
N    __IO uint32_t HIRCTRIMCTL;           /*!< [0x00f0] HIRC Trim Control Register                                       */
X    volatile uint32_t HIRCTRIMCTL;            
N    __IO uint32_t HIRCTRIMIEN;           /*!< [0x00f4] HIRC Trim Interrupt Enable Register                              */
X    volatile uint32_t HIRCTRIMIEN;            
N    __IO uint32_t HIRCTRIMSTS;           /*!< [0x00f8] HIRC Trim Interrupt Status Register                              */
X    volatile uint32_t HIRCTRIMSTS;            
N    __I  uint32_t RESERVE7[1];
X    volatile const  uint32_t RESERVE7[1];
N    __O  uint32_t REGLCTL;               /*!< [0x0100] Register Lock Control Register                                   */
X    volatile  uint32_t REGLCTL;                
N    __I  uint32_t RESERVE8[5];
X    volatile const  uint32_t RESERVE8[5];
N    __IO uint32_t HIRCADJ;               /*!< [0x0118] HIRC Trim Value Register                                         */
X    volatile uint32_t HIRCADJ;                
N    __I  uint32_t RESERVE9[1];
X    volatile const  uint32_t RESERVE9[1];
N    __I  uint32_t LDOTRIM;               /*!< [0x0120] LDO Trim Code Register                                           */
X    volatile const  uint32_t LDOTRIM;                
N    __I  uint32_t LVR16TRIM;             /*!< [0x0124] LVR16 Trim Code Register                                         */
X    volatile const  uint32_t LVR16TRIM;              
N    __I  uint32_t RESERVE10[4];
X    volatile const  uint32_t RESERVE10[4];
N    __I  uint32_t LIRCT;                 /*!< [0x0138] Low Speed Internal Oscillator Trim Code Register                 */
X    volatile const  uint32_t LIRCT;                  
N    __I  uint32_t RESERVE11[5];
X    volatile const  uint32_t RESERVE11[5];
N    __I  uint32_t LVR17TRIM;             /*!< [0x0150] LVR17 Trim Code Register                                         */
X    volatile const  uint32_t LVR17TRIM;              
N    __I  uint32_t LVR20TRIM;             /*!< [0x0154] LVR20 Trim Code Register                                         */
X    volatile const  uint32_t LVR20TRIM;              
N    __I  uint32_t LVR25TRIM;             /*!< [0x0158] LVR25 Trim Code Register                                         */
X    volatile const  uint32_t LVR25TRIM;              
N    __I  uint32_t uLDOVITRIM;            /*!< [0x015c] ULDO V Trim and I TRIM Code Register                             */
X    volatile const  uint32_t uLDOVITRIM;             
N    __IO uint32_t LVRITRIMSEL;           /*!< [0x0160] LVR Itrim and Version Select Register                            */
X    volatile uint32_t LVRITRIMSEL;            
N    __I  uint32_t RESERVE12[9];
X    volatile const  uint32_t RESERVE12[9];
N    __IO uint32_t HIRCTCTL;              /*!< [0x0188] HIRC Test Mode Control Register                                  */
X    volatile uint32_t HIRCTCTL;               
N    __IO uint32_t ADCCHIP;               /*!< [0x018c] R/W ADC CHIP Control Register                                    */
X    volatile uint32_t ADCCHIP;                
N    __IO uint32_t HXTTCTL;               /*!< [0x0190] R/W HXT Test Mode Control Register                               */
X    volatile uint32_t HXTTCTL;                
N    __I  uint32_t RESERVE13[22];
X    volatile const  uint32_t RESERVE13[22];
N    __IO uint32_t PORDISAN;              /*!< [0x01ec] Analog POR Disable Control Register                              */
X    volatile uint32_t PORDISAN;               
N} SYS_T;
N
Ntypedef struct
N{
N
N
N    /**
N     * @var NMI_T::NMIEN
N     * Offset: 0x00  NMI Source Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BODOUT    |BOD NMI Source Enable (Write Protect)
N     * |        |          |0 = BOD NMI source Disabled.
N     * |        |          |1 = BOD NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[1]     |IRC_INT   |IRC TRIM NMI Source Enable (Write Protect)
N     * |        |          |0 = IRC TRIM NMI source Disabled.
N     * |        |          |1 = IRC TRIM NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[2]     |PWRWU_INT |Power-down Mode Wake-up NMI Source Enable (Write Protect)
N     * |        |          |0 = Power-down mode wake-up NMI source Disabled.
N     * |        |          |1 = Power-down mode wake-up NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[4]     |CLKFAIL   |Clock Fail Detected and IRC Auto Trim Interrupt NMI Source Enable (Write Protect)
N     * |        |          |0 = Clock fail detected and IRC Auto Trim interrupt NMI source Disabled.
N     * |        |          |1 = Clock fail detected and IRC Auto Trim interrupt NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[8]     |EINT0     |External Interrupt From PA.6 or PB.5 Pin NMI Source Enable (Write Protect)
N     * |        |          |0 = External interrupt from PA.6 or PB.5 pin NMI source Disabled.
N     * |        |          |1 = External interrupt from PA.6 or PB.5 pin NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[9]     |EINT1     |External Interrupt From PA.7, PB.4 or PD.15 Pin NMI Source Enable (Write Protect)
N     * |        |          |0 = External interrupt from PA.7, PB.4 or PD.15 pin NMI source Disabled.
N     * |        |          |1 = External interrupt from PA.7, PB.4 or PD.15 pin NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[10]    |EINT2     |External Interrupt From PB.3 or PC.6 Pin NMI Source Enable (Write Protect)
N     * |        |          |0 = External interrupt from PB.3 or PC.6 pin NMI source Disabled.
N     * |        |          |1 = External interrupt from PB.3 or PC.6 pin NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[11]    |EINT3     |External Interrupt From PB.2 or PC.7 Pin NMI Source Enable (Write Protect)
N     * |        |          |0 = External interrupt from PB.2 or PC.7 pin NMI source Disabled.
N     * |        |          |1 = External interrupt from PB.2 or PC.7 pin NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[12]    |EINT4     |External Interrupt From PA.8, PB.6 or PF.15 Pin NMI Source Enable (Write Protect)
N     * |        |          |0 = External interrupt from PA.8, PB.6 or PF.15 pin NMI source Disabled.
N     * |        |          |1 = External interrupt from PA.8, PB.6 or PF.15 pin NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[13]    |EINT5     |External Interrupt From PB.7 or PF.14 Pin NMI Source Enable (Write Protect)
N     * |        |          |0 = External interrupt from PB.7 or PF.14 pin NMI source Disabled.
N     * |        |          |1 = External interrupt from PB.7 or PF.14 pin NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[14]    |UART0_INT |UART0 NMI Source Enable (Write Protect)
N     * |        |          |0 = UART0 NMI source Disabled.
N     * |        |          |1 = UART0 NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[15]    |UART1_INT |UART1 NMI Source Enable (Write Protect)
N     * |        |          |0 = UART1 NMI source Disabled.
N     * |        |          |1 = UART1 NMI source Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var NMI_T::NMISTS
N     * Offset: 0x04  NMI Source Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BODOUT    |BOD Interrupt Flag (Read Only)
N     * |        |          |0 = BOD interrupt is deasserted.
N     * |        |          |1 = BOD interrupt is asserted.
N     * |[1]     |IRC_INT   |IRC TRIM Interrupt Flag (Read Only)
N     * |        |          |0 = HIRC TRIM interrupt is deasserted.
N     * |        |          |1 = HIRC TRIM interrupt is asserted.
N     * |[2]     |PWRWU_INT |Power-down Mode Wake-up Interrupt Flag (Read Only)
N     * |        |          |0 = Power-down mode wake-up interrupt is deasserted.
N     * |        |          |1 = Power-down mode wake-up interrupt is asserted.
N     * |[4]     |CLKFAIL   |Clock Fail Detected or IRC Auto Trim Interrupt Flag (Read Only)
N     * |        |          |0 = Clock fail detected or IRC Auto Trim interrupt is deasserted.
N     * |        |          |1 = Clock fail detected or IRC Auto Trim interrupt is asserted.
N     * |[8]     |EINT0     |External Interrupt From PA.6 or PB.5 Pin Interrupt Flag (Read Only)
N     * |        |          |0 = External Interrupt from PA.6 or PB.5 interrupt is deasserted.
N     * |        |          |1 = External Interrupt from PA.6 or PB.5 interrupt is asserted.
N     * |[9]     |EINT1     |External Interrupt From PA.7, PB.4 or PD.15 Pin Interrupt Flag (Read Only)
N     * |        |          |0 = External Interrupt from PA.7, PB.4 or PD.15 interrupt is deasserted.
N     * |        |          |1 = External Interrupt from PA.7, PB.4 or PD.15 interrupt is asserted.
N     * |[10]    |EINT2     |External Interrupt From PB.3 or PC.6 Pin Interrupt Flag (Read Only)
N     * |        |          |0 = External Interrupt from PB.3 or PC.6 interrupt is deasserted.
N     * |        |          |1 = External Interrupt from PB.3 or PC.6 interrupt is asserted.
N     * |[11]    |EINT3     |External Interrupt From PB.2 or PC.7 Pin Interrupt Flag (Read Only)
N     * |        |          |0 = External Interrupt from PB.2 or PC.7 interrupt is deasserted.
N     * |        |          |1 = External Interrupt from PB.2 or PC.7 interrupt is asserted.
N     * |[12]    |EINT4     |External Interrupt From PA.8, PB.6 or PF.15 Pin Interrupt Flag (Read Only)
N     * |        |          |0 = External Interrupt from PA.8, PB.6 or PF.15 interrupt is deasserted.
N     * |        |          |1 = External Interrupt from PA.8, PB.6 or PF.15 interrupt is asserted.
N     * |[13]    |EINT5     |External Interrupt From PB.7 or PF.14 Pin Interrupt Flag (Read Only)
N     * |        |          |0 = External Interrupt from PB.7 or PF.14 interrupt is deasserted.
N     * |        |          |1 = External Interrupt from PB.7 or PF.14 interrupt is asserted.
N     * |[14]    |UART0_INT |UART0 Interrupt Flag (Read Only)
N     * |        |          |0 = UART1 interrupt is deasserted.
N     * |        |          |1 = UART1 interrupt is asserted.
N     * |[15]    |UART1_INT |UART1 Interrupt Flag (Read Only)
N     * |        |          |0 = UART1 interrupt is deasserted.
N     * |        |          |1 = UART1 interrupt is asserted.
N     */
N    __IO uint32_t NMIEN;                 /*!< [0x0000] NMI Source Interrupt Enable Register                             */
X    volatile uint32_t NMIEN;                  
N    __I  uint32_t NMISTS;                /*!< [0x0004] NMI Source Interrupt Status Register                             */
X    volatile const  uint32_t NMISTS;                 
N
N} NMI_T;
N
N/**
N    @addtogroup SYS_CONST SYS Bit Field Definition
N    Constant Definitions for SYS Controller
N@{ */
N
N#define SYS_PDID_PDID_Pos                (0)                                               /*!< SYS_T::PDID: PDID Position             */
N#define SYS_PDID_PDID_Msk                (0xfffffffful << SYS_PDID_PDID_Pos)               /*!< SYS_T::PDID: PDID Mask                 */
N
N#define SYS_RSTSTS_PORF_Pos              (0)                                               /*!< SYS_T::RSTSTS: PORF Position           */
N#define SYS_RSTSTS_PORF_Msk              (0x1ul << SYS_RSTSTS_PORF_Pos)                    /*!< SYS_T::RSTSTS: PORF Mask               */
N
N#define SYS_RSTSTS_PINRF_Pos             (1)                                               /*!< SYS_T::RSTSTS: PINRF Position          */
N#define SYS_RSTSTS_PINRF_Msk             (0x1ul << SYS_RSTSTS_PINRF_Pos)                   /*!< SYS_T::RSTSTS: PINRF Mask              */
N
N#define SYS_RSTSTS_WDTRF_Pos             (2)                                               /*!< SYS_T::RSTSTS: WDTRF Position          */
N#define SYS_RSTSTS_WDTRF_Msk             (0x1ul << SYS_RSTSTS_WDTRF_Pos)                   /*!< SYS_T::RSTSTS: WDTRF Mask              */
N
N#define SYS_RSTSTS_LVRF_Pos              (3)                                               /*!< SYS_T::RSTSTS: LVRF Position           */
N#define SYS_RSTSTS_LVRF_Msk              (0x1ul << SYS_RSTSTS_LVRF_Pos)                    /*!< SYS_T::RSTSTS: LVRF Mask               */
N
N#define SYS_RSTSTS_BODRF_Pos             (4)                                               /*!< SYS_T::RSTSTS: BODRF Position          */
N#define SYS_RSTSTS_BODRF_Msk             (0x1ul << SYS_RSTSTS_BODRF_Pos)                   /*!< SYS_T::RSTSTS: BODRF Mask              */
N
N#define SYS_RSTSTS_SYSRF_Pos             (5)                                               /*!< SYS_T::RSTSTS: SYSRF Position          */
N#define SYS_RSTSTS_SYSRF_Msk             (0x1ul << SYS_RSTSTS_SYSRF_Pos)                   /*!< SYS_T::RSTSTS: SYSRF Mask              */
N
N#define SYS_RSTSTS_CPURF_Pos             (7)                                               /*!< SYS_T::RSTSTS: CPURF Position          */
N#define SYS_RSTSTS_CPURF_Msk             (0x1ul << SYS_RSTSTS_CPURF_Pos)                   /*!< SYS_T::RSTSTS: CPURF Mask              */
N
N#define SYS_RSTSTS_CPULKRF_Pos           (8)                                               /*!< SYS_T::RSTSTS: CPULKRF Position        */
N#define SYS_RSTSTS_CPULKRF_Msk           (0x1ul << SYS_RSTSTS_CPULKRF_Pos)                 /*!< SYS_T::RSTSTS: CPULKRF Mask            */
N
N#define SYS_IPRST0_CHIPRST_Pos           (0)                                               /*!< SYS_T::IPRST0: CHIPRST Position        */
N#define SYS_IPRST0_CHIPRST_Msk           (0x1ul << SYS_IPRST0_CHIPRST_Pos)                 /*!< SYS_T::IPRST0: CHIPRST Mask            */
N
N#define SYS_IPRST0_CPURST_Pos            (1)                                               /*!< SYS_T::IPRST0: CPURST Position         */
N#define SYS_IPRST0_CPURST_Msk            (0x1ul << SYS_IPRST0_CPURST_Pos)                  /*!< SYS_T::IPRST0: CPURST Mask             */
N
N#define SYS_IPRST0_PDMARST_Pos           (2)                                               /*!< SYS_T::IPRST0: PDMARST Position        */
N#define SYS_IPRST0_PDMARST_Msk           (0x1ul << SYS_IPRST0_PDMARST_Pos)                 /*!< SYS_T::IPRST0: PDMARST Mask            */
N
N#define SYS_IPRST0_EBIRST_Pos            (3)                                               /*!< SYS_T::IPRST0: EBIRST Position         */
N#define SYS_IPRST0_EBIRST_Msk            (0x1ul << SYS_IPRST0_EBIRST_Pos)                  /*!< SYS_T::IPRST0: EBIRST Mask             */
N
N#define SYS_IPRST0_HDIVRST_Pos           (4)                                               /*!< SYS_T::IPRST0: HDIVRST Position        */
N#define SYS_IPRST0_HDIVRST_Msk           (0x1ul << SYS_IPRST0_HDIVRST_Pos)                 /*!< SYS_T::IPRST0: HDIVRST Mask            */
N
N#define SYS_IPRST0_CRCRST_Pos            (7)                                               /*!< SYS_T::IPRST0: CRCRST Position         */
N#define SYS_IPRST0_CRCRST_Msk            (0x1ul << SYS_IPRST0_CRCRST_Pos)                  /*!< SYS_T::IPRST0: CRCRST Mask             */
N
N#define SYS_IPRST1_GPIORST_Pos           (1)                                               /*!< SYS_T::IPRST1: GPIORST Position        */
N#define SYS_IPRST1_GPIORST_Msk           (0x1ul << SYS_IPRST1_GPIORST_Pos)                 /*!< SYS_T::IPRST1: GPIORST Mask            */
N
N#define SYS_IPRST1_TMR0RST_Pos           (2)                                               /*!< SYS_T::IPRST1: TMR0RST Position        */
N#define SYS_IPRST1_TMR0RST_Msk           (0x1ul << SYS_IPRST1_TMR0RST_Pos)                 /*!< SYS_T::IPRST1: TMR0RST Mask            */
N
N#define SYS_IPRST1_TMR1RST_Pos           (3)                                               /*!< SYS_T::IPRST1: TMR1RST Position        */
N#define SYS_IPRST1_TMR1RST_Msk           (0x1ul << SYS_IPRST1_TMR1RST_Pos)                 /*!< SYS_T::IPRST1: TMR1RST Mask            */
N
N#define SYS_IPRST1_TMR2RST_Pos           (4)                                               /*!< SYS_T::IPRST1: TMR2RST Position        */
N#define SYS_IPRST1_TMR2RST_Msk           (0x1ul << SYS_IPRST1_TMR2RST_Pos)                 /*!< SYS_T::IPRST1: TMR2RST Mask            */
N
N#define SYS_IPRST1_TMR3RST_Pos           (5)                                               /*!< SYS_T::IPRST1: TMR3RST Position        */
N#define SYS_IPRST1_TMR3RST_Msk           (0x1ul << SYS_IPRST1_TMR3RST_Pos)                 /*!< SYS_T::IPRST1: TMR3RST Mask            */
N
N#define SYS_IPRST1_ACMP01RST_Pos         (7)                                               /*!< SYS_T::IPRST1: ACMP01RST Position      */
N#define SYS_IPRST1_ACMP01RST_Msk         (0x1ul << SYS_IPRST1_ACMP01RST_Pos)               /*!< SYS_T::IPRST1: ACMP01RST Mask          */
N
N#define SYS_IPRST1_I2C0RST_Pos           (8)                                               /*!< SYS_T::IPRST1: I2C0RST Position        */
N#define SYS_IPRST1_I2C0RST_Msk           (0x1ul << SYS_IPRST1_I2C0RST_Pos)                 /*!< SYS_T::IPRST1: I2C0RST Mask            */
N
N#define SYS_IPRST1_I2C1RST_Pos           (9)                                               /*!< SYS_T::IPRST1: I2C1RST Position        */
N#define SYS_IPRST1_I2C1RST_Msk           (0x1ul << SYS_IPRST1_I2C1RST_Pos)                 /*!< SYS_T::IPRST1: I2C1RST Mask            */
N
N#define SYS_IPRST1_QSPI0RST_Pos          (12)                                              /*!< SYS_T::IPRST1: QSPI0RST Position       */
N#define SYS_IPRST1_QSPI0RST_Msk          (0x1ul << SYS_IPRST1_QSPI0RST_Pos)                /*!< SYS_T::IPRST1: QSPI0RST Mask           */
N
N#define SYS_IPRST1_SPI0RST_Pos           (13)                                              /*!< SYS_T::IPRST1: SPI0RST Position        */
N#define SYS_IPRST1_SPI0RST_Msk           (0x1ul << SYS_IPRST1_SPI0RST_Pos)                 /*!< SYS_T::IPRST1: SPI0RST Mask            */
N
N#define SYS_IPRST1_UART0RST_Pos          (16)                                              /*!< SYS_T::IPRST1: UART0RST Position       */
N#define SYS_IPRST1_UART0RST_Msk          (0x1ul << SYS_IPRST1_UART0RST_Pos)                /*!< SYS_T::IPRST1: UART0RST Mask           */
N
N#define SYS_IPRST1_UART1RST_Pos          (17)                                              /*!< SYS_T::IPRST1: UART1RST Position       */
N#define SYS_IPRST1_UART1RST_Msk          (0x1ul << SYS_IPRST1_UART1RST_Pos)                /*!< SYS_T::IPRST1: UART1RST Mask           */
N
N#define SYS_IPRST1_UART2RST_Pos          (18)                                              /*!< SYS_T::IPRST1: UART2RST Position       */
N#define SYS_IPRST1_UART2RST_Msk          (0x1ul << SYS_IPRST1_UART2RST_Pos)                /*!< SYS_T::IPRST1: UART2RST Mask           */
N
N#define SYS_IPRST1_UART3RST_Pos          (19)                                              /*!< SYS_T::IPRST1: UART3RST Position       */
N#define SYS_IPRST1_UART3RST_Msk          (0x1ul << SYS_IPRST1_UART3RST_Pos)                /*!< SYS_T::IPRST1: UART3RST Mask           */
N
N#define SYS_IPRST1_UART4RST_Pos          (20)                                              /*!< SYS_T::IPRST1: UART4RST Position       */
N#define SYS_IPRST1_UART4RST_Msk          (0x1ul << SYS_IPRST1_UART4RST_Pos)                /*!< SYS_T::IPRST1: UART4RST Mask           */
N
N#define SYS_IPRST1_UART5RST_Pos          (21)                                              /*!< SYS_T::IPRST1: UART5RST Position       */
N#define SYS_IPRST1_UART5RST_Msk          (0x1ul << SYS_IPRST1_UART5RST_Pos)                /*!< SYS_T::IPRST1: UART5RST Mask           */
N
N#define SYS_IPRST1_UART6RST_Pos          (22)                                              /*!< SYS_T::IPRST1: UART6RST Position       */
N#define SYS_IPRST1_UART6RST_Msk          (0x1ul << SYS_IPRST1_UART6RST_Pos)                /*!< SYS_T::IPRST1: UART6RST Mask           */
N
N#define SYS_IPRST1_UART7RST_Pos          (23)                                              /*!< SYS_T::IPRST1: UART7RST Position       */
N#define SYS_IPRST1_UART7RST_Msk          (0x1ul << SYS_IPRST1_UART7RST_Pos)                /*!< SYS_T::IPRST1: UART7RST Mask           */
N
N#define SYS_IPRST1_USBDRST_Pos           (27)                                              /*!< SYS_T::IPRST1: USBDRST Position        */
N#define SYS_IPRST1_USBDRST_Msk           (0x1ul << SYS_IPRST1_USBDRST_Pos)                 /*!< SYS_T::IPRST1: USBDRST Mask            */
N
N#define SYS_IPRST1_ADCRST_Pos            (28)                                              /*!< SYS_T::IPRST1: ADCRST Position         */
N#define SYS_IPRST1_ADCRST_Msk            (0x1ul << SYS_IPRST1_ADCRST_Pos)                  /*!< SYS_T::IPRST1: ADCRST Mask             */
N
N#define SYS_IPRST2_USCI0RST_Pos          (8)                                               /*!< SYS_T::IPRST2: USCI0RST Position       */
N#define SYS_IPRST2_USCI0RST_Msk          (0x1ul << SYS_IPRST2_USCI0RST_Pos)                /*!< SYS_T::IPRST2: USCI0RST Mask           */
N
N#define SYS_IPRST2_USCI1RST_Pos          (9)                                               /*!< SYS_T::IPRST2: USCI1RST Position       */
N#define SYS_IPRST2_USCI1RST_Msk          (0x1ul << SYS_IPRST2_USCI1RST_Pos)                /*!< SYS_T::IPRST2: USCI1RST Mask           */
N
N#define SYS_IPRST2_PWM0RST_Pos           (16)                                              /*!< SYS_T::IPRST2: PWM0RST Position        */
N#define SYS_IPRST2_PWM0RST_Msk           (0x1ul << SYS_IPRST2_PWM0RST_Pos)                 /*!< SYS_T::IPRST2: PWM0RST Mask            */
N
N#define SYS_IPRST2_PWM1RST_Pos           (17)                                              /*!< SYS_T::IPRST2: PWM1RST Position        */
N#define SYS_IPRST2_PWM1RST_Msk           (0x1ul << SYS_IPRST2_PWM1RST_Pos)                 /*!< SYS_T::IPRST2: PWM1RST Mask            */
N
N#define SYS_IPRST2_BPWM0RST_Pos          (18)                                              /*!< SYS_T::IPRST2: BPWM0RST Position       */
N#define SYS_IPRST2_BPWM0RST_Msk          (0x1ul << SYS_IPRST2_BPWM0RST_Pos)                /*!< SYS_T::IPRST2: BPWM0RST Mask           */
N
N#define SYS_IPRST2_BPWM1RST_Pos          (19)                                              /*!< SYS_T::IPRST2: BPWM1RST Position       */
N#define SYS_IPRST2_BPWM1RST_Msk          (0x1ul << SYS_IPRST2_BPWM1RST_Pos)                /*!< SYS_T::IPRST2: BPWM1RST Mask           */
N
N#define SYS_BODCTL_BODEN_Pos             (0)                                               /*!< SYS_T::BODCTL: BODEN Position          */
N#define SYS_BODCTL_BODEN_Msk             (0x1ul << SYS_BODCTL_BODEN_Pos)                   /*!< SYS_T::BODCTL: BODEN Mask              */
N
N#define SYS_BODCTL_BODRSTEN_Pos          (3)                                               /*!< SYS_T::BODCTL: BODRSTEN Position       */
N#define SYS_BODCTL_BODRSTEN_Msk          (0x1ul << SYS_BODCTL_BODRSTEN_Pos)                /*!< SYS_T::BODCTL: BODRSTEN Mask           */
N
N#define SYS_BODCTL_BODIF_Pos             (4)                                               /*!< SYS_T::BODCTL: BODIF Position          */
N#define SYS_BODCTL_BODIF_Msk             (0x1ul << SYS_BODCTL_BODIF_Pos)                   /*!< SYS_T::BODCTL: BODIF Mask              */
N
N#define SYS_BODCTL_BODLPM_Pos            (5)                                               /*!< SYS_T::BODCTL: BODLPM Position         */
N#define SYS_BODCTL_BODLPM_Msk            (0x1ul << SYS_BODCTL_BODLPM_Pos)                  /*!< SYS_T::BODCTL: BODLPM Mask             */
N
N#define SYS_BODCTL_BODOUT_Pos            (6)                                               /*!< SYS_T::BODCTL: BODOUT Position         */
N#define SYS_BODCTL_BODOUT_Msk            (0x1ul << SYS_BODCTL_BODOUT_Pos)                  /*!< SYS_T::BODCTL: BODOUT Mask             */
N
N#define SYS_BODCTL_LVREN_Pos             (7)                                               /*!< SYS_T::BODCTL: LVREN Position          */
N#define SYS_BODCTL_LVREN_Msk             (0x1ul << SYS_BODCTL_LVREN_Pos)                   /*!< SYS_T::BODCTL: LVREN Mask              */
N
N#define SYS_BODCTL_BODDGSEL_Pos          (8)                                               /*!< SYS_T::BODCTL: BODDGSEL Position       */
N#define SYS_BODCTL_BODDGSEL_Msk          (0x7ul << SYS_BODCTL_BODDGSEL_Pos)                /*!< SYS_T::BODCTL: BODDGSEL Mask           */
N
N#define SYS_BODCTL_LVRDGSEL_Pos          (12)                                              /*!< SYS_T::BODCTL: LVRDGSEL Position       */
N#define SYS_BODCTL_LVRDGSEL_Msk          (0x7ul << SYS_BODCTL_LVRDGSEL_Pos)                /*!< SYS_T::BODCTL: LVRDGSEL Mask           */
N
N#define SYS_BODCTL_BODVL_Pos             (16)                                              /*!< SYS_T::BODCTL: BODVL Position          */
N#define SYS_BODCTL_BODVL_Msk             (0x1ul << SYS_BODCTL_BODVL_Pos)                   /*!< SYS_T::BODCTL: BODVL Mask              */
N
N#define SYS_BODCTL_LVRVL_Pos             (20)                                              /*!< SYS_T::BODCTL: LVRVL Position          */
N#define SYS_BODCTL_LVRVL_Msk             (0x1ul << SYS_BODCTL_LVRVL_Pos)                   /*!< SYS_T::BODCTL: LVRVL Mask              */
N
N#define SYS_PORCTL_POROFF_Pos            (0)                                               /*!< SYS_T::PORCTL: POROFF Position         */
N#define SYS_PORCTL_POROFF_Msk            (0xfffful << SYS_PORCTL_POROFF_Pos)               /*!< SYS_T::PORCTL: POROFF Mask             */
N
N#define SYS_GPA_MFPL_PA0MFP_Pos          (0)                                               /*!< SYS_T::GPA_MFPL: PA0MFP Position       */
N#define SYS_GPA_MFPL_PA0MFP_Msk          (0xful << SYS_GPA_MFPL_PA0MFP_Pos)                /*!< SYS_T::GPA_MFPL: PA0MFP Mask           */
N
N#define SYS_GPA_MFPL_PA1MFP_Pos          (4)                                               /*!< SYS_T::GPA_MFPL: PA1MFP Position       */
N#define SYS_GPA_MFPL_PA1MFP_Msk          (0xful << SYS_GPA_MFPL_PA1MFP_Pos)                /*!< SYS_T::GPA_MFPL: PA1MFP Mask           */
N
N#define SYS_GPA_MFPL_PA2MFP_Pos          (8)                                               /*!< SYS_T::GPA_MFPL: PA2MFP Position       */
N#define SYS_GPA_MFPL_PA2MFP_Msk          (0xful << SYS_GPA_MFPL_PA2MFP_Pos)                /*!< SYS_T::GPA_MFPL: PA2MFP Mask           */
N
N#define SYS_GPA_MFPL_PA3MFP_Pos          (12)                                              /*!< SYS_T::GPA_MFPL: PA3MFP Position       */
N#define SYS_GPA_MFPL_PA3MFP_Msk          (0xful << SYS_GPA_MFPL_PA3MFP_Pos)                /*!< SYS_T::GPA_MFPL: PA3MFP Mask           */
N
N#define SYS_GPA_MFPL_PA4MFP_Pos          (16)                                              /*!< SYS_T::GPA_MFPL: PA4MFP Position       */
N#define SYS_GPA_MFPL_PA4MFP_Msk          (0xful << SYS_GPA_MFPL_PA4MFP_Pos)                /*!< SYS_T::GPA_MFPL: PA4MFP Mask           */
N
N#define SYS_GPA_MFPL_PA5MFP_Pos          (20)                                              /*!< SYS_T::GPA_MFPL: PA5MFP Position       */
N#define SYS_GPA_MFPL_PA5MFP_Msk          (0xful << SYS_GPA_MFPL_PA5MFP_Pos)                /*!< SYS_T::GPA_MFPL: PA5MFP Mask           */
N
N#define SYS_GPA_MFPL_PA6MFP_Pos          (24)                                              /*!< SYS_T::GPA_MFPL: PA6MFP Position       */
N#define SYS_GPA_MFPL_PA6MFP_Msk          (0xful << SYS_GPA_MFPL_PA6MFP_Pos)                /*!< SYS_T::GPA_MFPL: PA6MFP Mask           */
N
N#define SYS_GPA_MFPL_PA7MFP_Pos          (28)                                              /*!< SYS_T::GPA_MFPL: PA7MFP Position       */
N#define SYS_GPA_MFPL_PA7MFP_Msk          (0xful << SYS_GPA_MFPL_PA7MFP_Pos)                /*!< SYS_T::GPA_MFPL: PA7MFP Mask           */
N
N#define SYS_GPA_MFPH_PA8MFP_Pos          (0)                                               /*!< SYS_T::GPA_MFPH: PA8MFP Position       */
N#define SYS_GPA_MFPH_PA8MFP_Msk          (0xful << SYS_GPA_MFPH_PA8MFP_Pos)                /*!< SYS_T::GPA_MFPH: PA8MFP Mask           */
N
N#define SYS_GPA_MFPH_PA9MFP_Pos          (4)                                               /*!< SYS_T::GPA_MFPH: PA9MFP Position       */
N#define SYS_GPA_MFPH_PA9MFP_Msk          (0xful << SYS_GPA_MFPH_PA9MFP_Pos)                /*!< SYS_T::GPA_MFPH: PA9MFP Mask           */
N
N#define SYS_GPA_MFPH_PA10MFP_Pos         (8)                                               /*!< SYS_T::GPA_MFPH: PA10MFP Position      */
N#define SYS_GPA_MFPH_PA10MFP_Msk         (0xful << SYS_GPA_MFPH_PA10MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA10MFP Mask          */
N
N#define SYS_GPA_MFPH_PA11MFP_Pos         (12)                                              /*!< SYS_T::GPA_MFPH: PA11MFP Position      */
N#define SYS_GPA_MFPH_PA11MFP_Msk         (0xful << SYS_GPA_MFPH_PA11MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA11MFP Mask          */
N
N#define SYS_GPA_MFPH_PA12MFP_Pos         (16)                                              /*!< SYS_T::GPA_MFPH: PA12MFP Position      */
N#define SYS_GPA_MFPH_PA12MFP_Msk         (0xful << SYS_GPA_MFPH_PA12MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA12MFP Mask          */
N
N#define SYS_GPA_MFPH_PA13MFP_Pos         (20)                                              /*!< SYS_T::GPA_MFPH: PA13MFP Position      */
N#define SYS_GPA_MFPH_PA13MFP_Msk         (0xful << SYS_GPA_MFPH_PA13MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA13MFP Mask          */
N
N#define SYS_GPA_MFPH_PA14MFP_Pos         (24)                                              /*!< SYS_T::GPA_MFPH: PA14MFP Position      */
N#define SYS_GPA_MFPH_PA14MFP_Msk         (0xful << SYS_GPA_MFPH_PA14MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA14MFP Mask          */
N
N#define SYS_GPA_MFPH_PA15MFP_Pos         (28)                                              /*!< SYS_T::GPA_MFPH: PA15MFP Position      */
N#define SYS_GPA_MFPH_PA15MFP_Msk         (0xful << SYS_GPA_MFPH_PA15MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA15MFP Mask          */
N
N#define SYS_GPB_MFPL_PB0MFP_Pos          (0)                                               /*!< SYS_T::GPB_MFPL: PB0MFP Position       */
N#define SYS_GPB_MFPL_PB0MFP_Msk          (0xful << SYS_GPB_MFPL_PB0MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB0MFP Mask           */
N
N#define SYS_GPB_MFPL_PB1MFP_Pos          (4)                                               /*!< SYS_T::GPB_MFPL: PB1MFP Position       */
N#define SYS_GPB_MFPL_PB1MFP_Msk          (0xful << SYS_GPB_MFPL_PB1MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB1MFP Mask           */
N
N#define SYS_GPB_MFPL_PB2MFP_Pos          (8)                                               /*!< SYS_T::GPB_MFPL: PB2MFP Position       */
N#define SYS_GPB_MFPL_PB2MFP_Msk          (0xful << SYS_GPB_MFPL_PB2MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB2MFP Mask           */
N
N#define SYS_GPB_MFPL_PB3MFP_Pos          (12)                                              /*!< SYS_T::GPB_MFPL: PB3MFP Position       */
N#define SYS_GPB_MFPL_PB3MFP_Msk          (0xful << SYS_GPB_MFPL_PB3MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB3MFP Mask           */
N
N#define SYS_GPB_MFPL_PB4MFP_Pos          (16)                                              /*!< SYS_T::GPB_MFPL: PB4MFP Position       */
N#define SYS_GPB_MFPL_PB4MFP_Msk          (0xful << SYS_GPB_MFPL_PB4MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB4MFP Mask           */
N
N#define SYS_GPB_MFPL_PB5MFP_Pos          (20)                                              /*!< SYS_T::GPB_MFPL: PB5MFP Position       */
N#define SYS_GPB_MFPL_PB5MFP_Msk          (0xful << SYS_GPB_MFPL_PB5MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB5MFP Mask           */
N
N#define SYS_GPB_MFPL_PB6MFP_Pos          (24)                                              /*!< SYS_T::GPB_MFPL: PB6MFP Position       */
N#define SYS_GPB_MFPL_PB6MFP_Msk          (0xful << SYS_GPB_MFPL_PB6MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB6MFP Mask           */
N
N#define SYS_GPB_MFPL_PB7MFP_Pos          (28)                                              /*!< SYS_T::GPB_MFPL: PB7MFP Position       */
N#define SYS_GPB_MFPL_PB7MFP_Msk          (0xful << SYS_GPB_MFPL_PB7MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB7MFP Mask           */
N
N#define SYS_GPB_MFPH_PB8MFP_Pos          (0)                                               /*!< SYS_T::GPB_MFPH: PB8MFP Position       */
N#define SYS_GPB_MFPH_PB8MFP_Msk          (0xful << SYS_GPB_MFPH_PB8MFP_Pos)                /*!< SYS_T::GPB_MFPH: PB8MFP Mask           */
N
N#define SYS_GPB_MFPH_PB9MFP_Pos          (4)                                               /*!< SYS_T::GPB_MFPH: PB9MFP Position       */
N#define SYS_GPB_MFPH_PB9MFP_Msk          (0xful << SYS_GPB_MFPH_PB9MFP_Pos)                /*!< SYS_T::GPB_MFPH: PB9MFP Mask           */
N
N#define SYS_GPB_MFPH_PB10MFP_Pos         (8)                                               /*!< SYS_T::GPB_MFPH: PB10MFP Position      */
N#define SYS_GPB_MFPH_PB10MFP_Msk         (0xful << SYS_GPB_MFPH_PB10MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB10MFP Mask          */
N
N#define SYS_GPB_MFPH_PB11MFP_Pos         (12)                                              /*!< SYS_T::GPB_MFPH: PB11MFP Position      */
N#define SYS_GPB_MFPH_PB11MFP_Msk         (0xful << SYS_GPB_MFPH_PB11MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB11MFP Mask          */
N
N#define SYS_GPB_MFPH_PB12MFP_Pos         (16)                                              /*!< SYS_T::GPB_MFPH: PB12MFP Position      */
N#define SYS_GPB_MFPH_PB12MFP_Msk         (0xful << SYS_GPB_MFPH_PB12MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB12MFP Mask          */
N
N#define SYS_GPB_MFPH_PB13MFP_Pos         (20)                                              /*!< SYS_T::GPB_MFPH: PB13MFP Position      */
N#define SYS_GPB_MFPH_PB13MFP_Msk         (0xful << SYS_GPB_MFPH_PB13MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB13MFP Mask          */
N
N#define SYS_GPB_MFPH_PB14MFP_Pos         (24)                                              /*!< SYS_T::GPB_MFPH: PB14MFP Position      */
N#define SYS_GPB_MFPH_PB14MFP_Msk         (0xful << SYS_GPB_MFPH_PB14MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB14MFP Mask          */
N
N#define SYS_GPB_MFPH_PB15MFP_Pos         (28)                                              /*!< SYS_T::GPB_MFPH: PB15MFP Position      */
N#define SYS_GPB_MFPH_PB15MFP_Msk         (0xful << SYS_GPB_MFPH_PB15MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB15MFP Mask          */
N
N#define SYS_GPC_MFPL_PC0MFP_Pos          (0)                                               /*!< SYS_T::GPC_MFPL: PC0MFP Position       */
N#define SYS_GPC_MFPL_PC0MFP_Msk          (0xful << SYS_GPC_MFPL_PC0MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC0MFP Mask           */
N
N#define SYS_GPC_MFPL_PC1MFP_Pos          (4)                                               /*!< SYS_T::GPC_MFPL: PC1MFP Position       */
N#define SYS_GPC_MFPL_PC1MFP_Msk          (0xful << SYS_GPC_MFPL_PC1MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC1MFP Mask           */
N
N#define SYS_GPC_MFPL_PC2MFP_Pos          (8)                                               /*!< SYS_T::GPC_MFPL: PC2MFP Position       */
N#define SYS_GPC_MFPL_PC2MFP_Msk          (0xful << SYS_GPC_MFPL_PC2MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC2MFP Mask           */
N
N#define SYS_GPC_MFPL_PC3MFP_Pos          (12)                                              /*!< SYS_T::GPC_MFPL: PC3MFP Position       */
N#define SYS_GPC_MFPL_PC3MFP_Msk          (0xful << SYS_GPC_MFPL_PC3MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC3MFP Mask           */
N
N#define SYS_GPC_MFPL_PC4MFP_Pos          (16)                                              /*!< SYS_T::GPC_MFPL: PC4MFP Position       */
N#define SYS_GPC_MFPL_PC4MFP_Msk          (0xful << SYS_GPC_MFPL_PC4MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC4MFP Mask           */
N
N#define SYS_GPC_MFPL_PC5MFP_Pos          (20)                                              /*!< SYS_T::GPC_MFPL: PC5MFP Position       */
N#define SYS_GPC_MFPL_PC5MFP_Msk          (0xful << SYS_GPC_MFPL_PC5MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC5MFP Mask           */
N
N#define SYS_GPC_MFPL_PC6MFP_Pos          (24)                                              /*!< SYS_T::GPC_MFPL: PC6MFP Position       */
N#define SYS_GPC_MFPL_PC6MFP_Msk          (0xful << SYS_GPC_MFPL_PC6MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC6MFP Mask           */
N
N#define SYS_GPC_MFPL_PC7MFP_Pos          (28)                                              /*!< SYS_T::GPC_MFPL: PC7MFP Position       */
N#define SYS_GPC_MFPL_PC7MFP_Msk          (0xful << SYS_GPC_MFPL_PC7MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC7MFP Mask           */
N
N#define SYS_GPC_MFPH_PC8MFP_Pos          (0)                                               /*!< SYS_T::GPC_MFPH: PC8MFP Position       */
N#define SYS_GPC_MFPH_PC8MFP_Msk          (0xful << SYS_GPC_MFPH_PC8MFP_Pos)                /*!< SYS_T::GPC_MFPH: PC8MFP Mask           */
N
N#define SYS_GPC_MFPH_PC9MFP_Pos          (4)                                               /*!< SYS_T::GPC_MFPH: PC9MFP Position       */
N#define SYS_GPC_MFPH_PC9MFP_Msk          (0xful << SYS_GPC_MFPH_PC9MFP_Pos)                /*!< SYS_T::GPC_MFPH: PC9MFP Mask           */
N
N#define SYS_GPC_MFPH_PC10MFP_Pos         (8)                                               /*!< SYS_T::GPC_MFPH: PC10MFP Position      */
N#define SYS_GPC_MFPH_PC10MFP_Msk         (0xful << SYS_GPC_MFPH_PC10MFP_Pos)               /*!< SYS_T::GPC_MFPH: PC10MFP Mask          */
N
N#define SYS_GPC_MFPH_PC11MFP_Pos         (12)                                              /*!< SYS_T::GPC_MFPH: PC11MFP Position      */
N#define SYS_GPC_MFPH_PC11MFP_Msk         (0xful << SYS_GPC_MFPH_PC11MFP_Pos)               /*!< SYS_T::GPC_MFPH: PC11MFP Mask          */
N
N#define SYS_GPC_MFPH_PC12MFP_Pos         (16)                                              /*!< SYS_T::GPC_MFPH: PC12MFP Position      */
N#define SYS_GPC_MFPH_PC12MFP_Msk         (0xful << SYS_GPC_MFPH_PC12MFP_Pos)               /*!< SYS_T::GPC_MFPH: PC12MFP Mask          */
N
N#define SYS_GPC_MFPH_PC13MFP_Pos         (20)                                              /*!< SYS_T::GPC_MFPH: PC13MFP Position      */
N#define SYS_GPC_MFPH_PC13MFP_Msk         (0xful << SYS_GPC_MFPH_PC13MFP_Pos)               /*!< SYS_T::GPC_MFPH: PC13MFP Mask          */
N
N#define SYS_GPC_MFPH_PC14MFP_Pos         (24)                                              /*!< SYS_T::GPC_MFPH: PC14MFP Position      */
N#define SYS_GPC_MFPH_PC14MFP_Msk         (0xful << SYS_GPC_MFPH_PC14MFP_Pos)               /*!< SYS_T::GPC_MFPH: PC14MFP Mask          */
N
N#define SYS_GPC_MFPH_PC15MFP_Pos         (28)                                              /*!< SYS_T::GPC_MFPH: PC15MFP Position      */
N#define SYS_GPC_MFPH_PC15MFP_Msk         (0xful << SYS_GPC_MFPH_PC15MFP_Pos)               /*!< SYS_T::GPC_MFPH: PC15MFP Mask          */
N
N#define SYS_GPD_MFPL_PD0MFP_Pos          (0)                                               /*!< SYS_T::GPD_MFPL: PD0MFP Position       */
N#define SYS_GPD_MFPL_PD0MFP_Msk          (0xful << SYS_GPD_MFPL_PD0MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD0MFP Mask           */
N
N#define SYS_GPD_MFPL_PD1MFP_Pos          (4)                                               /*!< SYS_T::GPD_MFPL: PD1MFP Position       */
N#define SYS_GPD_MFPL_PD1MFP_Msk          (0xful << SYS_GPD_MFPL_PD1MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD1MFP Mask           */
N
N#define SYS_GPD_MFPL_PD2MFP_Pos          (8)                                               /*!< SYS_T::GPD_MFPL: PD2MFP Position       */
N#define SYS_GPD_MFPL_PD2MFP_Msk          (0xful << SYS_GPD_MFPL_PD2MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD2MFP Mask           */
N
N#define SYS_GPD_MFPL_PD3MFP_Pos          (12)                                              /*!< SYS_T::GPD_MFPL: PD3MFP Position       */
N#define SYS_GPD_MFPL_PD3MFP_Msk          (0xful << SYS_GPD_MFPL_PD3MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD3MFP Mask           */
N
N#define SYS_GPD_MFPL_PD4MFP_Pos          (16)                                              /*!< SYS_T::GPD_MFPL: PD4MFP Position       */
N#define SYS_GPD_MFPL_PD4MFP_Msk          (0xful << SYS_GPD_MFPL_PD4MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD4MFP Mask           */
N
N#define SYS_GPD_MFPL_PD5MFP_Pos          (20)                                              /*!< SYS_T::GPD_MFPL: PD5MFP Position       */
N#define SYS_GPD_MFPL_PD5MFP_Msk          (0xful << SYS_GPD_MFPL_PD5MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD5MFP Mask           */
N
N#define SYS_GPD_MFPL_PD6MFP_Pos          (24)                                              /*!< SYS_T::GPD_MFPL: PD6MFP Position       */
N#define SYS_GPD_MFPL_PD6MFP_Msk          (0xful << SYS_GPD_MFPL_PD6MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD6MFP Mask           */
N
N#define SYS_GPD_MFPL_PD7MFP_Pos          (28)                                              /*!< SYS_T::GPD_MFPL: PD7MFP Position       */
N#define SYS_GPD_MFPL_PD7MFP_Msk          (0xful << SYS_GPD_MFPL_PD7MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD7MFP Mask           */
N
N#define SYS_GPD_MFPH_PD8MFP_Pos          (0)                                               /*!< SYS_T::GPD_MFPH: PD8MFP Position       */
N#define SYS_GPD_MFPH_PD8MFP_Msk          (0xful << SYS_GPD_MFPH_PD8MFP_Pos)                /*!< SYS_T::GPD_MFPH: PD8MFP Mask           */
N
N#define SYS_GPD_MFPH_PD9MFP_Pos          (4)                                               /*!< SYS_T::GPD_MFPH: PD9MFP Position       */
N#define SYS_GPD_MFPH_PD9MFP_Msk          (0xful << SYS_GPD_MFPH_PD9MFP_Pos)                /*!< SYS_T::GPD_MFPH: PD9MFP Mask           */
N
N#define SYS_GPD_MFPH_PD10MFP_Pos         (8)                                               /*!< SYS_T::GPD_MFPH: PD10MFP Position      */
N#define SYS_GPD_MFPH_PD10MFP_Msk         (0xful << SYS_GPD_MFPH_PD10MFP_Pos)               /*!< SYS_T::GPD_MFPH: PD10MFP Mask          */
N
N#define SYS_GPD_MFPH_PD11MFP_Pos         (12)                                              /*!< SYS_T::GPD_MFPH: PD11MFP Position      */
N#define SYS_GPD_MFPH_PD11MFP_Msk         (0xful << SYS_GPD_MFPH_PD11MFP_Pos)               /*!< SYS_T::GPD_MFPH: PD11MFP Mask          */
N
N#define SYS_GPD_MFPH_PD12MFP_Pos         (16)                                              /*!< SYS_T::GPD_MFPH: PD12MFP Position      */
N#define SYS_GPD_MFPH_PD12MFP_Msk         (0xful << SYS_GPD_MFPH_PD12MFP_Pos)               /*!< SYS_T::GPD_MFPH: PD12MFP Mask          */
N
N#define SYS_GPD_MFPH_PD13MFP_Pos         (20)                                              /*!< SYS_T::GPD_MFPH: PD13MFP Position      */
N#define SYS_GPD_MFPH_PD13MFP_Msk         (0xful << SYS_GPD_MFPH_PD13MFP_Pos)               /*!< SYS_T::GPD_MFPH: PD13MFP Mask          */
N
N#define SYS_GPD_MFPH_PD14MFP_Pos         (24)                                              /*!< SYS_T::GPD_MFPH: PD14MFP Position      */
N#define SYS_GPD_MFPH_PD14MFP_Msk         (0xful << SYS_GPD_MFPH_PD14MFP_Pos)               /*!< SYS_T::GPD_MFPH: PD14MFP Mask          */
N
N#define SYS_GPD_MFPH_PD15MFP_Pos         (28)                                              /*!< SYS_T::GPD_MFPH: PD15MFP Position      */
N#define SYS_GPD_MFPH_PD15MFP_Msk         (0xful << SYS_GPD_MFPH_PD15MFP_Pos)               /*!< SYS_T::GPD_MFPH: PD15MFP Mask          */
N
N#define SYS_GPE_MFPL_PE0MFP_Pos          (0)                                               /*!< SYS_T::GPE_MFPL: PE0MFP Position       */
N#define SYS_GPE_MFPL_PE0MFP_Msk          (0xful << SYS_GPE_MFPL_PE0MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE0MFP Mask           */
N
N#define SYS_GPE_MFPL_PE1MFP_Pos          (4)                                               /*!< SYS_T::GPE_MFPL: PE1MFP Position       */
N#define SYS_GPE_MFPL_PE1MFP_Msk          (0xful << SYS_GPE_MFPL_PE1MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE1MFP Mask           */
N
N#define SYS_GPE_MFPL_PE2MFP_Pos          (8)                                               /*!< SYS_T::GPE_MFPL: PE2MFP Position       */
N#define SYS_GPE_MFPL_PE2MFP_Msk          (0xful << SYS_GPE_MFPL_PE2MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE2MFP Mask           */
N
N#define SYS_GPE_MFPL_PE3MFP_Pos          (12)                                              /*!< SYS_T::GPE_MFPL: PE3MFP Position       */
N#define SYS_GPE_MFPL_PE3MFP_Msk          (0xful << SYS_GPE_MFPL_PE3MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE3MFP Mask           */
N
N#define SYS_GPE_MFPL_PE4MFP_Pos          (16)                                              /*!< SYS_T::GPE_MFPL: PE4MFP Position       */
N#define SYS_GPE_MFPL_PE4MFP_Msk          (0xful << SYS_GPE_MFPL_PE4MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE4MFP Mask           */
N
N#define SYS_GPE_MFPL_PE5MFP_Pos          (20)                                              /*!< SYS_T::GPE_MFPL: PE5MFP Position       */
N#define SYS_GPE_MFPL_PE5MFP_Msk          (0xful << SYS_GPE_MFPL_PE5MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE5MFP Mask           */
N
N#define SYS_GPE_MFPL_PE6MFP_Pos          (24)                                              /*!< SYS_T::GPE_MFPL: PE6MFP Position       */
N#define SYS_GPE_MFPL_PE6MFP_Msk          (0xful << SYS_GPE_MFPL_PE6MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE6MFP Mask           */
N
N#define SYS_GPE_MFPL_PE7MFP_Pos          (28)                                              /*!< SYS_T::GPE_MFPL: PE7MFP Position       */
N#define SYS_GPE_MFPL_PE7MFP_Msk          (0xful << SYS_GPE_MFPL_PE7MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE7MFP Mask           */
N
N#define SYS_GPE_MFPH_PE8MFP_Pos          (0)                                               /*!< SYS_T::GPE_MFPH: PE8MFP Position       */
N#define SYS_GPE_MFPH_PE8MFP_Msk          (0xful << SYS_GPE_MFPH_PE8MFP_Pos)                /*!< SYS_T::GPE_MFPH: PE8MFP Mask           */
N
N#define SYS_GPE_MFPH_PE9MFP_Pos          (4)                                               /*!< SYS_T::GPE_MFPH: PE9MFP Position       */
N#define SYS_GPE_MFPH_PE9MFP_Msk          (0xful << SYS_GPE_MFPH_PE9MFP_Pos)                /*!< SYS_T::GPE_MFPH: PE9MFP Mask           */
N
N#define SYS_GPE_MFPH_PE10MFP_Pos         (8)                                               /*!< SYS_T::GPE_MFPH: PE10MFP Position      */
N#define SYS_GPE_MFPH_PE10MFP_Msk         (0xful << SYS_GPE_MFPH_PE10MFP_Pos)               /*!< SYS_T::GPE_MFPH: PE10MFP Mask          */
N
N#define SYS_GPE_MFPH_PE11MFP_Pos         (12)                                              /*!< SYS_T::GPE_MFPH: PE11MFP Position      */
N#define SYS_GPE_MFPH_PE11MFP_Msk         (0xful << SYS_GPE_MFPH_PE11MFP_Pos)               /*!< SYS_T::GPE_MFPH: PE11MFP Mask          */
N
N#define SYS_GPE_MFPH_PE12MFP_Pos         (16)                                              /*!< SYS_T::GPE_MFPH: PE12MFP Position      */
N#define SYS_GPE_MFPH_PE12MFP_Msk         (0xful << SYS_GPE_MFPH_PE12MFP_Pos)               /*!< SYS_T::GPE_MFPH: PE12MFP Mask          */
N
N#define SYS_GPE_MFPH_PE13MFP_Pos         (20)                                              /*!< SYS_T::GPE_MFPH: PE13MFP Position      */
N#define SYS_GPE_MFPH_PE13MFP_Msk         (0xful << SYS_GPE_MFPH_PE13MFP_Pos)               /*!< SYS_T::GPE_MFPH: PE13MFP Mask          */
N
N#define SYS_GPE_MFPH_PE14MFP_Pos         (24)                                              /*!< SYS_T::GPE_MFPH: PE14MFP Position      */
N#define SYS_GPE_MFPH_PE14MFP_Msk         (0xful << SYS_GPE_MFPH_PE14MFP_Pos)               /*!< SYS_T::GPE_MFPH: PE14MFP Mask          */
N
N#define SYS_GPE_MFPH_PE15MFP_Pos         (28)                                              /*!< SYS_T::GPE_MFPH: PE15MFP Position      */
N#define SYS_GPE_MFPH_PE15MFP_Msk         (0xful << SYS_GPE_MFPH_PE15MFP_Pos)               /*!< SYS_T::GPE_MFPH: PE15MFP Mask          */
N
N#define SYS_GPF_MFPL_PF0MFP_Pos          (0)                                               /*!< SYS_T::GPF_MFPL: PF0MFP Position       */
N#define SYS_GPF_MFPL_PF0MFP_Msk          (0xful << SYS_GPF_MFPL_PF0MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF0MFP Mask           */
N
N#define SYS_GPF_MFPL_PF1MFP_Pos          (4)                                               /*!< SYS_T::GPF_MFPL: PF1MFP Position       */
N#define SYS_GPF_MFPL_PF1MFP_Msk          (0xful << SYS_GPF_MFPL_PF1MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF1MFP Mask           */
N
N#define SYS_GPF_MFPL_PF2MFP_Pos          (8)                                               /*!< SYS_T::GPF_MFPL: PF2MFP Position       */
N#define SYS_GPF_MFPL_PF2MFP_Msk          (0xful << SYS_GPF_MFPL_PF2MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF2MFP Mask           */
N
N#define SYS_GPF_MFPL_PF3MFP_Pos          (12)                                              /*!< SYS_T::GPF_MFPL: PF3MFP Position       */
N#define SYS_GPF_MFPL_PF3MFP_Msk          (0xful << SYS_GPF_MFPL_PF3MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF3MFP Mask           */
N
N#define SYS_GPF_MFPL_PF4MFP_Pos          (16)                                              /*!< SYS_T::GPF_MFPL: PF4MFP Position       */
N#define SYS_GPF_MFPL_PF4MFP_Msk          (0xful << SYS_GPF_MFPL_PF4MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF4MFP Mask           */
N
N#define SYS_GPF_MFPL_PF5MFP_Pos          (20)                                              /*!< SYS_T::GPF_MFPL: PF5MFP Position       */
N#define SYS_GPF_MFPL_PF5MFP_Msk          (0xful << SYS_GPF_MFPL_PF5MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF5MFP Mask           */
N
N#define SYS_GPF_MFPL_PF6MFP_Pos          (24)                                              /*!< SYS_T::GPF_MFPL: PF6MFP Position       */
N#define SYS_GPF_MFPL_PF6MFP_Msk          (0xful << SYS_GPF_MFPL_PF6MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF6MFP Mask           */
N
N#define SYS_GPF_MFPL_PF7MFP_Pos          (28)                                              /*!< SYS_T::GPF_MFPL: PF7MFP Position       */
N#define SYS_GPF_MFPL_PF7MFP_Msk          (0xful << SYS_GPF_MFPL_PF7MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF7MFP Mask           */
N
N#define SYS_GPF_MFPH_PF8MFP_Pos          (0)                                               /*!< SYS_T::GPF_MFPH: PF8MFP Position       */
N#define SYS_GPF_MFPH_PF8MFP_Msk          (0xful << SYS_GPF_MFPH_PF8MFP_Pos)                /*!< SYS_T::GPF_MFPH: PF8MFP Mask           */
N
N#define SYS_GPF_MFPH_PF9MFP_Pos          (4)                                               /*!< SYS_T::GPF_MFPH: PF9MFP Position       */
N#define SYS_GPF_MFPH_PF9MFP_Msk          (0xful << SYS_GPF_MFPH_PF9MFP_Pos)                /*!< SYS_T::GPF_MFPH: PF9MFP Mask           */
N
N#define SYS_GPF_MFPH_PF10MFP_Pos         (8)                                               /*!< SYS_T::GPF_MFPH: PF10MFP Position      */
N#define SYS_GPF_MFPH_PF10MFP_Msk         (0xful << SYS_GPF_MFPH_PF10MFP_Pos)               /*!< SYS_T::GPF_MFPH: PF10MFP Mask          */
N
N#define SYS_GPF_MFPH_PF11MFP_Pos         (12)                                              /*!< SYS_T::GPF_MFPH: PF11MFP Position      */
N#define SYS_GPF_MFPH_PF11MFP_Msk         (0xful << SYS_GPF_MFPH_PF11MFP_Pos)               /*!< SYS_T::GPF_MFPH: PF11MFP Mask          */
N
N#define SYS_GPF_MFPH_PF12MFP_Pos         (16)                                              /*!< SYS_T::GPF_MFPH: PF12MFP Position      */
N#define SYS_GPF_MFPH_PF12MFP_Msk         (0xful << SYS_GPF_MFPH_PF12MFP_Pos)               /*!< SYS_T::GPF_MFPH: PF12MFP Mask          */
N
N#define SYS_GPF_MFPH_PF13MFP_Pos         (20)                                              /*!< SYS_T::GPF_MFPH: PF13MFP Position      */
N#define SYS_GPF_MFPH_PF13MFP_Msk         (0xful << SYS_GPF_MFPH_PF13MFP_Pos)               /*!< SYS_T::GPF_MFPH: PF13MFP Mask          */
N
N#define SYS_GPF_MFPH_PF14MFP_Pos         (24)                                              /*!< SYS_T::GPF_MFPH: PF14MFP Position      */
N#define SYS_GPF_MFPH_PF14MFP_Msk         (0xful << SYS_GPF_MFPH_PF14MFP_Pos)               /*!< SYS_T::GPF_MFPH: PF14MFP Mask          */
N
N#define SYS_GPF_MFPH_PF15MFP_Pos         (28)                                              /*!< SYS_T::GPF_MFPH: PF15MFP Position      */
N#define SYS_GPF_MFPH_PF15MFP_Msk         (0xful << SYS_GPF_MFPH_PF15MFP_Pos)               /*!< SYS_T::GPF_MFPH: PF15MFP Mask          */
N
N#define SYS_GPG_MFPL_PG0MFP_Pos          (0)                                               /*!< SYS_T::GPG_MFPL: PG0MFP Position       */
N#define SYS_GPG_MFPL_PG0MFP_Msk          (0xful << SYS_GPG_MFPL_PG0MFP_Pos)                /*!< SYS_T::GPG_MFPL: PG0MFP Mask           */
N
N#define SYS_GPG_MFPL_PG1MFP_Pos          (4)                                               /*!< SYS_T::GPG_MFPL: PG1MFP Position       */
N#define SYS_GPG_MFPL_PG1MFP_Msk          (0xful << SYS_GPG_MFPL_PG1MFP_Pos)                /*!< SYS_T::GPG_MFPL: PG1MFP Mask           */
N
N#define SYS_GPG_MFPL_PG2MFP_Pos          (8)                                               /*!< SYS_T::GPG_MFPL: PG2MFP Position       */
N#define SYS_GPG_MFPL_PG2MFP_Msk          (0xful << SYS_GPG_MFPL_PG2MFP_Pos)                /*!< SYS_T::GPG_MFPL: PG2MFP Mask           */
N
N#define SYS_GPG_MFPL_PG3MFP_Pos          (12)                                              /*!< SYS_T::GPG_MFPL: PG3MFP Position       */
N#define SYS_GPG_MFPL_PG3MFP_Msk          (0xful << SYS_GPG_MFPL_PG3MFP_Pos)                /*!< SYS_T::GPG_MFPL: PG3MFP Mask           */
N
N#define SYS_GPG_MFPL_PG4MFP_Pos          (16)                                              /*!< SYS_T::GPG_MFPL: PG4MFP Position       */
N#define SYS_GPG_MFPL_PG4MFP_Msk          (0xful << SYS_GPG_MFPL_PG4MFP_Pos)                /*!< SYS_T::GPG_MFPL: PG4MFP Mask           */
N
N#define SYS_GPG_MFPL_PG5MFP_Pos          (20)                                              /*!< SYS_T::GPG_MFPL: PG5MFP Position       */
N#define SYS_GPG_MFPL_PG5MFP_Msk          (0xful << SYS_GPG_MFPL_PG5MFP_Pos)                /*!< SYS_T::GPG_MFPL: PG5MFP Mask           */
N
N#define SYS_GPG_MFPL_PG6MFP_Pos          (24)                                              /*!< SYS_T::GPG_MFPL: PG6MFP Position       */
N#define SYS_GPG_MFPL_PG6MFP_Msk          (0xful << SYS_GPG_MFPL_PG6MFP_Pos)                /*!< SYS_T::GPG_MFPL: PG6MFP Mask           */
N
N#define SYS_GPG_MFPL_PG7MFP_Pos          (28)                                              /*!< SYS_T::GPG_MFPL: PG7MFP Position       */
N#define SYS_GPG_MFPL_PG7MFP_Msk          (0xful << SYS_GPG_MFPL_PG7MFP_Pos)                /*!< SYS_T::GPG_MFPL: PG7MFP Mask           */
N
N#define SYS_GPG_MFPH_PG8MFP_Pos          (0)                                               /*!< SYS_T::GPG_MFPH: PG8MFP Position       */
N#define SYS_GPG_MFPH_PG8MFP_Msk          (0xful << SYS_GPG_MFPH_PG8MFP_Pos)                /*!< SYS_T::GPG_MFPH: PG8MFP Mask           */
N
N#define SYS_GPG_MFPH_PG9MFP_Pos          (4)                                               /*!< SYS_T::GPG_MFPH: PG9MFP Position       */
N#define SYS_GPG_MFPH_PG9MFP_Msk          (0xful << SYS_GPG_MFPH_PG9MFP_Pos)                /*!< SYS_T::GPG_MFPH: PG9MFP Mask           */
N
N#define SYS_GPG_MFPH_PG10MFP_Pos         (8)                                               /*!< SYS_T::GPG_MFPH: PG10MFP Position      */
N#define SYS_GPG_MFPH_PG10MFP_Msk         (0xful << SYS_GPG_MFPH_PG10MFP_Pos)               /*!< SYS_T::GPG_MFPH: PG10MFP Mask          */
N
N#define SYS_GPG_MFPH_PG11MFP_Pos         (12)                                              /*!< SYS_T::GPG_MFPH: PG11MFP Position      */
N#define SYS_GPG_MFPH_PG11MFP_Msk         (0xful << SYS_GPG_MFPH_PG11MFP_Pos)               /*!< SYS_T::GPG_MFPH: PG11MFP Mask          */
N
N#define SYS_GPG_MFPH_PG12MFP_Pos         (16)                                              /*!< SYS_T::GPG_MFPH: PG12MFP Position      */
N#define SYS_GPG_MFPH_PG12MFP_Msk         (0xful << SYS_GPG_MFPH_PG12MFP_Pos)               /*!< SYS_T::GPG_MFPH: PG12MFP Mask          */
N
N#define SYS_GPG_MFPH_PG13MFP_Pos         (20)                                              /*!< SYS_T::GPG_MFPH: PG13MFP Position      */
N#define SYS_GPG_MFPH_PG13MFP_Msk         (0xful << SYS_GPG_MFPH_PG13MFP_Pos)               /*!< SYS_T::GPG_MFPH: PG13MFP Mask          */
N
N#define SYS_GPG_MFPH_PG14MFP_Pos         (24)                                              /*!< SYS_T::GPG_MFPH: PG14MFP Position      */
N#define SYS_GPG_MFPH_PG14MFP_Msk         (0xful << SYS_GPG_MFPH_PG14MFP_Pos)               /*!< SYS_T::GPG_MFPH: PG14MFP Mask          */
N
N#define SYS_GPG_MFPH_PG15MFP_Pos         (28)                                              /*!< SYS_T::GPG_MFPH: PG15MFP Position      */
N#define SYS_GPG_MFPH_PG15MFP_Msk         (0xful << SYS_GPG_MFPH_PG15MFP_Pos)               /*!< SYS_T::GPG_MFPH: PG15MFP Mask          */
N
N#define SYS_GPH_MFPL_PH0MFP_Pos          (0)                                               /*!< SYS_T::GPH_MFPL: PH0MFP Position       */
N#define SYS_GPH_MFPL_PH0MFP_Msk          (0xful << SYS_GPH_MFPL_PH0MFP_Pos)                /*!< SYS_T::GPH_MFPL: PH0MFP Mask           */
N
N#define SYS_GPH_MFPL_PH1MFP_Pos          (4)                                               /*!< SYS_T::GPH_MFPL: PH1MFP Position       */
N#define SYS_GPH_MFPL_PH1MFP_Msk          (0xful << SYS_GPH_MFPL_PH1MFP_Pos)                /*!< SYS_T::GPH_MFPL: PH1MFP Mask           */
N
N#define SYS_GPH_MFPL_PH2MFP_Pos          (8)                                               /*!< SYS_T::GPH_MFPL: PH2MFP Position       */
N#define SYS_GPH_MFPL_PH2MFP_Msk          (0xful << SYS_GPH_MFPL_PH2MFP_Pos)                /*!< SYS_T::GPH_MFPL: PH2MFP Mask           */
N
N#define SYS_GPH_MFPL_PH3MFP_Pos          (12)                                              /*!< SYS_T::GPH_MFPL: PH3MFP Position       */
N#define SYS_GPH_MFPL_PH3MFP_Msk          (0xful << SYS_GPH_MFPL_PH3MFP_Pos)                /*!< SYS_T::GPH_MFPL: PH3MFP Mask           */
N
N#define SYS_GPH_MFPL_PH4MFP_Pos          (16)                                              /*!< SYS_T::GPH_MFPL: PH4MFP Position       */
N#define SYS_GPH_MFPL_PH4MFP_Msk          (0xful << SYS_GPH_MFPL_PH4MFP_Pos)                /*!< SYS_T::GPH_MFPL: PH4MFP Mask           */
N
N#define SYS_GPH_MFPL_PH5MFP_Pos          (20)                                              /*!< SYS_T::GPH_MFPL: PH5MFP Position       */
N#define SYS_GPH_MFPL_PH5MFP_Msk          (0xful << SYS_GPH_MFPL_PH5MFP_Pos)                /*!< SYS_T::GPH_MFPL: PH5MFP Mask           */
N
N#define SYS_GPH_MFPL_PH6MFP_Pos          (24)                                              /*!< SYS_T::GPH_MFPL: PH6MFP Position       */
N#define SYS_GPH_MFPL_PH6MFP_Msk          (0xful << SYS_GPH_MFPL_PH6MFP_Pos)                /*!< SYS_T::GPH_MFPL: PH6MFP Mask           */
N
N#define SYS_GPH_MFPL_PH7MFP_Pos          (28)                                              /*!< SYS_T::GPH_MFPL: PH7MFP Position       */
N#define SYS_GPH_MFPL_PH7MFP_Msk          (0xful << SYS_GPH_MFPL_PH7MFP_Pos)                /*!< SYS_T::GPH_MFPL: PH7MFP Mask           */
N
N#define SYS_GPH_MFPH_PH8MFP_Pos          (0)                                               /*!< SYS_T::GPH_MFPH: PH8MFP Position       */
N#define SYS_GPH_MFPH_PH8MFP_Msk          (0xful << SYS_GPH_MFPH_PH8MFP_Pos)                /*!< SYS_T::GPH_MFPH: PH8MFP Mask           */
N
N#define SYS_GPH_MFPH_PH9MFP_Pos          (4)                                               /*!< SYS_T::GPH_MFPH: PH9MFP Position       */
N#define SYS_GPH_MFPH_PH9MFP_Msk          (0xful << SYS_GPH_MFPH_PH9MFP_Pos)                /*!< SYS_T::GPH_MFPH: PH9MFP Mask           */
N
N#define SYS_GPH_MFPH_PH10MFP_Pos         (8)                                               /*!< SYS_T::GPH_MFPH: PH10MFP Position      */
N#define SYS_GPH_MFPH_PH10MFP_Msk         (0xful << SYS_GPH_MFPH_PH10MFP_Pos)               /*!< SYS_T::GPH_MFPH: PH10MFP Mask          */
N
N#define SYS_GPH_MFPH_PH11MFP_Pos         (12)                                              /*!< SYS_T::GPH_MFPH: PH11MFP Position      */
N#define SYS_GPH_MFPH_PH11MFP_Msk         (0xful << SYS_GPH_MFPH_PH11MFP_Pos)               /*!< SYS_T::GPH_MFPH: PH11MFP Mask          */
N
N#define SYS_GPH_MFPH_PH12MFP_Pos         (16)                                              /*!< SYS_T::GPH_MFPH: PH12MFP Position      */
N#define SYS_GPH_MFPH_PH12MFP_Msk         (0xful << SYS_GPH_MFPH_PH12MFP_Pos)               /*!< SYS_T::GPH_MFPH: PH12MFP Mask          */
N
N#define SYS_GPH_MFPH_PH13MFP_Pos         (20)                                              /*!< SYS_T::GPH_MFPH: PH13MFP Position      */
N#define SYS_GPH_MFPH_PH13MFP_Msk         (0xful << SYS_GPH_MFPH_PH13MFP_Pos)               /*!< SYS_T::GPH_MFPH: PH13MFP Mask          */
N
N#define SYS_GPH_MFPH_PH14MFP_Pos         (24)                                              /*!< SYS_T::GPH_MFPH: PH14MFP Position      */
N#define SYS_GPH_MFPH_PH14MFP_Msk         (0xful << SYS_GPH_MFPH_PH14MFP_Pos)               /*!< SYS_T::GPH_MFPH: PH14MFP Mask          */
N
N#define SYS_GPH_MFPH_PH15MFP_Pos         (28)                                              /*!< SYS_T::GPH_MFPH: PH15MFP Position      */
N#define SYS_GPH_MFPH_PH15MFP_Msk         (0xful << SYS_GPH_MFPH_PH15MFP_Pos)               /*!< SYS_T::GPH_MFPH: PH15MFP Mask          */
N
N#define SYS_LPLDOCTL_LPLDO_EN_Pos        (0)                                               /*!< SYS_T::LPLDOCTL: LPLDO_EN Position     */
N#define SYS_LPLDOCTL_LPLDO_EN_Msk        (0x1ul << SYS_LPLDOCTL_LPLDO_EN_Pos)              /*!< SYS_T::LPLDOCTL: LPLDO_EN Mask         */
N
N#define SYS_MODCTL_MODEN_Pos             (0)                                               /*!< SYS_T::MODCTL: MODEN Position          */
N#define SYS_MODCTL_MODEN_Msk             (0x1ul << SYS_MODCTL_MODEN_Pos)                   /*!< SYS_T::MODCTL: MODEN Mask              */
N
N#define SYS_MODCTL_MODH_Pos              (1)                                               /*!< SYS_T::MODCTL: MODH Position           */
N#define SYS_MODCTL_MODH_Msk              (0x1ul << SYS_MODCTL_MODH_Pos)                    /*!< SYS_T::MODCTL: MODH Mask               */
N
N#define SYS_MODCTL_MODPWMSEL_Pos         (4)                                               /*!< SYS_T::MODCTL: MODPWMSEL Position      */
N#define SYS_MODCTL_MODPWMSEL_Msk         (0xful << SYS_MODCTL_MODPWMSEL_Pos)               /*!< SYS_T::MODCTL: MODPWMSEL Mask          */
N
N#define SYS_SRAM_BISTCTL_SRBIST_Pos      (0)                                               /*!< SYS_T::SRAM_BISTCTL: SRBIST Position   */
N#define SYS_SRAM_BISTCTL_SRBIST_Msk      (0x1ul << SYS_SRAM_BISTCTL_SRBIST_Pos)            /*!< SYS_T::SRAM_BISTCTL: SRBIST Mask       */
N
N#define SYS_SRAM_BISTCTL_USBBIST_Pos     (4)                                               /*!< SYS_T::SRAM_BISTCTL: USBBIST Position  */
N#define SYS_SRAM_BISTCTL_USBBIST_Msk     (0x1ul << SYS_SRAM_BISTCTL_USBBIST_Pos)           /*!< SYS_T::SRAM_BISTCTL: USBBIST Mask      */
N
N#define SYS_SRAM_BISTCTL_PDMABIST_Pos    (7)                                               /*!< SYS_T::SRAM_BISTCTL: PDMABIST Position */
N#define SYS_SRAM_BISTCTL_PDMABIST_Msk    (0x1ul << SYS_SRAM_BISTCTL_PDMABIST_Pos)          /*!< SYS_T::SRAM_BISTCTL: PDMABIST Mask     */
N
N#define SYS_SRAM_BISTSTS_SRBISTEF_Pos    (0)                                               /*!< SYS_T::SRAM_BISTSTS: SRBISTEF Position */
N#define SYS_SRAM_BISTSTS_SRBISTEF_Msk    (0x1ul << SYS_SRAM_BISTSTS_SRBISTEF_Pos)          /*!< SYS_T::SRAM_BISTSTS: SRBISTEF Mask     */
N
N#define SYS_SRAM_BISTSTS_USBBEF_Pos      (4)                                               /*!< SYS_T::SRAM_BISTSTS: USBBEF Position   */
N#define SYS_SRAM_BISTSTS_USBBEF_Msk      (0x1ul << SYS_SRAM_BISTSTS_USBBEF_Pos)            /*!< SYS_T::SRAM_BISTSTS: USBBEF Mask       */
N
N#define SYS_SRAM_BISTSTS_PDMABISTF_Pos   (7)                                               /*!< SYS_T::SRAM_BISTSTS: PDMABISTF Position*/
N#define SYS_SRAM_BISTSTS_PDMABISTF_Msk   (0x1ul << SYS_SRAM_BISTSTS_PDMABISTF_Pos)         /*!< SYS_T::SRAM_BISTSTS: PDMABISTF Mask    */
N
N#define SYS_SRAM_BISTSTS_SRBEND_Pos      (16)                                              /*!< SYS_T::SRAM_BISTSTS: SRBEND Position   */
N#define SYS_SRAM_BISTSTS_SRBEND_Msk      (0x1ul << SYS_SRAM_BISTSTS_SRBEND_Pos)            /*!< SYS_T::SRAM_BISTSTS: SRBEND Mask       */
N
N#define SYS_SRAM_BISTSTS_USBBEND_Pos     (20)                                              /*!< SYS_T::SRAM_BISTSTS: USBBEND Position  */
N#define SYS_SRAM_BISTSTS_USBBEND_Msk     (0x1ul << SYS_SRAM_BISTSTS_USBBEND_Pos)           /*!< SYS_T::SRAM_BISTSTS: USBBEND Mask      */
N
N#define SYS_SRAM_BISTSTS_PDMAEND_Pos     (23)                                              /*!< SYS_T::SRAM_BISTSTS: PDMAEND Position  */
N#define SYS_SRAM_BISTSTS_PDMAEND_Msk     (0x1ul << SYS_SRAM_BISTSTS_PDMAEND_Pos)           /*!< SYS_T::SRAM_BISTSTS: PDMAEND Mask      */
N
N#define SYS_SRAM_PARITY_PTESTEN_Pos      (0)                                               /*!< SYS_T::SRAM_PARITY: PTESTEN Position   */
N#define SYS_SRAM_PARITY_PTESTEN_Msk      (0x1ul << SYS_SRAM_PARITY_PTESTEN_Pos)            /*!< SYS_T::SRAM_PARITY: PTESTEN Mask       */
N
N#define SYS_SRAM_PARITY_PTESTPB_Pos      (4)                                               /*!< SYS_T::SRAM_PARITY: PTESTPB Position   */
N#define SYS_SRAM_PARITY_PTESTPB_Msk      (0xful << SYS_SRAM_PARITY_PTESTPB_Pos)            /*!< SYS_T::SRAM_PARITY: PTESTPB Mask       */
N
N#define SYS_SRAM_INTCTL_PERRIEN_Pos      (0)                                               /*!< SYS_T::SRAM_INTCTL: PERRIEN Position   */
N#define SYS_SRAM_INTCTL_PERRIEN_Msk      (0x1ul << SYS_SRAM_INTCTL_PERRIEN_Pos)            /*!< SYS_T::SRAM_INTCTL: PERRIEN Mask       */
N
N#define SYS_SRAM_STATUS_PERRIF_Pos       (0)                                               /*!< SYS_T::SRAM_STATUS: PERRIF Position    */
N#define SYS_SRAM_STATUS_PERRIF_Msk       (0x1ul << SYS_SRAM_STATUS_PERRIF_Pos)             /*!< SYS_T::SRAM_STATUS: PERRIF Mask        */
N
N#define SYS_SRAM_ERRADDR_ERRADDR_Pos     (0)                                               /*!< SYS_T::SRAM_ERRADDR: ERRADDR Position  */
N#define SYS_SRAM_ERRADDR_ERRADDR_Msk     (0xfffffffful << SYS_SRAM_ERRADDR_ERRADDR_Pos)    /*!< SYS_T::SRAM_ERRADDR: ERRADDR Mask      */
N
N#define SYS_HIRCTRIMCTL_FREQSEL_Pos      (0)                                               /*!< SYS_T::HIRCTRIMCTL: FREQSEL Position   */
N#define SYS_HIRCTRIMCTL_FREQSEL_Msk      (0x3ul << SYS_HIRCTRIMCTL_FREQSEL_Pos)            /*!< SYS_T::HIRCTRIMCTL: FREQSEL Mask       */
N
N#define SYS_HIRCTRIMCTL_LOOPSEL_Pos      (4)                                               /*!< SYS_T::HIRCTRIMCTL: LOOPSEL Position   */
N#define SYS_HIRCTRIMCTL_LOOPSEL_Msk      (0x3ul << SYS_HIRCTRIMCTL_LOOPSEL_Pos)            /*!< SYS_T::HIRCTRIMCTL: LOOPSEL Mask       */
N
N#define SYS_HIRCTRIMCTL_RETRYCNT_Pos     (6)                                               /*!< SYS_T::HIRCTRIMCTL: RETRYCNT Position  */
N#define SYS_HIRCTRIMCTL_RETRYCNT_Msk     (0x3ul << SYS_HIRCTRIMCTL_RETRYCNT_Pos)           /*!< SYS_T::HIRCTRIMCTL: RETRYCNT Mask      */
N
N#define SYS_HIRCTRIMCTL_CESTOPEN_Pos     (8)                                               /*!< SYS_T::HIRCTRIMCTL: CESTOPEN Position  */
N#define SYS_HIRCTRIMCTL_CESTOPEN_Msk     (0x1ul << SYS_HIRCTRIMCTL_CESTOPEN_Pos)           /*!< SYS_T::HIRCTRIMCTL: CESTOPEN Mask      */
N
N#define SYS_HIRCTRIMCTL_BOUNDEN_Pos      (9)                                               /*!< SYS_T::HIRCTRIMCTL: BOUNDEN Position   */
N#define SYS_HIRCTRIMCTL_BOUNDEN_Msk      (0x1ul << SYS_HIRCTRIMCTL_BOUNDEN_Pos)            /*!< SYS_T::HIRCTRIMCTL: BOUNDEN Mask       */
N
N#define SYS_HIRCTRIMCTL_REFCKSEL_Pos     (10)                                              /*!< SYS_T::HIRCTRIMCTL: REFCKSEL Position  */
N#define SYS_HIRCTRIMCTL_REFCKSEL_Msk     (0x1ul << SYS_HIRCTRIMCTL_REFCKSEL_Pos)           /*!< SYS_T::HIRCTRIMCTL: REFCKSEL Mask      */
N
N#define SYS_HIRCTRIMCTL_BOUNDARY_Pos     (16)                                              /*!< SYS_T::HIRCTRIMCTL: BOUNDARY Position  */
N#define SYS_HIRCTRIMCTL_BOUNDARY_Msk     (0x1ful << SYS_HIRCTRIMCTL_BOUNDARY_Pos)          /*!< SYS_T::HIRCTRIMCTL: BOUNDARY Mask      */
N
N#define SYS_HIRCTRIMIEN_TFALIEN_Pos      (1)                                               /*!< SYS_T::HIRCTRIMIEN: TFALIEN Position   */
N#define SYS_HIRCTRIMIEN_TFALIEN_Msk      (0x1ul << SYS_HIRCTRIMIEN_TFALIEN_Pos)            /*!< SYS_T::HIRCTRIMIEN: TFALIEN Mask       */
N
N#define SYS_HIRCTRIMIEN_CLKEIEN_Pos      (2)                                               /*!< SYS_T::HIRCTRIMIEN: CLKEIEN Position   */
N#define SYS_HIRCTRIMIEN_CLKEIEN_Msk      (0x1ul << SYS_HIRCTRIMIEN_CLKEIEN_Pos)            /*!< SYS_T::HIRCTRIMIEN: CLKEIEN Mask       */
N
N#define SYS_HIRCTRIMSTS_FREQLOCK_Pos     (0)                                               /*!< SYS_T::HIRCTRIMSTS: FREQLOCK Position  */
N#define SYS_HIRCTRIMSTS_FREQLOCK_Msk     (0x1ul << SYS_HIRCTRIMSTS_FREQLOCK_Pos)           /*!< SYS_T::HIRCTRIMSTS: FREQLOCK Mask      */
N
N#define SYS_HIRCTRIMSTS_TFAILIF_Pos      (1)                                               /*!< SYS_T::HIRCTRIMSTS: TFAILIF Position   */
N#define SYS_HIRCTRIMSTS_TFAILIF_Msk      (0x1ul << SYS_HIRCTRIMSTS_TFAILIF_Pos)            /*!< SYS_T::HIRCTRIMSTS: TFAILIF Mask       */
N
N#define SYS_HIRCTRIMSTS_CLKERIF_Pos      (2)                                               /*!< SYS_T::HIRCTRIMSTS: CLKERIF Position   */
N#define SYS_HIRCTRIMSTS_CLKERIF_Msk      (0x1ul << SYS_HIRCTRIMSTS_CLKERIF_Pos)            /*!< SYS_T::HIRCTRIMSTS: CLKERIF Mask       */
N
N#define SYS_HIRCTRIMSTS_OVBDIF_Pos       (3)                                               /*!< SYS_T::HIRCTRIMSTS: OVBDIF Position    */
N#define SYS_HIRCTRIMSTS_OVBDIF_Msk       (0x1ul << SYS_HIRCTRIMSTS_OVBDIF_Pos)             /*!< SYS_T::HIRCTRIMSTS: OVBDIF Mask        */
N
N#define SYS_REGLCTL_REGLCTL_Pos          (0)                                               /*!< SYS_T::REGLCTL: REGLCTL Position       */
N#define SYS_REGLCTL_REGLCTL_Msk          (0xfful << SYS_REGLCTL_REGLCTL_Pos)               /*!< SYS_T::REGLCTL: REGLCTL Mask           */
N
N#define SYS_PORDISAN_POROFFAN_Pos        (0)                                               /*!< SYS_T::PORDISAN: POROFFAN Position     */
N#define SYS_PORDISAN_POROFFAN_Msk        (0xfffful << SYS_PORDISAN_POROFFAN_Pos)           /*!< SYS_T::PORDISAN: POROFFAN Mask         */
N
N#define NMI_NMIEN_BODOUT_Pos             (0)                                               /*!< NMI_T::NMIEN: BODOUT Position          */
N#define NMI_NMIEN_BODOUT_Msk             (0x1ul << NMI_NMIEN_BODOUT_Pos)                   /*!< NMI_T::NMIEN: BODOUT Mask              */
N
N#define NMI_NMIEN_IRC_INT_Pos            (1)                                               /*!< NMI_T::NMIEN: IRC_INT Position         */
N#define NMI_NMIEN_IRC_INT_Msk            (0x1ul << NMI_NMIEN_IRC_INT_Pos)                  /*!< NMI_T::NMIEN: IRC_INT Mask             */
N
N#define NMI_NMIEN_PWRWU_INT_Pos          (2)                                               /*!< NMI_T::NMIEN: PWRWU_INT Position       */
N#define NMI_NMIEN_PWRWU_INT_Msk          (0x1ul << NMI_NMIEN_PWRWU_INT_Pos)                /*!< NMI_T::NMIEN: PWRWU_INT Mask           */
N
N#define NMI_NMIEN_SRAM_PERR_Pos          (3)                                               /*!< NMI_T::NMIEN: SRAM_PERR Position       */
N#define NMI_NMIEN_SRAM_PERR_Msk          (0x1ul << NMI_NMIEN_SRAM_PERR_Pos)                /*!< NMI_T::NMIEN: SRAM_PERR Mask           */
N
N#define NMI_NMIEN_CLKFAIL_Pos            (4)                                               /*!< NMI_T::NMIEN: CLKFAIL Position         */
N#define NMI_NMIEN_CLKFAIL_Msk            (0x1ul << NMI_NMIEN_CLKFAIL_Pos)                  /*!< NMI_T::NMIEN: CLKFAIL Mask             */
N
N#define NMI_NMIEN_RTC_INT_Pos            (6)                                               /*!< NMI_T::NMIEN: RTC_INT Position         */
N#define NMI_NMIEN_RTC_INT_Msk            (0x1ul << NMI_NMIEN_RTC_INT_Pos)                  /*!< NMI_T::NMIEN: RTC_INT Mask             */
N
N#define NMI_NMIEN_EINT0_Pos              (8)                                               /*!< NMI_T::NMIEN: EINT0 Position           */
N#define NMI_NMIEN_EINT0_Msk              (0x1ul << NMI_NMIEN_EINT0_Pos)                    /*!< NMI_T::NMIEN: EINT0 Mask               */
N
N#define NMI_NMIEN_EINT1_Pos              (9)                                               /*!< NMI_T::NMIEN: EINT1 Position           */
N#define NMI_NMIEN_EINT1_Msk              (0x1ul << NMI_NMIEN_EINT1_Pos)                    /*!< NMI_T::NMIEN: EINT1 Mask               */
N
N#define NMI_NMIEN_EINT2_Pos              (10)                                              /*!< NMI_T::NMIEN: EINT2 Position           */
N#define NMI_NMIEN_EINT2_Msk              (0x1ul << NMI_NMIEN_EINT2_Pos)                    /*!< NMI_T::NMIEN: EINT2 Mask               */
N
N#define NMI_NMIEN_EINT3_Pos              (11)                                              /*!< NMI_T::NMIEN: EINT3 Position           */
N#define NMI_NMIEN_EINT3_Msk              (0x1ul << NMI_NMIEN_EINT3_Pos)                    /*!< NMI_T::NMIEN: EINT3 Mask               */
N
N#define NMI_NMIEN_EINT4_Pos              (12)                                              /*!< NMI_T::NMIEN: EINT4 Position           */
N#define NMI_NMIEN_EINT4_Msk              (0x1ul << NMI_NMIEN_EINT4_Pos)                    /*!< NMI_T::NMIEN: EINT4 Mask               */
N
N#define NMI_NMIEN_EINT5_Pos              (13)                                              /*!< NMI_T::NMIEN: EINT5 Position           */
N#define NMI_NMIEN_EINT5_Msk              (0x1ul << NMI_NMIEN_EINT5_Pos)                    /*!< NMI_T::NMIEN: EINT5 Mask               */
N
N#define NMI_NMIEN_UART0_INT_Pos          (14)                                              /*!< NMI_T::NMIEN: UART0_INT Position       */
N#define NMI_NMIEN_UART0_INT_Msk          (0x1ul << NMI_NMIEN_UART0_INT_Pos)                /*!< NMI_T::NMIEN: UART0_INT Mask           */
N
N#define NMI_NMIEN_UART1_INT_Pos          (15)                                              /*!< NMI_T::NMIEN: UART1_INT Position       */
N#define NMI_NMIEN_UART1_INT_Msk          (0x1ul << NMI_NMIEN_UART1_INT_Pos)                /*!< NMI_T::NMIEN: UART1_INT Mask           */
N
N#define NMI_NMISTS_BODOUT_Pos            (0)                                               /*!< NMI_T::NMISTS: BODOUT Position         */
N#define NMI_NMISTS_BODOUT_Msk            (0x1ul << NMI_NMISTS_BODOUT_Pos)                  /*!< NMI_T::NMISTS: BODOUT Mask             */
N
N#define NMI_NMISTS_IRC_INT_Pos           (1)                                               /*!< NMI_T::NMISTS: IRC_INT Position        */
N#define NMI_NMISTS_IRC_INT_Msk           (0x1ul << NMI_NMISTS_IRC_INT_Pos)                 /*!< NMI_T::NMISTS: IRC_INT Mask            */
N
N#define NMI_NMISTS_PWRWU_INT_Pos         (2)                                               /*!< NMI_T::NMISTS: PWRWU_INT Position      */
N#define NMI_NMISTS_PWRWU_INT_Msk         (0x1ul << NMI_NMISTS_PWRWU_INT_Pos)               /*!< NMI_T::NMISTS: PWRWU_INT Mask          */
N
N#define NMI_NMISTS_SRAM_PERR_Pos         (3)                                               /*!< NMI_T::NMISTS: SRAM_PERR Position      */
N#define NMI_NMISTS_SRAM_PERR_Msk         (0x1ul << NMI_NMISTS_SRAM_PERR_Pos)               /*!< NMI_T::NMISTS: SRAM_PERR Mask          */
N
N#define NMI_NMISTS_CLKFAIL_Pos           (4)                                               /*!< NMI_T::NMISTS: CLKFAIL Position        */
N#define NMI_NMISTS_CLKFAIL_Msk           (0x1ul << NMI_NMISTS_CLKFAIL_Pos)                 /*!< NMI_T::NMISTS: CLKFAIL Mask            */
N
N#define NMI_NMISTS_RTC_INT_Pos           (6)                                               /*!< NMI_T::NMISTS: RTC_INT Position        */
N#define NMI_NMISTS_RTC_INT_Msk           (0x1ul << NMI_NMISTS_RTC_INT_Pos)                 /*!< NMI_T::NMISTS: RTC_INT Mask            */
N
N#define NMI_NMISTS_EINT0_Pos             (8)                                               /*!< NMI_T::NMISTS: EINT0 Position          */
N#define NMI_NMISTS_EINT0_Msk             (0x1ul << NMI_NMISTS_EINT0_Pos)                   /*!< NMI_T::NMISTS: EINT0 Mask              */
N
N#define NMI_NMISTS_EINT1_Pos             (9)                                               /*!< NMI_T::NMISTS: EINT1 Position          */
N#define NMI_NMISTS_EINT1_Msk             (0x1ul << NMI_NMISTS_EINT1_Pos)                   /*!< NMI_T::NMISTS: EINT1 Mask              */
N
N#define NMI_NMISTS_EINT2_Pos             (10)                                              /*!< NMI_T::NMISTS: EINT2 Position          */
N#define NMI_NMISTS_EINT2_Msk             (0x1ul << NMI_NMISTS_EINT2_Pos)                   /*!< NMI_T::NMISTS: EINT2 Mask              */
N
N#define NMI_NMISTS_EINT3_Pos             (11)                                              /*!< NMI_T::NMISTS: EINT3 Position          */
N#define NMI_NMISTS_EINT3_Msk             (0x1ul << NMI_NMISTS_EINT3_Pos)                   /*!< NMI_T::NMISTS: EINT3 Mask              */
N
N#define NMI_NMISTS_EINT4_Pos             (12)                                              /*!< NMI_T::NMISTS: EINT4 Position          */
N#define NMI_NMISTS_EINT4_Msk             (0x1ul << NMI_NMISTS_EINT4_Pos)                   /*!< NMI_T::NMISTS: EINT4 Mask              */
N
N#define NMI_NMISTS_EINT5_Pos             (13)                                              /*!< NMI_T::NMISTS: EINT5 Position          */
N#define NMI_NMISTS_EINT5_Msk             (0x1ul << NMI_NMISTS_EINT5_Pos)                   /*!< NMI_T::NMISTS: EINT5 Mask              */
N
N#define NMI_NMISTS_UART0_INT_Pos         (14)                                              /*!< NMI_T::NMISTS: UART0_INT Position      */
N#define NMI_NMISTS_UART0_INT_Msk         (0x1ul << NMI_NMISTS_UART0_INT_Pos)               /*!< NMI_T::NMISTS: UART0_INT Mask          */
N
N#define NMI_NMISTS_UART1_INT_Pos         (15)                                              /*!< NMI_T::NMISTS: UART1_INT Position      */
N#define NMI_NMISTS_UART1_INT_Msk         (0x1ul << NMI_NMISTS_UART1_INT_Pos)               /*!< NMI_T::NMISTS: UART1_INT Mask          */
N
N/**@}*/ /* SYS_CONST */
N/**@}*/ /* end of SYS register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __SYS_REG_H__ */
L 175 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "rtc_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\rtc_reg.h" 1
N/**************************************************************************//**
N * @file     rtc_reg.h
N * @version  V1.00
N * @brief    RTC register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0 
N * @copyright (C) 2019 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __RTC_REG_H__
N#define __RTC_REG_H__
N
N/** @addtogroup REGISTER Control Register
N
N  @{
N
N*/
N
N/*---------------------- Real Time Clock Controller -------------------------*/
N/**
N    @addtogroup RTC Real Time Clock Controller(RTC)
N    Memory Mapped Structure for RTC Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var RTC_T::INIT
N     * Offset: 0x00  RTC Initiation Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |INIT_ACTIVE|RTC Active Status (Read Only)
N     * |        |          |0 = RTC is at reset state.
N     * |        |          |1 = RTC is at normal active state.
N     * |[31:1]  |INIT      |RTC Initiation
N     * |        |          |When RTC block is powered on, RTC is at reset state
N     * |        |          |User has to write a number (0x a5eb1357) to INIT to make RTC leaving reset state
N     * |        |          |Once the INIT is written as 0xa5eb1357, the RTC will be in un-reset state permanently.
N     * |        |          |The INIT is a write-only field and read value will be always 0.
N     * @var RTC_T::FREQADJ
N     * Offset: 0x08  RTC Frequency Compensation Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |FRACTION  |Fraction Part
N     * |        |          |Formula: FRACTION = (fraction part of detected value) X 64.
N     * |        |          |Note: Digit in FCR must be expressed as hexadecimal number.
N     * |[12:8]  |INTEGER   |Integer Part
N     * |        |          |00000 = Integer part of detected value is 32752.
N     * |        |          |00001 = Integer part of detected value is 32753.
N     * |        |          |00010 = Integer part of detected value is 32754.
N     * |        |          |00011 = Integer part of detected value is 32755.
N     * |        |          |00100 = Integer part of detected value is 32756.
N     * |        |          |00101 = Integer part of detected value is 32757.
N     * |        |          |00110 = Integer part of detected value is 32758.
N     * |        |          |00111 = Integer part of detected value is 32759.
N     * |        |          |01000 = Integer part of detected value is 32760.
N     * |        |          |01001 = Integer part of detected value is 32761.
N     * |        |          |01010 = Integer part of detected value is 32762.
N     * |        |          |01011 = Integer part of detected value is 32763.
N     * |        |          |01100 = Integer part of detected value is 32764.
N     * |        |          |01101 = Integer part of detected value is 32765.
N     * |        |          |01110 = Integer part of detected value is 32766.
N     * |        |          |01111 = Integer part of detected value is 32767.
N     * |        |          |10000 = Integer part of detected value is 32768.
N     * |        |          |10001 = Integer part of detected value is 32769.
N     * |        |          |10010 = Integer part of detected value is 32770.
N     * |        |          |10011 = Integer part of detected value is 32771.
N     * |        |          |10100 = Integer part of detected value is 32772.
N     * |        |          |10101 = Integer part of detected value is 32773.
N     * |        |          |10110 = Integer part of detected value is 32774.
N     * |        |          |10111 = Integer part of detected value is 32775.
N     * |        |          |11000 = Integer part of detected value is 32776.
N     * |        |          |11001 = Integer part of detected value is 32777.
N     * |        |          |11010 = Integer part of detected value is 32778.
N     * |        |          |11011 = Integer part of detected value is 32779.
N     * |        |          |11100 = Integer part of detected value is 32780.
N     * |        |          |11101 = Integer part of detected value is 32781.
N     * |        |          |11110 = Integer part of detected value is 32782.
N     * |        |          |11111 = Integer part of detected value is 32783.
N     * @var RTC_T::TIME
N     * Offset: 0x0C  RTC Time Loading Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |SEC       |1-Sec Time Digit (0~9)
N     * |[6:4]   |TENSEC    |10-Sec Time Digit (0~5)
N     * |[11:8]  |MIN       |1-Min Time Digit (0~9)
N     * |[14:12] |TENMIN    |10-Min Time Digit (0~5)
N     * |[19:16] |HR        |1-Hour Time Digit (0~9)
N     * |[21:20] |TENHR     |10-Hour Time Digit (0~2)
N     * |        |          |When RTC runs as 12-hour time scale mode, RTC_TIME[21] (the high bit of TENHR[1:0]) means AM/PM indication (If RTC_TIME[21] is 1, it indicates PM time message.)
N     * |[30:24] |HZCNT     |Index of sub-second counter(0x00 ~0x7F)
N     * @var RTC_T::CAL
N     * Offset: 0x10  RTC Calendar Loading Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |DAY       |1-Day Calendar Digit (0~9)
N     * |[5:4]   |TENDAY    |10-Day Calendar Digit (0~3)
N     * |[11:8]  |MON       |1-Month Calendar Digit (0~9)
N     * |[12]    |TENMON    |10-Month Calendar Digit (0~1)
N     * |[19:16] |YEAR      |1-Year Calendar Digit (0~9)
N     * |[23:20] |TENYEAR   |10-Year Calendar Digit (0~9)
N     * @var RTC_T::CLKFMT
N     * Offset: 0x14  RTC Time Scale Selection Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |24HEN     |24-hour / 12-hour Time Scale Selection
N     * |        |          |Indicates that RTC_TIME and RTC_TALM are in 24-hour time scale or 12-hour time scale
N     * |        |          |0 = 12-hour time scale with AM and PM indication selected.
N     * |        |          |1 = 24-hour time scale selected.
N     * |[8]     |HZCNTEN   |Sub-second Counter Enable Bit
N     * |        |          |0 = HZCNT disabled in RTC_TIME and RTC_TALM.
N     * |        |          |1 = HZCNT enabled in RTC_TIME and RTC_TALM .
N     * @var RTC_T::WEEKDAY
N     * Offset: 0x18  RTC Day of the Week Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |WEEKDAY   |Day of the Week Register
N     * |        |          |000 = Sunday.
N     * |        |          |001 = Monday.
N     * |        |          |010 = Tuesday.
N     * |        |          |011 = Wednesday.
N     * |        |          |100 = Thursday.
N     * |        |          |101 = Friday.
N     * |        |          |110 = Saturday.
N     * |        |          |111 = Reserved.
N     * @var RTC_T::TALM
N     * Offset: 0x1C  RTC Time Alarm Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |SEC       |1-Sec Time Digit of Alarm Setting (0~9)
N     * |[6:4]   |TENSEC    |10-Sec Time Digit of Alarm Setting (0~5)
N     * |[11:8]  |MIN       |1-Min Time Digit of Alarm Setting (0~9)
N     * |[14:12] |TENMIN    |10-Min Time Digit of Alarm Setting (0~5)
N     * |[19:16] |HR        |1-Hour Time Digit of Alarm Setting (0~9)
N     * |[21:20] |TENHR     |10-Hour Time Digit of Alarm Setting (0~2)
N     * |        |          |When RTC runs as 12-hour time scale mode, RTC_TIME[21] (the high bit of TENHR[1:0]) means AM/PM indication (If RTC_TIME[21] is 1, it indicates PM time message.)
N     * |[30:24] |HZCNT     |Index of sub-second counter(0x00 ~0x7F)
N     * @var RTC_T::CALM
N     * Offset: 0x20  RTC Calendar Alarm Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |DAY       |1-Day Calendar Digit of Alarm Setting (0~9)
N     * |[5:4]   |TENDAY    |10-Day Calendar Digit of Alarm Setting (0~3)
N     * |[11:8]  |MON       |1-Month Calendar Digit of Alarm Setting (0~9)
N     * |[12]    |TENMON    |10-Month Calendar Digit of Alarm Setting (0~1)
N     * |[19:16] |YEAR      |1-Year Calendar Digit of Alarm Setting (0~9)
N     * |[23:20] |TENYEAR   |10-Year Calendar Digit of Alarm Setting (0~9)
N     * @var RTC_T::LEAPYEAR
N     * Offset: 0x24  RTC Leap Year Indicator Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |LEAPYEAR  |Leap Year Indication Register (Read Only)
N     * |        |          |0 = This year is not a leap year.
N     * |        |          |1 = This year is leap year.
N     * @var RTC_T::INTEN
N     * Offset: 0x28  RTC Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ALMIEN    |Alarm Interrupt Enable Bit
N     * |        |          |Set ALMIEN to 1 can also enable chip wake-up function when RTC alarm interrupt event is generated.
N     * |        |          |0 = RTC Alarm interrupt Disabled.
N     * |        |          |1 = RTC Alarm interrupt Enabled.
N     * |[1]     |TICKIEN   |Time Tick Interrupt Enable Bit
N     * @var RTC_T::INTSTS
N     * Offset: 0x2C  RTC Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ALMIF     |RTC Alarm Interrupt Flag
N     * |        |          |0 = Alarm condition is not matched.
N     * |        |          |1 = Alarm condition is matched.
N     * |        |          |Note: Write 1 to clear this bit.
N     * |[1]     |TICKIF    |RTC Time Tick Interrupt Flag
N     * @var RTC_T::TICK
N     * Offset: 0x30  RTC Time Tick Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |TICK      |Time Tick Register
N     * |        |          |These bits are used to select RTC time tick period for Periodic Time Tick Interrupt request.
N     * |        |          |000 = Time tick is 1 second.
N     * |        |          |001 = Time tick is 1/2 second.
N     * |        |          |010 = Time tick is 1/4 second.
N     * |        |          |011 = Time tick is 1/8 second.
N     * |        |          |100 = Time tick is 1/16 second.
N     * |        |          |101 = Time tick is 1/32 second.
N     * |        |          |110 = Time tick is 1/64 second.
N     * |        |          |111 = Time tick is 1/128 second.
N     * |        |          |Note: This register can be read back after the RTC register access enable bit RWENF (RTC_RWEN[16]) is active.
N     * @var RTC_T::TAMSK
N     * Offset: 0x34  RTC Time Alarm Mask Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |MSEC      |Mask 1-Sec Time Digit of Alarm Setting (0~9)
N     * |[1]     |MTENSEC   |Mask 10-Sec Time Digit of Alarm Setting (0~5)
N     * |[2]     |MMIN      |Mask 1-Min Time Digit of Alarm Setting (0~9)
N     * |[3]     |MTENMIN   |Mask 10-Min Time Digit of Alarm Setting (0~5)
N     * |[4]     |MHR       |Mask 1-Hour Time Digit of Alarm Setting (0~9)
N     * |        |          |Note: MHR function is only for 24-hour time scale mode.
N     * |[5]     |MTENHR    |Mask 10-Hour Time Digit of Alarm Setting (0~2)
N     * |        |          |Note: MTENHR function is only for 24-hour time scale mode.
N     * @var RTC_T::CAMSK
N     * Offset: 0x38  RTC Calendar Alarm Mask Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |MDAY      |Mask 1-Day Calendar Digit of Alarm Setting (0~9)
N     * |[1]     |MTENDAY   |Mask 10-Day Calendar Digit of Alarm Setting (0~3)
N     * |[2]     |MMON      |Mask 1-Month Calendar Digit of Alarm Setting (0~9)
N     * |[3]     |MTENMON   |Mask 10-Month Calendar Digit of Alarm Setting (0~1)
N     * |[4]     |MYEAR     |Mask 1-Year Calendar Digit of Alarm Setting (0~9)
N     * |[5]     |MTENYEAR  |Mask 10-Year Calendar Digit of Alarm Setting (0~9)
N     * @var RTC_T::LXTCTL
N     * Offset: 0x100  RTC 32.768 kHz Oscillator Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7]     |C32KS     |Clock 32K Source Selection:
N     * |        |          |0 = Internal 32K clock is from 32K crystal .
N     * |        |          |1 = Internal 32K clock is from LIRC32K.
N     */
N    __IO uint32_t INIT;                  /*!< [0x0000] RTC Initiation Register                                          */
X    volatile uint32_t INIT;                   
N    __I  uint32_t RESERVE0[1];
X    volatile const  uint32_t RESERVE0[1];
N    __IO uint32_t FREQADJ;               /*!< [0x0008] RTC Frequency Compensation Register                              */
X    volatile uint32_t FREQADJ;                
N    __IO uint32_t TIME;                  /*!< [0x000c] RTC Time Loading Register                                        */
X    volatile uint32_t TIME;                   
N    __IO uint32_t CAL;                   /*!< [0x0010] RTC Calendar Loading Register                                    */
X    volatile uint32_t CAL;                    
N    __IO uint32_t CLKFMT;                /*!< [0x0014] RTC Time Scale Selection Register                                */
X    volatile uint32_t CLKFMT;                 
N    __IO uint32_t WEEKDAY;               /*!< [0x0018] RTC Day of the Week Register                                     */
X    volatile uint32_t WEEKDAY;                
N    __IO uint32_t TALM;                  /*!< [0x001c] RTC Time Alarm Register                                          */
X    volatile uint32_t TALM;                   
N    __IO uint32_t CALM;                  /*!< [0x0020] RTC Calendar Alarm Register                                      */
X    volatile uint32_t CALM;                   
N    __I  uint32_t LEAPYEAR;              /*!< [0x0024] RTC Leap Year Indicator Register                                 */
X    volatile const  uint32_t LEAPYEAR;               
N    __IO uint32_t INTEN;                 /*!< [0x0028] RTC Interrupt Enable Register                                    */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t INTSTS;                /*!< [0x002c] RTC Interrupt Status Register                                    */
X    volatile uint32_t INTSTS;                 
N    __IO uint32_t TICK;                  /*!< [0x0030] RTC Time Tick Register                                           */
X    volatile uint32_t TICK;                   
N    __IO uint32_t TAMSK;                 /*!< [0x0034] RTC Time Alarm Mask Register                                     */
X    volatile uint32_t TAMSK;                  
N    __IO uint32_t CAMSK;                 /*!< [0x0038] RTC Calendar Alarm Mask Register                                 */
X    volatile uint32_t CAMSK;                  
N    __I  uint32_t RESERVE1[49];          /* 0x3C ~ 0xFC */
X    volatile const  uint32_t RESERVE1[49];           
N    __IO uint32_t LXTCTL;                /*!< [0x0100] RTC 32.768 kHz Oscillator Control Register                       */
X    volatile uint32_t LXTCTL;                 
N
N} RTC_T;
N
N/**
N    @addtogroup RTC_CONST RTC Bit Field Definition
N    Constant Definitions for RTC Controller
N@{ */
N
N#define RTC_INIT_ACTIVE_Pos              (0)                                               /*!< RTC_T::INIT: ACTIVE Position           */
N#define RTC_INIT_ACTIVE_Msk              (0x1ul << RTC_INIT_ACTIVE_Pos)                    /*!< RTC_T::INIT: ACTIVE Mask               */
N
N#define RTC_INIT_INIT_Pos                (1)                                               /*!< RTC_T::INIT: INIT Position             */
N#define RTC_INIT_INIT_Msk                (0x7ffffffful << RTC_INIT_INIT_Pos)               /*!< RTC_T::INIT: INIT Mask                 */
N
N#define RTC_FREQADJ_FRACTION_Pos         (0)                                               /*!< RTC_T::FREQADJ: FRACTION Position      */
N#define RTC_FREQADJ_FRACTION_Msk         (0x3ful << RTC_FREQADJ_FRACTION_Pos)              /*!< RTC_T::FREQADJ: FRACTION Mask          */
N
N#define RTC_FREQADJ_INTEGER_Pos          (8)                                               /*!< RTC_T::FREQADJ: INTEGER Position       */
N#define RTC_FREQADJ_INTEGER_Msk          (0x1ful << RTC_FREQADJ_INTEGER_Pos)               /*!< RTC_T::FREQADJ: INTEGER Mask           */
N
N#define RTC_TIME_SEC_Pos                 (0)                                               /*!< RTC_T::TIME: SEC Position              */
N#define RTC_TIME_SEC_Msk                 (0xful << RTC_TIME_SEC_Pos)                       /*!< RTC_T::TIME: SEC Mask                  */
N
N#define RTC_TIME_TENSEC_Pos              (4)                                               /*!< RTC_T::TIME: TENSEC Position           */
N#define RTC_TIME_TENSEC_Msk              (0x7ul << RTC_TIME_TENSEC_Pos)                    /*!< RTC_T::TIME: TENSEC Mask               */
N
N#define RTC_TIME_MIN_Pos                 (8)                                               /*!< RTC_T::TIME: MIN Position              */
N#define RTC_TIME_MIN_Msk                 (0xful << RTC_TIME_MIN_Pos)                       /*!< RTC_T::TIME: MIN Mask                  */
N
N#define RTC_TIME_TENMIN_Pos              (12)                                              /*!< RTC_T::TIME: TENMIN Position           */
N#define RTC_TIME_TENMIN_Msk              (0x7ul << RTC_TIME_TENMIN_Pos)                    /*!< RTC_T::TIME: TENMIN Mask               */
N
N#define RTC_TIME_HR_Pos                  (16)                                              /*!< RTC_T::TIME: HR Position               */
N#define RTC_TIME_HR_Msk                  (0xful << RTC_TIME_HR_Pos)                        /*!< RTC_T::TIME: HR Mask                   */
N
N#define RTC_TIME_TENHR_Pos               (20)                                              /*!< RTC_T::TIME: TENHR Position            */
N#define RTC_TIME_TENHR_Msk               (0x3ul << RTC_TIME_TENHR_Pos)                     /*!< RTC_T::TIME: TENHR Mask                */
N
N#define RTC_TIME_HZCNT_Pos               (24)                                              /*!< RTC_T::TIME: HZCNT Position            */
N#define RTC_TIME_HZCNT_Msk               (0x7ful << RTC_TIME_HZCNT_Pos)                    /*!< RTC_T::TIME: HZCNT Mask                */
N
N#define RTC_CAL_DAY_Pos                  (0)                                               /*!< RTC_T::CAL: DAY Position               */
N#define RTC_CAL_DAY_Msk                  (0xful << RTC_CAL_DAY_Pos)                        /*!< RTC_T::CAL: DAY Mask                   */
N
N#define RTC_CAL_TENDAY_Pos               (4)                                               /*!< RTC_T::CAL: TENDAY Position            */
N#define RTC_CAL_TENDAY_Msk               (0x3ul << RTC_CAL_TENDAY_Pos)                     /*!< RTC_T::CAL: TENDAY Mask                */
N
N#define RTC_CAL_MON_Pos                  (8)                                               /*!< RTC_T::CAL: MON Position               */
N#define RTC_CAL_MON_Msk                  (0xful << RTC_CAL_MON_Pos)                        /*!< RTC_T::CAL: MON Mask                   */
N
N#define RTC_CAL_TENMON_Pos               (12)                                              /*!< RTC_T::CAL: TENMON Position            */
N#define RTC_CAL_TENMON_Msk               (0x1ul << RTC_CAL_TENMON_Pos)                     /*!< RTC_T::CAL: TENMON Mask                */
N
N#define RTC_CAL_YEAR_Pos                 (16)                                              /*!< RTC_T::CAL: YEAR Position              */
N#define RTC_CAL_YEAR_Msk                 (0xful << RTC_CAL_YEAR_Pos)                       /*!< RTC_T::CAL: YEAR Mask                  */
N
N#define RTC_CAL_TENYEAR_Pos              (20)                                              /*!< RTC_T::CAL: TENYEAR Position           */
N#define RTC_CAL_TENYEAR_Msk              (0xful << RTC_CAL_TENYEAR_Pos)                    /*!< RTC_T::CAL: TENYEAR Mask               */
N
N#define RTC_CLKFMT_24HEN_Pos             (0)                                               /*!< RTC_T::CLKFMT: 24HEN Position          */
N#define RTC_CLKFMT_24HEN_Msk             (0x1ul << RTC_CLKFMT_24HEN_Pos)                   /*!< RTC_T::CLKFMT: 24HEN Mask              */
N
N#define RTC_CLKFMT_HZCNTEN_Pos           (8)                                               /*!< RTC_T::CLKFMT: HZCNTEN Position        */
N#define RTC_CLKFMT_HZCNTEN_Msk           (0x1ul << RTC_CLKFMT_HZCNTEN_Pos)                 /*!< RTC_T::CLKFMT: HZCNTEN Mask            */
N
N#define RTC_WEEKDAY_WEEKDAY_Pos          (0)                                               /*!< RTC_T::WEEKDAY: WEEKDAY Position       */
N#define RTC_WEEKDAY_WEEKDAY_Msk          (0x7ul << RTC_WEEKDAY_WEEKDAY_Pos)                /*!< RTC_T::WEEKDAY: WEEKDAY Mask           */
N
N#define RTC_TALM_SEC_Pos                 (0)                                               /*!< RTC_T::TALM: SEC Position              */
N#define RTC_TALM_SEC_Msk                 (0xful << RTC_TALM_SEC_Pos)                       /*!< RTC_T::TALM: SEC Mask                  */
N
N#define RTC_TALM_TENSEC_Pos              (4)                                               /*!< RTC_T::TALM: TENSEC Position           */
N#define RTC_TALM_TENSEC_Msk              (0x7ul << RTC_TALM_TENSEC_Pos)                    /*!< RTC_T::TALM: TENSEC Mask               */
N
N#define RTC_TALM_MIN_Pos                 (8)                                               /*!< RTC_T::TALM: MIN Position              */
N#define RTC_TALM_MIN_Msk                 (0xful << RTC_TALM_MIN_Pos)                       /*!< RTC_T::TALM: MIN Mask                  */
N
N#define RTC_TALM_TENMIN_Pos              (12)                                              /*!< RTC_T::TALM: TENMIN Position           */
N#define RTC_TALM_TENMIN_Msk              (0x7ul << RTC_TALM_TENMIN_Pos)                    /*!< RTC_T::TALM: TENMIN Mask               */
N
N#define RTC_TALM_HR_Pos                  (16)                                              /*!< RTC_T::TALM: HR Position               */
N#define RTC_TALM_HR_Msk                  (0xful << RTC_TALM_HR_Pos)                        /*!< RTC_T::TALM: HR Mask                   */
N
N#define RTC_TALM_TENHR_Pos               (20)                                              /*!< RTC_T::TALM: TENHR Position            */
N#define RTC_TALM_TENHR_Msk               (0x3ul << RTC_TALM_TENHR_Pos)                     /*!< RTC_T::TALM: TENHR Mask                */
N
N#define RTC_TALM_HZCNT_Pos               (24)                                              /*!< RTC_T::TALM: HZCNT Position            */
N#define RTC_TALM_HZCNT_Msk               (0x7ful << RTC_TALM_HZCNT_Pos)                    /*!< RTC_T::TALM: HZCNT Mask                */
N
N#define RTC_CALM_DAY_Pos                 (0)                                               /*!< RTC_T::CALM: DAY Position              */
N#define RTC_CALM_DAY_Msk                 (0xful << RTC_CALM_DAY_Pos)                       /*!< RTC_T::CALM: DAY Mask                  */
N
N#define RTC_CALM_TENDAY_Pos              (4)                                               /*!< RTC_T::CALM: TENDAY Position           */
N#define RTC_CALM_TENDAY_Msk              (0x3ul << RTC_CALM_TENDAY_Pos)                    /*!< RTC_T::CALM: TENDAY Mask               */
N
N#define RTC_CALM_MON_Pos                 (8)                                               /*!< RTC_T::CALM: MON Position              */
N#define RTC_CALM_MON_Msk                 (0xful << RTC_CALM_MON_Pos)                       /*!< RTC_T::CALM: MON Mask                  */
N
N#define RTC_CALM_TENMON_Pos              (12)                                              /*!< RTC_T::CALM: TENMON Position           */
N#define RTC_CALM_TENMON_Msk              (0x1ul << RTC_CALM_TENMON_Pos)                    /*!< RTC_T::CALM: TENMON Mask               */
N
N#define RTC_CALM_YEAR_Pos                (16)                                              /*!< RTC_T::CALM: YEAR Position             */
N#define RTC_CALM_YEAR_Msk                (0xful << RTC_CALM_YEAR_Pos)                      /*!< RTC_T::CALM: YEAR Mask                 */
N
N#define RTC_CALM_TENYEAR_Pos             (20)                                              /*!< RTC_T::CALM: TENYEAR Position          */
N#define RTC_CALM_TENYEAR_Msk             (0xful << RTC_CALM_TENYEAR_Pos)                   /*!< RTC_T::CALM: TENYEAR Mask              */
N
N#define RTC_LEAPYEAR_LEAPYEAR_Pos        (0)                                               /*!< RTC_T::LEAPYEAR: LEAPYEAR Position     */
N#define RTC_LEAPYEAR_LEAPYEAR_Msk        (0x1ul << RTC_LEAPYEAR_LEAPYEAR_Pos)              /*!< RTC_T::LEAPYEAR: LEAPYEAR Mask         */
N
N#define RTC_INTEN_ALMIEN_Pos             (0)                                               /*!< RTC_T::INTEN: ALMIEN Position          */
N#define RTC_INTEN_ALMIEN_Msk             (0x1ul << RTC_INTEN_ALMIEN_Pos)                   /*!< RTC_T::INTEN: ALMIEN Mask              */
N
N#define RTC_INTEN_TICKIEN_Pos            (1)                                               /*!< RTC_T::INTEN: TICKIEN Position         */
N#define RTC_INTEN_TICKIEN_Msk            (0x1ul << RTC_INTEN_TICKIEN_Pos)                  /*!< RTC_T::INTEN: TICKIEN Mask             */
N
N#define RTC_INTSTS_ALMIF_Pos             (0)                                               /*!< RTC_T::INTSTS: ALMIF Position          */
N#define RTC_INTSTS_ALMIF_Msk             (0x1ul << RTC_INTSTS_ALMIF_Pos)                   /*!< RTC_T::INTSTS: ALMIF Mask              */
N
N#define RTC_INTSTS_TICKIF_Pos            (1)                                               /*!< RTC_T::INTSTS: TICKIF Position         */
N#define RTC_INTSTS_TICKIF_Msk            (0x1ul << RTC_INTSTS_TICKIF_Pos)                  /*!< RTC_T::INTSTS: TICKIF Mask             */
N
N#define RTC_TICK_TICK_Pos                (0)                                               /*!< RTC_T::TICK: TICK Position             */
N#define RTC_TICK_TICK_Msk                (0x7ul << RTC_TICK_TICK_Pos)                      /*!< RTC_T::TICK: TICK Mask                 */
N
N#define RTC_TAMSK_MSEC_Pos               (0)                                               /*!< RTC_T::TAMSK: MSEC Position            */
N#define RTC_TAMSK_MSEC_Msk               (0x1ul << RTC_TAMSK_MSEC_Pos)                     /*!< RTC_T::TAMSK: MSEC Mask                */
N
N#define RTC_TAMSK_MTENSEC_Pos            (1)                                               /*!< RTC_T::TAMSK: MTENSEC Position         */
N#define RTC_TAMSK_MTENSEC_Msk            (0x1ul << RTC_TAMSK_MTENSEC_Pos)                  /*!< RTC_T::TAMSK: MTENSEC Mask             */
N
N#define RTC_TAMSK_MMIN_Pos               (2)                                               /*!< RTC_T::TAMSK: MMIN Position            */
N#define RTC_TAMSK_MMIN_Msk               (0x1ul << RTC_TAMSK_MMIN_Pos)                     /*!< RTC_T::TAMSK: MMIN Mask                */
N
N#define RTC_TAMSK_MTENMIN_Pos            (3)                                               /*!< RTC_T::TAMSK: MTENMIN Position         */
N#define RTC_TAMSK_MTENMIN_Msk            (0x1ul << RTC_TAMSK_MTENMIN_Pos)                  /*!< RTC_T::TAMSK: MTENMIN Mask             */
N
N#define RTC_TAMSK_MHR_Pos                (4)                                               /*!< RTC_T::TAMSK: MHR Position             */
N#define RTC_TAMSK_MHR_Msk                (0x1ul << RTC_TAMSK_MHR_Pos)                      /*!< RTC_T::TAMSK: MHR Mask                 */
N
N#define RTC_TAMSK_MTENHR_Pos             (5)                                               /*!< RTC_T::TAMSK: MTENHR Position          */
N#define RTC_TAMSK_MTENHR_Msk             (0x1ul << RTC_TAMSK_MTENHR_Pos)                   /*!< RTC_T::TAMSK: MTENHR Mask              */
N
N#define RTC_CAMSK_MDAY_Pos               (0)                                               /*!< RTC_T::CAMSK: MDAY Position            */
N#define RTC_CAMSK_MDAY_Msk               (0x1ul << RTC_CAMSK_MDAY_Pos)                     /*!< RTC_T::CAMSK: MDAY Mask                */
N
N#define RTC_CAMSK_MTENDAY_Pos            (1)                                               /*!< RTC_T::CAMSK: MTENDAY Position         */
N#define RTC_CAMSK_MTENDAY_Msk            (0x1ul << RTC_CAMSK_MTENDAY_Pos)                  /*!< RTC_T::CAMSK: MTENDAY Mask             */
N
N#define RTC_CAMSK_MMON_Pos               (2)                                               /*!< RTC_T::CAMSK: MMON Position            */
N#define RTC_CAMSK_MMON_Msk               (0x1ul << RTC_CAMSK_MMON_Pos)                     /*!< RTC_T::CAMSK: MMON Mask                */
N
N#define RTC_CAMSK_MTENMON_Pos            (3)                                               /*!< RTC_T::CAMSK: MTENMON Position         */
N#define RTC_CAMSK_MTENMON_Msk            (0x1ul << RTC_CAMSK_MTENMON_Pos)                  /*!< RTC_T::CAMSK: MTENMON Mask             */
N
N#define RTC_CAMSK_MYEAR_Pos              (4)                                               /*!< RTC_T::CAMSK: MYEAR Position           */
N#define RTC_CAMSK_MYEAR_Msk              (0x1ul << RTC_CAMSK_MYEAR_Pos)                    /*!< RTC_T::CAMSK: MYEAR Mask               */
N
N#define RTC_CAMSK_MTENYEAR_Pos           (5)                                               /*!< RTC_T::CAMSK: MTENYEAR Position        */
N#define RTC_CAMSK_MTENYEAR_Msk           (0x1ul << RTC_CAMSK_MTENYEAR_Pos)                 /*!< RTC_T::CAMSK: MTENYEAR Mask            */
N
N#define RTC_LXTCTL_C32KS_Pos             (7)                                               /*!< RTC_T::LXTCTL: C32KS Position          */
N#define RTC_LXTCTL_C32KS_Msk             (0x1ul << RTC_LXTCTL_C32KS_Pos)                   /*!< RTC_T::LXTCTL: C32KS Mask              */
N
N/**@}*/ /* RTC_CONST */
N/**@}*/ /* end of RTC register group */
N/**@}*/ /* end of REGISTER group */
N
N#endif /* __RTC_REG_H__ */
L 176 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "timer_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\timer_reg.h" 1
N/**************************************************************************//**
N * @file     timer_reg.h
N * @version  V1.00
N * @brief    TIMER register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __TIMER_REG_H__
N#define __TIMER_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup TIMER Timer Controller (TIMER)
N    Memory Mapped Structure for TIMER Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var TIMER_T::CTL
N     * Offset: 0x00/0x20  Timer0~3 Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |PSC       |Prescale Counter
N     * |        |          |Timer input clock or event source is divided by (PSC+1) before it is fed to the timer up counter. If this field is 0 (PSC = 0), then there is no scaling.
N     * |        |          |Note: Update prescale counter value will reset internal 8-bit prescale counter and 24-bit up counter value.
N     * |[8]     |TRGPDMA   |Trigger PDMA Enable Bit
N     * |        |          |If this bit is set to 1, timer time-out interrupt or capture interrupt can trigger PDMA.
N     * |        |          |0 = Timer interrupt trigger PDMA Disabled.
N     * |        |          |1 = Timer interrupt trigger PDMA Enabled.
N     * |        |          |Note: If TRGSSEL (TIMERx_CTL[18]) = 0, time-out interrupt signal will trigger PDMA. If TRGSSEL (TIMERx_CTL[18]) = 1, capture interrupt signal will trigger PDMA.
N     * |[9]     |TRGBPWM   |Trigger BPWM Enable Bit
N     * |        |          |If this bit is set to 1, timer time-out interrupt or capture interrupt can trigger BPWM.
N     * |        |          |0 = Timer interrupt trigger BPWM Disabled.
N     * |        |          |1 = Timer interrupt trigger BPWM Enabled.
N     * |        |          |Note: If TRGSSEL (TIMERx_CTL[18]) = 0, time-out interrupt signal will trigger BPWM. If TRGSSEL (TIMERx_CTL[18]) = 1, capture interrupt signal will trigger BPWM.
N     * |[10]    |INTRGEN   |Inter-timer Trigger Mode Enable Bit
N     * |        |          |Setting this bit will enable the inter-timer trigger capture function.
N     * |        |          |The Timer0/2 will be in event counter mode and counting with external clock source or event. Also, Timer1/3 will be in trigger-counting mode of capture function.
N     * |        |          |0 = Inter-Timer Trigger mode Disabled.
N     * |        |          |1 = Inter-Timer Trigger mode Enabled.
N     * |        |          |Note: For Timer1/3, this bit is ignored and the read back value is always 0.
N     * |[16]    |CAPSRC    |Capture Pin Source Selection
N     * |        |          |0 = Capture Function source is from TMx_EXT (x= 0~3) pin.
N     * |        |          |1 = Capture Function source is from internal ACMP output signal or LIRC. User can set INTERCAPSEL (TIMERx_EXTCTL[10:8]) to decide which internal ACMP output signal or LIRC as timer capture source.
N     * |[18]    |TRGSSEL   |Trigger Source Select Bit
N     * |        |          |This bit is used to select trigger source is from Timer time-out interrupt signal or capture interrupt signal.
N     * |        |          |0 = Timer time-out interrupt signal is used to trigger PWM, ADC and PDMA.
N     * |        |          |1 = Capture interrupt signal is used to trigger PWM, ADC and PDMA.
N     * |[19]    |TRGPWM    |Trigger PWM Enable Bit
N     * |        |          |If this bit is set to 1, timer time-out interrupt or capture interrupt can trigger PWM.
N     * |        |          |0 = Timer interrupt trigger PWM Disabled.
N     * |        |          |1 = Timer interrupt trigger PWM Enabled.
N     * |        |          |Note: If TRGSSEL (TIMERx_CTL[18]) = 0, time-out interrupt signal will trigger PWM. If TRGSSEL (TIMERx_CTL[18]) = 1, capture interrupt signal will trigger PWM.
N     * |[21]    |TRGADC    |Trigger ADC Enable Bit
N     * |        |          |If this bit is set to 1, timer time-out interrupt or capture interrupt can trigger ADC.
N     * |        |          |0 = Timer interrupt trigger ADC Disabled.
N     * |        |          |1 = Timer interrupt trigger ADC Enabled.
N     * |        |          |Note: If TRGSSEL (TIMERx_CTL[18]) = 0, time-out interrupt signal will trigger ADC. If TRGSSEL (TIMERx_CTL[18]) = 1, capture interrupt signal will trigger ADC.
N     * |[22]    |TGLPINSEL |Toggle-output Pin Select
N     * |        |          |0 = Toggle mode output to Tx (Timer Event Counter Pin).
N     * |        |          |1 = Toggle mode output to Tx_EXT (Timer External Capture Pin).
N     * |[23]    |WKEN      |Wake-up Function Enable Bit
N     * |        |          |If this bit is set to 1, while timer interrupt flag TIF (TIMERx_INTSTS[0]) is 1 and INTEN (TIMERx_CTL[29]) is enabled, the timer interrupt signal will generate a wake-up trigger event to CPU.
N     * |        |          |0 = Wake-up function Disabled if timer interrupt signal generated.
N     * |        |          |1 = Wake-up function Enabled if timer interrupt signal generated.
N     * |[24]    |EXTCNTEN  |Event Counter Mode Enable Bit
N     * |        |          |This bit is for external counting pin function enabled.
N     * |        |          |0 = Event counter mode Disabled.
N     * |        |          |1 = Event counter mode Enabled.
N     * |        |          |Note1: When timer is used as an event counter, this bit should be set to 1 and select PCLKx (x=0~1) as timer clock source.
N     * |        |          |Note2: When TMR0/TMR2 INTRGEN is set to 1, this bit is forced to 1. When INTRGEN is 1 and TMR1/TMR3 CAPIF (TIMERx_EINTSTS[0]) is 1, this bit is forced to 0.
N     * |[25]    |ACTSTS    |Timer Active Status Bit (Read Only)
N     * |        |          |This bit indicates the 24-bit up counter status.
N     * |        |          |0 = 24-bit up counter is not active.
N     * |        |          |1 = 24-bit up counter is active.
N     * |        |          |Note: This bit may active when CNT 0 transition to CNT 1.
N     * |[26]    |RSTCNT    |Timer Counter Reset Bit
N     * |        |          |Setting this bit will reset the 24-bit up counter value CNT (TIMERx_CNT[23:0]) and also force CNTEN (TIMERx_CTL[30]) to 0 if ACTSTS (TIMERx_CTL[25]) is 1.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset internal 8-bit prescale counter, 24-bit up counter value and CNTEN bit.
N     * |        |          |Note: This bit will be auto cleared.
N     * |[28:27] |OPMODE    |Timer Counting Mode Select
N     * |        |          |00 = The timer controller is operated in One-shot mode.
N     * |        |          |01 = The timer controller is operated in Periodic mode.
N     * |        |          |10 = The timer controller is operated in Toggle-output mode.
N     * |        |          |11 = The timer controller is operated in Continuous Counting mode.
N     * |[29]    |INTEN     |Timer Interrupt Enable Bit
N     * |        |          |0 = Timer time-out interrupt Disabled.
N     * |        |          |1 = Timer time-out interrupt Enabled.
N     * |        |          |Note: If this bit is enabled, when the timer time-out interrupt flag TIF is set to 1, the timer interrupt signal is generated and inform to CPU.
N     * |[30]    |CNTEN     |Timer Counting Enable Bit
N     * |        |          |0 = Stops/Suspends counting.
N     * |        |          |1 = Starts counting.
N     * |        |          |Note1: In stop status, and then set CNTEN to 1 will enable the 24-bit up counter to keep counting from the last stop counting value.
N     * |        |          |Note2: This bit is auto-cleared by hardware in one-shot mode (TIMER_CTL[28:27] = 00) when the timer time-out interrupt flag TIF (TIMERx_INTSTS[0]) is generated.
N     * |        |          |Note3: Set enable/disable this bit needs 2 * TMR_CLK period to become active, user can read ACTSTS (TIMERx_CTL[25]) to check enable/disable command is completed or not.
N     * |[31]    |ICEDEBUG  |ICE Debug Mode Acknowledge Disable Bit (Write Protect)
N     * |        |          |0 = ICE debug mode acknowledgement effects TIMER counting.
N     * |        |          |TIMER counter will be held while CPU is held by ICE.
N     * |        |          |1 = ICE debug mode acknowledgement Disabled.
N     * |        |          |TIMER counter will keep going no matter CPU is held by ICE or not.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var TIMER_T::CMP
N     * Offset: 0x04/0x24  Timer0~3 Comparator Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[23:0]  |CMPDAT    |Timer Comparator Value
N     * |        |          |CMPDAT is a 24-bit compared value register
N     * |        |          |When the internal 24-bit up counter value is equal to CMPDAT value, the TIF (TIMERx_INTSTS[0] Timer Interrupt Flag) will set to 1.
N     * |        |          |Time-out period = (Period of timer clock input) * (8-bit PSC + 1) * (24-bit CMPDAT).
N     * |        |          |Note1: Never write 0x0 or 0x1 in CMPDAT field, or the core will run into unknown state.
N     * |        |          |Note2: When timer is operating at continuous counting mode, the 24-bit up counter will keep counting continuously even if user writes a new value into CMPDAT field. But if timer is operating at other modes, the 24-bit up counter will restart counting from 0 and using newest CMPDAT value to be the timer compared value while user writes a new value into CMPDAT field.
N     * @var TIMER_T::INTSTS
N     * Offset: 0x08/0x28  Timer0~3 Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TIF       |Timer Interrupt Flag
N     * |        |          |This bit indicates the interrupt flag status of Timer while 24-bit timer up counter CNT (TIMERx_CNT[23:0]) value reaches to CMPDAT (TIMERx_CMP[23:0]) value.
N     * |        |          |0 = No effect.
N     * |        |          |1 = CNT value matches the CMPDAT value.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[1]     |TWKF      |Timer Wake-up Flag
N     * |        |          |This bit indicates the interrupt wake-up flag status of timer.
N     * |        |          |0 = Timer does not cause CPU wake-up.
N     * |        |          |1 = CPU wake-up from Idle or Power-down mode if timer time-out interrupt signal generated.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * @var TIMER_T::CNT
N     * Offset: 0x0C/0x2C  Timer0~3 Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[23:0]  |CNT       |Timer Data Register
N     * |        |          |Read this register to get CNT value. For example:
N     * |        |          |If EXTCNTEN (TIMERx_CTL[24]) is 0, user can read CNT value for getting current 24-bit counter value.
N     * |        |          |If EXTCNTEN (TIMERx_CTL[24]) is 1, user can read CNT value for getting current 24-bit event input counter value.
N     * @var TIMER_T::CAP
N     * Offset: 0x10/0x30  Timer0~3 Capture Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[23:0]  |CAPDAT    |Timer Capture Data Register
N     * |        |          |When CAPEN (TIMERx_EXTCTL[3]) bit is set, CAPFUNCS (TIMERx_EXTCTL[4]) bit is 0, and a transition on TMx_EXT pin matched the CAPEDGE (TIMERx_EXTCTL[2:1]) setting, CAPIF (TIMERx_EINTSTS[0]) will set to 1 and the current timer counter value CNT (TIMERx_CNT[23:0]) will be auto-loaded into this CAPDAT field.
N     * @var TIMER_T::EXTCTL
N     * Offset: 0x14/0x34  Timer0~3 External Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTPHASE  |Timer External Count Phase
N     * |        |          |This bit indicates the detection phase of external counting pin TMx (x= 0~3).
N     * |        |          |0 = A falling edge of external counting pin will be counted.
N     * |        |          |1 = A rising edge of external counting pin will be counted.
N     * |[2:1]   |CAPEDGE   |Timer External Capture Pin Edge Detect
N     * |        |          |00 = A Falling edge on Tx_EXT (x= 0~3) pin, LIRC or ACMPx (x=0~1) will be detected.
N     * |        |          |01 = A Rising edge on Tx_EXT (x= 0~3) pin, LIRC or ACMPx (x=0~1) will be detected.
N     * |        |          |10 = Either Rising or Falling edge on Tx_EXT (x= 0~3) pin, LIRC or ACMPx (x=0~1) will be detected.
N     * |        |          |11 = Reserved.
N     * |[3]     |CAPEN     |Timer Capture Enable Bit
N     * |        |          |This bit enables the capture input function.
N     * |        |          |0 =Capture source Disabled.
N     * |        |          |1 =Capture source Enabled.
N     * |        |          |Note: TMR1/TMR3 CAPEN will be forced to 1 when TMR0/TMR2 INTRGEN is enabled.
N     * |[4]     |CAPFUNCS  |Capture Function Selection
N     * |        |          |0 = External Capture Mode Enabled.
N     * |        |          |1 = External Reset Mode Enabled.
N     * |        |          |Note1: When CAPFUNCS is 0, transition on TMx_EXT (x= 0~3) pin is using to save current 24-bit timer counter value (CNT value) to CAPDAT field.
N     * |        |          |Note2: When CAPFUNCS is 1, transition on TMx_EXT (x= 0~3) pin is using to save current 24-bit timer counter value (CNT value) to CAPDAT field then CNT value will be reset immediately.
N     * |[5]     |CAPIEN    |Timer External Capture Interrupt Enable Bit
N     * |        |          |0 = TMx_EXT (x= 0~3) pin, LIRC, or ACMP detection Interrupt Disabled.
N     * |        |          |1 = TMx_EXT (x= 0~3) pin, LIRC, or ACMP detection Interrupt Enabled.
N     * |        |          |Note: CAPIEN is used to enable timer external interrupt
N     * |        |          |If CAPIEN enabled, timer will rise an interrupt when CAPIF (TIMERx_EINTSTS[0]) is 1.
N     * |        |          |For example, while CAPIEN = 1, CAPEN = 1, and CAPEDGE = 00, a 1 to 0 transition on the Tx_EXT (x= 0~3) pin, or ACMP will cause the CAPIF to be set then the interrupt signal is generated and sent to NVIC to inform CPU.
N     * |[6]     |CAPDBEN   |Timer External Capture Pin De-bounce Enable Bit
N     * |        |          |0 = TMx_EXT (x= 0~3) pin de-bounce or ACMP output de-bounce Disabled.
N     * |        |          |1 = TMx_EXT (x= 0~3) pin de-bounce or ACMP output de-bounce Enabled.
N     * |        |          |Note: If this bit is enabled, the edge detection of TMx_EXT pin or ACMP output is detected with de-bounce circuit.
N     * |[7]     |CNTDBEN   |Timer Counter Pin De-bounce Enable Bit
N     * |        |          |0 = TMx (x= 0~3) pin de-bounce Disabled.
N     * |        |          |1 = TMx (x= 0~3) pin de-bounce Enabled.
N     * |        |          |Note: If this bit is enabled, the edge detection of TMx pin is detected with de-bounce circuit.
N     * |[10:8]  |INTERCAPSEL|Internal Capture Source Selection to Trigger Capture Function
N     * |        |          |000 = Capture Function source is from internal ACMP0 output signal.
N     * |        |          |001 = Capture Function source is from internal ACMP1 output signal.
N     * |        |          |101 = Capture Function source is from LIRC.
N     * |        |          |Others = Reserved.
N     * |        |          |Note: these bits only available when CAPSRC (TIMERx_CTL[16]) is 1.
N     * |[16]    |ECNTSSEL  |Event Counter Source Selection to Trigger Event Counter Function
N     * |        |          |0 = Event Counter input source is from TMx (x= 0~3) pin.
N     * |        |          |1 = Event Counter input source is from USB internal SOF output signal.
N     * @var TIMER_T::EINTSTS
N     * Offset: 0x18/0x38  Timer0~3 External Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CAPIF     |Timer External Capture Interrupt Flag
N     * |        |          |This bit indicates the timer external capture interrupt flag status.
N     * |        |          |0 = TMx_EXT (x= 0~3) pin interrupt did not occur.
N     * |        |          |1 = TMx_EXT (x= 0~3) pin interrupt occurred.
N     * |        |          |Note1: This bit is cleared by writing 1 to it.
N     * |        |          |Note2: When CAPEN (TIMERx_EXTCTL[3]) bit is set, CAPFUNCS (TIMERx_EXTCTL[4]) bit is 0, and a transition on Tx_EXT (x= 0~3) pin matched the CAPEDGE (TIMERx_EXTCTL[2:1]) setting, this bit will set to 1 by hardware.
N     * |        |          |Note3: There is a new incoming capture event detected before CPU clearing the CAPIF status. If the above condition occurred, the Timer will keep register TIMERx_CAP unchanged and drop the new capture value.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] Timer0 Control Register                                          */
X    volatile uint32_t CTL;                    
N    __IO uint32_t CMP;                   /*!< [0x0004] Timer0 Comparator Register                                       */
X    volatile uint32_t CMP;                    
N    __IO uint32_t INTSTS;                /*!< [0x0008] Timer0 Interrupt Status Register                                 */
X    volatile uint32_t INTSTS;                 
N    __I  uint32_t CNT;                   /*!< [0x000c] Timer0 Data Register                                             */
X    volatile const  uint32_t CNT;                    
N    __I  uint32_t CAP;                   /*!< [0x0010] Timer0 Capture Data Register                                     */
X    volatile const  uint32_t CAP;                    
N    __IO uint32_t EXTCTL;                /*!< [0x0014] Timer0 External Control Register                                 */
X    volatile uint32_t EXTCTL;                 
N    __IO uint32_t EINTSTS;               /*!< [0x0018] Timer0 External Interrupt Status Register                        */
X    volatile uint32_t EINTSTS;                
N} TIMER_T;
N
N/**
N    @addtogroup TIMER_CONST TIMER Bit Field Definition
N    Constant Definitions for TIMER Controller
N@{ */
N
N#define TIMER_CTL_PSC_Pos                (0)                                               /*!< TIMER_T::CTL: PSC Position             */
N#define TIMER_CTL_PSC_Msk                (0xfful << TIMER_CTL_PSC_Pos)                     /*!< TIMER_T::CTL: PSC Mask                 */
N
N#define TIMER_CTL_TRGPDMA_Pos            (8)                                               /*!< TIMER_T::CTL: TRGPDMA Position         */
N#define TIMER_CTL_TRGPDMA_Msk            (0x1ul << TIMER_CTL_TRGPDMA_Pos)                  /*!< TIMER_T::CTL: TRGPDMA Mask             */
N
N#define TIMER_CTL_TRGBPWM_Pos            (9)                                               /*!< TIMER_T::CTL: TRGBPWM Position         */
N#define TIMER_CTL_TRGBPWM_Msk            (0x1ul << TIMER_CTL_TRGBPWM_Pos)                  /*!< TIMER_T::CTL: TRGBPWM Mask             */
N
N#define TIMER_CTL_INTRGEN_Pos            (10)                                              /*!< TIMER_T::CTL: INTRGEN Position         */
N#define TIMER_CTL_INTRGEN_Msk            (0x1ul << TIMER_CTL_INTRGEN_Pos)                  /*!< TIMER_T::CTL: INTRGEN Mask             */
N
N#define TIMER_CTL_CAPSRC_Pos             (16)                                              /*!< TIMER_T::CTL: CAPSRC Position          */
N#define TIMER_CTL_CAPSRC_Msk             (0x1ul << TIMER_CTL_CAPSRC_Pos)                   /*!< TIMER_T::CTL: CAPSRC Mask              */
N
N#define TIMER_CTL_TRGSSEL_Pos            (18)                                              /*!< TIMER_T::CTL: TRGSSEL Position         */
N#define TIMER_CTL_TRGSSEL_Msk            (0x1ul << TIMER_CTL_TRGSSEL_Pos)                  /*!< TIMER_T::CTL: TRGSSEL Mask             */
N
N#define TIMER_CTL_TRGPWM_Pos             (19)                                              /*!< TIMER_T::CTL: TRGPWM Position          */
N#define TIMER_CTL_TRGPWM_Msk             (0x1ul << TIMER_CTL_TRGPWM_Pos)                   /*!< TIMER_T::CTL: TRGPWM Mask              */
N
N#define TIMER_CTL_TRGADC_Pos             (21)                                              /*!< TIMER_T::CTL: TRGADC Position          */
N#define TIMER_CTL_TRGADC_Msk             (0x1ul << TIMER_CTL_TRGADC_Pos)                   /*!< TIMER_T::CTL: TRGADC Mask              */
N
N#define TIMER_CTL_TGLPINSEL_Pos          (22)                                              /*!< TIMER_T::CTL: TGLPINSEL Position       */
N#define TIMER_CTL_TGLPINSEL_Msk          (0x1ul << TIMER_CTL_TGLPINSEL_Pos)                /*!< TIMER_T::CTL: TGLPINSEL Mask           */
N
N#define TIMER_CTL_WKEN_Pos               (23)                                              /*!< TIMER_T::CTL: WKEN Position            */
N#define TIMER_CTL_WKEN_Msk               (0x1ul << TIMER_CTL_WKEN_Pos)                     /*!< TIMER_T::CTL: WKEN Mask                */
N
N#define TIMER_CTL_EXTCNTEN_Pos           (24)                                              /*!< TIMER_T::CTL: EXTCNTEN Position        */
N#define TIMER_CTL_EXTCNTEN_Msk           (0x1ul << TIMER_CTL_EXTCNTEN_Pos)                 /*!< TIMER_T::CTL: EXTCNTEN Mask            */
N
N#define TIMER_CTL_ACTSTS_Pos             (25)                                              /*!< TIMER_T::CTL: ACTSTS Position          */
N#define TIMER_CTL_ACTSTS_Msk             (0x1ul << TIMER_CTL_ACTSTS_Pos)                   /*!< TIMER_T::CTL: ACTSTS Mask              */
N
N#define TIMER_CTL_RSTCNT_Pos             (26)                                              /*!< TIMER_T::CTL: RSTCNT Position          */
N#define TIMER_CTL_RSTCNT_Msk             (0x1ul << TIMER_CTL_RSTCNT_Pos)                   /*!< TIMER_T::CTL: RSTCNT Mask              */
N
N#define TIMER_CTL_OPMODE_Pos             (27)                                              /*!< TIMER_T::CTL: OPMODE Position          */
N#define TIMER_CTL_OPMODE_Msk             (0x3ul << TIMER_CTL_OPMODE_Pos)                   /*!< TIMER_T::CTL: OPMODE Mask              */
N
N#define TIMER_CTL_INTEN_Pos              (29)                                              /*!< TIMER_T::CTL: INTEN Position           */
N#define TIMER_CTL_INTEN_Msk              (0x1ul << TIMER_CTL_INTEN_Pos)                    /*!< TIMER_T::CTL: INTEN Mask               */
N
N#define TIMER_CTL_CNTEN_Pos              (30)                                              /*!< TIMER_T::CTL: CNTEN Position           */
N#define TIMER_CTL_CNTEN_Msk              (0x1ul << TIMER_CTL_CNTEN_Pos)                    /*!< TIMER_T::CTL: CNTEN Mask               */
N
N#define TIMER_CTL_ICEDEBUG_Pos           (31)                                              /*!< TIMER_T::CTL: ICEDEBUG Position        */
N#define TIMER_CTL_ICEDEBUG_Msk           (0x1ul << TIMER_CTL_ICEDEBUG_Pos)                 /*!< TIMER_T::CTL: ICEDEBUG Mask            */
N
N#define TIMER_CMP_CMPDAT_Pos             (0)                                               /*!< TIMER_T::CMP: CMPDAT Position          */
N#define TIMER_CMP_CMPDAT_Msk             (0xfffffful << TIMER_CMP_CMPDAT_Pos)              /*!< TIMER_T::CMP: CMPDAT Mask              */
N
N#define TIMER_INTSTS_TIF_Pos             (0)                                               /*!< TIMER_T::INTSTS: TIF Position          */
N#define TIMER_INTSTS_TIF_Msk             (0x1ul << TIMER_INTSTS_TIF_Pos)                   /*!< TIMER_T::INTSTS: TIF Mask              */
N
N#define TIMER_INTSTS_TWKF_Pos            (1)                                               /*!< TIMER_T::INTSTS: TWKF Position         */
N#define TIMER_INTSTS_TWKF_Msk            (0x1ul << TIMER_INTSTS_TWKF_Pos)                  /*!< TIMER_T::INTSTS: TWKF Mask             */
N
N#define TIMER_CNT_CNT_Pos                (0)                                               /*!< TIMER_T::CNT: CNT Position             */
N#define TIMER_CNT_CNT_Msk                (0xfffffful << TIMER_CNT_CNT_Pos)                 /*!< TIMER_T::CNT: CNT Mask                 */
N
N#define TIMER_CAP_CAPDAT_Pos             (0)                                               /*!< TIMER_T::CAP: CAPDAT Position          */
N#define TIMER_CAP_CAPDAT_Msk             (0xfffffful << TIMER_CAP_CAPDAT_Pos)              /*!< TIMER_T::CAP: CAPDAT Mask              */
N
N#define TIMER_EXTCTL_CNTPHASE_Pos        (0)                                               /*!< TIMER_T::EXTCTL: CNTPHASE Position     */
N#define TIMER_EXTCTL_CNTPHASE_Msk        (0x1ul << TIMER_EXTCTL_CNTPHASE_Pos)              /*!< TIMER_T::EXTCTL: CNTPHASE Mask         */
N
N#define TIMER_EXTCTL_CAPEDGE_Pos         (1)                                               /*!< TIMER_T::EXTCTL: CAPEDGE Position      */
N#define TIMER_EXTCTL_CAPEDGE_Msk         (0x3ul << TIMER_EXTCTL_CAPEDGE_Pos)               /*!< TIMER_T::EXTCTL: CAPEDGE Mask          */
N
N#define TIMER_EXTCTL_CAPEN_Pos           (3)                                               /*!< TIMER_T::EXTCTL: CAPEN Position        */
N#define TIMER_EXTCTL_CAPEN_Msk           (0x1ul << TIMER_EXTCTL_CAPEN_Pos)                 /*!< TIMER_T::EXTCTL: CAPEN Mask            */
N
N#define TIMER_EXTCTL_CAPFUNCS_Pos        (4)                                               /*!< TIMER_T::EXTCTL: CAPFUNCS Position     */
N#define TIMER_EXTCTL_CAPFUNCS_Msk        (0x1ul << TIMER_EXTCTL_CAPFUNCS_Pos)              /*!< TIMER_T::EXTCTL: CAPFUNCS Mask         */
N
N#define TIMER_EXTCTL_CAPIEN_Pos          (5)                                               /*!< TIMER_T::EXTCTL: CAPIEN Position       */
N#define TIMER_EXTCTL_CAPIEN_Msk          (0x1ul << TIMER_EXTCTL_CAPIEN_Pos)                /*!< TIMER_T::EXTCTL: CAPIEN Mask           */
N
N#define TIMER_EXTCTL_CAPDBEN_Pos         (6)                                               /*!< TIMER_T::EXTCTL: CAPDBEN Position      */
N#define TIMER_EXTCTL_CAPDBEN_Msk         (0x1ul << TIMER_EXTCTL_CAPDBEN_Pos)               /*!< TIMER_T::EXTCTL: CAPDBEN Mask          */
N
N#define TIMER_EXTCTL_CNTDBEN_Pos         (7)                                               /*!< TIMER_T::EXTCTL: CNTDBEN Position      */
N#define TIMER_EXTCTL_CNTDBEN_Msk         (0x1ul << TIMER_EXTCTL_CNTDBEN_Pos)               /*!< TIMER_T::EXTCTL: CNTDBEN Mask          */
N
N#define TIMER_EXTCTL_INTERCAPSEL_Pos     (8)                                               /*!< TIMER_T::EXTCTL: INTERCAPSEL Position  */
N#define TIMER_EXTCTL_INTERCAPSEL_Msk     (0x7ul << TIMER_EXTCTL_INTERCAPSEL_Pos)           /*!< TIMER_T::EXTCTL: INTERCAPSEL Mask      */
N
N#define TIMER_EXTCTL_ECNTSSEL_Pos        (16)                                              /*!< TIMER_T::EXTCTL: ECNTSSEL Position     */
N#define TIMER_EXTCTL_ECNTSSEL_Msk        (0x1ul << TIMER_EXTCTL_ECNTSSEL_Pos)              /*!< TIMER_T::EXTCTL: ECNTSSEL Mask         */
N
N#define TIMER_EINTSTS_CAPIF_Pos          (0)                                               /*!< TIMER_T::EINTSTS: CAPIF Position       */
N#define TIMER_EINTSTS_CAPIF_Msk          (0x1ul << TIMER_EINTSTS_CAPIF_Pos)                /*!< TIMER_T::EINTSTS: CAPIF Mask           */
N
N/**@}*/ /* TIMER_CONST */
N/**@}*/ /* end of TIMER register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __TIMER_REG_H__ */
L 177 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "uart_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\uart_reg.h" 1
N/**************************************************************************//**
N * @file     uart_reg.h
N * @version  V1.00
N * @brief    UART register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __UART_REG_H__
N#define __UART_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup UART Universal Asynchronous Receiver/Transmitter Controller(UART)
N    Memory Mapped Structure for UART Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var UART_T::DAT
N     * Offset: 0x00  UART Receive/Transmit Buffer Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |DAT       |Data Receive/Transmit Buffer
N     * |        |          |Write Operation:
N     * |        |          |By writing one byte to this register, the data byte will be stored in transmitter FIFO.
N     * |        |          |The UART controller will send out the data stored in transmitter FIFO top location through the UART_TXD.
N     * |        |          |Read Operation:
N     * |        |          |By reading this register, the UART controller will return an 8-bit data received from receiver FIFO.
N     * |[8]     |PARITY    |Parity Bit Receive/Transmit Buffer
N     * |        |          |Write Operation:
N     * |        |          |By writing to this bit, the parity bit will be stored in transmitter FIFO.
N     * |        |          |If PBE (UART_LINE[3]) and PSS (UART_LINE[7]) are set, the UART controller will send out this bit follow the DAT (UART_DAT[7:0]) through the UART_TXD.
N     * |        |          |Read Operation:
N     * |        |          |If PBE (UART_LINE[3]) and PSS (UART_LINE[7]) are enabled, the parity bit can be read by this bit.
N     * |        |          |Note: This bit has effect only when PBE (UART_LINE[3]) and PSS (UART_LINE[7]) are set.
N     * @var UART_T::INTEN
N     * Offset: 0x04  UART Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RDAIEN    |Receive Data Available Interrupt Enable Bit
N     * |        |          |0 = Receive data available interrupt Disabled.
N     * |        |          |1 = Receive data available interrupt Enabled.
N     * |[1]     |THREIEN   |Transmit Holding Register Empty Interrupt Enable Bit
N     * |        |          |0 = Transmit holding register empty interrupt Disabled.
N     * |        |          |1 = Transmit holding register empty interrupt Enabled.
N     * |[2]     |RLSIEN    |Receive Line Status Interrupt Enable Bit
N     * |        |          |0 = Receive Line Status interrupt Disabled.
N     * |        |          |1 = Receive Line Status interrupt Enabled.
N     * |[3]     |MODEMIEN  |Modem Status Interrupt Enable Bit
N     * |        |          |0 = Modem status interrupt Disabled.
N     * |        |          |1 = Modem status interrupt Enabled.
N     * |[4]     |RXTOIEN   |RX Time-out Interrupt Enable Bit
N     * |        |          |0 = RX time-out interrupt Disabled.
N     * |        |          |1 = RX time-out interrupt Enabled.
N     * |[5]     |BUFERRIEN |Buffer Error Interrupt Enable Bit
N     * |        |          |0 = Buffer error interrupt Disabled.
N     * |        |          |1 = Buffer error interrupt Enabled.
N     * |[6]     |WKIEN     |Wake-up Interrupt Enable Bit
N     * |        |          |0 = Wake-up Interrupt Disabled.
N     * |        |          |1 = Wake-up Interrupt Enabled.
N     * |[11]    |TOCNTEN   |Receive Buffer Time-out Counter Enable Bit
N     * |        |          |0 = Receive Buffer Time-out counter Disabled.
N     * |        |          |1 = Receive Buffer Time-out counter Enabled.
N     * |[12]    |ATORTSEN  |nRTS Auto-flow Control Enable Bit
N     * |        |          |0 = nRTS auto-flow control Disabled.
N     * |        |          |1 = nRTS auto-flow control Enabled.
N     * |        |          |Note: When nRTS auto-flow is enabled, if the number of bytes in the RX FIFO equals the RTSTRGLV (UART_FIFO[19:16]), the UART will de-assert nRTS signal.
N     * |[13]    |ATOCTSEN  |nCTS Auto-flow Control Enable Bit
N     * |        |          |0 = nCTS auto-flow control Disabled.
N     * |        |          |1 = nCTS auto-flow control Enabled.
N     * |        |          |Note: When nCTS auto-flow is enabled, the UART will send data to external device if nCTS input assert (UART will not send data to device until nCTS is asserted).
N     * |[14]    |TXPDMAEN  |TX PDMA Enable Bit
N     * |        |          |0 = TX PDMA Disabled.
N     * |        |          |1 = TX PDMA Enabled.
N     * |        |          |Note: If RLSIEN (UART_INTEN[2]) is enabled and HWRLSINT (UART_INTSTS[26]) is set to 1, the RLS (Receive Line Status) Interrupt is caused.
N     * |        |          |If RLS interrupt is caused by Break Error Flag BIF(UART_FIFOSTS[6]), Frame Error Flag FEF(UART_FIFO[5]) or Parity Error Flag PEF(UART_FIFOSTS[4]), UART PDMA transmit request operation is stopped.
N     * |        |          |Clear Break Error Flag BIF or Frame Error Flag FEF or Parity Error Flag PEF by writing "1" to corresponding BIF, FEF and PEF to make UART PDMA transmit request operation continue.
N     * |[15]    |RXPDMAEN  |RX PDMA Enable Bit
N     * |        |          |This bit can enable or disable RX PDMA service.
N     * |        |          |0 = RX PDMA Disabled.
N     * |        |          |1 = RX PDMA Enabled.
N     * |        |          |Note: If RLSIEN (UART_INTEN[2]) is enabled and HWRLSINT (UART_INTSTS[26]) is set to 1, the RLS (Receive Line Status) Interrupt is caused.
N     * |        |          |If RLS interrupt is caused by Break Error Flag BIF(UART_FIFOSTS[6]), Frame Error Flag FEF(UART_FIFO[5]) or Parity Error Flag PEF(UART_FIFOSTS[4]), UART PDMA receive request operation is stopped.
N     * |        |          |Clear Break Error Flag BIF or Frame Error Flag FEF or Parity Error Flag PEF by writing "1" to corresponding BIF, FEF and PEF to make UART PDMA receive request operation continue.
N     * |[16]    |SWBEIEN   |Single-wire Bit Error Detection Interrupt Enable Bit
N     * |        |          |Set this bit, the Single-wire Half Duplex Bit Error Detection Interrupt SWBEINT(UART_INTSTS[24]) is generated when Single-wire Bit Error Detection SWBEIF(UART_INTSTS[16]) is set.
N     * |        |          |0 = Single-wire Bit Error Detect Inerrupt Disabled.
N     * |        |          |1 = Single-wire Bit Error Detect Inerrupt Enabled.
N     * |        |          |Note: This bit is valid when FUNCSEL (UART_FUNCSEL[2:0]) is select UART Single-wire mode.
N     * |[18]    |ABRIEN    |Auto-baud Rate Interrupt Enable Bit
N     * |        |          |0 = Auto-baud rate interrupt Disabled.
N     * |        |          |1 = Auto-baud rate interrupt Enabled.
N     * |[22]    |TXENDIEN  |Transmitter Empty Interrupt Enable Bit
N     * |        |          |If TXENDIEN (UART_INTEN[22]) is enabled, the Transmitter Empty interrupt TXENDINT (UART_INTSTS[30]) will be generated when TXENDIF (UART_INTSTS[22]) is set (TX FIFO (UART_DAT) is empty and the STOP bit of the last byte has been transmitted).
N     * |        |          |0 = Transmitter empty interrupt Disabled.
N     * |        |          |1 = Transmitter empty interrupt Enabled.
N     * @var UART_T::FIFO
N     * Offset: 0x08  UART FIFO Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |RXRST     |RX Field Software Reset
N     * |        |          |When RXRST (UART_FIFO[1]) is set, all the byte in the receiver FIFO and RX internal state machine are cleared.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the RX internal state machine and pointers.
N     * |        |          |Note1: This bit will automatically clear at least 3 UART peripheral clock cycles.
N     * |        |          |Note2: Before setting this bit, it should wait for the RXIDLE (UART_FIFOSTS[29]) be set.
N     * |[2]     |TXRST     |TX Field Software Reset
N     * |        |          |When TXRST (UART_FIFO[2]) is set, all the byte in the transmit FIFO and TX internal state machine are cleared.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the TX internal state machine and pointers.
N     * |        |          |Note1: This bit will automatically clear at least 3 UART peripheral clock cycles.
N     * |        |          |Note2: Before setting this bit, it should wait for the TXEMPTYF (UART_FIFOSTS[28]) be set.
N     * |[7:4]   |RFITL     |RX FIFO Interrupt Trigger Level
N     * |        |          |When the number of bytes in the receive FIFO equals the RFITL, the RDAIF (UART_INTSTS[0]) will be set (if RDAIEN (UART_INTEN [0]) enabled, and an interrupt will be generated).
N     * |        |          |0000 = RX FIFO Interrupt Trigger Level is 1 byte.
N     * |        |          |0001 = RX FIFO Interrupt Trigger Level is 4 bytes.
N     * |        |          |0010 = RX FIFO Interrupt Trigger Level is 8 bytes.
N     * |        |          |0011 = RX FIFO Interrupt Trigger Level is 14 bytes.
N     * |        |          |Others = Reserved.
N     * |[8]     |RXOFF     |Receiver Disable Bit
N     * |        |          |The receiver is disabled or not (set 1 to disable receiver).
N     * |        |          |0 = Receiver Enabled.
N     * |        |          |1 = Receiver Disabled.
N     * |        |          |Note: This bit is used for RS-485 Normal Multi-drop mode.
N     * |        |          |It should be programmed before RS485NMM (UART_ALTCTL [8]) is programmed.
N     * |[19:16] |RTSTRGLV  |nRTS Trigger Level for Auto-flow Control
N     * |        |          |0000 = nRTS Trigger Level is 1 byte.
N     * |        |          |0001 = nRTS Trigger Level is 4 bytes.
N     * |        |          |0010 = nRTS Trigger Level is 8 bytes.
N     * |        |          |0011 = nRTS Trigger Level is 14 bytes.
N     * |        |          |Others = Reserved.
N     * |        |          |Note: This field is used for auto nRTS flow control.
N     * @var UART_T::LINE
N     * Offset: 0x0C  UART Line Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |WLS       |Word Length Selection
N     * |        |          |This field sets UART word length.
N     * |        |          |00 = 5 bits.
N     * |        |          |01 = 6 bits.
N     * |        |          |10 = 7 bits.
N     * |        |          |11 = 8 bits.
N     * |[2]     |NSB       |Number of "STOP Bit"
N     * |        |          |0 = One "STOP bit" is generated in the transmitted data.
N     * |        |          |1 = When select 5-bit word length, 1.5 "STOP bit" is generated in the transmitted data.
N     * |        |          |When select 6-, 7- and 8-bit word length, 2 "STOP bit" is generated in the transmitted data.
N     * |[3]     |PBE       |Parity Bit Enable Bit
N     * |        |          |0 = Parity bit generated Disabled.
N     * |        |          |1 = Parity bit generated Enabled.
N     * |        |          |Note: Parity bit is generated on each outgoing character and is checked on each incoming data.
N     * |[4]     |EPE       |Even Parity Enable Bit
N     * |        |          |0 = Odd number of logic 1's is transmitted and checked in each word.
N     * |        |          |1 = Even number of logic 1's is transmitted and checked in each word.
N     * |        |          |Note: This bit has effect only when PBE (UART_LINE[3]) is set.
N     * |[5]     |SPE       |Stick Parity Enable Bit
N     * |        |          |0 = Stick parity Disabled.
N     * |        |          |1 = Stick parity Enabled.
N     * |        |          |Note: If PBE (UART_LINE[3]) and EPE (UART_LINE[4]) are logic 1, the parity bit is transmitted and checked as logic 0
N     * |        |          |If PBE (UART_LINE[3]) is 1 and EPE (UART_LINE[4]) is 0 then the parity bit is transmitted and checked as 1.
N     * |[6]     |BCB       |Break Control Bit
N     * |        |          |0 = Break Control Disabled.
N     * |        |          |1 = Break Control Enabled.
N     * |        |          |Note: When this bit is set to logic 1, the transmitted serial data output (TX) is forced to the Spacing State (logic 0)
N     * |        |          |This bit acts only on TX line and has no effect on the transmitter logic.
N     * |[7]     |PSS       |Parity Bit Source Selection
N     * |        |          |The parity bit can be selected to be generated and checked automatically or by software.
N     * |        |          |0 = Parity bit is generated by EPE (UART_LINE[4]) and SPE (UART_LINE[5]) setting and checked automatically.
N     * |        |          |1 = Parity bit generated and checked by software.
N     * |        |          |Note1: This bit has effect only when PBE (UART_LINE[3]) is set.
N     * |        |          |Note2: If PSS is 0, the parity bit is transmitted and checked automatically
N     * |        |          |If PSS is 1, the transmitted parity bit value can be determined by writing PARITY (UART_DAT[8]) and the parity bit can be read by reading PARITY (UART_DAT[8]).
N     * |[8]     |TXDINV    |TX Data Inverted
N     * |        |          |0 = Transmitted data signal inverted Disabled.
N     * |        |          |1 = Transmitted data signal inverted Enabled.
N     * |        |          |Note1: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * |        |          |Note2: This bit is valid when FUNCSEL (UART_FUNCSEL[1:0]) is select UART, LIN or RS485 function.
N     * |[9]     |RXDINV    |RX Data Inverted
N     * |        |          |0 = Received data signal inverted Disabled.
N     * |        |          |1 = Received data signal inverted Enabled.
N     * |        |          |Note1: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared.
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * |        |          |Note2: This bit is valid when FUNCSEL (UART_FUNCSEL[1:0]) is select UART, LIN or RS485 function.
N     * @var UART_T::MODEM
N     * Offset: 0x10  UART Modem Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |RTS       |nRTS (Request-to-send) Signal Control
N     * |        |          |This bit is direct control internal nRTS signal active or not, and then drive the nRTS pin output with RTSACTLV bit configuration.
N     * |        |          |0 = nRTS signal is active.
N     * |        |          |1 = nRTS signal is inactive.
N     * |        |          |Note1: The nRTS signal control bit is not effective when nRTS auto-flow control is enabled in UART function mode.
N     * |        |          |Note2: The nRTS signal control bit is not effective when RS-485 auto direction mode (AUD) is enabled in RS-485 function mode.
N     * |        |          |Note3: Single-wire mode is support this feature.
N     * |[9]     |RTSACTLV  |nRTS Pin Active Level
N     * |        |          |This bit defines the active level state of nRTS pin output.
N     * |        |          |0 = nRTS pin output is high level active.
N     * |        |          |1 = nRTS pin output is low level active. (Default).
N     * |        |          |Note1: Refer to Figure 7.11-13 and Figure 7.11-14 for UART function mode.
N     * |        |          |Note2: Refer to Figure 7.11-24 and Figure 7.11-25 for RS-485 function mode.
N     * |        |          |Note3: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared.
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * |[13]    |RTSSTS    |nRTS Pin Status (Read Only)
N     * |        |          |This bit mirror from nRTS pin output of voltage logic status.
N     * |        |          |0 = nRTS pin output is low level voltage logic state.
N     * |        |          |1 = nRTS pin output is high level voltage logic state.
N     * @var UART_T::MODEMSTS
N     * Offset: 0x14  UART Modem Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CTSDETF   |Detect nCTS State Change Flag
N     * |        |          |This bit is set whenever nCTS input has change state, and it will generate Modem interrupt to CPU when MODEMIEN (UART_INTEN [3]) is set to 1.
N     * |        |          |0 = nCTS input has not change state.
N     * |        |          |1 = nCTS input has change state.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[4]     |CTSSTS    |nCTS Pin Status (Read Only)
N     * |        |          |This bit mirror from nCTS pin input of voltage logic status.
N     * |        |          |0 = nCTS pin input is low level voltage logic state.
N     * |        |          |1 = nCTS pin input is high level voltage logic state.
N     * |        |          |Note: This bit echoes when UART controller peripheral clock is enabled, and nCTS multi-function port is selected.
N     * |[8]     |CTSACTLV  |nCTS Pin Active Level
N     * |        |          |This bit defines the active level state of nCTS pin input.
N     * |        |          |0 = nCTS pin input is high level active.
N     * |        |          |1 = nCTS pin input is low level active. (Default).
N     * |        |          |Note: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared.
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * @var UART_T::FIFOSTS
N     * Offset: 0x18  UART FIFO Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RXOVIF    |RX Overflow Error Interrupt Flag
N     * |        |          |This bit is set when RX FIFO overflow.
N     * |        |          |If the number of bytes of received data is greater than RX_FIFO (UART_DAT) size 16 bytes, this bit will be set.
N     * |        |          |0 = RX FIFO is not overflow.
N     * |        |          |1 = RX FIFO is overflow.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[1]     |ABRDIF    |Auto-baud Rate Detect Interrupt Flag
N     * |        |          |This bit is set to logic "1" when Auto-baud Rate detect function is finished.
N     * |        |          |0 = Auto-baud rate detect function is not finished.
N     * |        |          |1 = Auto-baud rate detect function is finished.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[2]     |ABRDTOIF  |Auto-baud Rate Detect Time-out Interrupt Flag
N     * |        |          |This bit is set to logic "1" in Auto-baud Rate Detect mode when the baud rate counter is overflow.
N     * |        |          |0 = Auto-baud rate counter is underflow.
N     * |        |          |1 = Auto-baud rate counter is overflow.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[3]     |ADDRDETF  |RS-485 Address Byte Detect Flag
N     * |        |          |0 = Receiver detects a data that is not an address bit (bit 9 ="0").
N     * |        |          |1 = Receiver detects a data that is an address bit (bit 9 ="1").
N     * |        |          |Note1: This field is used for RS-485 function mode and ADDRDEN (UART_ALTCTL[15]) is set to 1 to enable Address detection mode.
N     * |        |          |Note2: This bit can be cleared by writing "1" to it.
N     * |[4]     |PEF       |Parity Error Flag
N     * |        |          |This bit is set to logic 1 whenever the received character does not have a valid "parity bit".
N     * |        |          |0 = No parity error is generated.
N     * |        |          |1 = Parity error is generated.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[5]     |FEF       |Framing Error Flag
N     * |        |          |This bit is set to logic 1 whenever the received character does not have a valid "stop bit" (that is, the stop bit following the last data bit or parity bit is detected as logic 0).
N     * |        |          |0 = No framing error is generated.
N     * |        |          |1 = Framing error is generated.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[6]     |BIF       |Break Interrupt Flag
N     * |        |          |This bit is set to logic 1 whenever the received data input (RX) is held in the "spacing state" (logic 0) for longer than a full word transmission time (that is, the total time of "start bit" + data bits + parity + stop bits).
N     * |        |          |0 = No Break interrupt is generated.
N     * |        |          |1 = Break interrupt is generated.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[13:8]  |RXPTR     |RX FIFO Pointer (Read Only)
N     * |        |          |This field indicates the RX FIFO Buffer Pointer
N     * |        |          |When UART receives one byte from external device, RXPTR increases one.
N     * |        |          |When one byte of RX FIFO is read by CPU, RXPTR decreases one.
N     * |        |          |The Maximum value shown in RXPTR is 15.
N     * |        |          |When the using level of RX FIFO Buffer equal to 16, the RXFULL bit is set to 1 and RXPTR will show 0.
N     * |        |          |As one byte of RX FIFO is read by CPU, the RXFULL bit is cleared to 0 and RXPTR will show 15.
N     * |[14]    |RXEMPTY   |Receiver FIFO Empty (Read Only)
N     * |        |          |This bit initiate RX FIFO empty or not.
N     * |        |          |0 = RX FIFO is not empty.
N     * |        |          |1 = RX FIFO is empty.
N     * |        |          |Note: When the last byte of RX FIFO has been read by CPU, hardware sets this bit high.
N     * |        |          |It will be cleared when UART receives any new data.
N     * |[15]    |RXFULL    |Receiver FIFO Full (Read Only)
N     * |        |          |This bit initiates RX FIFO full or not.
N     * |        |          |0 = RX FIFO is not full.
N     * |        |          |1 = RX FIFO is full.
N     * |        |          |Note: This bit is set when the number of usage in RX FIFO Buffer is equal to 16, otherwise it is cleared by hardware.
N     * |[21:16] |TXPTR     |TX FIFO Pointer (Read Only)
N     * |        |          |This field indicates the TX FIFO Buffer Pointer.
N     * |        |          |When CPU writes one byte into UART_DAT, TXPTR increases one.
N     * |        |          |When one byte of TX FIFO is transferred to Transmitter Shift Register, TXPTR decreases one.
N     * |        |          |The Maximum value shown in TXPTR is 15
N     * |        |          |When the using level of TX FIFO Buffer equal to 16, the TXFULL bit is set to 1 and TXPTR will show 0.
N     * |        |          |As one byte of TX FIFO is transferred to Transmitter Shift Register, the TXFULL bit is cleared to 0 and TXPTR will show 15.
N     * |[22]    |TXEMPTY   |Transmitter FIFO Empty (Read Only)
N     * |        |          |This bit indicates TX FIFO empty or not.
N     * |        |          |0 = TX FIFO is not empty.
N     * |        |          |1 = TX FIFO is empty.
N     * |        |          |Note: When the last byte of TX FIFO has been transferred to Transmitter Shift Register, hardware sets this bit high.
N     * |        |          |It will be cleared when writing data into UART_DAT (TX FIFO not empty).
N     * |[23]    |TXFULL    |Transmitter FIFO Full (Read Only)
N     * |        |          |This bit indicates TX FIFO full or not.
N     * |        |          |0 = TX FIFO is not full.
N     * |        |          |1 = TX FIFO is full.
N     * |        |          |Note: This bit is set when the number of usage in TX FIFO Buffer is equal to 16, otherwise it is cleared by hardware.
N     * |[24]    |TXOVIF    |TX Overflow Error Interrupt Flag
N     * |        |          |If TX FIFO (UART_DAT) is full, an additional write to UART_DAT will cause this bit to logic 1.
N     * |        |          |0 = TX FIFO is not overflow.
N     * |        |          |1 = TX FIFO is overflow.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[28]    |TXEMPTYF  |Transmitter Empty Flag (Read Only)
N     * |        |          |This bit is set by hardware when TX FIFO (UART_DAT) is empty and the STOP bit of the last byte has been transmitted.
N     * |        |          |0 = TX FIFO is not empty or the STOP bit of the last byte has been not transmitted.
N     * |        |          |1 = TX FIFO is empty and the STOP bit of the last byte has been transmitted.
N     * |        |          |Note: This bit is cleared automatically when TX FIFO is not empty or the last byte transmission has not completed.
N     * |[29]    |RXIDLE    |RX Idle Status (Read Only)
N     * |        |          |This bit is set by hardware when RX is idle.
N     * |        |          |0 = RX is busy.
N     * |        |          |1 = RX is idle. (Default)
N     * |[31]    |TXRXACT   |TX and RX Active Status (Read Only)
N     * |        |          |This bit indicates TX and RX are active or inactive.
N     * |        |          |0 = TX and RX are inactive.
N     * |        |          |1 = TX and RX are active. (Default)
N     * |        |          |Note: When TXRXDIS (UART_FUNCSEL[3]) is set and both TX and RX are in idle state, this bit is cleared.
N     * |        |          |The UART controller can not transmit or receive data at this moment.
N     * |        |          |Otherwise this bit is set.
N     * @var UART_T::INTSTS
N     * Offset: 0x1C  UART Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RDAIF     |Receive Data Available Interrupt Flag
N     * |        |          |When the number of bytes in the RX FIFO equals the RFITL then the RDAIF(UART_INTSTS[0]) will be set.
N     * |        |          |If RDAIEN (UART_INTEN [0]) is enabled, the RDA interrupt will be generated.
N     * |        |          |0 = No RDA interrupt flag is generated.
N     * |        |          |1 = RDA interrupt flag is generated.
N     * |        |          |Note: This bit is read only and it will be cleared when the number of unread bytes of RX FIFO drops below the threshold level (RFITL(UART_FIFO[7:4]).
N     * |[1]     |THREIF    |Transmit Holding Register Empty Interrupt Flag
N     * |        |          |This bit is set when the last data of TX FIFO is transferred to Transmitter Shift Register.
N     * |        |          |If THREIEN (UART_INTEN[1]) is enabled, the THRE interrupt will be generated.
N     * |        |          |0 = No THRE interrupt flag is generated.
N     * |        |          |1 = THRE interrupt flag is generated.
N     * |        |          |Note: This bit is read only and it will be cleared when writing data into UART_DAT (TX FIFO not empty).
N     * |[2]     |RLSIF     |Receive Line Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the RX receive data have parity error, frame error or break error (at least one of 3 bits, BIF(UART_FIFOSTS[6]), FEF(UART_FIFOSTS[5]) and PEF(UART_FIFOSTS[4]), is set).
N     * |        |          |If RLSIEN (UART_INTEN [2]) is enabled, the RLS interrupt will be generated.
N     * |        |          |0 = No RLS interrupt flag is generated.
N     * |        |          |1 = RLS interrupt flag is generated.
N     * |        |          |Note1: In RS-485 function mode, this field is set include "receiver detect and received address byte character (bit9 = "1") bit".
N     * |        |          |At the same time, the bit of ADDRDETF (UART_FIFOSTS[3]) is also set.
N     * |        |          |Note2: This bit is read only and reset to 0 when all bits of BIF (UART_FIFOSTS[6]), FEF(UART_FIFOSTS[5]) and PEF(UART_FIFOSTS[4]) are cleared.
N     * |        |          |Note3: In RS-485 function mode, this bit is read only and reset to 0 when all bits of BIF (UART_FIFOSTS[6]), FEF(UART_FIFOSTS[5]), PEF(UART_FIFOSTS[4]) and ADDRDETF (UART_FIFOSTS[3]) are cleared.
N     * |[3]     |MODEMIF   |MODEM Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the nCTS pin has state change (CTSDETF (UART_MODEMSTS[0]) = 1).
N     * |        |          |If MODEMIEN (UART_INTEN [3]) is enabled, the Modem interrupt will be generated.
N     * |        |          |0 = No Modem interrupt flag is generated.
N     * |        |          |1 = Modem interrupt flag is generated.
N     * |        |          |Note: This bit is read only and reset to 0 when bit CTSDETF is cleared by a write 1 on CTSDETF(UART_MODEMSTS[0]).
N     * |[4]     |RXTOIF    |RX Time-out Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the RX FIFO is not empty and no activities occurred in the RX FIFO and the time-out counter equal to TOIC (UART_TOUT[7:0])
N     * |        |          |If RXTOIEN (UART_INTEN [4]) is enabled, the RX time-out interrupt will be generated.
N     * |        |          |0 = No RX time-out interrupt flag is generated.
N     * |        |          |1 = RX time-out interrupt flag is generated.
N     * |        |          |Note: This bit is read only and user can read UART_DAT (RX is in active) to clear it.
N     * |[5]     |BUFERRIF  |Buffer Error Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the TX FIFO or RX FIFO overflows (TXOVIF (UART_FIFOSTS[24]) or RXOVIF (UART_FIFOSTS[0]) is set).
N     * |        |          |When BUFERRIF (UART_INTSTS[5]) is set, the transfer is not correct.
N     * |        |          |If BUFERRIEN (UART_INTEN [5]) is enabled, the buffer error interrupt will be generated.
N     * |        |          |0 = No buffer error interrupt flag is generated.
N     * |        |          |1 = Buffer error interrupt flag is generated.
N     * |        |          |Note: This bit is cleared if both of RXOVIF(UART_FIFOSTS[0]) and TXOVIF(UART_FIFOSTS[24]) are cleared to 0 by writing 1 to RXOVIF(UART_FIFOSTS[0]) and TXOVIF(UART_FIFOSTS[24]).
N     * |[6]     |WKIF      |UART Wake-up Interrupt Flag (Read Only)
N     * |        |          |This bit is set when TOUTWKF (UART_WKSTS[4]), RS485WKF (UART_WKSTS[3]), RFRTWKF (UART_WKSTS[2]), DATWKF (UART_WKSTS[1]) or CTSWKF(UART_WKSTS[0]) is set to 1.
N     * |        |          |0 = No UART wake-up interrupt flag is generated.
N     * |        |          |1 = UART wake-up interrupt flag is generated.
N     * |        |          |Note: This bit is cleared if all of TOUTWKF, RS485WKF, RFRTWKF, DATWKF and CTSWKF are cleared to 0 by writing 1 to the corresponding interrupt flag.
N     * |[8]     |RDAINT    |Receive Data Available Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if RDAIEN (UART_INTEN[0]) and RDAIF (UART_INTSTS[0]) are both set to 1.
N     * |        |          |0 = No RDA interrupt is generated.
N     * |        |          |1 = RDA interrupt is generated.
N     * |[9]     |THREINT   |Transmit Holding Register Empty Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if THREIEN (UART_INTEN[1]) and THREIF(UART_INTSTS[1]) are both set to 1.
N     * |        |          |0 = No THRE interrupt is generated.
N     * |        |          |1 = THRE interrupt is generated.
N     * |[10]    |RLSINT    |Receive Line Status Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if RLSIEN (UART_INTEN[2]) and RLSIF(UART_INTSTS[2]) are both set to 1.
N     * |        |          |0 = No RLS interrupt is generated.
N     * |        |          |1 = RLS interrupt is generated.
N     * |[11]    |MODEMINT  |MODEM Status Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if MODEMIEN(UART_INTEN[3]) and MODEMIF(UART_INTSTS[3]) are both set to 1.
N     * |        |          |0 = No Modem interrupt is generated.
N     * |        |          |1 = Modem interrupt is generated.
N     * |[12]    |RXTOINT   |RX Time-out Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if RXTOIEN (UART_INTEN[4]) and RXTOIF(UART_INTSTS[4]) are both set to 1.
N     * |        |          |0 = No RX time-out interrupt is generated.
N     * |        |          |1 = RX time-out interrupt is generated.
N     * |[13]    |BUFERRINT |Buffer Error Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if BUFERRIEN(UART_INTEN[5]) and BUFERRIF(UART_ INTSTS[5]) are both set to 1.
N     * |        |          |0 = No buffer error interrupt is generated.
N     * |        |          |1 = Buffer error interrupt is generated.
N     * |[14]    |WKINT     |UART Wake-up Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if WKIEN (UART_INTEN[6]) and WKIF (UART_INTSTS[6]) are both set to 1.
N     * |        |          |0 = No UART wake-up interrupt is generated.
N     * |        |          |1 = UART wake-up interrupt is generated.
N     * |[16]    |SWBEIF    |Single-wire Bit Error Detection Interrupt Flag
N     * |        |          |This bit is set when the single wire bus state not equals to UART controller TX state in Single-wire mode.
N     * |        |          |0 = No single-wire bit error detection interrupt flag is generated.
N     * |        |          |1 = Single-wire bit error detection interrupt flag is generated.
N     * |        |          |Note1: This bit is active when FUNCSEL (UART_FUNCSEL[2:0]) is select UART Single-wire mode.
N     * |        |          |Note2: This bit can be cleared by writing "1" to it.
N     * |[18]    |HWRLSIF   |PDMA Mode Receive Line Status Flag (Read Only)
N     * |        |          |This bit is set when the RX receive data have parity error, frame error or break error (at least one of 3 bits, BIF (UART_FIFOSTS[6]), FEF (UART_FIFOSTS[5]) and PEF (UART_FIFOSTS[4]) is set).
N     * |        |          |If RLSIEN (UART_INTEN [2]) is enabled, the RLS interrupt will be generated.
N     * |        |          |0 = No RLS interrupt flag is generated in PDMA mode.
N     * |        |          |1 = RLS interrupt flag is generated in PDMA mode.
N     * |        |          |Note1: In RS-485 function mode, this field include "receiver detect any address byte received address byte character (bit9 = "1") bit".
N     * |        |          |Note2: In UART function mode, this bit is read only and reset to 0 when all bits of BIF(UART_FIFOSTS[6]), FEF(UART_FIFOSTS[5]) and PEF(UART_FIFOSTS[4]) are cleared.
N     * |        |          |Note3: In RS-485 function mode, this bit is read only and reset to 0 when all bits of BIF(UART_FIFOSTS[6]), FEF(UART_FIFOSTS[5]), PEF(UART_FIFOSTS[4]) and ADDRDETF (UART_FIFOSTS[3]) are cleared.
N     * |[19]    |HWMODIF   |PDMA Mode MODEM Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the nCTS pin has state change (CTSDETF (UART_MODEMSTS [0] =1)).
N     * |        |          |If MODEMIEN (UART_INTEN [3]) is enabled, the Modem interrupt will be generated.
N     * |        |          |0 = No Modem interrupt flag is generated in PDMA mode.
N     * |        |          |1 = Modem interrupt flag is generated in PDMA mode.
N     * |        |          |Note: This bit is read only and reset to 0 when the bit CTSDETF (UART_MODEMSTS[0]) is cleared by writing 1 on CTSDETF (UART_MODEMSTS [0]).
N     * |[20]    |HWTOIF    |PDMA Mode RX Time-out Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the RX FIFO is not empty and no activities occurred in the RX FIFO and the time-out counter equal to TOIC (UART_TOUT[7:0])
N     * |        |          |If RXTOIEN (UART_INTEN [4]) is enabled, the RX time-out interrupt will be generated .
N     * |        |          |0 = No RX time-out interrupt flag is generated in PDMA mode.
N     * |        |          |1 = RX time-out interrupt flag is generated in PDMA mode.
N     * |        |          |Note: This bit is read only and user can read UART_DAT (RX is in active) to clear it.
N     * |[21]    |HWBUFEIF  |PDMA Mode Buffer Error Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the TX or RX FIFO overflows (TXOVIF (UART_FIFOSTS [24]) or RXOVIF (UART_FIFOSTS[0]) is set).
N     * |        |          |When BUFERRIF (UART_INTSTS[5]) is set, the transfer maybe is not correct.
N     * |        |          |If BUFERRIEN (UART_INTEN [5]) is enabled, the buffer error interrupt will be generated.
N     * |        |          |0 = No buffer error interrupt flag is generated in PDMA mode.
N     * |        |          |1 = Buffer error interrupt flag is generated in PDMA mode.
N     * |        |          |Note: This bit is cleared when both TXOVIF (UART_FIFOSTS[24]]) and RXOVIF (UART_FIFOSTS[0]) are cleared.
N     * |[22]    |TXENDIF   |Transmitter Empty Interrupt Flag
N     * |        |          |This bit is set when TX FIFO (UART_DAT) is empty and the STOP bit of the last byte has been transmitted (TXEMPTYF (UART_FIFOSTS[28]) is set).
N     * |        |          |If TXENDIEN (UART_INTEN[22]) is enabled, the Transmitter Empty interrupt will be generated.
N     * |        |          |0 = No transmitter empty interrupt flag is generated.
N     * |        |          |1 = Transmitter empty interrupt flag is generated.
N     * |        |          |Note: This bit is cleared automatically when TX FIFO is not empty or the last byte transmission has not completed.
N     * |[24]    |SWBEINT   |Single-wire Bit Error Detect Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if SWBEIEN (UART_INTEN[16]) and SWBEIF (UART_INTSTS[16]) are both set to 1.
N     * |        |          |0 = No Single-wire Bit Error Detection Interrupt generated.
N     * |        |          |1 = Single-wire Bit Error Detection Interrupt generated.
N     * |[26]    |HWRLSINT  |PDMA Mode Receive Line Status Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if RLSIEN (UART_INTEN[2]) and HWRLSIF(UART_INTSTS[18]) are both set to 1.
N     * |        |          |0 = No RLS interrupt is generated in PDMA mode.
N     * |        |          |1 = RLS interrupt is generated in PDMA mode.
N     * |[27]    |HWMODINT  |PDMA Mode MODEM Status Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if MODEMIEN (UART_INTEN[3]) and HWMODIF(UART_INTSTS[19]) are both set to 1.
N     * |        |          |0 = No Modem interrupt is generated in PDMA mode.
N     * |        |          |1 = Modem interrupt is generated in PDMA mode.
N     * |[28]    |HWTOINT   |PDMA Mode RX Time-out Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if RXTOIEN (UART_INTEN[4]) and HWTOIF(UART_INTSTS[20]) are both set to 1.
N     * |        |          |0 = No RX time-out interrupt is generated in PDMA mode.
N     * |        |          |1 = RX time-out interrupt is generated in PDMA mode.
N     * |[29]    |HWBUFEINT |PDMA Mode Buffer Error Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if BUFERRIEN (UART_INTEN[5]) and HWBUFEIF (UART_INTSTS[21]) are both set to 1.
N     * |        |          |0 = No buffer error interrupt is generated in PDMA mode.
N     * |        |          |1 = Buffer error interrupt is generated in PDMA mode.
N     * |[30]    |TXENDINT  |Transmitter Empty Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if TXENDIEN (UART_INTEN[22]) and TXENDIF(UART_INTSTS[22]) are both set to 1.
N     * |        |          |0 = No Transmitter Empty interrupt is generated.
N     * |        |          |1 = Transmitter Empty interrupt is generated.
N     * |[31]    |ABRINT    |Auto-baud Rate Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if ABRIEN (UART_INTEN[18]) and ABRIF (UART_ALTCTL[17]) are both set to 1.
N     * |        |          |0 = No Auto-baud Rate interrupt is generated.
N     * |        |          |1 = The Auto-baud Rate interrupt is generated.
N     * @var UART_T::TOUT
N     * Offset: 0x20  UART Time-out Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |TOIC      |Time-out Interrupt Comparator
N     * |        |          |The time-out counter resets and starts counting (the counting clock = baud rate) whenever the RX FIFO receives a new data word if time out counter is enabled by setting TOCNTEN (UART_INTEN[11]).
N     * |        |          |Once the content of time-out counter is equal to that of time-out interrupt comparator (TOIC (UART_TOUT[7:0])), a receiver time-out interrupt (RXTOINT(UART_INTSTS[12])) is generated if RXTOIEN (UART_INTEN [4]) enabled.
N     * |        |          |A new incoming data word or RX FIFO empty will clear RXTOIF (UART_INTSTS[4]).
N     * |        |          |In order to avoid receiver time-out interrupt generation immediately during one character is being received, TOIC value should be set between 40 and 255.
N     * |        |          |So, for example, if TOIC is set with 40, the time-out interrupt is generated after four characters are not received when 1 stop bit and no parity check is set for UART transfer.
N     * |[15:8]  |DLY       |TX Delay Time Value
N     * |        |          |This field is used to programming the transfer delay time between the last stop bit and next start bit
N     * |        |          |The unit is bit time.
N     * @var UART_T::BAUD
N     * Offset: 0x24  UART Baud Rate Divider Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |BRD       |Baud Rate Divider
N     * |        |          |The field indicates the baud rate divider.
N     * |        |          |This filed is used in baud rate calculation.
N     * |        |          |The detail description is shown in Table 7.11-4.
N     * |[27:24] |EDIVM1    |Extra Divider for BAUD Rate Mode 1
N     * |        |          |This field is used for baud rate calculation in mode 1 and has no effect for baud rate calculation in mode 0 and mode 2.
N     * |        |          |The detail description is shown in Table 7.11-4.
N     * |[28]    |BAUDM0    |BAUD Rate Mode Selection Bit 0
N     * |        |          |This bit is baud rate mode selection bit 0
N     * |        |          |UART provides three baud rate calculation modes.
N     * |        |          |This bit combines with BAUDM1 (UART_BAUD[29]) to select baud rate calculation mode.
N     * |        |          |The detail description is shown in Table 7.11-4.
N     * |[29]    |BAUDM1    |BAUD Rate Mode Selection Bit 1
N     * |        |          |This bit is baud rate mode selection bit 1.
N     * |        |          |UART provides three baud rate calculation modes.
N     * |        |          |This bit combines with BAUDM0 (UART_BAUD[28]) to select baud rate calculation mode.
N     * |        |          |The detail description is shown in Table 7.11-4.
N     * |        |          |Note: In IrDA mode must be operated in mode 0.
N     * @var UART_T::IRDA
N     * Offset: 0x28  UART IrDA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TXEN      |IrDA Receiver/Transmitter Selection Enable Bit
N     * |        |          |0 = IrDA Transmitter Disabled and Receiver Enabled. (Default)
N     * |        |          |1 = IrDA Transmitter Enabled and Receiver Disabled.
N     * |[5]     |TXINV     |IrDA Inverse Transmitting Output Signal
N     * |        |          |0 = None inverse transmitting signal. (Default).
N     * |        |          |1 = Inverse transmitting output signal.
N     * |        |          |Note1: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * |        |          |Note2: This bit is valid when FUNCSEL (UART_FUNCSEL[1:0]) is select IrDA function.
N     * |[6]     |RXINV     |IrDA Inverse Receive Input Signal
N     * |        |          |0 = None inverse receiving input signal.
N     * |        |          |1 = Inverse receiving input signal. (Default)
N     * |        |          |Note1: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * |        |          |Note2: This bit is valid when FUNCSEL (UART_FUNCSEL[1:0]) is select IrDA function.
N     * @var UART_T::ALTCTL
N     * Offset: 0x2C  UART Alternate Control/Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |BRKFL     |UART LIN Break Field Length
N     * |        |          |This field indicates a 4-bit LIN TX break field count.
N     * |        |          |Note1: This break field length is BRKFL + 1.
N     * |        |          |Note2: According to LIN spec, the reset value is 0xC (break field length = 13).
N     * |[6]     |LINRXEN   |LIN RX Enable Bit
N     * |        |          |0 = LIN RX mode Disabled.
N     * |        |          |1 = LIN RX mode Enabled.
N     * |[7]     |LINTXEN   |LIN TX Break Mode Enable Bit
N     * |        |          |0 = LIN TX Break mode Disabled.
N     * |        |          |1 = LIN TX Break mode Enabled.
N     * |        |          |Note: When TX break field transfer operation finished, this bit will be cleared automatically.
N     * |[8]     |RS485NMM  |RS-485 Normal Multi-drop Operation Mode (NMM)
N     * |        |          |0 = RS-485 Normal Multi-drop Operation mode (NMM) Disabled.
N     * |        |          |1 = RS-485 Normal Multi-drop Operation mode (NMM) Enabled.
N     * |        |          |Note: It cannot be active with RS-485_AAD operation mode.
N     * |[9]     |RS485AAD  |RS-485 Auto Address Detection Operation Mode (AAD)
N     * |        |          |0 = RS-485 Auto Address Detection Operation mode (AAD) Disabled.
N     * |        |          |1 = RS-485 Auto Address Detection Operation mode (AAD) Enabled.
N     * |        |          |Note: It cannot be active with RS-485_NMM operation mode.
N     * |[10]    |RS485AUD  |RS-485 Auto Direction Function (AUD)
N     * |        |          |0 = RS-485 Auto Direction Operation function (AUD) Disabled.
N     * |        |          |1 = RS-485 Auto Direction Operation function (AUD) Enabled.
N     * |        |          |Note: It can be active with RS-485_AAD or RS-485_NMM operation mode.
N     * |[15]    |ADDRDEN   |RS-485 Address Detection Enable Bit
N     * |        |          |This bit is used to enable RS-485 Address Detection mode.
N     * |        |          |0 = Address detection mode Disabled.
N     * |        |          |1 = Address detection mode Enabled.
N     * |        |          |Note: This bit is used for RS-485 any operation mode.
N     * |[17]    |ABRIF     |Auto-baud Rate Interrupt Flag (Read Only)
N     * |        |          |This bit is set when auto-baud rate detection function finished or the auto-baud rate counter was overflow and if ABRIEN(UART_INTEN [18]) is set then the auto-baud rate interrupt will be generated.
N     * |        |          |0 = No auto-baud rate interrupt flag is generated.
N     * |        |          |1 = Auto-baud rate interrupt flag is generated.
N     * |        |          |Note: This bit is read only, but it can be cleared by writing "1" to ABRDTOIF (UART_FIFOSTS[2]) and ABRDIF(UART_FIFOSTS[1]).
N     * |[18]    |ABRDEN    |Auto-baud Rate Detect Enable Bit
N     * |        |          |0 = Auto-baud rate detect function Disabled.
N     * |        |          |1 = Auto-baud rate detect function Enabled.
N     * |        |          |Note : This bit is cleared automatically after auto-baud detection is finished.
N     * |[20:19] |ABRDBITS  |Auto-baud Rate Detect Bit Length
N     * |        |          |00 = 1-bit time from Start bit to the 1st rising edge. The input pattern shall be 0x01.
N     * |        |          |01 = 2-bit time from Start bit to the 1st rising edge. The input pattern shall be 0x02.
N     * |        |          |10 = 4-bit time from Start bit to the 1st rising edge. The input pattern shall be 0x08.
N     * |        |          |11 = 8-bit time from Start bit to the 1st rising edge. The input pattern shall be 0x80.
N     * |        |          |Note : The calculation of bit number includes the START bit.
N     * |[31:24] |ADDRMV    |Address Match Value
N     * |        |          |This field contains the RS-485 address match values.
N     * |        |          |Note: This field is used for RS-485 auto address detection mode.
N     * @var UART_T::FUNCSEL
N     * Offset: 0x30  UART Function Select Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |FUNCSEL   |Function Select
N     * |        |          |000 = UART function.Reserved.
N     * |        |          |010 = IrDA function.
N     * |        |          |011 = RS-485 function.
N     * |        |          |100 = UART Single-wire function.
N     * |        |          |Others = Reserved.
N     * |[3]     |TXRXDIS   |TX and RX Disable Bit
N     * |        |          |Setting this bit can disable TX and RX.
N     * |        |          |0 = TX and RX Enabled.
N     * |        |          |1 = TX and RX Disabled.
N     * |        |          |Note: The TX and RX will not disable immediately when this bit is set.
N     * |        |          |The TX and RX compelet current task before disable TX and RX.
N     * |        |          |When TX and RX disable, the TXRXACT (UART_FIFOSTS[31]) is cleared.
N     * @var UART_T::BRCOMP
N     * Offset: 0x3C  UART Baud Rate Compensation Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]   |BRCOMP    |Baud Rate Compensation Patten
N     * |        |          |These 9-bits are used to define the relative bit is compensated or not.
N     * |        |          |BRCOMP[7:0] is used to define the compensation of UART_DAT[7:0] and BRCOM[8] is used to define the parity bit.
N     * |[31]    |BRCOMPDEC |Baud Rate Compensation Decrease
N     * |        |          |0 = Positive (increase one module clock) compensation for each compensated bit.
N     * |        |          |1 = Negative (decrease one module clock) compensation for each compensated bit.
N     * @var UART_T::WKCTL
N     * Offset: 0x40  UART Wake-up Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKCTSEN   |nCTS Wake-up Enable Bit
N     * |        |          |0 = nCTS Wake-up system function Disabled.
N     * |        |          |1 = nCTS Wake-up system function Enabled.
N     * |        |          |Note:When the system is in Power-down mode, an external.nCTS change will wake up system from Power-down mode.
N     * |[1]     |WKDATEN   |Incoming Data Wake-up Enable Bit
N     * |        |          |0 = Incoming data wake-up system function Disabled.
N     * |        |          |1 = Incoming data wake-up system function Enabled.
N     * |        |          |Note:When the system is in Power-down mode, incoming data will wake-up system from Power-down mode.
N     * |[2]     |WKRFRTEN  |Received Data FIFO Reached Threshold Wake-up Enable Bit
N     * |        |          |0 = Received Data FIFO reached threshold wake-up system function Disabled.
N     * |        |          |1 = Received Data FIFO reached threshold wake-up system function Enabled.
N     * |        |          |Note1: When the system is in Power-down mode, Received Data FIFO reached threshold will wake-up system from Power-down mode.
N     * |        |          |Note2: This bit is valid in UART0 and UART1.
N     * |[3]     |WKRS485EN |RS-485 Address Match (AAD Mode) Wake-up Enable Bit
N     * |        |          |0 = RS-485 Address Match (AAD mode) wake-up system function Disabled.
N     * |        |          |1 = RS-485 Address Match (AAD mode) wake-up system function Enabled.
N     * |        |          |Note1: When the system is in.Power-down mode, RS-485 Address Match will wake-up system from Power-down mode.
N     * |        |          |Note2: This bit is used for RS-485 Auto Address Detection (AAD) mode in RS-485 function mode and ADDRDEN (UART_ALTCTL[15]) is set to 1.
N     * |        |          |Note3: This bit is valid in UART0 and UART1.
N     * |[4]     |WKTOUTEN  |Received Data FIFO Reached Threshold Time-out Wake-up Enable Bit
N     * |        |          |0 = Received Data FIFO reached threshold time-out wake-up system function Disabled.
N     * |        |          |1 = Received Data FIFO reached threshold time-out wake-up system function Enabled.
N     * |        |          |Note1: When the system is in Power-down mode, Received Data FIFO reached threshold time-out will wake up system from Power-down mode.
N     * |        |          |Note2: It is suggested the function is enabled when the WKRFRTEN (UART_WKCTL[2]) is set to 1.
N     * |        |          |Note3: This bit is valid in UART0 and UART1.
N     * @var UART_T::WKSTS
N     * Offset: 0x44  UART Wake-up Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CTSWKF    |nCTS Wake-up Flag
N     * |        |          |This bit is set if chip wake-up from power-down state by nCTS wake-up.
N     * |        |          |0 = Chip stays in power-down state.
N     * |        |          |1 = Chip wake-up from power-down state by nCTS wake-up.
N     * |        |          |Note1: If WKCTSEN (UART_WKCTL[0]) is enabled, the nCTS wake-up cause this bit is set to "1".
N     * |        |          |Note2: This bit can be cleared by writing "1" to it.
N     * |[1]     |DATWKF    |Incoming Data Wake-up Flag
N     * |        |          |This bit is set if chip wake-up from power-down state by data wake-up.
N     * |        |          |0 = Chip stays in power-down state.
N     * |        |          |1 = Chip wake-up from power-down state by Incoming Data wake-up.
N     * |        |          |Note1: If WKDATEN (UART_WKCTL[1]) is enabled, the Incoming Data wake-up cause this bit is set to "1".
N     * |        |          |Note2: This bit can be cleared by writing "1" to it.
N     * |[2]     |RFRTWKF   |Received Data FIFO Reached Threshold Wake-up Flag
N     * |        |          |This bit is set if chip wake-up from power-down state by Received Data FIFO reached threshold wake-up.
N     * |        |          |0 = Chip stays in power-down state.
N     * |        |          |1 = Chip wake-up from power-down state by Received Data FIFO Reached Threshold wake-up.
N     * |        |          |Note1: If WKRFRTEN (UART_WKCTL[2]) is enabled, the Received Data FIFO Reached Threshold wake-up cause this bit is set to "1".
N     * |        |          |Note2: This bit can be cleared by writing "1" to it.
N     * |        |          |Note3: This bit is valid in UART0 and UART1.
N     * |[3]     |RS485WKF  |RS-485 Address Match (AAD Mode) Wake-up Flag
N     * |        |          |This bit is set if chip wake-up from power-down state by RS-485 Address Match (AAD mode).
N     * |        |          |0 = Chip stays in power-down state.
N     * |        |          |1 = Chip wake-up from power-down state by RS-485 Address Match (AAD mode) wake-up.
N     * |        |          |Note1: If WKRS485EN (UART_WKCTL[3]) is enabled, the RS-485 Address Match (AAD mode) wake-up cause this bit is set to "1".
N     * |        |          |Note2: This bit can be cleared by writing "1" to it.
N     * |        |          |Note3: This bit is valid in UART0 and UART1.
N     * |[4]     |TOUTWKF   |Received Data FIFO Threshold Time-out Wake-up Flag
N     * |        |          |This bit is set if chip wake-up from power-down state by Received Data FIFO Threshold Time-out wake-up.
N     * |        |          |0 = Chip stays in power-down state.
N     * |        |          |1 = Chip wake-up from power-down state by Received Data FIFO reached threshold time-out.
N     * |        |          |Note1: If WKTOUTEN (UART_WKCTL[4]) is enabled, the Received Data FIFO reached threshold time-out wake-up cause this bit is set to "1".
N     * |        |          |Note2: This bit can be cleared by writing "1" to it.
N     * |        |          |Note3: This bit is valid in UART0 and UART1.
N     * @var UART_T::DWKCOMP
N     * Offset: 0x48  UART Incoming Data Wake-up Compensation Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |STCOMP    |Start Bit Compensation Value
N     * |        |          |These bits field indicate how many clock cycle selected by UART_CLK do the UART controller can get the 1st bit (start bit) when the device is wake-up from Power-down mode.
N     * |        |          |Note: It is valid only when WKDATEN (UART_WKCTL[1]) is set.
N     */
N    __IO uint32_t DAT;                   /*!< [0x0000] UART Receive/Transmit Buffer Register                            */
X    volatile uint32_t DAT;                    
N    __IO uint32_t INTEN;                 /*!< [0x0004] UART Interrupt Enable Register                                   */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t FIFO;                  /*!< [0x0008] UART FIFO Control Register                                       */
X    volatile uint32_t FIFO;                   
N    __IO uint32_t LINE;                  /*!< [0x000c] UART Line Control Register                                       */
X    volatile uint32_t LINE;                   
N    __IO uint32_t MODEM;                 /*!< [0x0010] UART Modem Control Register                                      */
X    volatile uint32_t MODEM;                  
N    __IO uint32_t MODEMSTS;              /*!< [0x0014] UART Modem Status Register                                       */
X    volatile uint32_t MODEMSTS;               
N    __IO uint32_t FIFOSTS;               /*!< [0x0018] UART FIFO Status Register                                        */
X    volatile uint32_t FIFOSTS;                
N    __IO uint32_t INTSTS;                /*!< [0x001c] UART Interrupt Status Register                                   */
X    volatile uint32_t INTSTS;                 
N    __IO uint32_t TOUT;                  /*!< [0x0020] UART Time-out Register                                           */
X    volatile uint32_t TOUT;                   
N    __IO uint32_t BAUD;                  /*!< [0x0024] UART Baud Rate Divider Register                                  */
X    volatile uint32_t BAUD;                   
N    __IO uint32_t IRDA;                  /*!< [0x0028] UART IrDA Control Register                                       */
X    volatile uint32_t IRDA;                   
N    __IO uint32_t ALTCTL;                /*!< [0x002c] UART Alternate Control/Status Register                           */
X    volatile uint32_t ALTCTL;                 
N    __IO uint32_t FUNCSEL;               /*!< [0x0030] UART Function Select Register                                    */
X    volatile uint32_t FUNCSEL;                
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __IO uint32_t BRCOMP;                /*!< [0x003c] UART Baud Rate Compensation Register                             */
X    volatile uint32_t BRCOMP;                 
N    __IO uint32_t WKCTL;                 /*!< [0x0040] UART Wake-up Control Register                                    */
X    volatile uint32_t WKCTL;                  
N    __IO uint32_t WKSTS;                 /*!< [0x0044] UART Wake-up Status Register                                     */
X    volatile uint32_t WKSTS;                  
N    __IO uint32_t DWKCOMP;               /*!< [0x0048] UART Incoming Data Wake-up Compensation Register                 */
X    volatile uint32_t DWKCOMP;                
N
N} UART_T;
N
N
N/**
N    @addtogroup UART_CONST UART Bit Field Definition
N    Constant Definitions for UART Controller
N@{ */
N
N#define UART_DAT_DAT_Pos                 (0)                                               /*!< UART_T::DAT: DAT Position              */
N#define UART_DAT_DAT_Msk                 (0xfful << UART_DAT_DAT_Pos)                      /*!< UART_T::DAT: DAT Mask                  */
N
N#define UART_DAT_PARITY_Pos              (8)                                               /*!< UART_T::DAT: PARITY Position           */
N#define UART_DAT_PARITY_Msk              (0x1ul << UART_DAT_PARITY_Pos)                    /*!< UART_T::DAT: PARITY Mask               */
N
N#define UART_INTEN_RDAIEN_Pos            (0)                                               /*!< UART_T::INTEN: RDAIEN Position         */
N#define UART_INTEN_RDAIEN_Msk            (0x1ul << UART_INTEN_RDAIEN_Pos)                  /*!< UART_T::INTEN: RDAIEN Mask             */
N
N#define UART_INTEN_THREIEN_Pos           (1)                                               /*!< UART_T::INTEN: THREIEN Position        */
N#define UART_INTEN_THREIEN_Msk           (0x1ul << UART_INTEN_THREIEN_Pos)                 /*!< UART_T::INTEN: THREIEN Mask            */
N
N#define UART_INTEN_RLSIEN_Pos            (2)                                               /*!< UART_T::INTEN: RLSIEN Position         */
N#define UART_INTEN_RLSIEN_Msk            (0x1ul << UART_INTEN_RLSIEN_Pos)                  /*!< UART_T::INTEN: RLSIEN Mask             */
N
N#define UART_INTEN_MODEMIEN_Pos          (3)                                               /*!< UART_T::INTEN: MODEMIEN Position       */
N#define UART_INTEN_MODEMIEN_Msk          (0x1ul << UART_INTEN_MODEMIEN_Pos)                /*!< UART_T::INTEN: MODEMIEN Mask           */
N
N#define UART_INTEN_RXTOIEN_Pos           (4)                                               /*!< UART_T::INTEN: RXTOIEN Position        */
N#define UART_INTEN_RXTOIEN_Msk           (0x1ul << UART_INTEN_RXTOIEN_Pos)                 /*!< UART_T::INTEN: RXTOIEN Mask            */
N
N#define UART_INTEN_BUFERRIEN_Pos         (5)                                               /*!< UART_T::INTEN: BUFERRIEN Position      */
N#define UART_INTEN_BUFERRIEN_Msk         (0x1ul << UART_INTEN_BUFERRIEN_Pos)               /*!< UART_T::INTEN: BUFERRIEN Mask          */
N
N#define UART_INTEN_WKIEN_Pos             (6)                                               /*!< UART_T::INTEN: WKIEN Position          */
N#define UART_INTEN_WKIEN_Msk             (0x1ul << UART_INTEN_WKIEN_Pos)                   /*!< UART_T::INTEN: WKIEN Mask              */
N
N#define UART_INTEN_TOCNTEN_Pos           (11)                                              /*!< UART_T::INTEN: TOCNTEN Position        */
N#define UART_INTEN_TOCNTEN_Msk           (0x1ul << UART_INTEN_TOCNTEN_Pos)                 /*!< UART_T::INTEN: TOCNTEN Mask            */
N
N#define UART_INTEN_ATORTSEN_Pos          (12)                                              /*!< UART_T::INTEN: ATORTSEN Position       */
N#define UART_INTEN_ATORTSEN_Msk          (0x1ul << UART_INTEN_ATORTSEN_Pos)                /*!< UART_T::INTEN: ATORTSEN Mask           */
N
N#define UART_INTEN_ATOCTSEN_Pos          (13)                                              /*!< UART_T::INTEN: ATOCTSEN Position       */
N#define UART_INTEN_ATOCTSEN_Msk          (0x1ul << UART_INTEN_ATOCTSEN_Pos)                /*!< UART_T::INTEN: ATOCTSEN Mask           */
N
N#define UART_INTEN_TXPDMAEN_Pos          (14)                                              /*!< UART_T::INTEN: TXPDMAEN Position       */
N#define UART_INTEN_TXPDMAEN_Msk          (0x1ul << UART_INTEN_TXPDMAEN_Pos)                /*!< UART_T::INTEN: TXPDMAEN Mask           */
N
N#define UART_INTEN_RXPDMAEN_Pos          (15)                                              /*!< UART_T::INTEN: RXPDMAEN Position       */
N#define UART_INTEN_RXPDMAEN_Msk          (0x1ul << UART_INTEN_RXPDMAEN_Pos)                /*!< UART_T::INTEN: RXPDMAEN Mask           */
N
N#define UART_INTEN_SWBEIEN_Pos           (16)                                              /*!< UART_T::INTEN: SWBEIEN Position        */
N#define UART_INTEN_SWBEIEN_Msk           (0x1ul << UART_INTEN_SWBEIEN_Pos)                 /*!< UART_T::INTEN: SWBEIEN Mask            */
N
N#define UART_INTEN_ABRIEN_Pos            (18)                                              /*!< UART_T::INTEN: ABRIEN Position         */
N#define UART_INTEN_ABRIEN_Msk            (0x1ul << UART_INTEN_ABRIEN_Pos)                  /*!< UART_T::INTEN: ABRIEN Mask             */
N
N#define UART_INTEN_TXENDIEN_Pos          (22)                                              /*!< UART_T::INTEN: TXENDIEN Position       */
N#define UART_INTEN_TXENDIEN_Msk          (0x1ul << UART_INTEN_TXENDIEN_Pos)                /*!< UART_T::INTEN: TXENDIEN Mask           */
N
N#define UART_FIFO_RXRST_Pos              (1)                                               /*!< UART_T::FIFO: RXRST Position           */
N#define UART_FIFO_RXRST_Msk              (0x1ul << UART_FIFO_RXRST_Pos)                    /*!< UART_T::FIFO: RXRST Mask               */
N
N#define UART_FIFO_TXRST_Pos              (2)                                               /*!< UART_T::FIFO: TXRST Position           */
N#define UART_FIFO_TXRST_Msk              (0x1ul << UART_FIFO_TXRST_Pos)                    /*!< UART_T::FIFO: TXRST Mask               */
N
N#define UART_FIFO_RFITL_Pos              (4)                                               /*!< UART_T::FIFO: RFITL Position           */
N#define UART_FIFO_RFITL_Msk              (0xful << UART_FIFO_RFITL_Pos)                    /*!< UART_T::FIFO: RFITL Mask               */
N
N#define UART_FIFO_RXOFF_Pos              (8)                                               /*!< UART_T::FIFO: RXOFF Position           */
N#define UART_FIFO_RXOFF_Msk              (0x1ul << UART_FIFO_RXOFF_Pos)                    /*!< UART_T::FIFO: RXOFF Mask               */
N
N#define UART_FIFO_RTSTRGLV_Pos           (16)                                              /*!< UART_T::FIFO: RTSTRGLV Position        */
N#define UART_FIFO_RTSTRGLV_Msk           (0xful << UART_FIFO_RTSTRGLV_Pos)                 /*!< UART_T::FIFO: RTSTRGLV Mask            */
N
N#define UART_LINE_WLS_Pos                (0)                                               /*!< UART_T::LINE: WLS Position             */
N#define UART_LINE_WLS_Msk                (0x3ul << UART_LINE_WLS_Pos)                      /*!< UART_T::LINE: WLS Mask                 */
N
N#define UART_LINE_NSB_Pos                (2)                                               /*!< UART_T::LINE: NSB Position             */
N#define UART_LINE_NSB_Msk                (0x1ul << UART_LINE_NSB_Pos)                      /*!< UART_T::LINE: NSB Mask                 */
N
N#define UART_LINE_PBE_Pos                (3)                                               /*!< UART_T::LINE: PBE Position             */
N#define UART_LINE_PBE_Msk                (0x1ul << UART_LINE_PBE_Pos)                      /*!< UART_T::LINE: PBE Mask                 */
N
N#define UART_LINE_EPE_Pos                (4)                                               /*!< UART_T::LINE: EPE Position             */
N#define UART_LINE_EPE_Msk                (0x1ul << UART_LINE_EPE_Pos)                      /*!< UART_T::LINE: EPE Mask                 */
N
N#define UART_LINE_SPE_Pos                (5)                                               /*!< UART_T::LINE: SPE Position             */
N#define UART_LINE_SPE_Msk                (0x1ul << UART_LINE_SPE_Pos)                      /*!< UART_T::LINE: SPE Mask                 */
N
N#define UART_LINE_BCB_Pos                (6)                                               /*!< UART_T::LINE: BCB Position             */
N#define UART_LINE_BCB_Msk                (0x1ul << UART_LINE_BCB_Pos)                      /*!< UART_T::LINE: BCB Mask                 */
N
N#define UART_LINE_PSS_Pos                (7)                                               /*!< UART_T::LINE: PSS Position             */
N#define UART_LINE_PSS_Msk                (0x1ul << UART_LINE_PSS_Pos)                      /*!< UART_T::LINE: PSS Mask                 */
N
N#define UART_LINE_TXDINV_Pos             (8)                                               /*!< UART_T::LINE: TXDINV Position          */
N#define UART_LINE_TXDINV_Msk             (0x1ul << UART_LINE_TXDINV_Pos)                   /*!< UART_T::LINE: TXDINV Mask              */
N
N#define UART_LINE_RXDINV_Pos             (9)                                               /*!< UART_T::LINE: RXDINV Position          */
N#define UART_LINE_RXDINV_Msk             (0x1ul << UART_LINE_RXDINV_Pos)                   /*!< UART_T::LINE: RXDINV Mask              */
N
N#define UART_MODEM_RTS_Pos               (1)                                               /*!< UART_T::MODEM: RTS Position            */
N#define UART_MODEM_RTS_Msk               (0x1ul << UART_MODEM_RTS_Pos)                     /*!< UART_T::MODEM: RTS Mask                */
N
N#define UART_MODEM_RTSACTLV_Pos          (9)                                               /*!< UART_T::MODEM: RTSACTLV Position       */
N#define UART_MODEM_RTSACTLV_Msk          (0x1ul << UART_MODEM_RTSACTLV_Pos)                /*!< UART_T::MODEM: RTSACTLV Mask           */
N
N#define UART_MODEM_RTSSTS_Pos            (13)                                              /*!< UART_T::MODEM: RTSSTS Position         */
N#define UART_MODEM_RTSSTS_Msk            (0x1ul << UART_MODEM_RTSSTS_Pos)                  /*!< UART_T::MODEM: RTSSTS Mask             */
N
N#define UART_MODEMSTS_CTSDETF_Pos        (0)                                               /*!< UART_T::MODEMSTS: CTSDETF Position     */
N#define UART_MODEMSTS_CTSDETF_Msk        (0x1ul << UART_MODEMSTS_CTSDETF_Pos)              /*!< UART_T::MODEMSTS: CTSDETF Mask         */
N
N#define UART_MODEMSTS_CTSSTS_Pos         (4)                                               /*!< UART_T::MODEMSTS: CTSSTS Position      */
N#define UART_MODEMSTS_CTSSTS_Msk         (0x1ul << UART_MODEMSTS_CTSSTS_Pos)               /*!< UART_T::MODEMSTS: CTSSTS Mask          */
N
N#define UART_MODEMSTS_CTSACTLV_Pos       (8)                                               /*!< UART_T::MODEMSTS: CTSACTLV Position    */
N#define UART_MODEMSTS_CTSACTLV_Msk       (0x1ul << UART_MODEMSTS_CTSACTLV_Pos)             /*!< UART_T::MODEMSTS: CTSACTLV Mask        */
N
N#define UART_FIFOSTS_RXOVIF_Pos          (0)                                               /*!< UART_T::FIFOSTS: RXOVIF Position       */
N#define UART_FIFOSTS_RXOVIF_Msk          (0x1ul << UART_FIFOSTS_RXOVIF_Pos)                /*!< UART_T::FIFOSTS: RXOVIF Mask           */
N
N#define UART_FIFOSTS_ABRDIF_Pos          (1)                                               /*!< UART_T::FIFOSTS: ABRDIF Position       */
N#define UART_FIFOSTS_ABRDIF_Msk          (0x1ul << UART_FIFOSTS_ABRDIF_Pos)                /*!< UART_T::FIFOSTS: ABRDIF Mask           */
N
N#define UART_FIFOSTS_ABRDTOIF_Pos        (2)                                               /*!< UART_T::FIFOSTS: ABRDTOIF Position     */
N#define UART_FIFOSTS_ABRDTOIF_Msk        (0x1ul << UART_FIFOSTS_ABRDTOIF_Pos)              /*!< UART_T::FIFOSTS: ABRDTOIF Mask         */
N
N#define UART_FIFOSTS_ADDRDETF_Pos        (3)                                               /*!< UART_T::FIFOSTS: ADDRDETF Position     */
N#define UART_FIFOSTS_ADDRDETF_Msk        (0x1ul << UART_FIFOSTS_ADDRDETF_Pos)              /*!< UART_T::FIFOSTS: ADDRDETF Mask         */
N
N#define UART_FIFOSTS_PEF_Pos             (4)                                               /*!< UART_T::FIFOSTS: PEF Position          */
N#define UART_FIFOSTS_PEF_Msk             (0x1ul << UART_FIFOSTS_PEF_Pos)                   /*!< UART_T::FIFOSTS: PEF Mask              */
N
N#define UART_FIFOSTS_FEF_Pos             (5)                                               /*!< UART_T::FIFOSTS: FEF Position          */
N#define UART_FIFOSTS_FEF_Msk             (0x1ul << UART_FIFOSTS_FEF_Pos)                   /*!< UART_T::FIFOSTS: FEF Mask              */
N
N#define UART_FIFOSTS_BIF_Pos             (6)                                               /*!< UART_T::FIFOSTS: BIF Position          */
N#define UART_FIFOSTS_BIF_Msk             (0x1ul << UART_FIFOSTS_BIF_Pos)                   /*!< UART_T::FIFOSTS: BIF Mask              */
N
N#define UART_FIFOSTS_RXPTR_Pos           (8)                                               /*!< UART_T::FIFOSTS: RXPTR Position        */
N#define UART_FIFOSTS_RXPTR_Msk           (0x3ful << UART_FIFOSTS_RXPTR_Pos)                /*!< UART_T::FIFOSTS: RXPTR Mask            */
N
N#define UART_FIFOSTS_RXEMPTY_Pos         (14)                                              /*!< UART_T::FIFOSTS: RXEMPTY Position      */
N#define UART_FIFOSTS_RXEMPTY_Msk         (0x1ul << UART_FIFOSTS_RXEMPTY_Pos)               /*!< UART_T::FIFOSTS: RXEMPTY Mask          */
N
N#define UART_FIFOSTS_RXFULL_Pos          (15)                                              /*!< UART_T::FIFOSTS: RXFULL Position       */
N#define UART_FIFOSTS_RXFULL_Msk          (0x1ul << UART_FIFOSTS_RXFULL_Pos)                /*!< UART_T::FIFOSTS: RXFULL Mask           */
N
N#define UART_FIFOSTS_TXPTR_Pos           (16)                                              /*!< UART_T::FIFOSTS: TXPTR Position        */
N#define UART_FIFOSTS_TXPTR_Msk           (0x3ful << UART_FIFOSTS_TXPTR_Pos)                /*!< UART_T::FIFOSTS: TXPTR Mask            */
N
N#define UART_FIFOSTS_TXEMPTY_Pos         (22)                                              /*!< UART_T::FIFOSTS: TXEMPTY Position      */
N#define UART_FIFOSTS_TXEMPTY_Msk         (0x1ul << UART_FIFOSTS_TXEMPTY_Pos)               /*!< UART_T::FIFOSTS: TXEMPTY Mask          */
N
N#define UART_FIFOSTS_TXFULL_Pos          (23)                                              /*!< UART_T::FIFOSTS: TXFULL Position       */
N#define UART_FIFOSTS_TXFULL_Msk          (0x1ul << UART_FIFOSTS_TXFULL_Pos)                /*!< UART_T::FIFOSTS: TXFULL Mask           */
N
N#define UART_FIFOSTS_TXOVIF_Pos          (24)                                              /*!< UART_T::FIFOSTS: TXOVIF Position       */
N#define UART_FIFOSTS_TXOVIF_Msk          (0x1ul << UART_FIFOSTS_TXOVIF_Pos)                /*!< UART_T::FIFOSTS: TXOVIF Mask           */
N
N#define UART_FIFOSTS_TXEMPTYF_Pos        (28)                                              /*!< UART_T::FIFOSTS: TXEMPTYF Position     */
N#define UART_FIFOSTS_TXEMPTYF_Msk        (0x1ul << UART_FIFOSTS_TXEMPTYF_Pos)              /*!< UART_T::FIFOSTS: TXEMPTYF Mask         */
N
N#define UART_FIFOSTS_RXIDLE_Pos          (29)                                              /*!< UART_T::FIFOSTS: RXIDLE Position       */
N#define UART_FIFOSTS_RXIDLE_Msk          (0x1ul << UART_FIFOSTS_RXIDLE_Pos)                /*!< UART_T::FIFOSTS: RXIDLE Mask           */
N
N#define UART_FIFOSTS_TXRXACT_Pos         (31)                                              /*!< UART_T::FIFOSTS: TXRXACT Position      */
N#define UART_FIFOSTS_TXRXACT_Msk         (0x1ul << UART_FIFOSTS_TXRXACT_Pos)               /*!< UART_T::FIFOSTS: TXRXACT Mask          */
N
N#define UART_INTSTS_RDAIF_Pos            (0)                                               /*!< UART_T::INTSTS: RDAIF Position         */
N#define UART_INTSTS_RDAIF_Msk            (0x1ul << UART_INTSTS_RDAIF_Pos)                  /*!< UART_T::INTSTS: RDAIF Mask             */
N
N#define UART_INTSTS_THREIF_Pos           (1)                                               /*!< UART_T::INTSTS: THREIF Position        */
N#define UART_INTSTS_THREIF_Msk           (0x1ul << UART_INTSTS_THREIF_Pos)                 /*!< UART_T::INTSTS: THREIF Mask            */
N
N#define UART_INTSTS_RLSIF_Pos            (2)                                               /*!< UART_T::INTSTS: RLSIF Position         */
N#define UART_INTSTS_RLSIF_Msk            (0x1ul << UART_INTSTS_RLSIF_Pos)                  /*!< UART_T::INTSTS: RLSIF Mask             */
N
N#define UART_INTSTS_MODEMIF_Pos          (3)                                               /*!< UART_T::INTSTS: MODEMIF Position       */
N#define UART_INTSTS_MODEMIF_Msk          (0x1ul << UART_INTSTS_MODEMIF_Pos)                /*!< UART_T::INTSTS: MODEMIF Mask           */
N
N#define UART_INTSTS_RXTOIF_Pos           (4)                                               /*!< UART_T::INTSTS: RXTOIF Position        */
N#define UART_INTSTS_RXTOIF_Msk           (0x1ul << UART_INTSTS_RXTOIF_Pos)                 /*!< UART_T::INTSTS: RXTOIF Mask            */
N
N#define UART_INTSTS_BUFERRIF_Pos         (5)                                               /*!< UART_T::INTSTS: BUFERRIF Position      */
N#define UART_INTSTS_BUFERRIF_Msk         (0x1ul << UART_INTSTS_BUFERRIF_Pos)               /*!< UART_T::INTSTS: BUFERRIF Mask          */
N
N#define UART_INTSTS_WKIF_Pos             (6)                                               /*!< UART_T::INTSTS: WKIF Position          */
N#define UART_INTSTS_WKIF_Msk             (0x1ul << UART_INTSTS_WKIF_Pos)                   /*!< UART_T::INTSTS: WKIF Mask              */
N
N#define UART_INTSTS_RDAINT_Pos           (8)                                               /*!< UART_T::INTSTS: RDAINT Position        */
N#define UART_INTSTS_RDAINT_Msk           (0x1ul << UART_INTSTS_RDAINT_Pos)                 /*!< UART_T::INTSTS: RDAINT Mask            */
N
N#define UART_INTSTS_THREINT_Pos          (9)                                               /*!< UART_T::INTSTS: THREINT Position       */
N#define UART_INTSTS_THREINT_Msk          (0x1ul << UART_INTSTS_THREINT_Pos)                /*!< UART_T::INTSTS: THREINT Mask           */
N
N#define UART_INTSTS_RLSINT_Pos           (10)                                              /*!< UART_T::INTSTS: RLSINT Position        */
N#define UART_INTSTS_RLSINT_Msk           (0x1ul << UART_INTSTS_RLSINT_Pos)                 /*!< UART_T::INTSTS: RLSINT Mask            */
N
N#define UART_INTSTS_MODEMINT_Pos         (11)                                              /*!< UART_T::INTSTS: MODEMINT Position      */
N#define UART_INTSTS_MODEMINT_Msk         (0x1ul << UART_INTSTS_MODEMINT_Pos)               /*!< UART_T::INTSTS: MODEMINT Mask          */
N
N#define UART_INTSTS_RXTOINT_Pos          (12)                                              /*!< UART_T::INTSTS: RXTOINT Position       */
N#define UART_INTSTS_RXTOINT_Msk          (0x1ul << UART_INTSTS_RXTOINT_Pos)                /*!< UART_T::INTSTS: RXTOINT Mask           */
N
N#define UART_INTSTS_BUFERRINT_Pos        (13)                                              /*!< UART_T::INTSTS: BUFERRINT Position     */
N#define UART_INTSTS_BUFERRINT_Msk        (0x1ul << UART_INTSTS_BUFERRINT_Pos)              /*!< UART_T::INTSTS: BUFERRINT Mask         */
N
N#define UART_INTSTS_WKINT_Pos            (14)                                              /*!< UART_T::INTSTS: WKINT Position         */
N#define UART_INTSTS_WKINT_Msk            (0x1ul << UART_INTSTS_WKINT_Pos)                  /*!< UART_T::INTSTS: WKINT Mask             */
N
N#define UART_INTSTS_SWBEIF_Pos           (16)                                              /*!< UART_T::INTSTS: SWBEIF Position        */
N#define UART_INTSTS_SWBEIF_Msk           (0x1ul << UART_INTSTS_SWBEIF_Pos)                 /*!< UART_T::INTSTS: SWBEIF Mask            */
N
N#define UART_INTSTS_HWRLSIF_Pos          (18)                                              /*!< UART_T::INTSTS: HWRLSIF Position       */
N#define UART_INTSTS_HWRLSIF_Msk          (0x1ul << UART_INTSTS_HWRLSIF_Pos)                /*!< UART_T::INTSTS: HWRLSIF Mask           */
N
N#define UART_INTSTS_HWMODIF_Pos          (19)                                              /*!< UART_T::INTSTS: HWMODIF Position       */
N#define UART_INTSTS_HWMODIF_Msk          (0x1ul << UART_INTSTS_HWMODIF_Pos)                /*!< UART_T::INTSTS: HWMODIF Mask           */
N
N#define UART_INTSTS_HWTOIF_Pos           (20)                                              /*!< UART_T::INTSTS: HWTOIF Position        */
N#define UART_INTSTS_HWTOIF_Msk           (0x1ul << UART_INTSTS_HWTOIF_Pos)                 /*!< UART_T::INTSTS: HWTOIF Mask            */
N
N#define UART_INTSTS_HWBUFEIF_Pos         (21)                                              /*!< UART_T::INTSTS: HWBUFEIF Position      */
N#define UART_INTSTS_HWBUFEIF_Msk         (0x1ul << UART_INTSTS_HWBUFEIF_Pos)               /*!< UART_T::INTSTS: HWBUFEIF Mask          */
N
N#define UART_INTSTS_TXENDIF_Pos          (22)                                              /*!< UART_T::INTSTS: TXENDIF Position       */
N#define UART_INTSTS_TXENDIF_Msk          (0x1ul << UART_INTSTS_TXENDIF_Pos)                /*!< UART_T::INTSTS: TXENDIF Mask           */
N
N#define UART_INTSTS_SWBEINT_Pos          (24)                                              /*!< UART_T::INTSTS: SWBEINT Position       */
N#define UART_INTSTS_SWBEINT_Msk          (0x1ul << UART_INTSTS_SWBEINT_Pos)                /*!< UART_T::INTSTS: SWBEINT Mask           */
N
N#define UART_INTSTS_HWRLSINT_Pos         (26)                                              /*!< UART_T::INTSTS: HWRLSINT Position      */
N#define UART_INTSTS_HWRLSINT_Msk         (0x1ul << UART_INTSTS_HWRLSINT_Pos)               /*!< UART_T::INTSTS: HWRLSINT Mask          */
N
N#define UART_INTSTS_HWMODINT_Pos         (27)                                              /*!< UART_T::INTSTS: HWMODINT Position      */
N#define UART_INTSTS_HWMODINT_Msk         (0x1ul << UART_INTSTS_HWMODINT_Pos)               /*!< UART_T::INTSTS: HWMODINT Mask          */
N
N#define UART_INTSTS_HWTOINT_Pos          (28)                                              /*!< UART_T::INTSTS: HWTOINT Position       */
N#define UART_INTSTS_HWTOINT_Msk          (0x1ul << UART_INTSTS_HWTOINT_Pos)                /*!< UART_T::INTSTS: HWTOINT Mask           */
N
N#define UART_INTSTS_HWBUFEINT_Pos        (29)                                              /*!< UART_T::INTSTS: HWBUFEINT Position     */
N#define UART_INTSTS_HWBUFEINT_Msk        (0x1ul << UART_INTSTS_HWBUFEINT_Pos)              /*!< UART_T::INTSTS: HWBUFEINT Mask         */
N
N#define UART_INTSTS_TXENDINT_Pos         (30)                                              /*!< UART_T::INTSTS: TXENDINT Position      */
N#define UART_INTSTS_TXENDINT_Msk         (0x1ul << UART_INTSTS_TXENDINT_Pos)               /*!< UART_T::INTSTS: TXENDINT Mask          */
N
N#define UART_INTSTS_ABRINT_Pos           (31)                                              /*!< UART_T::INTSTS: ABRINT Position        */
N#define UART_INTSTS_ABRINT_Msk           (0x1ul << UART_INTSTS_ABRINT_Pos)                 /*!< UART_T::INTSTS: ABRINT Mask            */
N
N#define UART_TOUT_TOIC_Pos               (0)                                               /*!< UART_T::TOUT: TOIC Position            */
N#define UART_TOUT_TOIC_Msk               (0xfful << UART_TOUT_TOIC_Pos)                    /*!< UART_T::TOUT: TOIC Mask                */
N
N#define UART_TOUT_DLY_Pos                (8)                                               /*!< UART_T::TOUT: DLY Position             */
N#define UART_TOUT_DLY_Msk                (0xfful << UART_TOUT_DLY_Pos)                     /*!< UART_T::TOUT: DLY Mask                 */
N
N#define UART_BAUD_BRD_Pos                (0)                                               /*!< UART_T::BAUD: BRD Position             */
N#define UART_BAUD_BRD_Msk                (0xfffful << UART_BAUD_BRD_Pos)                   /*!< UART_T::BAUD: BRD Mask                 */
N
N#define UART_BAUD_EDIVM1_Pos             (24)                                              /*!< UART_T::BAUD: EDIVM1 Position          */
N#define UART_BAUD_EDIVM1_Msk             (0xful << UART_BAUD_EDIVM1_Pos)                   /*!< UART_T::BAUD: EDIVM1 Mask              */
N
N#define UART_BAUD_BAUDM0_Pos             (28)                                              /*!< UART_T::BAUD: BAUDM0 Position          */
N#define UART_BAUD_BAUDM0_Msk             (0x1ul << UART_BAUD_BAUDM0_Pos)                   /*!< UART_T::BAUD: BAUDM0 Mask              */
N
N#define UART_BAUD_BAUDM1_Pos             (29)                                              /*!< UART_T::BAUD: BAUDM1 Position          */
N#define UART_BAUD_BAUDM1_Msk             (0x1ul << UART_BAUD_BAUDM1_Pos)                   /*!< UART_T::BAUD: BAUDM1 Mask              */
N
N#define UART_IRDA_TXEN_Pos               (1)                                               /*!< UART_T::IRDA: TXEN Position            */
N#define UART_IRDA_TXEN_Msk               (0x1ul << UART_IRDA_TXEN_Pos)                     /*!< UART_T::IRDA: TXEN Mask                */
N
N#define UART_IRDA_TXINV_Pos              (5)                                               /*!< UART_T::IRDA: TXINV Position           */
N#define UART_IRDA_TXINV_Msk              (0x1ul << UART_IRDA_TXINV_Pos)                    /*!< UART_T::IRDA: TXINV Mask               */
N
N#define UART_IRDA_RXINV_Pos              (6)                                               /*!< UART_T::IRDA: RXINV Position           */
N#define UART_IRDA_RXINV_Msk              (0x1ul << UART_IRDA_RXINV_Pos)                    /*!< UART_T::IRDA: RXINV Mask               */
N
N#define UART_ALTCTL_BRKFL_Pos            (0)                                               /*!< UART_T::ALTCTL: BRKFL Position         */
N#define UART_ALTCTL_BRKFL_Msk            (0xful << UART_ALTCTL_BRKFL_Pos)                  /*!< UART_T::ALTCTL: BRKFL Mask             */
N
N#define UART_ALTCTL_LINRXEN_Pos          (6)                                               /*!< UART_T::ALTCTL: LINRXEN Position       */
N#define UART_ALTCTL_LINRXEN_Msk          (0x1ul << UART_ALTCTL_LINRXEN_Pos)                /*!< UART_T::ALTCTL: LINRXEN Mask           */
N
N#define UART_ALTCTL_LINTXEN_Pos          (7)                                               /*!< UART_T::ALTCTL: LINTXEN Position       */
N#define UART_ALTCTL_LINTXEN_Msk          (0x1ul << UART_ALTCTL_LINTXEN_Pos)                /*!< UART_T::ALTCTL: LINTXEN Mask           */
N
N#define UART_ALTCTL_RS485NMM_Pos         (8)                                               /*!< UART_T::ALTCTL: RS485NMM Position      */
N#define UART_ALTCTL_RS485NMM_Msk         (0x1ul << UART_ALTCTL_RS485NMM_Pos)               /*!< UART_T::ALTCTL: RS485NMM Mask          */
N
N#define UART_ALTCTL_RS485AAD_Pos         (9)                                               /*!< UART_T::ALTCTL: RS485AAD Position      */
N#define UART_ALTCTL_RS485AAD_Msk         (0x1ul << UART_ALTCTL_RS485AAD_Pos)               /*!< UART_T::ALTCTL: RS485AAD Mask          */
N
N#define UART_ALTCTL_RS485AUD_Pos         (10)                                              /*!< UART_T::ALTCTL: RS485AUD Position      */
N#define UART_ALTCTL_RS485AUD_Msk         (0x1ul << UART_ALTCTL_RS485AUD_Pos)               /*!< UART_T::ALTCTL: RS485AUD Mask          */
N
N#define UART_ALTCTL_ADDRDEN_Pos          (15)                                              /*!< UART_T::ALTCTL: ADDRDEN Position       */
N#define UART_ALTCTL_ADDRDEN_Msk          (0x1ul << UART_ALTCTL_ADDRDEN_Pos)                /*!< UART_T::ALTCTL: ADDRDEN Mask           */
N
N#define UART_ALTCTL_ABRIF_Pos            (17)                                              /*!< UART_T::ALTCTL: ABRIF Position         */
N#define UART_ALTCTL_ABRIF_Msk            (0x1ul << UART_ALTCTL_ABRIF_Pos)                  /*!< UART_T::ALTCTL: ABRIF Mask             */
N
N#define UART_ALTCTL_ABRDEN_Pos           (18)                                              /*!< UART_T::ALTCTL: ABRDEN Position        */
N#define UART_ALTCTL_ABRDEN_Msk           (0x1ul << UART_ALTCTL_ABRDEN_Pos)                 /*!< UART_T::ALTCTL: ABRDEN Mask            */
N
N#define UART_ALTCTL_ABRDBITS_Pos         (19)                                              /*!< UART_T::ALTCTL: ABRDBITS Position      */
N#define UART_ALTCTL_ABRDBITS_Msk         (0x3ul << UART_ALTCTL_ABRDBITS_Pos)               /*!< UART_T::ALTCTL: ABRDBITS Mask          */
N
N#define UART_ALTCTL_ADDRMV_Pos           (24)                                              /*!< UART_T::ALTCTL: ADDRMV Position        */
N#define UART_ALTCTL_ADDRMV_Msk           (0xfful << UART_ALTCTL_ADDRMV_Pos)                /*!< UART_T::ALTCTL: ADDRMV Mask            */
N
N#define UART_FUNCSEL_FUNCSEL_Pos         (0)                                               /*!< UART_T::FUNCSEL: FUNCSEL Position      */
N#define UART_FUNCSEL_FUNCSEL_Msk         (0x7ul << UART_FUNCSEL_FUNCSEL_Pos)               /*!< UART_T::FUNCSEL: FUNCSEL Mask          */
N
N#define UART_FUNCSEL_TXRXDIS_Pos         (3)                                               /*!< UART_T::FUNCSEL: TXRXDIS Position      */
N#define UART_FUNCSEL_TXRXDIS_Msk         (0x1ul << UART_FUNCSEL_TXRXDIS_Pos)               /*!< UART_T::FUNCSEL: TXRXDIS Mask          */
N
N#define UART_BRCOMP_BRCOMP_Pos           (0)                                               /*!< UART_T::BRCOMP: BRCOMP Position        */
N#define UART_BRCOMP_BRCOMP_Msk           (0x1fful << UART_BRCOMP_BRCOMP_Pos)               /*!< UART_T::BRCOMP: BRCOMP Mask            */
N
N#define UART_BRCOMP_BRCOMPDEC_Pos        (31)                                              /*!< UART_T::BRCOMP: BRCOMPDEC Position     */
N#define UART_BRCOMP_BRCOMPDEC_Msk        (0x1ul << UART_BRCOMP_BRCOMPDEC_Pos)              /*!< UART_T::BRCOMP: BRCOMPDEC Mask         */
N
N#define UART_WKCTL_WKCTSEN_Pos           (0)                                               /*!< UART_T::WKCTL: WKCTSEN Position        */
N#define UART_WKCTL_WKCTSEN_Msk           (0x1ul << UART_WKCTL_WKCTSEN_Pos)                 /*!< UART_T::WKCTL: WKCTSEN Mask            */
N
N#define UART_WKCTL_WKDATEN_Pos           (1)                                               /*!< UART_T::WKCTL: WKDATEN Position        */
N#define UART_WKCTL_WKDATEN_Msk           (0x1ul << UART_WKCTL_WKDATEN_Pos)                 /*!< UART_T::WKCTL: WKDATEN Mask            */
N
N#define UART_WKCTL_WKRFRTEN_Pos          (2)                                               /*!< UART_T::WKCTL: WKRFRTEN Position       */
N#define UART_WKCTL_WKRFRTEN_Msk          (0x1ul << UART_WKCTL_WKRFRTEN_Pos)                /*!< UART_T::WKCTL: WKRFRTEN Mask           */
N
N#define UART_WKCTL_WKRS485EN_Pos         (3)                                               /*!< UART_T::WKCTL: WKRS485EN Position      */
N#define UART_WKCTL_WKRS485EN_Msk         (0x1ul << UART_WKCTL_WKRS485EN_Pos)               /*!< UART_T::WKCTL: WKRS485EN Mask          */
N
N#define UART_WKCTL_WKTOUTEN_Pos          (4)                                               /*!< UART_T::WKCTL: WKTOUTEN Position       */
N#define UART_WKCTL_WKTOUTEN_Msk          (0x1ul << UART_WKCTL_WKTOUTEN_Pos)                /*!< UART_T::WKCTL: WKTOUTEN Mask           */
N
N#define UART_WKSTS_CTSWKF_Pos            (0)                                               /*!< UART_T::WKSTS: CTSWKF Position         */
N#define UART_WKSTS_CTSWKF_Msk            (0x1ul << UART_WKSTS_CTSWKF_Pos)                  /*!< UART_T::WKSTS: CTSWKF Mask             */
N
N#define UART_WKSTS_DATWKF_Pos            (1)                                               /*!< UART_T::WKSTS: DATWKF Position         */
N#define UART_WKSTS_DATWKF_Msk            (0x1ul << UART_WKSTS_DATWKF_Pos)                  /*!< UART_T::WKSTS: DATWKF Mask             */
N
N#define UART_WKSTS_RFRTWKF_Pos           (2)                                               /*!< UART_T::WKSTS: RFRTWKF Position        */
N#define UART_WKSTS_RFRTWKF_Msk           (0x1ul << UART_WKSTS_RFRTWKF_Pos)                 /*!< UART_T::WKSTS: RFRTWKF Mask            */
N
N#define UART_WKSTS_RS485WKF_Pos          (3)                                               /*!< UART_T::WKSTS: RS485WKF Position       */
N#define UART_WKSTS_RS485WKF_Msk          (0x1ul << UART_WKSTS_RS485WKF_Pos)                /*!< UART_T::WKSTS: RS485WKF Mask           */
N
N#define UART_WKSTS_TOUTWKF_Pos           (4)                                               /*!< UART_T::WKSTS: TOUTWKF Position        */
N#define UART_WKSTS_TOUTWKF_Msk           (0x1ul << UART_WKSTS_TOUTWKF_Pos)                 /*!< UART_T::WKSTS: TOUTWKF Mask            */
N
N#define UART_DWKCOMP_STCOMP_Pos          (0)                                               /*!< UART_T::DWKCOMP: STCOMP Position       */
N#define UART_DWKCOMP_STCOMP_Msk          (0xfffful << UART_DWKCOMP_STCOMP_Pos)             /*!< UART_T::DWKCOMP: STCOMP Mask           */
N
N/**@}*/ /* UART_CONST */
N/**@}*/ /* end of UART register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __UART_REG_H__ */
L 178 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "ui2c_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\ui2c_reg.h" 1
N/**************************************************************************//**
N * @file     ui2c_reg.h
N * @version  V1.00
N * @brief    UI2C register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __UI2C_REG_H__
N#define __UI2C_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup UI2C I2C Mode of USCI Controller (UI2C)
N    Memory Mapped Structure for UI2C Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var UI2C_T::CTL
N     * Offset: 0x00  USCI Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |FUNMODE   |Function Mode
N     * |        |          |This bit field selects the protocol for this USCI controller.
N     * |        |          |Selecting a protocol that is not available or a reserved combination disables the USCI.
N     * |        |          |When switching between two protocols, the USCI has to be disabled before selecting a new protocol.
N     * |        |          |Simultaneously, the USCI will be reset when user write 000 to FUNMODE.
N     * |        |          |000 = The USCI is disabled. All protocol related state machines are set to idle state.
N     * |        |          |001 = The SPI protocol is selected.
N     * |        |          |010 = The UART protocol is selected.
N     * |        |          |100 = The I2C protocol is selected.
N     * |        |          |Note: Other bit combinations are reserved.
N     * @var UI2C_T::BRGEN
N     * Offset: 0x08  USCI Baud Rate Generator Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RCLKSEL   |Reference Clock Source Selection
N     * |        |          |This bit selects the source signal of reference clock (fREF_CLK).
N     * |        |          |0 = Peripheral device clock fPCLK.
N     * |        |          |1 = Reserved.
N     * |[1]     |PTCLKSEL  |Protocol Clock Source Selection
N     * |        |          |This bit selects the source signal of protocol clock (fPROT_CLK).
N     * |        |          |0 = Reference clock fREF_CLK.
N     * |        |          |1 = fREF_CLK2 (its frequency is half of fREF_CLK).
N     * |[3:2]   |SPCLKSEL  |Sample Clock Source Selection
N     * |        |          |This bit field used for the clock source selection of a sample clock (fSAMP_CLK) for the protocol processor.
N     * |        |          |00 = fSAMP_CLK = fDIV_CLK.
N     * |        |          |01 = fSAMP_CLK = fPROT_CLK.
N     * |        |          |10 = fSAMP_CLK = fSCLK.
N     * |        |          |11 = fSAMP_CLK = fREF_CLK.
N     * |[4]     |TMCNTEN   |Time Measurement Counter Enable Bit
N     * |        |          |This bit enables the 10-bit timing measurement counter.
N     * |        |          |0 = Time measurement counter is Disabled.
N     * |        |          |1 = Time measurement counter is Enabled.
N     * |[5]     |TMCNTSRC  |Time Measurement Counter Clock Source Selection
N     * |        |          |0 = Time measurement counter with fPROT_CLK.
N     * |        |          |1 = Time measurement counter with fDIV_CLK.
N     * |[9:8]   |PDSCNT    |Pre-divider for Sample Counter
N     * |        |          |This bit field defines the divide ratio of the clock division from sample clock fSAMP_CLK.
N     * |        |          |The divided frequency fPDS_CNT = fSAMP_CLK / (PDSCNT+1).
N     * |[14:10] |DSCNT     |Denominator for Sample Counter
N     * |        |          |This bit field defines the divide ratio of the sample clock fSAMP_CLK.
N     * |        |          |The divided frequency fDS_CNT = fPDS_CNT / (DSCNT+1).
N     * |[25:16] |CLKDIV    |Clock Divider
N     * |        |          |This bit field defines the ratio between the protocol clock frequency fPROT_CLK and the clock divider frequency fDIV_CLK (fDIV_CLK = fPROT_CLK / (CLKDIV+1) ).
N     * @var UI2C_T::LINECTL
N     * Offset: 0x2C  USCI Line Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |LSB       |LSB First Transmission Selection
N     * |        |          |0 = The MSB, which bit of transmit/receive data buffer depends on the setting of DWIDTH, is transmitted/received first.
N     * |        |          |1 = The LSB, the bit 0 of data buffer, will be transmitted/received first.
N     * |[11:8]  |DWIDTH    |Word Length of Transmission
N     * |        |          |This bit field defines the data word length (amount of bits) for reception and transmission.
N     * |        |          |The data word is always right-aligned in the data buffer.
N     * |        |          |USCI support word length from 4 to 16 bits.
N     * |        |          |0x0: The data word contains 16 bits located at bit positions [15:0].
N     * |        |          |0x1: Reserved.
N     * |        |          |0x2: Reserved.
N     * |        |          |0x3: Reserved.
N     * |        |          |0x4: The data word contains 4 bits located at bit positions [3:0].
N     * |        |          |0x5: The data word contains 5 bits located at bit positions [4:0].
N     * |        |          |...
N     * |        |          |0xF: The data word contains 15 bits located at bit positions [14:0].
N     * @var UI2C_T::TXDAT
N     * Offset: 0x30  USCI Transmit Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |TXDAT     |Transmit Data
N     * |        |          |Software can use this bit field to write 16-bit transmit data for transmission.
N     * @var UI2C_T::RXDAT
N     * Offset: 0x34  USCI Receive Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RXDAT     |Received Data
N     * |        |          |This bit field monitors the received data which stored in receive data buffer.
N     * |        |          |Note: In I2C protocol, RXDAT[12:8] indicate the different transmission conditions which defined in I2C.
N     * @var UI2C_T::DEVADDR0
N     * Offset: 0x44  USCI Device Address Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |DEVADDR   |Device   Address
N     * |        |          |In I2C   protocol, this bit field contains the programmed slave address.
N     * |        |          |If the first   received address byte are 1111 0AAXB, the AA bits are compared to   the bits DEVADDR[9:8] to check for address match, where the X is R/W bit.
N     * |        |          |Then   the second address byte is also compared to DEVADDR[7:0].
N     * |        |          |Note1: The DEVADDR [9:7] must be set 3'b000 when I2C operating in   7-bit address mode.
N     * |        |          |Note2: When software set 10'h000, the address can not be used.
N     * @var UI2C_T::DEVADDR1
N     * Offset: 0x48  USCI Device Address Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |DEVADDR   |Device   Address
N     * |        |          |In I2C   protocol, this bit field contains the programmed slave address.
N     * |        |          |If the first   received address byte are 1111 0AAXB, the AA bits are compared to   the bits DEVADDR[9:8] to check for address match, where the X is R/W bit.
N     * |        |          |Then   the second address byte is also compared to DEVADDR[7:0].
N     * |        |          |Note1: The DEVADDR [9:7] must be set 3'b000 when I2C operating in   7-bit address mode.
N     * |        |          |Note2: When software set 10'h000, the address can not be used.
N     * @var UI2C_T::ADDRMSK0
N     * Offset: 0x4C  USCI Device Address Mask Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |ADDRMSK   |USCI Device Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care).
N     * |        |          |USCI support multiple address recognition with two address mask register.
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care.
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * |        |          |Note: The wake-up function can not use address mask.
N     * @var UI2C_T::ADDRMSK1
N     * Offset: 0x50  USCI Device Address Mask Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |ADDRMSK   |USCI Device Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care).
N     * |        |          |USCI support multiple address recognition with two address mask register.
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care.
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * |        |          |Note: The wake-up function can not use address mask.
N     * @var UI2C_T::WKCTL
N     * Offset: 0x54  USCI Wake-up Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKEN      |Wake-up Enable Bit
N     * |        |          |0 = Wake-up function Disabled.
N     * |        |          |1 = Wake-up function Enabled.
N     * |[1]     |WKADDREN  |Wake-up Address Match Enable Bit
N     * |        |          |0 = The chip is woken up according data toggle.
N     * |        |          |1 = The chip is woken up according address match.
N     * @var UI2C_T::WKSTS
N     * Offset: 0x58  USCI Wake-up Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKF       |Wake-up Flag
N     * |        |          |When chip is woken up from Power-down mode, this bit is set to 1.
N     * |        |          |Software can write 1 to clear this bit.
N     * @var UI2C_T::PROTCTL
N     * Offset: 0x5C  USCI Protocol Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |GCFUNC    |General Call Function
N     * |        |          |0 = General Call Function Disabled.
N     * |        |          |1 = General Call Function Enabled.
N     * |[1]     |AA        |Assert Acknowledge Control
N     * |        |          |When AA =1 prior to address or data received, an acknowledged (low level to SDA) will be returned during the acknowledge clock pulse on the SCL line when 1.) A slave is acknowledging the address sent from master, 2.) The receiver devices are acknowledging the data sent by transmitter.
N     * |        |          |When AA=0 prior to address or data received, a Not acknowledged (high level to SDA) will be returned during the acknowledge clock pulse on the SCL line.
N     * |[2]     |STO       |I2C STOP Control
N     * |        |          |In Master mode, setting STO to transmit a STOP condition to bus then I2C hardware will check the bus condition if a STOP condition is detected this bit will be cleared by hardware automatically.
N     * |        |          |In a slave mode, setting STO resets I2C hardware to the defined "not addressed" slave mode when bus error (UI2C_PROTSTS.ERRIF = 1).
N     * |[3]     |STA       |I2C START Control
N     * |        |          |Setting STA to logic 1 to enter Master mode, the I2C hardware sends a START or repeat START condition to bus when the bus is free.
N     * |[4]     |ADDR10EN  |Address 10-bit Function Enable Bit
N     * |        |          |0 = Address match 10 bit function Disabled.
N     * |        |          |1 = Address match 10 bit function Enabled.
N     * |[5]     |PTRG      |I2C Protocol Trigger (Write Only)
N     * |        |          |When a new state is present in the UI2C_PROTSTS register, if the related interrupt enable bits are set, the I2C interrupt is requested.
N     * |        |          |It must write one by software to this bit after the related interrupt flags are set to 1 and the I2C protocol function will go ahead until the STOP is active or the PROTEN is disabled.
N     * |        |          |0 = I2C's stretch disabled and the I2C protocol function will go ahead.
N     * |        |          |1 = I2C's stretch active.
N     * |[8]     |SCLOUTEN  |SCL Output Enable Bit
N     * |        |          |This bit enables monitor pulling SCL to low.
N     * |        |          |This monitor will pull SCL to low until it has had time to respond to an I2C interrupt.
N     * |        |          |0 = SCL output will be forced high due to open drain mechanism.
N     * |        |          |1 = I2C module may act as a slave peripheral just like in normal operation, the I2C holds the clock line low until it has had time to clear I2C interrupt.
N     * |[9]     |MONEN     |Monitor Mode Enable Bit
N     * |        |          |This bit enables monitor mode.
N     * |        |          |In monitor mode the SDA output will be put in high impedance mode.
N     * |        |          |This prevents the I2C module from outputting data of any kind (including ACK) onto the I2C data bus.
N     * |        |          |0 = The monitor mode Disabled.
N     * |        |          |1 = The monitor mode Enabled.
N     * |        |          |Note: Depending on the state of the SCLOUTEN bit, the SCL output may be also forced high, preventing the module from having control over the I2C clock line.
N     * |[25:16] |TOCNT     |Time-out Clock Cycle
N     * |        |          |This bit field indicates how many clock cycle selected by TMCNTSRC (UI2C_BRGEN [5]) when each interrupt flags are clear.
N     * |        |          |The time-out is enable when TOCNT bigger than 0.
N     * |        |          |Note: The TMCNTSRC (UI2C_BRGEN [5]) must be set zero on I2C mode.
N     * |[31]    |PROTEN    |I2C Protocol Enable Bit
N     * |        |          |0 = I2C Protocol Disabled.
N     * |        |          |1 = I2C Protocol Enabled.
N     * @var UI2C_T::PROTIEN
N     * Offset: 0x60  USCI Protocol Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TOIEN     |Time-out Interrupt Enable Bit
N     * |        |          |In I2C protocol, this bit enables the interrupt generation in case of a time-out event.
N     * |        |          |0 = The time-out interrupt Disabled.
N     * |        |          |1 = The time-out interrupt Enabled.
N     * |[1]     |STARIEN   |START Condition Received Interrupt Enable Bit
N     * |        |          |This bit enables the generation of a protocol interrupt if a START condition is detected.
N     * |        |          |0 = The start condition interrupt Disabled.
N     * |        |          |1 = The start condition interrupt Enabled.
N     * |[2]     |STORIEN   |STOP Condition Received Interrupt Enable Bit
N     * |        |          |This bit enables the generation of a protocol interrupt if a STOP condition is detected.
N     * |        |          |0 = The stop condition interrupt Disabled.
N     * |        |          |1 = The stop condition interrupt Enabled.
N     * |[3]     |NACKIEN   |Non - Acknowledge Interrupt Enable Bit
N     * |        |          |This bit enables the generation of a protocol interrupt if a Non - acknowledge is detected by a master.
N     * |        |          |0 = The non - acknowledge interrupt Disabled.
N     * |        |          |1 = The non - acknowledge interrupt Enabled.
N     * |[4]     |ARBLOIEN  |Arbitration Lost Interrupt Enable Bit
N     * |        |          |This bit enables the generation of a protocol interrupt if an arbitration lost event is detected.
N     * |        |          |0 = The arbitration lost interrupt Disabled.
N     * |        |          |1 = The arbitration lost interrupt Enabled.
N     * |[5]     |ERRIEN    |Error Interrupt Enable Bit
N     * |        |          |This bit enables the generation of a protocol interrupt if an I2C error condition is detected (indicated by ERRIF (UI2C_PROTSTS [12])).
N     * |        |          |0 = The error interrupt Disabled.
N     * |        |          |1 = The error interrupt Enabled.
N     * |[6]     |ACKIEN    |Acknowledge Interrupt Enable Bit
N     * |        |          |This bit enables the generation of a protocol interrupt if an acknowledge is detected by a master.
N     * |        |          |0 = The acknowledge interrupt Disabled.
N     * |        |          |1 = The acknowledge interrupt Enabled.
N     * @var UI2C_T::PROTSTS
N     * Offset: 0x64  USCI Protocol Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5]     |TOIF      |Time-out Interrupt Flag
N     * |        |          |0 = A time-out interrupt status has not occurred.
N     * |        |          |1 = A time-out interrupt status has occurred.
N     * |        |          |Note: It is cleared by software writing 1 into this bit.
N     * |[6]     |ONBUSY    |On Bus Busy
N     * |        |          |Indicates that a communication is in progress on the bus.
N     * |        |          |It is set by hardware when a START condition is detected.
N     * |        |          |It is cleared by hardware when a STOP condition is detected.
N     * |        |          |0 = The bus is IDLE (both SCLK and SDA High).
N     * |        |          |1 = The bus is busy.
N     * |[8]     |STARIF    |Start Condition Received Interrupt Flag
N     * |        |          |This bit indicates that a start condition or repeated start condition has been detected on master mode.
N     * |        |          |However, this bit also indicates that a repeated start condition has been detected on slave mode.
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.STARIEN = 1.
N     * |        |          |0 = A start condition has not yet been detected.
N     * |        |          |1 = A start condition has been detected.
N     * |        |          |Note: It is cleared by software writing 1 into this bit.
N     * |[9]     |STORIF    |Stop Condition Received Interrupt Flag
N     * |        |          |This bit indicates that a stop condition has been detected on the I2C bus lines.
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.STORIEN = 1.
N     * |        |          |0 = A stop condition has not yet been detected.
N     * |        |          |1 = A stop condition has been detected.
N     * |        |          |Note1: It is cleared by software writing 1 into this bit.
N     * |[10]    |NACKIF    |Non - Acknowledge Received Interrupt Flag
N     * |        |          |This bit indicates that a non - acknowledge has been received in master mode.
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.NACKIEN = 1.
N     * |        |          |0 = A non - acknowledge has not been received.
N     * |        |          |1 = A non - acknowledge has been received.
N     * |        |          |Note: It is cleared by software writing 1 into this bit.
N     * |[11]    |ARBLOIF   |Arbitration Lost Interrupt Flag
N     * |        |          |This bit indicates that an arbitration has been lost.
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.ARBLOIEN = 1.
N     * |        |          |0 = An arbitration has not been lost.
N     * |        |          |1 = An arbitration has been lost.
N     * |        |          |Note: It is cleared by software writing 1 into this bit.
N     * |[12]    |ERRIF     |Error Interrupt Flag
N     * |        |          |This bit indicates that a Bus Error occurs when a START or STOP condition is present at an illegal position in the formation frame.
N     * |        |          |Example of illegal position are during the serial transfer of an address byte, a data byte or an acknowledge bit.
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.ERRIEN = 1.
N     * |        |          |0 = An I2C error has not been detected.
N     * |        |          |1 = An I2C error has been detected.
N     * |        |          |Note1: It is cleared by software writing 1 into this bit.
N     * |        |          |Note2: This bit is set for slave mode, and user must write 1 into STO register to the defined "not addressed" slave mode.
N     * |[13]    |ACKIF     |Acknowledge Received Interrupt Flag
N     * |        |          |This bit indicates that an acknowledge has been received in master mode.
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.ACKIEN = 1.
N     * |        |          |0 = An acknowledge has not been received.
N     * |        |          |1 = An acknowledge has been received.
N     * |        |          |Note: It is cleared by software writing 1 into this bit.
N     * |[14]    |SLASEL    |Slave Select Status
N     * |        |          |This bit indicates that this device has been selected as slave.
N     * |        |          |0 = The device is not selected as slave.
N     * |        |          |1 = The device is selected as slave.
N     * |        |          |Note: This bit has no interrupt signal, and it will be cleared automatically by hardware.
N     * |[15]    |SLAREAD   |Slave Read Request Status
N     * |        |          |This bit indicates that a slave read request has been detected.
N     * |        |          |0 = A slave R/W bit is 1 has not been detected.
N     * |        |          |1 = A slave R/W bit is 1 has been detected.
N     * |        |          |Note: This bit has no interrupt signal, and it will be cleared automatically by hardware.
N     * |[16]    |WKAKDONE  |Wake-up Address Frame Acknowledge Bit Done
N     * |        |          |0 = The ACK bit cycle of address match frame isn't done.
N     * |        |          |1 = The ACK bit cycle of address match frame is done in power-down.
N     * |        |          |Note: This bit can't release when WKUPIF is set.
N     * |[17]    |WRSTSWK   |Read/Write Status Bit in Address Wake-up Frame
N     * |        |          |0 = Write command be record on the address match wake-up frame.
N     * |        |          |1 = Read command be record on the address match wake-up frame.
N     * |[18]    |BUSHANG   |Bus Hang-up
N     * |        |          |This bit indicates bus hang-up status.
N     * |        |          |There is 4-bit counter count when SCL hold high and refer fSAMP_CLK.
N     * |        |          |The hang-up counter will count to overflow and set this bit when SDA is low.
N     * |        |          |The counter will be reset by falling edge of SCL signal.
N     * |        |          |0 = The bus is normal status for transmission.
N     * |        |          |1 = The bus is hang-up status for transmission.
N     * |        |          |Note: This bit has no interrupt signal, and it will be cleared automatically by hardware when a START condition is present.
N     * |[19]    |ERRARBLO  |Error Arbitration Lost
N     * |        |          |This bit indicates bus arbitration lost due to bigger noise which is can't be filtered by input processor.
N     * |        |          |The I2C can send start condition when ERRARBLO is set.
N     * |        |          |Thus this bit doesn't be cared on slave mode.
N     * |        |          |0 = The bus is normal status for transmission.
N     * |        |          |1 = The bus is error arbitration lost status for transmission.
N     * |        |          |Note: This bit has no interrupt signal, and it will be cleared automatically by hardware when a START condition is present.
N     * @var UI2C_T::ADMAT
N     * Offset: 0x88  I2C Slave Match Address Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ADMAT0    |USCI Address 0 Match Status Register
N     * |        |          |When address 0 is matched, hardware will inform which address used.
N     * |        |          |This bit will set to 1, and software can write 1 to clear this bit.
N     * |[1]     |ADMAT1    |USCI Address 1 Match Status Register
N     * |        |          |When address 1 is matched, hardware will inform which address used.
N     * |        |          |This bit will set to 1, and software can write 1 to clear this bit.
N     * @var UI2C_T::TMCTL
N     * Offset: 0x8C  I2C Timing Configure Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]   |STCTL     |Setup Time Configure Control
N     * |        |          |This field is used to generate a delay timing between SDA edge and SCL rising edge in transmission mode.
N     * |        |          |The delay setup time is numbers of peripheral clock = STCTL x fPCLK.
N     * |[24:16] |HTCTL     |Hold Time Configure Control
N     * |        |          |This field is used to generate the delay timing between SCL falling edge SDA edge in
N     * |        |          |transmission mode.
N     * |        |          |The delay hold time is numbers of peripheral clock = HTCTL x fPCLK.
N     * |        |          |Note: Hold time adjust function can only work in master mode, when slave mode, this field should set as 0.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] USCI Control Register                                            */
X    volatile uint32_t CTL;                    
N    __I  uint32_t RESERVE0[1];
X    volatile const  uint32_t RESERVE0[1];
N    __IO uint32_t BRGEN;                 /*!< [0x0008] USCI Baud Rate Generator Register                                */
X    volatile uint32_t BRGEN;                  
N    __I  uint32_t RESERVE1[8];
X    volatile const  uint32_t RESERVE1[8];
N    __IO uint32_t LINECTL;               /*!< [0x002c] USCI Line Control Register                                       */
X    volatile uint32_t LINECTL;                
N    __O  uint32_t TXDAT;                 /*!< [0x0030] USCI Transmit Data Register                                      */
X    volatile  uint32_t TXDAT;                  
N    __I  uint32_t RXDAT;                 /*!< [0x0034] USCI Receive Data Register                                       */
X    volatile const  uint32_t RXDAT;                  
N    __I  uint32_t RESERVE2[3];
X    volatile const  uint32_t RESERVE2[3];
N    __IO uint32_t DEVADDR0;              /*!< [0x0044] USCI Device Address Register 0                                   */
X    volatile uint32_t DEVADDR0;               
N    __IO uint32_t DEVADDR1;              /*!< [0x0048] USCI Device Address Register 1                                   */
X    volatile uint32_t DEVADDR1;               
N    __IO uint32_t ADDRMSK0;              /*!< [0x004c] USCI Device Address Mask Register 0                              */
X    volatile uint32_t ADDRMSK0;               
N    __IO uint32_t ADDRMSK1;              /*!< [0x0050] USCI Device Address Mask Register 1                              */
X    volatile uint32_t ADDRMSK1;               
N    __IO uint32_t WKCTL;                 /*!< [0x0054] USCI Wake-up Control Register                                    */
X    volatile uint32_t WKCTL;                  
N    __IO uint32_t WKSTS;                 /*!< [0x0058] USCI Wake-up Status Register                                     */
X    volatile uint32_t WKSTS;                  
N    __IO uint32_t PROTCTL;               /*!< [0x005c] USCI Protocol Control Register                                   */
X    volatile uint32_t PROTCTL;                
N    __IO uint32_t PROTIEN;               /*!< [0x0060] USCI Protocol Interrupt Enable Register                          */
X    volatile uint32_t PROTIEN;                
N    __IO uint32_t PROTSTS;               /*!< [0x0064] USCI Protocol Status Register                                    */
X    volatile uint32_t PROTSTS;                
N    __I  uint32_t RESERVE3[8];
X    volatile const  uint32_t RESERVE3[8];
N    __IO uint32_t ADMAT;                 /*!< [0x0088] I2C Slave Match Address Register                                 */
X    volatile uint32_t ADMAT;                  
N    __IO uint32_t TMCTL;                 /*!< [0x008c] I2C Timing Configure Control Register                            */
X    volatile uint32_t TMCTL;                  
N
N} UI2C_T;
N
N/**
N    @addtogroup UI2C_CONST UI2C Bit Field Definition
N    Constant Definitions for UI2C Controller
N@{ */
N
N#define UI2C_CTL_FUNMODE_Pos          (0)                                            /*!< UI2C_T::CTL: FUNMODE Position       */
N#define UI2C_CTL_FUNMODE_Msk          (0x7ul << UI2C_CTL_FUNMODE_Pos)                /*!< UI2C_T::CTL: FUNMODE Mask           */
N
N#define UI2C_BRGEN_RCLKSEL_Pos        (0)                                            /*!< UI2C_T::BRGEN: RCLKSEL Position     */
N#define UI2C_BRGEN_RCLKSEL_Msk        (0x1ul << UI2C_BRGEN_RCLKSEL_Pos)              /*!< UI2C_T::BRGEN: RCLKSEL Mask         */
N
N#define UI2C_BRGEN_PTCLKSEL_Pos       (1)                                            /*!< UI2C_T::BRGEN: PTCLKSEL Position    */
N#define UI2C_BRGEN_PTCLKSEL_Msk       (0x1ul << UI2C_BRGEN_PTCLKSEL_Pos)             /*!< UI2C_T::BRGEN: PTCLKSEL Mask        */
N
N#define UI2C_BRGEN_SPCLKSEL_Pos       (2)                                            /*!< UI2C_T::BRGEN: SPCLKSEL Position    */
N#define UI2C_BRGEN_SPCLKSEL_Msk       (0x3ul << UI2C_BRGEN_SPCLKSEL_Pos)             /*!< UI2C_T::BRGEN: SPCLKSEL Mask        */
N
N#define UI2C_BRGEN_TMCNTEN_Pos        (4)                                            /*!< UI2C_T::BRGEN: TMCNTEN Position     */
N#define UI2C_BRGEN_TMCNTEN_Msk        (0x1ul << UI2C_BRGEN_TMCNTEN_Pos)              /*!< UI2C_T::BRGEN: TMCNTEN Mask         */
N
N#define UI2C_BRGEN_TMCNTSRC_Pos       (5)                                            /*!< UI2C_T::BRGEN: TMCNTSRC Position    */
N#define UI2C_BRGEN_TMCNTSRC_Msk       (0x1ul << UI2C_BRGEN_TMCNTSRC_Pos)             /*!< UI2C_T::BRGEN: TMCNTSRC Mask        */
N
N#define UI2C_BRGEN_PDSCNT_Pos         (8)                                            /*!< UI2C_T::BRGEN: PDSCNT Position      */
N#define UI2C_BRGEN_PDSCNT_Msk         (0x3ul << UI2C_BRGEN_PDSCNT_Pos)               /*!< UI2C_T::BRGEN: PDSCNT Mask          */
N
N#define UI2C_BRGEN_DSCNT_Pos          (10)                                           /*!< UI2C_T::BRGEN: DSCNT Position       */
N#define UI2C_BRGEN_DSCNT_Msk          (0x1ful << UI2C_BRGEN_DSCNT_Pos)               /*!< UI2C_T::BRGEN: DSCNT Mask           */
N
N#define UI2C_BRGEN_CLKDIV_Pos         (16)                                           /*!< UI2C_T::BRGEN: CLKDIV Position      */
N#define UI2C_BRGEN_CLKDIV_Msk         (0x3fful << UI2C_BRGEN_CLKDIV_Pos)             /*!< UI2C_T::BRGEN: CLKDIV Mask          */
N
N#define UI2C_LINECTL_LSB_Pos          (0)                                            /*!< UI2C_T::LINECTL: LSB Position       */
N#define UI2C_LINECTL_LSB_Msk          (0x1ul << UI2C_LINECTL_LSB_Pos)                /*!< UI2C_T::LINECTL: LSB Mask           */
N
N#define UI2C_LINECTL_DWIDTH_Pos       (8)                                            /*!< UI2C_T::LINECTL: DWIDTH Position    */
N#define UI2C_LINECTL_DWIDTH_Msk       (0xful << UI2C_LINECTL_DWIDTH_Pos)             /*!< UI2C_T::LINECTL: DWIDTH Mask        */
N
N#define UI2C_TXDAT_TXDAT_Pos          (0)                                            /*!< UI2C_T::TXDAT: TXDAT Position       */
N#define UI2C_TXDAT_TXDAT_Msk          (0xfffful << UI2C_TXDAT_TXDAT_Pos)             /*!< UI2C_T::TXDAT: TXDAT Mask           */
N
N#define UI2C_RXDAT_RXDAT_Pos          (0)                                            /*!< UI2C_T::RXDAT: RXDAT Position       */
N#define UI2C_RXDAT_RXDAT_Msk          (0xfffful << UI2C_RXDAT_RXDAT_Pos)             /*!< UI2C_T::RXDAT: RXDAT Mask           */
N
N#define UI2C_DEVADDR0_DEVADDR_Pos     (0)                                            /*!< UI2C_T::DEVADDR0: DEVADDR Position  */
N#define UI2C_DEVADDR0_DEVADDR_Msk     (0x3fful << UI2C_DEVADDR0_DEVADDR_Pos)         /*!< UI2C_T::DEVADDR0: DEVADDR Mask      */
N
N#define UI2C_DEVADDR1_DEVADDR_Pos     (0)                                            /*!< UI2C_T::DEVADDR1: DEVADDR Position  */
N#define UI2C_DEVADDR1_DEVADDR_Msk     (0x3fful << UI2C_DEVADDR1_DEVADDR_Pos)         /*!< UI2C_T::DEVADDR1: DEVADDR Mask      */
N
N#define UI2C_ADDRMSK0_ADDRMSK_Pos     (0)                                            /*!< UI2C_T::ADDRMSK0: ADDRMSK Position  */
N#define UI2C_ADDRMSK0_ADDRMSK_Msk     (0x3fful << UI2C_ADDRMSK0_ADDRMSK_Pos)         /*!< UI2C_T::ADDRMSK0: ADDRMSK Mask      */
N
N#define UI2C_ADDRMSK1_ADDRMSK_Pos     (0)                                            /*!< UI2C_T::ADDRMSK1: ADDRMSK Position  */
N#define UI2C_ADDRMSK1_ADDRMSK_Msk     (0x3fful << UI2C_ADDRMSK1_ADDRMSK_Pos)         /*!< UI2C_T::ADDRMSK1: ADDRMSK Mask      */
N
N#define UI2C_WKCTL_WKEN_Pos           (0)                                            /*!< UI2C_T::WKCTL: WKEN Position        */
N#define UI2C_WKCTL_WKEN_Msk           (0x1ul << UI2C_WKCTL_WKEN_Pos)                 /*!< UI2C_T::WKCTL: WKEN Mask            */
N
N#define UI2C_WKCTL_WKADDREN_Pos       (1)                                            /*!< UI2C_T::WKCTL: WKADDREN Position    */
N#define UI2C_WKCTL_WKADDREN_Msk       (0x1ul << UI2C_WKCTL_WKADDREN_Pos)             /*!< UI2C_T::WKCTL: WKADDREN Mask        */
N
N#define UI2C_WKSTS_WKF_Pos            (0)                                            /*!< UI2C_T::WKSTS: WKF Position         */
N#define UI2C_WKSTS_WKF_Msk            (0x1ul << UI2C_WKSTS_WKF_Pos)                  /*!< UI2C_T::WKSTS: WKF Mask             */
N
N#define UI2C_PROTCTL_GCFUNC_Pos       (0)                                            /*!< UI2C_T::PROTCTL: GCFUNC Position    */
N#define UI2C_PROTCTL_GCFUNC_Msk       (0x1ul << UI2C_PROTCTL_GCFUNC_Pos)             /*!< UI2C_T::PROTCTL: GCFUNC Mask        */
N
N#define UI2C_PROTCTL_AA_Pos           (1)                                            /*!< UI2C_T::PROTCTL: AA Position        */
N#define UI2C_PROTCTL_AA_Msk           (0x1ul << UI2C_PROTCTL_AA_Pos)                 /*!< UI2C_T::PROTCTL: AA Mask            */
N
N#define UI2C_PROTCTL_STO_Pos          (2)                                            /*!< UI2C_T::PROTCTL: STO Position       */
N#define UI2C_PROTCTL_STO_Msk          (0x1ul << UI2C_PROTCTL_STO_Pos)                /*!< UI2C_T::PROTCTL: STO Mask           */
N
N#define UI2C_PROTCTL_STA_Pos          (3)                                            /*!< UI2C_T::PROTCTL: STA Position       */
N#define UI2C_PROTCTL_STA_Msk          (0x1ul << UI2C_PROTCTL_STA_Pos)                /*!< UI2C_T::PROTCTL: STA Mask           */
N
N#define UI2C_PROTCTL_ADDR10EN_Pos     (4)                                            /*!< UI2C_T::PROTCTL: ADDR10EN Position  */
N#define UI2C_PROTCTL_ADDR10EN_Msk     (0x1ul << UI2C_PROTCTL_ADDR10EN_Pos)           /*!< UI2C_T::PROTCTL: ADDR10EN Mask      */
N
N#define UI2C_PROTCTL_PTRG_Pos         (5)                                            /*!< UI2C_T::PROTCTL: PTRG Position      */
N#define UI2C_PROTCTL_PTRG_Msk         (0x1ul << UI2C_PROTCTL_PTRG_Pos)               /*!< UI2C_T::PROTCTL: PTRG Mask          */
N
N#define UI2C_PROTCTL_SCLOUTEN_Pos     (8)                                            /*!< UI2C_T::PROTCTL: SCLOUTEN Position  */
N#define UI2C_PROTCTL_SCLOUTEN_Msk     (0x1ul << UI2C_PROTCTL_SCLOUTEN_Pos)           /*!< UI2C_T::PROTCTL: SCLOUTEN Mask      */
N
N#define UI2C_PROTCTL_MONEN_Pos        (9)                                            /*!< UI2C_T::PROTCTL: MONEN Position     */
N#define UI2C_PROTCTL_MONEN_Msk        (0x1ul << UI2C_PROTCTL_MONEN_Pos)              /*!< UI2C_T::PROTCTL: MONEN Mask         */
N
N#define UI2C_PROTCTL_TOCNT_Pos        (16)                                           /*!< UI2C_T::PROTCTL: TOCNT Position     */
N#define UI2C_PROTCTL_TOCNT_Msk        (0x3fful << UI2C_PROTCTL_TOCNT_Pos)            /*!< UI2C_T::PROTCTL: TOCNT Mask         */
N
N#define UI2C_PROTCTL_PROTEN_Pos       (31)                                           /*!< UI2C_T::PROTCTL: PROTEN Position    */
N#define UI2C_PROTCTL_PROTEN_Msk       (0x1ul << UI2C_PROTCTL_PROTEN_Pos)             /*!< UI2C_T::PROTCTL: PROTEN Mask        */
N
N#define UI2C_PROTIEN_TOIEN_Pos        (0)                                            /*!< UI2C_T::PROTIEN: TOIEN Position     */
N#define UI2C_PROTIEN_TOIEN_Msk        (0x1ul << UI2C_PROTIEN_TOIEN_Pos)              /*!< UI2C_T::PROTIEN: TOIEN Mask         */
N
N#define UI2C_PROTIEN_STARIEN_Pos      (1)                                            /*!< UI2C_T::PROTIEN: STARIEN Position   */
N#define UI2C_PROTIEN_STARIEN_Msk      (0x1ul << UI2C_PROTIEN_STARIEN_Pos)            /*!< UI2C_T::PROTIEN: STARIEN Mask       */
N
N#define UI2C_PROTIEN_STORIEN_Pos      (2)                                            /*!< UI2C_T::PROTIEN: STORIEN Position   */
N#define UI2C_PROTIEN_STORIEN_Msk      (0x1ul << UI2C_PROTIEN_STORIEN_Pos)            /*!< UI2C_T::PROTIEN: STORIEN Mask       */
N
N#define UI2C_PROTIEN_NACKIEN_Pos      (3)                                            /*!< UI2C_T::PROTIEN: NACKIEN Position   */
N#define UI2C_PROTIEN_NACKIEN_Msk      (0x1ul << UI2C_PROTIEN_NACKIEN_Pos)            /*!< UI2C_T::PROTIEN: NACKIEN Mask       */
N
N#define UI2C_PROTIEN_ARBLOIEN_Pos     (4)                                            /*!< UI2C_T::PROTIEN: ARBLOIEN Position  */
N#define UI2C_PROTIEN_ARBLOIEN_Msk     (0x1ul << UI2C_PROTIEN_ARBLOIEN_Pos)           /*!< UI2C_T::PROTIEN: ARBLOIEN Mask      */
N
N#define UI2C_PROTIEN_ERRIEN_Pos       (5)                                            /*!< UI2C_T::PROTIEN: ERRIEN Position    */
N#define UI2C_PROTIEN_ERRIEN_Msk       (0x1ul << UI2C_PROTIEN_ERRIEN_Pos)             /*!< UI2C_T::PROTIEN: ERRIEN Mask        */
N
N#define UI2C_PROTIEN_ACKIEN_Pos       (6)                                            /*!< UI2C_T::PROTIEN: ACKIEN Position    */
N#define UI2C_PROTIEN_ACKIEN_Msk       (0x1ul << UI2C_PROTIEN_ACKIEN_Pos)             /*!< UI2C_T::PROTIEN: ACKIEN Mask        */
N
N#define UI2C_PROTSTS_TOIF_Pos         (5)                                            /*!< UI2C_T::PROTSTS: TOIF Position      */
N#define UI2C_PROTSTS_TOIF_Msk         (0x1ul << UI2C_PROTSTS_TOIF_Pos)               /*!< UI2C_T::PROTSTS: TOIF Mask          */
N
N#define UI2C_PROTSTS_ONBUSY_Pos       (6)                                            /*!< UI2C_T::PROTSTS: ONBUSY Position    */
N#define UI2C_PROTSTS_ONBUSY_Msk       (0x1ul << UI2C_PROTSTS_ONBUSY_Pos)             /*!< UI2C_T::PROTSTS: ONBUSY Mask        */
N
N#define UI2C_PROTSTS_STARIF_Pos       (8)                                            /*!< UI2C_T::PROTSTS: STARIF Position    */
N#define UI2C_PROTSTS_STARIF_Msk       (0x1ul << UI2C_PROTSTS_STARIF_Pos)             /*!< UI2C_T::PROTSTS: STARIF Mask        */
N
N#define UI2C_PROTSTS_STORIF_Pos       (9)                                            /*!< UI2C_T::PROTSTS: STORIF Position    */
N#define UI2C_PROTSTS_STORIF_Msk       (0x1ul << UI2C_PROTSTS_STORIF_Pos)             /*!< UI2C_T::PROTSTS: STORIF Mask        */
N
N#define UI2C_PROTSTS_NACKIF_Pos       (10)                                           /*!< UI2C_T::PROTSTS: NACKIF Position    */
N#define UI2C_PROTSTS_NACKIF_Msk       (0x1ul << UI2C_PROTSTS_NACKIF_Pos)             /*!< UI2C_T::PROTSTS: NACKIF Mask        */
N
N#define UI2C_PROTSTS_ARBLOIF_Pos      (11)                                           /*!< UI2C_T::PROTSTS: ARBLOIF Position   */
N#define UI2C_PROTSTS_ARBLOIF_Msk      (0x1ul << UI2C_PROTSTS_ARBLOIF_Pos)            /*!< UI2C_T::PROTSTS: ARBLOIF Mask       */
N
N#define UI2C_PROTSTS_ERRIF_Pos        (12)                                           /*!< UI2C_T::PROTSTS: ERRIF Position     */
N#define UI2C_PROTSTS_ERRIF_Msk        (0x1ul << UI2C_PROTSTS_ERRIF_Pos)              /*!< UI2C_T::PROTSTS: ERRIF Mask         */
N
N#define UI2C_PROTSTS_ACKIF_Pos        (13)                                           /*!< UI2C_T::PROTSTS: ACKIF Position     */
N#define UI2C_PROTSTS_ACKIF_Msk        (0x1ul << UI2C_PROTSTS_ACKIF_Pos)              /*!< UI2C_T::PROTSTS: ACKIF Mask         */
N
N#define UI2C_PROTSTS_SLASEL_Pos       (14)                                           /*!< UI2C_T::PROTSTS: SLASEL Position    */
N#define UI2C_PROTSTS_SLASEL_Msk       (0x1ul << UI2C_PROTSTS_SLASEL_Pos)             /*!< UI2C_T::PROTSTS: SLASEL Mask        */
N
N#define UI2C_PROTSTS_SLAREAD_Pos      (15)                                           /*!< UI2C_T::PROTSTS: SLAREAD Position   */
N#define UI2C_PROTSTS_SLAREAD_Msk      (0x1ul << UI2C_PROTSTS_SLAREAD_Pos)            /*!< UI2C_T::PROTSTS: SLAREAD Mask       */
N
N#define UI2C_PROTSTS_WKAKDONE_Pos     (16)                                           /*!< UI2C_T::PROTSTS: WKAKDONE Position  */
N#define UI2C_PROTSTS_WKAKDONE_Msk     (0x1ul << UI2C_PROTSTS_WKAKDONE_Pos)           /*!< UI2C_T::PROTSTS: WKAKDONE Mask      */
N
N#define UI2C_PROTSTS_WRSTSWK_Pos      (17)                                           /*!< UI2C_T::PROTSTS: WRSTSWK Position   */
N#define UI2C_PROTSTS_WRSTSWK_Msk      (0x1ul << UI2C_PROTSTS_WRSTSWK_Pos)            /*!< UI2C_T::PROTSTS: WRSTSWK Mask       */
N
N#define UI2C_PROTSTS_BUSHANG_Pos      (18)                                           /*!< UI2C_T::PROTSTS: BUSHANG Position   */
N#define UI2C_PROTSTS_BUSHANG_Msk      (0x1ul << UI2C_PROTSTS_BUSHANG_Pos)            /*!< UI2C_T::PROTSTS: BUSHANG Mask       */
N
N#define UI2C_PROTSTS_ERRARBLO_Pos     (19)                                           /*!< UI2C_T::PROTSTS: ERRARBLO Position  */
N#define UI2C_PROTSTS_ERRARBLO_Msk     (0x1ul << UI2C_PROTSTS_ERRARBLO_Pos)           /*!< UI2C_T::PROTSTS: ERRARBLO Mask      */
N
N#define UI2C_ADMAT_ADMAT0_Pos         (0)                                            /*!< UI2C_T::ADMAT: ADMAT0 Position      */
N#define UI2C_ADMAT_ADMAT0_Msk         (0x1ul << UI2C_ADMAT_ADMAT0_Pos)               /*!< UI2C_T::ADMAT: ADMAT0 Mask          */
N
N#define UI2C_ADMAT_ADMAT1_Pos         (1)                                            /*!< UI2C_T::ADMAT: ADMAT1 Position      */
N#define UI2C_ADMAT_ADMAT1_Msk         (0x1ul << UI2C_ADMAT_ADMAT1_Pos)               /*!< UI2C_T::ADMAT: ADMAT1 Mask          */
N
N#define UI2C_TMCTL_STCTL_Pos          (0)                                            /*!< UI2C_T::TMCTL: STCTL Position       */
N#define UI2C_TMCTL_STCTL_Msk          (0x1fful << UI2C_TMCTL_STCTL_Pos)              /*!< UI2C_T::TMCTL: STCTL Mask           */
N
N#define UI2C_TMCTL_HTCTL_Pos          (16)                                           /*!< UI2C_T::TMCTL: HTCTL Position       */
N#define UI2C_TMCTL_HTCTL_Msk          (0x1fful << UI2C_TMCTL_HTCTL_Pos)              /*!< UI2C_T::TMCTL: HTCTL Mask           */
N
N/**@}*/ /* UI2C_CONST */
N/**@}*/ /* end of UI2C register group */
N
N
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __UI2C_REG_H__ */
L 179 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "usbd_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\usbd_reg.h" 1
N/**************************************************************************//**
N * @file     usbd_reg.h
N * @version  V1.00
N * @brief    USBD register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0 
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __USBD_REG_H__
N#define __USBD_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup USBD USB Device Controller(USBD)
N    Memory Mapped Structure for USBD Controller
N@{ */
N
N
N
Ntypedef struct
N{
N
N    /**
N     * @var USBD_EP_T::BUFSEG
N     * Offset: 0x500/0x510/0x520/0x530/0x540/0x550/0x560/0x570  Endpoint Buffer Segmentation Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:3]   |BUFSEG    |Endpoint Buffer Segmentation
N     * |        |          |It is used to indicate the offset address for each endpoint with the USB SRAM starting address The effective starting address of the endpoint is
N     * |        |          |USBD_SRAM address + { BUFSEG[8:3], 3'b000}
N     * |        |          |Where the USBD_SRAM address = USBD_BA+0x100h.
N     * |        |          |Refer to the section 6.17.5.76.21.5.7 for the endpoint SRAM structure and its description.
N     * @var USBD_EP_T::MXPLD
N     * Offset: 0x504/0x514/0x524/0x534/0x544/0x554/0x564/0x574  Endpoint Maximal Payload Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]   |MXPLD     |Maximal Payload
N     * |        |          |Define the data length which is transmitted to host (IN token) or the actual data length which is received from the host (OUT token)
N     * |        |          |It also used to indicate that the endpoint is ready to be transmitted in IN token or received in OUT token.
N     * |        |          |(1) When the register is written by CPU,
N     * |        |          |For IN token, the value of MXPLD is used to define the data length to be transmitted and indicate the data buffer is ready.
N     * |        |          |For OUT token, it means that the controller is ready to receive data from the host and the value of MXPLD is the maximal data length comes from host.
N     * |        |          |(2) When the register is read by CPU,
N     * |        |          |For IN token, the value of MXPLD is indicated by the data length be transmitted to host
N     * |        |          |For OUT token, the value of MXPLD is indicated the actual data length receiving from host.
N     * |        |          |Note: Once MXPLD is written, the data packets will be transmitted/received immediately after IN/OUT token arrived.
N     * @var USBD_EP_T::CFG
N     * Offset: 0x508/0x518/0x528/0x538/0x548/0x558/0x568/0x578  Endpoint Configuration Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |EPNUM     |Endpoint Number
N     * |        |          |These bits are used to define the endpoint number of the current endpoint.
N     * |[4]     |ISOCH     |Isochronous Endpoint
N     * |        |          |This bit is used to set the endpoint as Isochronous endpoint, no handshake.
N     * |        |          |0 = No Isochronous endpoint.
N     * |        |          |1 = Isochronous endpoint.
N     * |[6:5]   |STATE     |Endpoint STATE
N     * |        |          |00 = Endpoint is Disabled.
N     * |        |          |01 = Out endpoint.
N     * |        |          |10 = IN endpoint.
N     * |        |          |11 = Undefined.
N     * |[7]     |DSQSYNC   |Data Sequence Synchronization
N     * |        |          |0 = DATA0 PID.
N     * |        |          |1 = DATA1 PID.
N     * |        |          |Note: It is used to specify the DATA0 or DATA1 PID in the following IN token transaction.
N     * |        |          |Hardware will toggle automatically in IN token base on the bit.
N     * |[9]     |CSTALL    |Clear STALL Response
N     * |        |          |0 = Disable the device to clear the STALL handshake in setup stage.
N     * |        |          |1 = Clear the device to response STALL handshake in setup stage.
N     * @var USBD_EP_T::CFGP
N     * Offset: 0x50C/0x51C/0x52C/0x53C/0x54C/0x55C/0x56C/0x57C  Endpoint Set Stall and Clear In/Out Ready Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CLRRDY    |Clear Ready
N     * |        |          |When the USBD_MXPLDx register is set by user, it means that the endpoint is ready to transmit or receive data.
N     * |        |          |If the user wants to disable this transaction before the transaction start, users can set this bit to 1 to disable it and it is auto clear to 0.
N     * |        |          |For IN token, write '1' to clear the IN token had ready to transmit the data to USB.
N     * |        |          |For OUT token, write '1' to clear the OUT token had ready to receive the data from USB.
N     * |        |          |This bit is write 1 only and is always 0 when it is read back.
N     * |[1]     |SSTALL    |Set STALL
N     * |        |          |0 = Disable the device to response STALL.
N     * |        |          |1 = Set the device to respond STALL automatically.
N     */
N    __IO uint32_t BUFSEG;                /*!< [0x0000] Endpoint Buffer Segmentation Register                            */
X    volatile uint32_t BUFSEG;                 
N    __IO uint32_t MXPLD;                 /*!< [0x0004] Endpoint Maximal Payload Register                                */
X    volatile uint32_t MXPLD;                  
N    __IO uint32_t CFG;                   /*!< [0x0008] Endpoint Configuration Register                                  */
X    volatile uint32_t CFG;                    
N    __IO uint32_t CFGP;                  /*!< [0x000c] Endpoint Set Stall and Clear In/Out Ready Control Register       */
X    volatile uint32_t CFGP;                   
N
N} USBD_EP_T;
N
Ntypedef struct
N{
N    /**
N     * @var USBD_T::INTEN
N     * Offset: 0x00  USB Device Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BUSIEN    |Bus Event Interrupt Enable Bit
N     * |        |          |0 = BUS event interrupt Disabled.
N     * |        |          |1 = BUS event interrupt Enabled.
N     * |[1]     |USBIEN    |USB Event Interrupt Enable Bit
N     * |        |          |0 = USB event interrupt Disabled.
N     * |        |          |1 = USB event interrupt Enabled.
N     * |[2]     |VBDETIEN  |VBUS Detection Interrupt Enable Bit
N     * |        |          |0 = VBUS detection Interrupt Disabled.
N     * |        |          |1 = VBUS detection Interrupt Enabled.
N     * |[3]     |NEVWKIEN  |USB No-event-wake-up Interrupt Enable Bit
N     * |        |          |0 = No-event-wake-up Interrupt Disabled.
N     * |        |          |1 = No-event-wake-up Interrupt Enabled.
N     * |[4]     |SOFIEN    |Start of Frame Interrupt Enable Bit
N     * |        |          |0 = SOF Interrupt Disabled.
N     * |        |          |1 = SOF Interrupt Enabled.
N     * |[8]     |WKEN      |Wake-up Function Enable Bit
N     * |        |          |0 = USB wake-up function Disabled.
N     * |        |          |1 = USB wake-up function Enabled.
N     * |[15]    |INNAKEN   |Active NAK Function and Its Status in IN Token
N     * |        |          |0 = When device responds NAK after receiving IN token, IN NAK status will not be updated to USBD_EPSTS0 register, so that the USB interrupt event will not be asserted.
N     * |        |          |1 = IN NAK status will be updated to USBD_EPSTS0 register and the USB interrupt event will be asserted, when the device responds NAK after receiving IN token.
N     * @var USBD_T::INTSTS
N     * Offset: 0x04  USB Device Interrupt Event Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BUSIF     |BUS Interrupt Status
N     * |        |          |The BUS event means that there is one of the suspense or the resume function in the bus.
N     * |        |          |0 = No BUS event occurred.
N     * |        |          |1 = Bus event occurred; check USBD_ATTR[3:0] to know which kind of bus event was occurred, cleared by write 1 to USBD_INTSTS[0].
N     * |[1]     |USBIF     |USB Event Interrupt Status
N     * |        |          |The USB event includes the SETUP Token, IN Token, OUT ACK, ISO IN, or ISO OUT events in the bus.
N     * |        |          |0 = No USB event occurred.
N     * |        |          |1 = USB event occurred, check EPSTS0~5[2:0] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[1] or EPSTS0~11 and SETUP (USBD_INTSTS[31]).
N     * |[2]     |VBDETIF   |VBUS Detection Interrupt Status
N     * |        |          |0 = There is not attached/detached event in the USB.
N     * |        |          |1 = There is attached/detached event in the USB bus and it is cleared by write 1 to USBD_INTSTS[2].
N     * |[3]     |NEVWKIF   |No-event-wake-up Interrupt Status
N     * |        |          |0 = NEVWK event does not occur.
N     * |        |          |1 = No-event-wake-up event occurred, cleared by write 1 to USBD_INTSTS[3].
N     * |[4]     |SOFIF     |Start of Frame Interrupt Status
N     * |        |          |0 = SOF event does not occur.
N     * |        |          |1 = SOF event occurred, cleared by write 1 to USBD_INTSTS[4].
N     * |[16]    |EPEVT0    |Endpoint 0's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 0.
N     * |        |          |1 = USB event occurred on Endpoint 0, check USBD_EPSTS0[3:0] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[16] or USBD_INTSTS[1].
N     * |[17]    |EPEVT1    |Endpoint 1's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 1.
N     * |        |          |1 = USB event occurred on Endpoint 1, check USBD_EPSTS0[7:4] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[17] or USBD_INTSTS[1].
N     * |[18]    |EPEVT2    |Endpoint 2's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 2.
N     * |        |          |1 = USB event occurred on Endpoint 2, check USBD_EPSTS0[11:8] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[18] or USBD_INTSTS[1].
N     * |[19]    |EPEVT3    |Endpoint 3's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 3.
N     * |        |          |1 = USB event occurred on Endpoint 3, check USBD_EPSTS0[15:12] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[19] or USBD_INTSTS[1].
N     * |[20]    |EPEVT4    |Endpoint 4's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 4.
N     * |        |          |1 = USB event occurred on Endpoint 4, check USBD_EPSTS0[19:16] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[20] or USBD_INTSTS[1].
N     * |[21]    |EPEVT5    |Endpoint 5's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 5.
N     * |        |          |1 = USB event occurred on Endpoint 5, check USBD_EPSTS0[23:20] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[21] or USBD_INTSTS[1].
N     * |[22]    |EPEVT6    |Endpoint 6's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 6.
N     * |        |          |1 = USB event occurred on Endpoint 6, check USBD_EPSTS0[27:24] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[22] or USBD_INTSTS[1].
N     * |[23]    |EPEVT7    |Endpoint 7's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 7.
N     * |        |          |1 = USB event occurred on Endpoint 7, check USBD_EPSTS0[31:28] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[23] or USBD_INTSTS[1].
N     * |[31]    |SETUP     |Setup Event Status
N     * |        |          |0 = No Setup event.
N     * |        |          |1 = Setup event occurred, cleared by write 1 to USBD_INTSTS[31].
N     * @var USBD_T::FADDR
N     * Offset: 0x08  USB Device Function Address Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[6:0]   |FADDR     |USB Device Function Address
N     * @var USBD_T::EPSTS
N     * Offset: 0x0C  USB Device Endpoint Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7]     |OV        |Overrun
N     * |        |          |It indicates that the received data is over the maximum payload number or not.
N     * |        |          |if received data is over the maximum payload number, the extra data will be ignored.
N     * |        |          |0 = No overrun.
N     * |        |          |1 = Out Data is more than the Max Payload in MXPLD register or the Setup Data is more than 8 Bytes.
N     * @var USBD_T::ATTR
N     * Offset: 0x10  USB Device Bus Status and Attribution Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |USBRST    |USB Reset Status (Read Only)
N     * |        |          |0 = Bus no reset.
N     * |        |          |1 = Bus reset when SE0 (single-ended 0) more than 2.5us.
N     * |[1]     |SUSPEND   |Suspend Status (Read Only)
N     * |        |          |0 = Bus no suspend.
N     * |        |          |1 = Bus idle more than 3ms, either cable is plugged off or host is sleeping.
N     * |[2]     |RESUME    |Resume Status (Read Only)
N     * |        |          |0 = No bus resume.
N     * |        |          |1 = Resume from suspend.
N     * |[3]     |TOUT      |Time-out Status (Read Only)
N     * |        |          |When USB Device controller after received setup token or out token, USB controller stay J state to wait data package.
N     * |        |          |If the waiting time exceeds 18-bit length timing, TOUT flag will be generated.
N     * |        |          |0 = No time-out.
N     * |        |          |1 = No Bus response more than 18 bits time.
N     * |[4]     |PHYEN     |PHY Transceiver Function Enable Bit
N     * |        |          |0 = PHY transceiver function Disabled.
N     * |        |          |1 = PHY transceiver function Enabled.
N     * |[5]     |RWAKEUP   |Remote Wake-up
N     * |        |          |0 = Release the USB bus from K state.
N     * |        |          |1 = Force USB bus to K (USB_D+ low, USB_D-: high) state, used for remote wake-up.
N     * |[7]     |USBEN     |USB Controller Enable Bit
N     * |        |          |0 = USB Controller Disabled.
N     * |        |          |1 = USB Controller Enabled.
N     * |[8]     |DPPUEN    |Pull-up Resistor on USB_DP Enable Bit
N     * |        |          |0 = Pull-up resistor in USB_D+ bus Disabled.
N     * |        |          |1 = Pull-up resistor in USB_D+ bus Active.
N     * |[10]    |BYTEM     |CPU Access USB SRAM Size Mode Selection
N     * |        |          |0 = Word mode: The size of the transfer from CPU to USB SRAM can be Word only.
N     * |        |          |1 = Byte mode: The size of the transfer from CPU to USB SRAM can be Byte only.
N     * |[11]    |LPMACK    |LPM Token Acknowledge Enable Bit
N     * |        |          |The NYET/ACK will be returned only on a successful LPM transaction if no errors in both the EXT token and the LPM token and a valid bLinkState = 0001 (L1) is received, else ERROR and STALL will be returned automatically, respectively.
N     * |        |          |0= the valid LPM Token will be NYET.
N     * |        |          |1= the valid LPM Token will be ACK.
N     * |[12]    |L1SUSPEND |LPM L1 Suspend (Read Only)
N     * |        |          |0 = Bus no L1 state suspend.
N     * |        |          |1 = This bit is set by the hardware when LPM command to enter the L1 state is successfully received and acknowledged.
N     * |[13]    |L1RESUME  |LPM L1 Resume (Read Only)
N     * |        |          |0 = Bus no LPM L1 state resume.
N     * |        |          |1 = LPM L1 state Resume from LPM L1 state suspend.
N     * @var USBD_T::VBUSDET
N     * Offset: 0x14  USB Device VBUS Detection Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |VBUSDET   |Device VBUS Detection
N     * |        |          |0 = Controller is not attached to the USB host.
N     * |        |          |1 = Controller is attached to the USB host.
N     * @var USBD_T::STBUFSEG
N     * Offset: 0x18  SETUP Token Buffer Segmentation Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:3]   |STBUFSEG  |SETUP Token Buffer Segmentation
N     * |        |          |It is used to indicate the offset address for the SETUP token with the USB Device SRAM starting address The effective starting address is
N     * |        |          |USBD_SRAM address + {STBUFSEG, 3'b000}
N     * |        |          |Where the USBD_SRAM address = USBD_BA+0x100h.
N     * |        |          |Note: It is used for SETUP token only.
N     * @var USBD_T::EPSTS0
N     * Offset: 0x20  USB Device Endpoint Status Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |EPSTS0    |Endpoint 0 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint.
N     * |        |          |0000 = In ACK.
N     * |        |          |0001 = In NAK.
N     * |        |          |0010 = Out Packet Data0 ACK.
N     * |        |          |0011 = Setup ACK.
N     * |        |          |0110 = Out Packet Data1 ACK.
N     * |        |          |0111 = Isochronous transfer end.
N     * |[7:4]   |EPSTS1    |Endpoint 1 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint.
N     * |        |          |0000 = In ACK.
N     * |        |          |0001 = In NAK.
N     * |        |          |0010 = Out Packet Data0 ACK.
N     * |        |          |0011 = Setup ACK.
N     * |        |          |0110 = Out Packet Data1 ACK.
N     * |        |          |0111 = Isochronous transfer end.
N     * |[11:8]  |EPSTS2    |Endpoint 2 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint.
N     * |        |          |0000 = In ACK.
N     * |        |          |0001 = In NAK.
N     * |        |          |0010 = Out Packet Data0 ACK.
N     * |        |          |0011 = Setup ACK.
N     * |        |          |0110 = Out Packet Data1 ACK.
N     * |        |          |0111 = Isochronous transfer end.
N     * |[15:12] |EPSTS3    |Endpoint 3 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint.
N     * |        |          |0000 = In ACK.
N     * |        |          |0001 = In NAK.
N     * |        |          |0010 = Out Packet Data0 ACK.
N     * |        |          |0011 = Setup ACK.
N     * |        |          |0110 = Out Packet Data1 ACK.
N     * |        |          |0111 = Isochronous transfer end.
N     * |[19:16] |EPSTS4    |Endpoint 4 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint.
N     * |        |          |0000 = In ACK.
N     * |        |          |0001 = In NAK.
N     * |        |          |0010 = Out Packet Data0 ACK.
N     * |        |          |0011 = Setup ACK.
N     * |        |          |0110 = Out Packet Data1 ACK.
N     * |        |          |0111 = Isochronous transfer end.
N     * |[23:20] |EPSTS5    |Endpoint 5 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint.
N     * |        |          |0000 = In ACK.
N     * |        |          |0001 = In NAK.
N     * |        |          |0010 = Out Packet Data0 ACK.
N     * |        |          |0011 = Setup ACK.
N     * |        |          |0110 = Out Packet Data1 ACK.
N     * |        |          |0111 = Isochronous transfer end.
N     * |[27:24] |EPSTS6    |Endpoint 6 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint.
N     * |        |          |0000 = In ACK.
N     * |        |          |0001 = In NAK.
N     * |        |          |0010 = Out Packet Data0 ACK.
N     * |        |          |0011 = Setup ACK.
N     * |        |          |0110 = Out Packet Data1 ACK.
N     * |        |          |0111 = Isochronous transfer end.
N     * |[31:28] |EPSTS7    |Endpoint 7 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint.
N     * |        |          |0000 = In ACK.
N     * |        |          |0001 = In NAK.
N     * |        |          |0010 = Out Packet Data0 ACK.
N     * |        |          |0011 = Setup ACK.
N     * |        |          |0110 = Out Packet Data1 ACK.
N     * |        |          |0111 = Isochronous transfer end.
N     * @var USBD_T::LPMATTR
N     * Offset: 0x88  USB LPM Attribution Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |LPMLINKSTS|LPM Link State
N     * |        |          |These bits contain the bLinkState received with last ACK LPM Token.
N     * |[7:4]   |LPMBESL   |LPM Best Effort Service Latency
N     * |        |          |These bits contain the BESL value received with last ACK LPM Token.
N     * |[8]     |LPMRWAKUP |LPM Remote Wakeup
N     * |        |          |This bit contains the bRemoteWake value received with last ACK LPM Token.
N     * @var USBD_T::FN
N     * Offset: 0x8C  USB Frame Number Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[10:0]  |FN        |Frame Number
N     * |        |          |These bits contain the 11-bits frame number in the last received SOF packet.
N     * @var USBD_T::SE0
N     * Offset: 0x90  USB Device Drive SE0 Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SE0       |Drive Single Ended Zero in USB Bus
N     * |        |          |The Single Ended Zero (SE0) is when both lines (USB_D+ and USB_D-) are being pulled low.
N     * |        |          |0 = Normal operation.
N     * |        |          |1 = Force USB PHY transceiver to drive SE0.
N     */
N    __IO uint32_t INTEN;                 /*!< [0x0000] USB Device Interrupt Enable Register                             */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t INTSTS;                /*!< [0x0004] USB Device Interrupt Event Status Register                       */
X    volatile uint32_t INTSTS;                 
N    __IO uint32_t FADDR;                 /*!< [0x0008] USB Device Function Address Register                             */
X    volatile uint32_t FADDR;                  
N    __I  uint32_t EPSTS;                 /*!< [0x000c] USB Device Endpoint Status Register                              */
X    volatile const  uint32_t EPSTS;                  
N    __IO uint32_t ATTR;                  /*!< [0x0010] USB Device Bus Status and Attribution Register                   */
X    volatile uint32_t ATTR;                   
N    __I  uint32_t VBUSDET;               /*!< [0x0014] USB Device VBUS Detection Register                               */
X    volatile const  uint32_t VBUSDET;                
N    __IO uint32_t STBUFSEG;              /*!< [0x0018] SETUP Token Buffer Segmentation Register                         */
X    volatile uint32_t STBUFSEG;               
N    /// @cond HIDDEN_SYMBOLS
N    __I  uint32_t RESERVE0[1];
X    volatile const  uint32_t RESERVE0[1];
N    /// @endcond //HIDDEN_SYMBOLS
N    __I  uint32_t EPSTS0;                /*!< [0x0020] USB Device Endpoint Status Register 0                            */
X    volatile const  uint32_t EPSTS0;                 
N    /// @cond HIDDEN_SYMBOLS
N    __I  uint32_t RESERVE1[25];
X    volatile const  uint32_t RESERVE1[25];
N    /// @endcond //HIDDEN_SYMBOLS
N    __I  uint32_t LPMATTR;               /*!< [0x0088] USB LPM Attribution Register                                     */
X    volatile const  uint32_t LPMATTR;                
N    __I  uint32_t FN;                    /*!< [0x008c] USB Frame number Register                                        */
X    volatile const  uint32_t FN;                     
N    __IO uint32_t SE0;                   /*!< [0x0090] USB Device Drive SE0 Control Register                            */
X    volatile uint32_t SE0;                    
N    /// @cond HIDDEN_SYMBOLS
N    __I  uint32_t RESERVE2[283];
X    volatile const  uint32_t RESERVE2[283];
N    /// @endcond //HIDDEN_SYMBOLS
N    USBD_EP_T EP[8];                    /*!< [0x0500~0x5BC] USB Device Endpoints(0~7)                                   */
N
N} USBD_T;
N
N/**
N    @addtogroup USBD_CONST USBD Bit Field Definition
N    Constant Definitions for USBD Controller
N@{ */
N
N#define USBD_INTEN_BUSIEN_Pos            (0)                                               /*!< USBD_T::INTEN: BUSIEN Position         */
N#define USBD_INTEN_BUSIEN_Msk            (0x1ul << USBD_INTEN_BUSIEN_Pos)                  /*!< USBD_T::INTEN: BUSIEN Mask             */
N
N#define USBD_INTEN_USBIEN_Pos            (1)                                               /*!< USBD_T::INTEN: USBIEN Position         */
N#define USBD_INTEN_USBIEN_Msk            (0x1ul << USBD_INTEN_USBIEN_Pos)                  /*!< USBD_T::INTEN: USBIEN Mask             */
N
N#define USBD_INTEN_VBDETIEN_Pos          (2)                                               /*!< USBD_T::INTEN: VBDETIEN Position       */
N#define USBD_INTEN_VBDETIEN_Msk          (0x1ul << USBD_INTEN_VBDETIEN_Pos)                /*!< USBD_T::INTEN: VBDETIEN Mask           */
N
N#define USBD_INTEN_NEVWKIEN_Pos          (3)                                               /*!< USBD_T::INTEN: NEVWKIEN Position       */
N#define USBD_INTEN_NEVWKIEN_Msk          (0x1ul << USBD_INTEN_NEVWKIEN_Pos)                /*!< USBD_T::INTEN: NEVWKIEN Mask           */
N
N#define USBD_INTEN_SOFIEN_Pos            (4)                                               /*!< USBD_T::INTEN: SOFIEN Position         */
N#define USBD_INTEN_SOFIEN_Msk            (0x1ul << USBD_INTEN_SOFIEN_Pos)                  /*!< USBD_T::INTEN: SOFIEN Mask             */
N
N#define USBD_INTEN_WKEN_Pos              (8)                                               /*!< USBD_T::INTEN: WKEN Position           */
N#define USBD_INTEN_WKEN_Msk              (0x1ul << USBD_INTEN_WKEN_Pos)                    /*!< USBD_T::INTEN: WKEN Mask               */
N
N#define USBD_INTEN_INNAKEN_Pos           (15)                                              /*!< USBD_T::INTEN: INNAKEN Position        */
N#define USBD_INTEN_INNAKEN_Msk           (0x1ul << USBD_INTEN_INNAKEN_Pos)                 /*!< USBD_T::INTEN: INNAKEN Mask            */
N
N#define USBD_INTSTS_BUSIF_Pos            (0)                                               /*!< USBD_T::INTSTS: BUSIF Position         */
N#define USBD_INTSTS_BUSIF_Msk            (0x1ul << USBD_INTSTS_BUSIF_Pos)                  /*!< USBD_T::INTSTS: BUSIF Mask             */
N
N#define USBD_INTSTS_USBIF_Pos            (1)                                               /*!< USBD_T::INTSTS: USBIF Position         */
N#define USBD_INTSTS_USBIF_Msk            (0x1ul << USBD_INTSTS_USBIF_Pos)                  /*!< USBD_T::INTSTS: USBIF Mask             */
N
N#define USBD_INTSTS_VBDETIF_Pos          (2)                                               /*!< USBD_T::INTSTS: VBDETIF Position       */
N#define USBD_INTSTS_VBDETIF_Msk          (0x1ul << USBD_INTSTS_VBDETIF_Pos)                /*!< USBD_T::INTSTS: VBDETIF Mask           */
N
N#define USBD_INTSTS_NEVWKIF_Pos          (3)                                               /*!< USBD_T::INTSTS: NEVWKIF Position       */
N#define USBD_INTSTS_NEVWKIF_Msk          (0x1ul << USBD_INTSTS_NEVWKIF_Pos)                /*!< USBD_T::INTSTS: NEVWKIF Mask           */
N
N#define USBD_INTSTS_SOFIF_Pos            (4)                                               /*!< USBD_T::INTSTS: SOFIF Position         */
N#define USBD_INTSTS_SOFIF_Msk            (0x1ul << USBD_INTSTS_SOFIF_Pos)                  /*!< USBD_T::INTSTS: SOFIF Mask             */
N
N#define USBD_INTSTS_EPEVT0_Pos           (16)                                              /*!< USBD_T::INTSTS: EPEVT0 Position        */
N#define USBD_INTSTS_EPEVT0_Msk           (0x1ul << USBD_INTSTS_EPEVT0_Pos)                 /*!< USBD_T::INTSTS: EPEVT0 Mask            */
N
N#define USBD_INTSTS_EPEVT1_Pos           (17)                                              /*!< USBD_T::INTSTS: EPEVT1 Position        */
N#define USBD_INTSTS_EPEVT1_Msk           (0x1ul << USBD_INTSTS_EPEVT1_Pos)                 /*!< USBD_T::INTSTS: EPEVT1 Mask            */
N
N#define USBD_INTSTS_EPEVT2_Pos           (18)                                              /*!< USBD_T::INTSTS: EPEVT2 Position        */
N#define USBD_INTSTS_EPEVT2_Msk           (0x1ul << USBD_INTSTS_EPEVT2_Pos)                 /*!< USBD_T::INTSTS: EPEVT2 Mask            */
N
N#define USBD_INTSTS_EPEVT3_Pos           (19)                                              /*!< USBD_T::INTSTS: EPEVT3 Position        */
N#define USBD_INTSTS_EPEVT3_Msk           (0x1ul << USBD_INTSTS_EPEVT3_Pos)                 /*!< USBD_T::INTSTS: EPEVT3 Mask            */
N
N#define USBD_INTSTS_EPEVT4_Pos           (20)                                              /*!< USBD_T::INTSTS: EPEVT4 Position        */
N#define USBD_INTSTS_EPEVT4_Msk           (0x1ul << USBD_INTSTS_EPEVT4_Pos)                 /*!< USBD_T::INTSTS: EPEVT4 Mask            */
N
N#define USBD_INTSTS_EPEVT5_Pos           (21)                                              /*!< USBD_T::INTSTS: EPEVT5 Position        */
N#define USBD_INTSTS_EPEVT5_Msk           (0x1ul << USBD_INTSTS_EPEVT5_Pos)                 /*!< USBD_T::INTSTS: EPEVT5 Mask            */
N
N#define USBD_INTSTS_EPEVT6_Pos           (22)                                              /*!< USBD_T::INTSTS: EPEVT6 Position        */
N#define USBD_INTSTS_EPEVT6_Msk           (0x1ul << USBD_INTSTS_EPEVT6_Pos)                 /*!< USBD_T::INTSTS: EPEVT6 Mask            */
N
N#define USBD_INTSTS_EPEVT7_Pos           (23)                                              /*!< USBD_T::INTSTS: EPEVT7 Position        */
N#define USBD_INTSTS_EPEVT7_Msk           (0x1ul << USBD_INTSTS_EPEVT7_Pos)                 /*!< USBD_T::INTSTS: EPEVT7 Mask            */
N
N#define USBD_INTSTS_SETUP_Pos            (31)                                              /*!< USBD_T::INTSTS: SETUP Position         */
N#define USBD_INTSTS_SETUP_Msk            (0x1ul << USBD_INTSTS_SETUP_Pos)                  /*!< USBD_T::INTSTS: SETUP Mask             */
N
N#define USBD_FADDR_FADDR_Pos             (0)                                               /*!< USBD_T::FADDR: FADDR Position          */
N#define USBD_FADDR_FADDR_Msk             (0x7ful << USBD_FADDR_FADDR_Pos)                  /*!< USBD_T::FADDR: FADDR Mask              */
N
N#define USBD_EPSTS_OV_Pos                (7)                                               /*!< USBD_T::EPSTS: OV Position             */
N#define USBD_EPSTS_OV_Msk                (0x1ul << USBD_EPSTS_OV_Pos)                      /*!< USBD_T::EPSTS: OV Mask                 */
N
N#define USBD_ATTR_USBRST_Pos             (0)                                               /*!< USBD_T::ATTR: USBRST Position          */
N#define USBD_ATTR_USBRST_Msk             (0x1ul << USBD_ATTR_USBRST_Pos)                   /*!< USBD_T::ATTR: USBRST Mask              */
N
N#define USBD_ATTR_SUSPEND_Pos            (1)                                               /*!< USBD_T::ATTR: SUSPEND Position         */
N#define USBD_ATTR_SUSPEND_Msk            (0x1ul << USBD_ATTR_SUSPEND_Pos)                  /*!< USBD_T::ATTR: SUSPEND Mask             */
N
N#define USBD_ATTR_RESUME_Pos             (2)                                               /*!< USBD_T::ATTR: RESUME Position          */
N#define USBD_ATTR_RESUME_Msk             (0x1ul << USBD_ATTR_RESUME_Pos)                   /*!< USBD_T::ATTR: RESUME Mask              */
N
N#define USBD_ATTR_TOUT_Pos               (3)                                               /*!< USBD_T::ATTR: TOUT Position            */
N#define USBD_ATTR_TOUT_Msk               (0x1ul << USBD_ATTR_TOUT_Pos)                     /*!< USBD_T::ATTR: TOUT Mask                */
N
N#define USBD_ATTR_PHYEN_Pos              (4)                                               /*!< USBD_T::ATTR: PHYEN Position           */
N#define USBD_ATTR_PHYEN_Msk              (0x1ul << USBD_ATTR_PHYEN_Pos)                    /*!< USBD_T::ATTR: PHYEN Mask               */
N
N#define USBD_ATTR_RWAKEUP_Pos            (5)                                               /*!< USBD_T::ATTR: RWAKEUP Position         */
N#define USBD_ATTR_RWAKEUP_Msk            (0x1ul << USBD_ATTR_RWAKEUP_Pos)                  /*!< USBD_T::ATTR: RWAKEUP Mask             */
N
N#define USBD_ATTR_USBEN_Pos              (7)                                               /*!< USBD_T::ATTR: USBEN Position           */
N#define USBD_ATTR_USBEN_Msk              (0x1ul << USBD_ATTR_USBEN_Pos)                    /*!< USBD_T::ATTR: USBEN Mask               */
N
N#define USBD_ATTR_DPPUEN_Pos             (8)                                               /*!< USBD_T::ATTR: DPPUEN Position          */
N#define USBD_ATTR_DPPUEN_Msk             (0x1ul << USBD_ATTR_DPPUEN_Pos)                   /*!< USBD_T::ATTR: DPPUEN Mask              */
N
N#define USBD_ATTR_BYTEM_Pos              (10)                                              /*!< USBD_T::ATTR: BYTEM Position           */
N#define USBD_ATTR_BYTEM_Msk              (0x1ul << USBD_ATTR_BYTEM_Pos)                    /*!< USBD_T::ATTR: BYTEM Mask               */
N
N#define USBD_ATTR_LPMACK_Pos             (11)                                              /*!< USBD_T::ATTR: LPMACK Position          */
N#define USBD_ATTR_LPMACK_Msk             (0x1ul << USBD_ATTR_LPMACK_Pos)                   /*!< USBD_T::ATTR: LPMACK Mask              */
N
N#define USBD_ATTR_L1SUSPEND_Pos          (12)                                              /*!< USBD_T::ATTR: L1SUSPEND Position       */
N#define USBD_ATTR_L1SUSPEND_Msk          (0x1ul << USBD_ATTR_L1SUSPEND_Pos)                /*!< USBD_T::ATTR: L1SUSPEND Mask           */
N
N#define USBD_ATTR_L1RESUME_Pos           (13)                                              /*!< USBD_T::ATTR: L1RESUME Position        */
N#define USBD_ATTR_L1RESUME_Msk           (0x1ul << USBD_ATTR_L1RESUME_Pos)                 /*!< USBD_T::ATTR: L1RESUME Mask            */
N
N#define USBD_VBUSDET_VBUSDET_Pos         (0)                                               /*!< USBD_T::VBUSDET: VBUSDET Position      */
N#define USBD_VBUSDET_VBUSDET_Msk         (0x1ul << USBD_VBUSDET_VBUSDET_Pos)               /*!< USBD_T::VBUSDET: VBUSDET Mask          */
N
N#define USBD_STBUFSEG_STBUFSEG_Pos       (3)                                               /*!< USBD_T::STBUFSEG: STBUFSEG Position    */
N#define USBD_STBUFSEG_STBUFSEG_Msk       (0x3ful << USBD_STBUFSEG_STBUFSEG_Pos)            /*!< USBD_T::STBUFSEG: STBUFSEG Mask        */
N
N#define USBD_EPSTS0_EPSTS0_Pos           (0)                                               /*!< USBD_T::EPSTS0: EPSTS0 Position        */
N#define USBD_EPSTS0_EPSTS0_Msk           (0xful << USBD_EPSTS0_EPSTS0_Pos)                 /*!< USBD_T::EPSTS0: EPSTS0 Mask            */
N
N#define USBD_EPSTS0_EPSTS1_Pos           (4)                                               /*!< USBD_T::EPSTS0: EPSTS1 Position        */
N#define USBD_EPSTS0_EPSTS1_Msk           (0xful << USBD_EPSTS0_EPSTS1_Pos)                 /*!< USBD_T::EPSTS0: EPSTS1 Mask            */
N
N#define USBD_EPSTS0_EPSTS2_Pos           (8)                                               /*!< USBD_T::EPSTS0: EPSTS2 Position        */
N#define USBD_EPSTS0_EPSTS2_Msk           (0xful << USBD_EPSTS0_EPSTS2_Pos)                 /*!< USBD_T::EPSTS0: EPSTS2 Mask            */
N
N#define USBD_EPSTS0_EPSTS3_Pos           (12)                                              /*!< USBD_T::EPSTS0: EPSTS3 Position        */
N#define USBD_EPSTS0_EPSTS3_Msk           (0xful << USBD_EPSTS0_EPSTS3_Pos)                 /*!< USBD_T::EPSTS0: EPSTS3 Mask            */
N
N#define USBD_EPSTS0_EPSTS4_Pos           (16)                                              /*!< USBD_T::EPSTS0: EPSTS4 Position        */
N#define USBD_EPSTS0_EPSTS4_Msk           (0xful << USBD_EPSTS0_EPSTS4_Pos)                 /*!< USBD_T::EPSTS0: EPSTS4 Mask            */
N#define USBD_EPSTS0_EPSTS5_Pos           (20)                                              /*!< USBD_T::EPSTS0: EPSTS5 Position        */
N#define USBD_EPSTS0_EPSTS5_Msk           (0xful << USBD_EPSTS0_EPSTS5_Pos)                 /*!< USBD_T::EPSTS0: EPSTS5 Mask            */
N
N#define USBD_EPSTS0_EPSTS6_Pos           (24)                                              /*!< USBD_T::EPSTS0: EPSTS6 Position        */
N#define USBD_EPSTS0_EPSTS6_Msk           (0xful << USBD_EPSTS0_EPSTS6_Pos)                 /*!< USBD_T::EPSTS0: EPSTS6 Mask            */
N
N#define USBD_EPSTS0_EPSTS7_Pos           (28)                                              /*!< USBD_T::EPSTS0: EPSTS7 Position        */
N#define USBD_EPSTS0_EPSTS7_Msk           (0xful << USBD_EPSTS0_EPSTS7_Pos)                 /*!< USBD_T::EPSTS0: EPSTS7 Mask            */
N
N#define USBD_LPMATTR_LPMLINKSTS_Pos      (0)                                               /*!< USBD_T::LPMATTR: LPMLINKSTS Position   */
N#define USBD_LPMATTR_LPMLINKSTS_Msk      (0xful << USBD_LPMATTR_LPMLINKSTS_Pos)            /*!< USBD_T::LPMATTR: LPMLINKSTS Mask       */
N
N#define USBD_LPMATTR_LPMBESL_Pos         (4)                                               /*!< USBD_T::LPMATTR: LPMBESL Position      */
N#define USBD_LPMATTR_LPMBESL_Msk         (0xful << USBD_LPMATTR_LPMBESL_Pos)               /*!< USBD_T::LPMATTR: LPMBESL Mask          */
N
N#define USBD_LPMATTR_LPMRWAKUP_Pos       (8)                                               /*!< USBD_T::LPMATTR: LPMRWAKUP Position    */
N#define USBD_LPMATTR_LPMRWAKUP_Msk       (0x1ul << USBD_LPMATTR_LPMRWAKUP_Pos)             /*!< USBD_T::LPMATTR: LPMRWAKUP Mask        */
N
N#define USBD_FN_FN_Pos                   (0)                                               /*!< USBD_T::FN: FN Position                */
N#define USBD_FN_FN_Msk                   (0x7fful << USBD_FN_FN_Pos)                       /*!< USBD_T::FN: FN Mask                    */
N
N#define USBD_SE0_SE0_Pos                 (0)                                               /*!< USBD_T::SE0: SE0 Position              */
N#define USBD_SE0_SE0_Msk                 (0x1ul << USBD_SE0_SE0_Pos)                       /*!< USBD_T::SE0: SE0 Mask                  */
N
N#define USBD_BUFSEG_BUFSEG_Pos           (3)                                               /*!< USBD_EP_T::BUFSEG: BUFSEG Position     */
N#define USBD_BUFSEG_BUFSEG_Msk           (0x3ful << USBD_BUFSEG_BUFSEG_Pos)                /*!< USBD_EP_T::BUFSEG: BUFSEG Mask         */
N
N#define USBD_MXPLD_MXPLD_Pos             (0)                                               /*!< USBD_EP_T::MXPLD: MXPLD Position       */
N#define USBD_MXPLD_MXPLD_Msk             (0x1fful << USBD_MXPLD_MXPLD_Pos)                 /*!< USBD_EP_T::MXPLD: MXPLD Mask           */
N
N#define USBD_CFG_EPNUM_Pos               (0)                                               /*!< USBD_EP_T::CFG: EPNUM Position         */
N#define USBD_CFG_EPNUM_Msk               (0xful << USBD_CFG_EPNUM_Pos)                     /*!< USBD_EP_T::CFG: EPNUM Mask             */
N
N#define USBD_CFG_ISOCH_Pos               (4)                                               /*!< USBD_EP_T::CFG: ISOCH Position         */
N#define USBD_CFG_ISOCH_Msk               (0x1ul << USBD_CFG_ISOCH_Pos)                     /*!< USBD_EP_T::CFG: ISOCH Mask             */
N
N#define USBD_CFG_STATE_Pos               (5)                                               /*!< USBD_EP_T::CFG: STATE Position         */
N#define USBD_CFG_STATE_Msk               (0x3ul << USBD_CFG_STATE_Pos)                     /*!< USBD_EP_T::CFG: STATE Mask             */
N
N#define USBD_CFG_DSQSYNC_Pos             (7)                                               /*!< USBD_EP_T::CFG: DSQSYNC Position       */
N#define USBD_CFG_DSQSYNC_Msk             (0x1ul << USBD_CFG_DSQSYNC_Pos)                   /*!< USBD_EP_T::CFG: DSQSYNC Mask           */
N
N#define USBD_CFG_CSTALL_Pos              (9)                                               /*!< USBD_EP_T::CFG: CSTALL Position        */
N#define USBD_CFG_CSTALL_Msk              (0x1ul << USBD_CFG_CSTALL_Pos)                    /*!< USBD_EP_T::CFG: CSTALL Mask            */
N
N#define USBD_CFGP_CLRRDY_Pos             (0)                                               /*!< USBD_EP_T::CFGP: CLRRDY Position       */
N#define USBD_CFGP_CLRRDY_Msk             (0x1ul << USBD_CFGP_CLRRDY_Pos)                   /*!< USBD_EP_T::CFGP: CLRRDY Mask           */
N
N#define USBD_CFGP_SSTALL_Pos             (1)                                               /*!< USBD_EP_T::CFGP: SSTALL Position       */
N#define USBD_CFGP_SSTALL_Msk             (0x1ul << USBD_CFGP_SSTALL_Pos)                   /*!< USBD_EP_T::CFGP: SSTALL Mask           */
N
N/**@}*/ /* USBD_CONST */
N/**@}*/ /* end of USBD register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __USBD_REG_H__ */
N
L 180 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "uspi_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\uspi_reg.h" 1
N/**************************************************************************//**
N * @file     uspi_reg.h
N * @version  V1.00
N * @brief    USPI register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __USPI_REG_H__
N#define __USPI_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup USPI SPI Mode of USCI Controller (USPI)
N    Memory Mapped Structure for USPI Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var USPI_T::CTL
N     * Offset: 0x00  USCI Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |FUNMODE   |Function Mode
N     * |        |          |This bit field selects the protocol for this USCI controller.
N     * |        |          |Selecting a protocol that is not available or a reserved combination disables the USCI.
N     * |        |          |When switching between two protocols, the USCI has to be disabled before selecting a new protocol.
N     * |        |          |Simultaneously, the USCI will be reset when user write 000 to FUNMODE.
N     * |        |          |000 = The USCI is disabled. All protocol related state machines are set to idle state.
N     * |        |          |001 = The SPI protocol is selected.
N     * |        |          |010 = The UART protocol is selected.
N     * |        |          |100 = The I2C protocol is selected.
N     * |        |          |Note: Other bit combinations are reserved.
N     * @var USPI_T::INTEN
N     * Offset: 0x04  USCI Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TXSTIEN   |Transmit Start Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a transmit start event.
N     * |        |          |0 = The transmit start interrupt Disabled.
N     * |        |          |1 = The transmit start interrupt Enabled.
N     * |        |          |Note: The transmit start event happens when hardware starts to move TX data from data buffer to shift data unit.
N     * |[2]     |TXENDIEN  |Transmit End Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a transmit finish event.
N     * |        |          |0 = The transmit finish interrupt Disabled.
N     * |        |          |1 = The transmit finish interrupt Enabled.
N     * |        |          |Note: The transmit finish event happens when hardware sends the last bit of TX data from shift data unit.
N     * |[3]     |RXSTIEN   |Receive Start Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a receive start event.
N     * |        |          |0 = The receive start interrupt Disabled.
N     * |        |          |1 = The receive start interrupt Enabled.
N     * |        |          |Note: For SPI master mode, the receive start event happens when SPI master sends slave select active and spi clock to the external SPI slave.
N     * |        |          |For SPI slave mode, the receive start event happens when slave select of SPI slave is active and spi clock of SPI slave is inputed from the external SPI master.
N     * |[4]     |RXENDIEN  |Receive End Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a receive finish event.
N     * |        |          |0 = The receive end interrupt Disabled.
N     * |        |          |1 = The receive end interrupt Enabled.
N     * |        |          |Note: The receive finish event happens when hardware receives the last bit of RX data into shift data unit.
N     * @var USPI_T::BRGEN
N     * Offset: 0x08  USCI Baud Rate Generator Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RCLKSEL   |Reference Clock Source Selection
N     * |        |          |This bit selects the source of reference clock (fREF_CLK).
N     * |        |          |0 = Peripheral device clock fPCLK.
N     * |        |          |1 = Reserved.
N     * |[1]     |PTCLKSEL  |Protocol Clock Source Selection
N     * |        |          |This bit selects the source of protocol clock (fPROT_CLK).
N     * |        |          |0 = Reference clock fREF_CLK.
N     * |        |          |1 = fREF_CLK2 (its frequency is half of fREF_CLK).
N     * |[3:2]   |SPCLKSEL  |Sample Clock Source Selection
N     * |        |          |This bit field used for the clock source selection of sample clock (fSAMP_CLK) for the protocol processor.
N     * |        |          |00 = fDIV_CLK.
N     * |        |          |01 = fPROT_CLK.
N     * |        |          |10 = fSCLK.
N     * |        |          |11 = fREF_CLK.
N     * |[4]     |TMCNTEN   |Time Measurement Counter Enable Bit
N     * |        |          |This bit enables the 10-bit timing measurement counter.
N     * |        |          |0 = Time measurement counter Disabled.
N     * |        |          |1 = Time measurement counter Enabled.
N     * |[5]     |TMCNTSRC  |Time Measurement Counter Clock Source Selection
N     * |        |          |0 = Time measurement counter with fPROT_CLK.
N     * |        |          |1 = Time measurement counter with fDIV_CLK.
N     * |[25:16] |CLKDIV    |Clock Divider
N     * |        |          |This bit field defines the ratio between the protocol clock frequency fPROT_CLK and the clock divider frequency fDIV_CLK (fDIV_CLK = fPROT_CLK / (CLKDIV+1) ).
N     * @var USPI_T::DATIN0
N     * Offset: 0x10  USCI Input Data Signal Configuration Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input   Signal Synchronization Selection
N     * |        |          |This bit   selects if the un-synchronized input signal (with optionally inverted) or the   synchronized (and optionally filtered) signal, which is synchronized   with PCLK, can be   used as input for the data shift unit.
N     * |        |          |0 = The   un-synchronized signal can be taken as input for the data shift unit.
N     * |        |          |1 = The   synchronized signal can be taken as input for the data shift unit.
N     * |        |          |Note: In SPI protocol, it is suggested this bit   should be set as 0.
N     * |[2]     |ININV     |Input   Signal Inverse Selection
N     * |        |          |This bit   defines the inverter enable of the input asynchronous signal.
N     * |        |          |0 = The   un-synchronized input signal will not be inverted.
N     * |        |          |1 = The   un-synchronized input signal will be inverted.
N     * |        |          |Note: In SPI protocol, it is suggested this bit   should be set as 0.
N     * @var USPI_T::CTLIN0
N     * Offset: 0x20  USCI Input Control Signal Configuration Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input   Synchronization Signal Selection
N     * |        |          |This bit   selects if the un-synchronized input signal (with optionally inverted) or the   synchronized (and optionally filtered) signal, which is synchronized   with PCLK, can be   used as input for the data shift unit.
N     * |        |          |0 = The   un-synchronized signal can be taken as input for the data shift unit.
N     * |        |          |1 = The   synchronized signal can be taken as input for the data shift unit.
N     * |        |          |Note: In SPI protocol, it is suggested this bit   should be set as 0.
N     * |[2]     |ININV     |Input   Signal Inverse Selection
N     * |        |          |This bit defines   the inverter enable of the input asynchronous signal.
N     * |        |          |0 = The   un-synchronized input signal will not be inverted.
N     * |        |          |1 = The   un-synchronized input signal will be inverted.
N     * @var USPI_T::CLKIN
N     * Offset: 0x28  USCI Input Clock Signal Configuration Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input   Synchronization Signal Selection
N     * |        |          |This bit   selects if the un-synchronized input signal or the synchronized (and   optionally filtered) signal, which is synchronized with PCLK,   can be used as input for the data shift unit.
N     * |        |          |0 = The   un-synchronized signal can be taken as input for the data shift unit.
N     * |        |          |1 = The   synchronized signal can be taken as input for the data shift unit.
N     * |        |          |Note: In SPI protocol, it is suggested this bit   should be set as 0.
N     * @var USPI_T::LINECTL
N     * Offset: 0x2C  USCI Line Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |LSB       |LSB First Transmission Selection
N     * |        |          |0 = The MSB, which bit of transmit/receive data buffer depends on the setting of DWIDTH, is transmitted/received first.
N     * |        |          |1 = The LSB, the bit 0 of data buffer, will be transmitted/received first.
N     * |[5]     |DATOINV   |Data Output Inverse Selection
N     * |        |          |This bit defines the relation between the internal shift data value and the output data signal of USCIx_DAT0/1 pin.
N     * |        |          |0 = Data output values of USCIx_DAT0/1 pins are not inverted.
N     * |        |          |1 = Data output values of USCIx_DAT0/1 pins are inverted.
N     * |[7]     |CTLOINV   |Control Signal Output Inverse Selection
N     * |        |          |This bit defines the relation between the internal control signal and the output control signal.
N     * |        |          |0 = No effect.
N     * |        |          |1 = The control signal will be inverted before its output.
N     * |        |          |Note: The control signal has different definitions in different protocol.
N     * |        |          |In SPI protocol, the control signal means slave select signal.
N     * |[11:8]  |DWIDTH    |Word Length of Transmission
N     * |        |          |This bit field defines the data word length (amount of bits) for reception and transmission.
N     * |        |          |The data word is always right-aligned in the data buffer.
N     * |        |          |USCI support word length from 4 to 16 bits.
N     * |        |          |0x0: The data word contains 16 bits located at bit positions [15:0].
N     * |        |          |0x1: Reserved.
N     * |        |          |0x2: Reserved.
N     * |        |          |0x3: Reserved.
N     * |        |          |0x4: The data word contains 4 bits located at bit positions [3:0].
N     * |        |          |0x5: The data word contains 5 bits located at bit positions [4:0].
N     * |        |          |...
N     * |        |          |0xF: The data word contains 15 bits located at bit positions [14:0].
N     * @var USPI_T::TXDAT
N     * Offset: 0x30  USCI Transmit Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |TXDAT     |Transmit Data
N     * |        |          |Software can use this bit field to write 16-bit transmit data for transmission.
N     * |        |          |In order to avoid overwriting the transmit data, user have to check TXEMPTY (USPI_BUFSTS[8]) status before writing transmit data into this bit field.
N     * |[16]    |PORTDIR   |Port Direction Control
N     * |        |          |This bit field is only available while USCI operates in SPI protocol (FUNMODE = 0x1) with half-duplex transfer.
N     * |        |          |It is used to define the direction of the data port pin.
N     * |        |          |When software writes USPI_TXDAT register, the transmit data and its port direction are settled simultaneously.
N     * |        |          |0 = The data pin is configured as output mode.
N     * |        |          |1 = The data pin is configured as input mode.
N     * @var USPI_T::RXDAT
N     * Offset: 0x34  USCI Receive Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RXDAT     |Received Data
N     * |        |          |This bit field monitors the received data which stored in receive data buffer.
N     * @var USPI_T::BUFCTL
N     * Offset: 0x38  USCI Transmit/Receive Buffer Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[6]     |TXUDRIEN  |Slave Transmit Under Run Interrupt Enable Bit
N     * |        |          |0 = Transmit under-run interrupt Disabled.
N     * |        |          |1 = Transmit under-run interrupt Enabled.
N     * |[7]     |TXCLR     |Clear Transmit Buffer
N     * |        |          |0 = No effect.
N     * |        |          |1 = The transmit buffer is cleared.
N     * |        |          |Should only be used while the buffer is not taking part in data traffic.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * |[14]    |RXOVIEN   |Receive Buffer Overrun Interrupt Enable Bit
N     * |        |          |0 = Receive overrun interrupt Disabled.
N     * |        |          |1 = Receive overrun interrupt Enabled.
N     * |[15]    |RXCLR     |Clear Receive Buffer
N     * |        |          |0 = No effect.
N     * |        |          |1 = The receive buffer is cleared.
N     * |        |          |Should only be used while the buffer is not taking part in data traffic.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * |[16]    |TXRST     |Transmit Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the transmit-related counters, state machine, and the content of transmit shift register and data buffer.
N     * |        |          |Note1: It is cleared automatically after one PCLK cycle.
N     * |        |          |Note2: Write 1 to this bit will set the output data pin to zero if USPI_PROTCTL[28]=0.
N     * |[17]    |RXRST     |Receive Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the receive-related counters, state machine, and the content of receive shift register and data buffer.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * @var USPI_T::BUFSTS
N     * Offset: 0x3C  USCI Transmit/Receive Buffer Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RXEMPTY   |Receive Buffer Empty Indicator
N     * |        |          |0 = Receive buffer is not empty.
N     * |        |          |1 = Receive buffer is empty.
N     * |[1]     |RXFULL    |Receive Buffer Full Indicator
N     * |        |          |0 = Receive buffer is not full.
N     * |        |          |1 = Receive buffer is full.
N     * |[3]     |RXOVIF    |Receive Buffer Over-run Interrupt Status
N     * |        |          |This bit indicates that a receive buffer overrun event has been detected.
N     * |        |          |If RXOVIEN (USPI_BUFCTL[14]) is enabled, the corresponding interrupt request is activated.
N     * |        |          |It is cleared by software writes 1 to this bit.
N     * |        |          |0 = A receive buffer overrun event has not been detected.
N     * |        |          |1 = A receive buffer overrun event has been detected.
N     * |[8]     |TXEMPTY   |Transmit Buffer Empty Indicator
N     * |        |          |0 = Transmit buffer is not empty.
N     * |        |          |1 = Transmit buffer is empty and available for the next transmission datum.
N     * |[9]     |TXFULL    |Transmit Buffer Full Indicator
N     * |        |          |0 = Transmit buffer is not full.
N     * |        |          |1 = Transmit buffer is full.
N     * |[11]    |TXUDRIF   |Transmit Buffer Under-run Interrupt Status
N     * |        |          |This bit indicates that a transmit buffer under-run event has been detected.
N     * |        |          |If enabled by TXUDRIEN (USPI_BUFCTL[6]), the corresponding interrupt request is activated.
N     * |        |          |It is cleared by software writes 1 to this bit.
N     * |        |          |0 = A transmit buffer under-run event has not been detected.
N     * |        |          |1 = A transmit buffer under-run event has been detected.
N     * @var USPI_T::PDMACTL
N     * Offset: 0x40  USCI PDMA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |PDMARST   |PDMA Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the USCI's PDMA control logic. This bit will be cleared to 0 automatically.
N     * |[1]     |TXPDMAEN  |PDMA Transmit Channel Available
N     * |        |          |0 = Transmit PDMA function Disabled.
N     * |        |          |1 = Transmit PDMA function Enabled.
N     * |[2]     |RXPDMAEN  |PDMA Receive Channel Available
N     * |        |          |0 = Receive PDMA function Disabled.
N     * |        |          |1 = Receive PDMA function Enabled.
N     * |[3]     |PDMAEN    |PDMA Mode Enable Bit
N     * |        |          |0 = PDMA function Disabled.
N     * |        |          |1 = PDMA function Enabled.
N     * @var USPI_T::WKCTL
N     * Offset: 0x54  USCI Wake-up Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKEN      |Wake-up Enable Bit
N     * |        |          |0 = Wake-up function Disabled.
N     * |        |          |1 = Wake-up function Enabled.
N     * |[2]     |PDBOPT    |Power Down Blocking Option
N     * |        |          |0 = If user attempts to enter Power-down mode by executing WFI while the protocol is in transferring, MCU will stop the transfer and enter Power-down mode immediately.
N     * |        |          |1 = If user attempts to enter Power-down mode by executing WFI while the protocol is in transferring, the on-going transfer will not be stopped and MCU will enter idle mode immediately.
N     * @var USPI_T::WKSTS
N     * Offset: 0x58  USCI Wake-up Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKF       |Wake-up Flag
N     * |        |          |When chip is woken up from Power-down mode, this bit is set to 1.
N     * |        |          |Software can write 1 to clear this bit.
N     * @var USPI_T::PROTCTL
N     * Offset: 0x5C  USCI Protocol Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SLAVE     |Slave Mode Selection
N     * |        |          |0 = Master mode.
N     * |        |          |1 = Slave mode.
N     * |[1]     |SLV3WIRE  |Slave 3-wire Mode Selection (Slave Only)
N     * |        |          |The SPI protocol can work with 3-wire interface (without slave select signal) in Slave mode.
N     * |        |          |0 = 4-wire bi-direction interface.
N     * |        |          |1 = 3-wire bi-direction interface.
N     * |[2]     |SS        |Slave Select Control (Master Only)
N     * |        |          |If AUTOSS bit is cleared, setting this bit to 1 will set the slave select signal to active state, and setting this bit to 0 will set the slave select back to inactive state.
N     * |        |          |If the AUTOSS function is enabled (AUTOSS = 1), the setting value of this bit will not affect the current state of slave select signal.
N     * |        |          |Note: In SPI protocol, the internal slave select signal is active high.
N     * |[3]     |AUTOSS    |Automatic Slave Select Function Enable (Master Only)
N     * |        |          |0 = Slave select signal will be controlled by the setting value of SS (USPI_PROTCTL[2]) bit.
N     * |        |          |1 = Slave select signal will be generated automatically.
N     * |        |          |The slave select signal will be asserted by the SPI controller when transmit/receive is started, and will be de-asserted after each transmit/receive is finished.
N     * |[7:6]   |SCLKMODE  |Serial Bus Clock Mode
N     * |        |          |This bit field defines the SCLK idle status, data transmit, and data receive edge.
N     * |        |          |MODE0 = The idle state of SPI clock is low level.
N     * |        |          |Data is transmitted with falling edge and received with rising edge.
N     * |        |          |MODE1 = The idle state of SPI clock is low level.
N     * |        |          |Data is transmitted with rising edge and received with falling edge.
N     * |        |          |MODE2 = The idle state of SPI clock is high level.
N     * |        |          |Data is transmitted with rising edge and received with falling edge.
N     * |        |          |MODE3 = The idle state of SPI clock is high level.
N     * |        |          |Data is transmitted with falling edge and received with rising edge.
N     * |[11:8]  |SUSPITV   |Suspend Interval (Master Only)
N     * |        |          |This bit field provides the configurable suspend interval between two successive transmit/receive transaction in a transfer.
N     * |        |          |The definition of the suspend interval is the interval between the last clock edge of the preceding transaction word and the first clock edge of the following transaction word.
N     * |        |          |The default value is 0x3.
N     * |        |          |The period of the suspend interval is obtained according to the following equation.
N     * |        |          |(SUSPITV[3:0] + 0.5) * period of SPI_CLK clock cycle
N     * |        |          |Example:
N     * |        |          |SUSPITV = 0x0 ... 0.5 SPI_CLK clock cycle.
N     * |        |          |SUSPITV = 0x1 ... 1.5 SPI_CLK clock cycle.
N     * |        |          |...
N     * |        |          |SUSPITV = 0xE ... 14.5 SPI_CLK clock cycle.
N     * |        |          |SUSPITV = 0xF ... 15.5 SPI_CLK clock cycle.
N     * |[14:12] |TSMSEL    |Transmit Data Mode Selection
N     * |        |          |This bit field describes how receive and transmit data is shifted in and out.
N     * |        |          |TSMSEL = 000b: Full-duplex SPI.
N     * |        |          |TSMSEL = 100b: Half-duplex SPI.
N     * |        |          |Other values are reserved.
N     * |        |          |Note: Changing the value of this bit field will produce the TXRST and RXRST to clear the TX/RX data buffer automatically.
N     * |[25:16] |SLVTOCNT  |Slave Mode Time-out Period (Slave Only)
N     * |        |          |In Slave mode, this bit field is used for Slave time-out period.
N     * |        |          |This bit field indicates how many clock periods (selected by TMCNTSRC, USPI_BRGEN[5]) between the two edges of input SCLK will assert the Slave time-out event.
N     * |        |          |Writing 0x0 into this bit field will disable the Slave time-out function.
N     * |        |          |Example: Assume SLVTOCNT is 0x0A and TMCNTSRC (USPI_BRGEN[5]) is 1, it means the time-out event will occur if the state of SPI bus clock pin is not changed more than (10+1) periods of fDIV_CLK.
N     * |[28]    |TXUDRPOL  |Transmit Under-run Data Polarity (for Slave)
N     * |        |          |This bit defines the transmitting data value of USCIx_DAT1 when no data is available for transferring.
N     * |        |          |0 = The output data value is 0 if TX under run event occurs.
N     * |        |          |1 = The output data value is 1 if TX under run event occurs.
N     * |[31]    |PROTEN    |SPI Protocol Enable Bit
N     * |        |          |0 = SPI Protocol Disabled.
N     * |        |          |1 = SPI Protocol Enabled.
N     * @var USPI_T::PROTIEN
N     * Offset: 0x60  USCI Protocol Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SSINAIEN  |Slave Select Inactive Interrupt Enable Bit
N     * |        |          |This bit enables/disables the generation of a slave select interrupt if the slave select changes to inactive.
N     * |        |          |0 = Slave select inactive interrupt generation Disabled.
N     * |        |          |1 = Slave select inactive interrupt generation Enabled.
N     * |[1]     |SSACTIEN  |Slave Select Active Interrupt Enable Bit
N     * |        |          |This bit enables/disables the generation of a slave select interrupt if the slave select changes to active.
N     * |        |          |0 = Slave select active interrupt generation Disabled.
N     * |        |          |1 = Slave select active interrupt generation Enabled.
N     * |[2]     |SLVTOIEN  |Slave Time-out Interrupt Enable Bit
N     * |        |          |In SPI protocol, this bit enables the interrupt generation in case of a Slave time-out event.
N     * |        |          |0 = The Slave time-out interrupt Disabled.
N     * |        |          |1 = The Slave time-out interrupt Enabled.
N     * |[3]     |SLVBEIEN  |Slave Mode Bit Count Error Interrupt Enable Bit
N     * |        |          |If data transfer is terminated by slave time-out or slave select inactive event in Slave mode, so that the transmit/receive data bit count does not match the setting of DWIDTH (USPI_LINECTL[11:8]).
N     * |        |          |Bit count error event occurs.
N     * |        |          |0 = The Slave mode bit count error interrupt Disabled.
N     * |        |          |1 = The Slave mode bit count error interrupt Enabled.
N     * @var USPI_T::PROTSTS
N     * Offset: 0x64  USCI Protocol Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TXSTIF    |Transmit Start Interrupt Flag
N     * |        |          |0 = Transmit start event did not occur.
N     * |        |          |1 = Transmit start event occurred.
N     * |        |          |Note: It is cleared by software write 1 to this bit.
N     * |        |          |The transmit start event happens when hardware starts to move TX data from data buffer to shift data unit.
N     * |[2]     |TXENDIF   |Transmit End Interrupt Flag
N     * |        |          |0 = Transmit end event did not occur.
N     * |        |          |1 = Transmit end event occurred.
N     * |        |          |Note: It is cleared by software write 1 to this bit.
N     * |        |          |The transmit end event happens when hardware sends the last bit of TX data from shift data unit.
N     * |[3]     |RXSTIF    |Receive Start Interrupt Flag
N     * |        |          |0 = Receive start event did not occur.
N     * |        |          |1 = Receive start event occurred.
N     * |        |          |Note: It is cleared by software write 1 to this bit.
N     * |        |          |For SPI master mode, the receive start event happens when SPI master sends slave select active and spi clock to the external SPI slave.
N     * |        |          |For SPI slave mode, the receive start event happens when slave select of SPI slave is active and spi clock of SPI slave is inputed from the external SPI master.
N     * |[4]     |RXENDIF   |Receive End Interrupt Flag
N     * |        |          |0 = Receive end event did not occur.
N     * |        |          |1 = Receive end event occurred.
N     * |        |          |Note: It is cleared by software write 1 to this bit.
N     * |        |          |The receive end event happens when hardware receives the last bit of RX data into shift data unit.
N     * |[5]     |SLVTOIF   |Slave Time-out Interrupt Flag (for Slave Only)
N     * |        |          |0 = Slave time-out event did not occur.
N     * |        |          |1 = Slave time-out event occurred.
N     * |        |          |Note: It is cleared by software write 1 to this bit.
N     * |[6]     |SLVBEIF   |Slave Bit Count Error Interrupt Flag (for Slave Only)
N     * |        |          |0 = Slave bit count error event did not occur.
N     * |        |          |1 = Slave bit count error event occurred.
N     * |        |          |Note: It is cleared by software write 1 to this bit.
N     * |        |          |If the transmit/receive data bit count does not match the setting of DWIDTH (USPI_LINECTL[11:8]), bit count error event occurs.It is cleared by software write 1 to this bit.
N     * |[8]     |SSINAIF   |Slave Select Inactive Interrupt Flag (for Slave Only)
N     * |        |          |This bit indicates that the internal slave select signal has changed to inactive.
N     * |        |          |It is cleared by software writes 1 to this bit.
N     * |        |          |0 = The slave select signal has not changed to inactive.
N     * |        |          |1 = The slave select signal has changed to inactive.
N     * |        |          |Note: The internal slave select signal is active high.
N     * |[9]     |SSACTIF   |Slave Select Active Interrupt Flag (for Slave Only)
N     * |        |          |This bit indicates that the internal slave select signal has changed to active.
N     * |        |          |It is cleared by software writes one to this bit.
N     * |        |          |0 = The slave select signal has not changed to active.
N     * |        |          |1 = The slave select signal has changed to active.
N     * |        |          |Note: The internal slave select signal is active high.
N     * |[16]    |SSLINE    |Slave Select Line Bus Status (Read Only)
N     * |        |          |This bit is only available in Slave mode.
N     * |        |          |It used to monitor the current status of the input slave select signal on the bus.
N     * |        |          |0 = The slave select line status is 0.
N     * |        |          |1 = The slave select line status is 1.
N     * |[17]    |BUSY      |Busy Status (Read Only)
N     * |        |          |0 = SPI is in idle state.
N     * |        |          |1 = SPI is in busy state.
N     * |        |          |The following listing are the bus busy conditions:
N     * |        |          |a. USPI_PROTCTL[31] = 1 and the TXEMPTY = 0.
N     * |        |          |b. For SPI Master mode, the TXEMPTY = 1 but the current transaction is not finished yet.
N     * |        |          |c. For SPI Slave mode, the USPI_PROTCTL[31] = 1 and there is serial clock input into the SPI core logic when slave select is active.
N     * |        |          |d. For SPI Slave mode, the USPI_PROTCTL[31] = 1 and the transmit buffer or transmit shift register is not empty even if the slave select is inactive.
N     * |[18]    |SLVUDR    |Slave Mode Transmit Under-run Status (Read Only)
N     * |        |          |In Slave mode, if there is no available transmit data in buffer while transmit data shift out caused by input serial bus clock, this status flag will be set to 1.
N     * |        |          |This bit indicates whether the current shift-out data of word transmission is switched to TXUDRPOL (USPI_PROTCTL[28]) or not.
N     * |        |          |0 = Slave transmit under run event does not occur.
N     * |        |          |1 = Slave transmit under run event occurs.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] USCI Control Register                                            */
X    volatile uint32_t CTL;                    
N    __IO uint32_t INTEN;                 /*!< [0x0004] USCI Interrupt Enable Register                                   */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t BRGEN;                 /*!< [0x0008] USCI Baud Rate Generator Register                                */
X    volatile uint32_t BRGEN;                  
N    __I  uint32_t RESERVE0[1];
X    volatile const  uint32_t RESERVE0[1];
N    __IO uint32_t DATIN0;                /*!< [0x0010] USCI Input Data Signal Configuration Register 0                  */
X    volatile uint32_t DATIN0;                 
N    __I  uint32_t RESERVE1[3];
X    volatile const  uint32_t RESERVE1[3];
N    __IO uint32_t CTLIN0;                /*!< [0x0020] USCI Input Control Signal Configuration Register 0               */
X    volatile uint32_t CTLIN0;                 
N    __I  uint32_t RESERVE2[1];
X    volatile const  uint32_t RESERVE2[1];
N    __IO uint32_t CLKIN;                 /*!< [0x0028] USCI Input Clock Signal Configuration Register                   */
X    volatile uint32_t CLKIN;                  
N    __IO uint32_t LINECTL;               /*!< [0x002c] USCI Line Control Register                                       */
X    volatile uint32_t LINECTL;                
N    __O  uint32_t TXDAT;                 /*!< [0x0030] USCI Transmit Data Register                                      */
X    volatile  uint32_t TXDAT;                  
N    __I  uint32_t RXDAT;                 /*!< [0x0034] USCI Receive Data Register                                       */
X    volatile const  uint32_t RXDAT;                  
N    __IO uint32_t BUFCTL;                /*!< [0x0038] USCI Transmit/Receive Buffer Control Register                    */
X    volatile uint32_t BUFCTL;                 
N    __IO  uint32_t BUFSTS;                /*!< [0x003c] USCI Transmit/Receive Buffer Status Register                     */
X    volatile  uint32_t BUFSTS;                 
N    __IO uint32_t PDMACTL;               /*!< [0x0040] USCI PDMA Control Register                                       */
X    volatile uint32_t PDMACTL;                
N    __I  uint32_t RESERVE3[4];
X    volatile const  uint32_t RESERVE3[4];
N    __IO uint32_t WKCTL;                 /*!< [0x0054] USCI Wake-up Control Register                                    */
X    volatile uint32_t WKCTL;                  
N    __IO uint32_t WKSTS;                 /*!< [0x0058] USCI Wake-up Status Register                                     */
X    volatile uint32_t WKSTS;                  
N    __IO uint32_t PROTCTL;               /*!< [0x005c] USCI Protocol Control Register                                   */
X    volatile uint32_t PROTCTL;                
N    __IO uint32_t PROTIEN;               /*!< [0x0060] USCI Protocol Interrupt Enable Register                          */
X    volatile uint32_t PROTIEN;                
N    __IO uint32_t PROTSTS;               /*!< [0x0064] USCI Protocol Status Register                                    */
X    volatile uint32_t PROTSTS;                
N
N} USPI_T;
N
N/**
N    @addtogroup USPI_CONST USPI Bit Field Definition
N    Constant Definitions for USPI Controller
N@{ */
N
N#define USPI_CTL_FUNMODE_Pos          (0)                                            /*!< USPI_T::CTL: FUNMODE Position       */
N#define USPI_CTL_FUNMODE_Msk          (0x7ul << USPI_CTL_FUNMODE_Pos)                /*!< USPI_T::CTL: FUNMODE Mask           */
N
N#define USPI_INTEN_TXSTIEN_Pos        (1)                                            /*!< USPI_T::INTEN: TXSTIEN Position     */
N#define USPI_INTEN_TXSTIEN_Msk        (0x1ul << USPI_INTEN_TXSTIEN_Pos)              /*!< USPI_T::INTEN: TXSTIEN Mask         */
N
N#define USPI_INTEN_TXENDIEN_Pos       (2)                                            /*!< USPI_T::INTEN: TXENDIEN Position    */
N#define USPI_INTEN_TXENDIEN_Msk       (0x1ul << USPI_INTEN_TXENDIEN_Pos)             /*!< USPI_T::INTEN: TXENDIEN Mask        */
N
N#define USPI_INTEN_RXSTIEN_Pos        (3)                                            /*!< USPI_T::INTEN: RXSTIEN Position     */
N#define USPI_INTEN_RXSTIEN_Msk        (0x1ul << USPI_INTEN_RXSTIEN_Pos)              /*!< USPI_T::INTEN: RXSTIEN Mask         */
N
N#define USPI_INTEN_RXENDIEN_Pos       (4)                                            /*!< USPI_T::INTEN: RXENDIEN Position    */
N#define USPI_INTEN_RXENDIEN_Msk       (0x1ul << USPI_INTEN_RXENDIEN_Pos)             /*!< USPI_T::INTEN: RXENDIEN Mask        */
N
N#define USPI_BRGEN_RCLKSEL_Pos        (0)                                            /*!< USPI_T::BRGEN: RCLKSEL Position     */
N#define USPI_BRGEN_RCLKSEL_Msk        (0x1ul << USPI_BRGEN_RCLKSEL_Pos)              /*!< USPI_T::BRGEN: RCLKSEL Mask         */
N
N#define USPI_BRGEN_PTCLKSEL_Pos       (1)                                            /*!< USPI_T::BRGEN: PTCLKSEL Position    */
N#define USPI_BRGEN_PTCLKSEL_Msk       (0x1ul << USPI_BRGEN_PTCLKSEL_Pos)             /*!< USPI_T::BRGEN: PTCLKSEL Mask        */
N
N#define USPI_BRGEN_SPCLKSEL_Pos       (2)                                            /*!< USPI_T::BRGEN: SPCLKSEL Position    */
N#define USPI_BRGEN_SPCLKSEL_Msk       (0x3ul << USPI_BRGEN_SPCLKSEL_Pos)             /*!< USPI_T::BRGEN: SPCLKSEL Mask        */
N
N#define USPI_BRGEN_TMCNTEN_Pos        (4)                                            /*!< USPI_T::BRGEN: TMCNTEN Position     */
N#define USPI_BRGEN_TMCNTEN_Msk        (0x1ul << USPI_BRGEN_TMCNTEN_Pos)              /*!< USPI_T::BRGEN: TMCNTEN Mask         */
N
N#define USPI_BRGEN_TMCNTSRC_Pos       (5)                                            /*!< USPI_T::BRGEN: TMCNTSRC Position    */
N#define USPI_BRGEN_TMCNTSRC_Msk       (0x1ul << USPI_BRGEN_TMCNTSRC_Pos)             /*!< USPI_T::BRGEN: TMCNTSRC Mask        */
N
N#define USPI_BRGEN_CLKDIV_Pos         (16)                                           /*!< USPI_T::BRGEN: CLKDIV Position      */
N#define USPI_BRGEN_CLKDIV_Msk         (0x3fful << USPI_BRGEN_CLKDIV_Pos)             /*!< USPI_T::BRGEN: CLKDIV Mask          */
N
N#define USPI_DATIN0_SYNCSEL_Pos       (0)                                            /*!< USPI_T::DATIN0: SYNCSEL Position    */
N#define USPI_DATIN0_SYNCSEL_Msk       (0x1ul << USPI_DATIN0_SYNCSEL_Pos)             /*!< USPI_T::DATIN0: SYNCSEL Mask        */
N
N#define USPI_DATIN0_ININV_Pos         (2)                                            /*!< USPI_T::DATIN0: ININV Position      */
N#define USPI_DATIN0_ININV_Msk         (0x1ul << USPI_DATIN0_ININV_Pos)               /*!< USPI_T::DATIN0: ININV Mask          */
N
N#define USPI_CTLIN0_SYNCSEL_Pos       (0)                                            /*!< USPI_T::CTLIN0: SYNCSEL Position    */
N#define USPI_CTLIN0_SYNCSEL_Msk       (0x1ul << USPI_CTLIN0_SYNCSEL_Pos)             /*!< USPI_T::CTLIN0: SYNCSEL Mask        */
N
N#define USPI_CTLIN0_ININV_Pos         (2)                                            /*!< USPI_T::CTLIN0: ININV Position      */
N#define USPI_CTLIN0_ININV_Msk         (0x1ul << USPI_CTLIN0_ININV_Pos)               /*!< USPI_T::CTLIN0: ININV Mask          */
N
N#define USPI_CLKIN_SYNCSEL_Pos        (0)                                            /*!< USPI_T::CLKIN: SYNCSEL Position     */
N#define USPI_CLKIN_SYNCSEL_Msk        (0x1ul << USPI_CLKIN_SYNCSEL_Pos)              /*!< USPI_T::CLKIN: SYNCSEL Mask         */
N
N#define USPI_LINECTL_LSB_Pos          (0)                                            /*!< USPI_T::LINECTL: LSB Position       */
N#define USPI_LINECTL_LSB_Msk          (0x1ul << USPI_LINECTL_LSB_Pos)                /*!< USPI_T::LINECTL: LSB Mask           */
N
N#define USPI_LINECTL_DATOINV_Pos      (5)                                            /*!< USPI_T::LINECTL: DATOINV Position   */
N#define USPI_LINECTL_DATOINV_Msk      (0x1ul << USPI_LINECTL_DATOINV_Pos)            /*!< USPI_T::LINECTL: DATOINV Mask       */
N
N#define USPI_LINECTL_CTLOINV_Pos      (7)                                            /*!< USPI_T::LINECTL: CTLOINV Position   */
N#define USPI_LINECTL_CTLOINV_Msk      (0x1ul << USPI_LINECTL_CTLOINV_Pos)            /*!< USPI_T::LINECTL: CTLOINV Mask       */
N
N#define USPI_LINECTL_DWIDTH_Pos       (8)                                            /*!< USPI_T::LINECTL: DWIDTH Position    */
N#define USPI_LINECTL_DWIDTH_Msk       (0xful << USPI_LINECTL_DWIDTH_Pos)             /*!< USPI_T::LINECTL: DWIDTH Mask        */
N
N#define USPI_TXDAT_TXDAT_Pos          (0)                                            /*!< USPI_T::TXDAT: TXDAT Position       */
N#define USPI_TXDAT_TXDAT_Msk          (0xfffful << USPI_TXDAT_TXDAT_Pos)             /*!< USPI_T::TXDAT: TXDAT Mask           */
N
N#define USPI_TXDAT_PORTDIR_Pos        (16)                                           /*!< USPI_T::TXDAT: PORTDIR Position     */
N#define USPI_TXDAT_PORTDIR_Msk        (0x1ul << USPI_TXDAT_PORTDIR_Pos)              /*!< USPI_T::TXDAT: PORTDIR Mask         */
N
N#define USPI_RXDAT_RXDAT_Pos          (0)                                            /*!< USPI_T::RXDAT: RXDAT Position       */
N#define USPI_RXDAT_RXDAT_Msk          (0xfffful << USPI_RXDAT_RXDAT_Pos)             /*!< USPI_T::RXDAT: RXDAT Mask           */
N
N#define USPI_BUFCTL_TXUDRIEN_Pos      (6)                                            /*!< USPI_T::BUFCTL: TXUDRIEN Position   */
N#define USPI_BUFCTL_TXUDRIEN_Msk      (0x1ul << USPI_BUFCTL_TXUDRIEN_Pos)            /*!< USPI_T::BUFCTL: TXUDRIEN Mask       */
N
N#define USPI_BUFCTL_TXCLR_Pos         (7)                                            /*!< USPI_T::BUFCTL: TXCLR Position      */
N#define USPI_BUFCTL_TXCLR_Msk         (0x1ul << USPI_BUFCTL_TXCLR_Pos)               /*!< USPI_T::BUFCTL: TXCLR Mask          */
N
N#define USPI_BUFCTL_RXOVIEN_Pos       (14)                                           /*!< USPI_T::BUFCTL: RXOVIEN Position    */
N#define USPI_BUFCTL_RXOVIEN_Msk       (0x1ul << USPI_BUFCTL_RXOVIEN_Pos)             /*!< USPI_T::BUFCTL: RXOVIEN Mask        */
N
N#define USPI_BUFCTL_RXCLR_Pos         (15)                                           /*!< USPI_T::BUFCTL: RXCLR Position      */
N#define USPI_BUFCTL_RXCLR_Msk         (0x1ul << USPI_BUFCTL_RXCLR_Pos)               /*!< USPI_T::BUFCTL: RXCLR Mask          */
N
N#define USPI_BUFCTL_TXRST_Pos         (16)                                           /*!< USPI_T::BUFCTL: TXRST Position      */
N#define USPI_BUFCTL_TXRST_Msk         (0x1ul << USPI_BUFCTL_TXRST_Pos)               /*!< USPI_T::BUFCTL: TXRST Mask          */
N
N#define USPI_BUFCTL_RXRST_Pos         (17)                                           /*!< USPI_T::BUFCTL: RXRST Position      */
N#define USPI_BUFCTL_RXRST_Msk         (0x1ul << USPI_BUFCTL_RXRST_Pos)               /*!< USPI_T::BUFCTL: RXRST Mask          */
N
N#define USPI_BUFSTS_RXEMPTY_Pos       (0)                                            /*!< USPI_T::BUFSTS: RXEMPTY Position    */
N#define USPI_BUFSTS_RXEMPTY_Msk       (0x1ul << USPI_BUFSTS_RXEMPTY_Pos)             /*!< USPI_T::BUFSTS: RXEMPTY Mask        */
N
N#define USPI_BUFSTS_RXFULL_Pos        (1)                                            /*!< USPI_T::BUFSTS: RXFULL Position     */
N#define USPI_BUFSTS_RXFULL_Msk        (0x1ul << USPI_BUFSTS_RXFULL_Pos)              /*!< USPI_T::BUFSTS: RXFULL Mask         */
N
N#define USPI_BUFSTS_RXOVIF_Pos        (3)                                            /*!< USPI_T::BUFSTS: RXOVIF Position     */
N#define USPI_BUFSTS_RXOVIF_Msk        (0x1ul << USPI_BUFSTS_RXOVIF_Pos)              /*!< USPI_T::BUFSTS: RXOVIF Mask         */
N
N#define USPI_BUFSTS_TXEMPTY_Pos       (8)                                            /*!< USPI_T::BUFSTS: TXEMPTY Position    */
N#define USPI_BUFSTS_TXEMPTY_Msk       (0x1ul << USPI_BUFSTS_TXEMPTY_Pos)             /*!< USPI_T::BUFSTS: TXEMPTY Mask        */
N
N#define USPI_BUFSTS_TXFULL_Pos        (9)                                            /*!< USPI_T::BUFSTS: TXFULL Position     */
N#define USPI_BUFSTS_TXFULL_Msk        (0x1ul << USPI_BUFSTS_TXFULL_Pos)              /*!< USPI_T::BUFSTS: TXFULL Mask         */
N
N#define USPI_BUFSTS_TXUDRIF_Pos       (11)                                           /*!< USPI_T::BUFSTS: TXUDRIF Position    */
N#define USPI_BUFSTS_TXUDRIF_Msk       (0x1ul << USPI_BUFSTS_TXUDRIF_Pos)             /*!< USPI_T::BUFSTS: TXUDRIF Mask        */
N
N#define USPI_PDMACTL_PDMARST_Pos      (0)                                            /*!< USPI_T::PDMACTL: PDMARST Position   */
N#define USPI_PDMACTL_PDMARST_Msk      (0x1ul << USPI_PDMACTL_PDMARST_Pos)            /*!< USPI_T::PDMACTL: PDMARST Mask       */
N
N#define USPI_PDMACTL_TXPDMAEN_Pos     (1)                                            /*!< USPI_T::PDMACTL: TXPDMAEN Position  */
N#define USPI_PDMACTL_TXPDMAEN_Msk     (0x1ul << USPI_PDMACTL_TXPDMAEN_Pos)           /*!< USPI_T::PDMACTL: TXPDMAEN Mask      */
N
N#define USPI_PDMACTL_RXPDMAEN_Pos     (2)                                            /*!< USPI_T::PDMACTL: RXPDMAEN Position  */
N#define USPI_PDMACTL_RXPDMAEN_Msk     (0x1ul << USPI_PDMACTL_RXPDMAEN_Pos)           /*!< USPI_T::PDMACTL: RXPDMAEN Mask      */
N
N#define USPI_PDMACTL_PDMAEN_Pos       (3)                                            /*!< USPI_T::PDMACTL: PDMAEN Position    */
N#define USPI_PDMACTL_PDMAEN_Msk       (0x1ul << USPI_PDMACTL_PDMAEN_Pos)             /*!< USPI_T::PDMACTL: PDMAEN Mask        */
N
N#define USPI_WKCTL_WKEN_Pos           (0)                                            /*!< USPI_T::WKCTL: WKEN Position        */
N#define USPI_WKCTL_WKEN_Msk           (0x1ul << USPI_WKCTL_WKEN_Pos)                 /*!< USPI_T::WKCTL: WKEN Mask            */
N
N#define USPI_WKCTL_PDBOPT_Pos         (2)                                            /*!< USPI_T::WKCTL: PDBOPT Position      */
N#define USPI_WKCTL_PDBOPT_Msk         (0x1ul << USPI_WKCTL_PDBOPT_Pos)               /*!< USPI_T::WKCTL: PDBOPT Mask          */
N
N#define USPI_WKSTS_WKF_Pos            (0)                                            /*!< USPI_T::WKSTS: WKF Position         */
N#define USPI_WKSTS_WKF_Msk            (0x1ul << USPI_WKSTS_WKF_Pos)                  /*!< USPI_T::WKSTS: WKF Mask             */
N
N#define USPI_PROTCTL_SLAVE_Pos        (0)                                            /*!< USPI_T::PROTCTL: SLAVE Position     */
N#define USPI_PROTCTL_SLAVE_Msk        (0x1ul << USPI_PROTCTL_SLAVE_Pos)              /*!< USPI_T::PROTCTL: SLAVE Mask         */
N
N#define USPI_PROTCTL_SLV3WIRE_Pos     (1)                                            /*!< USPI_T::PROTCTL: SLV3WIRE Position  */
N#define USPI_PROTCTL_SLV3WIRE_Msk     (0x1ul << USPI_PROTCTL_SLV3WIRE_Pos)           /*!< USPI_T::PROTCTL: SLV3WIRE Mask      */
N
N#define USPI_PROTCTL_SS_Pos           (2)                                            /*!< USPI_T::PROTCTL: SS Position        */
N#define USPI_PROTCTL_SS_Msk           (0x1ul << USPI_PROTCTL_SS_Pos)                 /*!< USPI_T::PROTCTL: SS Mask            */
N
N#define USPI_PROTCTL_AUTOSS_Pos       (3)                                            /*!< USPI_T::PROTCTL: AUTOSS Position    */
N#define USPI_PROTCTL_AUTOSS_Msk       (0x1ul << USPI_PROTCTL_AUTOSS_Pos)             /*!< USPI_T::PROTCTL: AUTOSS Mask        */
N
N#define USPI_PROTCTL_SCLKMODE_Pos     (6)                                            /*!< USPI_T::PROTCTL: SCLKMODE Position  */
N#define USPI_PROTCTL_SCLKMODE_Msk     (0x3ul << USPI_PROTCTL_SCLKMODE_Pos)           /*!< USPI_T::PROTCTL: SCLKMODE Mask      */
N
N#define USPI_PROTCTL_SUSPITV_Pos      (8)                                            /*!< USPI_T::PROTCTL: SUSPITV Position   */
N#define USPI_PROTCTL_SUSPITV_Msk      (0xful << USPI_PROTCTL_SUSPITV_Pos)            /*!< USPI_T::PROTCTL: SUSPITV Mask       */
N
N#define USPI_PROTCTL_TSMSEL_Pos       (12)                                           /*!< USPI_T::PROTCTL: TSMSEL Position    */
N#define USPI_PROTCTL_TSMSEL_Msk       (0x7ul << USPI_PROTCTL_TSMSEL_Pos)             /*!< USPI_T::PROTCTL: TSMSEL Mask        */
N
N#define USPI_PROTCTL_SLVTOCNT_Pos     (16)                                           /*!< USPI_T::PROTCTL: SLVTOCNT Position  */
N#define USPI_PROTCTL_SLVTOCNT_Msk     (0x3fful << USPI_PROTCTL_SLVTOCNT_Pos)         /*!< USPI_T::PROTCTL: SLVTOCNT Mask      */
N
N#define USPI_PROTCTL_TXUDRPOL_Pos     (28)                                           /*!< USPI_T::PROTCTL: TXUDRPOL Position  */
N#define USPI_PROTCTL_TXUDRPOL_Msk     (0x1ul << USPI_PROTCTL_TXUDRPOL_Pos)           /*!< USPI_T::PROTCTL: TXUDRPOL Mask      */
N
N#define USPI_PROTCTL_PROTEN_Pos       (31)                                           /*!< USPI_T::PROTCTL: PROTEN Position    */
N#define USPI_PROTCTL_PROTEN_Msk       (0x1ul << USPI_PROTCTL_PROTEN_Pos)             /*!< USPI_T::PROTCTL: PROTEN Mask        */
N
N#define USPI_PROTIEN_SSINAIEN_Pos     (0)                                            /*!< USPI_T::PROTIEN: SSINAIEN Position  */
N#define USPI_PROTIEN_SSINAIEN_Msk     (0x1ul << USPI_PROTIEN_SSINAIEN_Pos)           /*!< USPI_T::PROTIEN: SSINAIEN Mask      */
N
N#define USPI_PROTIEN_SSACTIEN_Pos     (1)                                            /*!< USPI_T::PROTIEN: SSACTIEN Position  */
N#define USPI_PROTIEN_SSACTIEN_Msk     (0x1ul << USPI_PROTIEN_SSACTIEN_Pos)           /*!< USPI_T::PROTIEN: SSACTIEN Mask      */
N
N#define USPI_PROTIEN_SLVTOIEN_Pos     (2)                                            /*!< USPI_T::PROTIEN: SLVTOIEN Position  */
N#define USPI_PROTIEN_SLVTOIEN_Msk     (0x1ul << USPI_PROTIEN_SLVTOIEN_Pos)           /*!< USPI_T::PROTIEN: SLVTOIEN Mask      */
N
N#define USPI_PROTIEN_SLVBEIEN_Pos     (3)                                            /*!< USPI_T::PROTIEN: SLVBEIEN Position  */
N#define USPI_PROTIEN_SLVBEIEN_Msk     (0x1ul << USPI_PROTIEN_SLVBEIEN_Pos)           /*!< USPI_T::PROTIEN: SLVBEIEN Mask      */
N
N#define USPI_PROTSTS_TXSTIF_Pos       (1)                                            /*!< USPI_T::PROTSTS: TXSTIF Position    */
N#define USPI_PROTSTS_TXSTIF_Msk       (0x1ul << USPI_PROTSTS_TXSTIF_Pos)             /*!< USPI_T::PROTSTS: TXSTIF Mask        */
N
N#define USPI_PROTSTS_TXENDIF_Pos      (2)                                            /*!< USPI_T::PROTSTS: TXENDIF Position   */
N#define USPI_PROTSTS_TXENDIF_Msk      (0x1ul << USPI_PROTSTS_TXENDIF_Pos)            /*!< USPI_T::PROTSTS: TXENDIF Mask       */
N
N#define USPI_PROTSTS_RXSTIF_Pos       (3)                                            /*!< USPI_T::PROTSTS: RXSTIF Position    */
N#define USPI_PROTSTS_RXSTIF_Msk       (0x1ul << USPI_PROTSTS_RXSTIF_Pos)             /*!< USPI_T::PROTSTS: RXSTIF Mask        */
N
N#define USPI_PROTSTS_RXENDIF_Pos      (4)                                            /*!< USPI_T::PROTSTS: RXENDIF Position   */
N#define USPI_PROTSTS_RXENDIF_Msk      (0x1ul << USPI_PROTSTS_RXENDIF_Pos)            /*!< USPI_T::PROTSTS: RXENDIF Mask       */
N
N#define USPI_PROTSTS_SLVTOIF_Pos      (5)                                            /*!< USPI_T::PROTSTS: SLVTOIF Position   */
N#define USPI_PROTSTS_SLVTOIF_Msk      (0x1ul << USPI_PROTSTS_SLVTOIF_Pos)            /*!< USPI_T::PROTSTS: SLVTOIF Mask       */
N
N#define USPI_PROTSTS_SLVBEIF_Pos      (6)                                            /*!< USPI_T::PROTSTS: SLVBEIF Position   */
N#define USPI_PROTSTS_SLVBEIF_Msk      (0x1ul << USPI_PROTSTS_SLVBEIF_Pos)            /*!< USPI_T::PROTSTS: SLVBEIF Mask       */
N
N#define USPI_PROTSTS_SSINAIF_Pos      (8)                                            /*!< USPI_T::PROTSTS: SSINAIF Position   */
N#define USPI_PROTSTS_SSINAIF_Msk      (0x1ul << USPI_PROTSTS_SSINAIF_Pos)            /*!< USPI_T::PROTSTS: SSINAIF Mask       */
N
N#define USPI_PROTSTS_SSACTIF_Pos      (9)                                            /*!< USPI_T::PROTSTS: SSACTIF Position   */
N#define USPI_PROTSTS_SSACTIF_Msk      (0x1ul << USPI_PROTSTS_SSACTIF_Pos)            /*!< USPI_T::PROTSTS: SSACTIF Mask       */
N
N#define USPI_PROTSTS_SSLINE_Pos       (16)                                           /*!< USPI_T::PROTSTS: SSLINE Position    */
N#define USPI_PROTSTS_SSLINE_Msk       (0x1ul << USPI_PROTSTS_SSLINE_Pos)             /*!< USPI_T::PROTSTS: SSLINE Mask        */
N
N#define USPI_PROTSTS_BUSY_Pos         (17)                                           /*!< USPI_T::PROTSTS: BUSY Position      */
N#define USPI_PROTSTS_BUSY_Msk         (0x1ul << USPI_PROTSTS_BUSY_Pos)               /*!< USPI_T::PROTSTS: BUSY Mask          */
N
N#define USPI_PROTSTS_SLVUDR_Pos       (18)                                           /*!< USPI_T::PROTSTS: SLVUDR Position    */
N#define USPI_PROTSTS_SLVUDR_Msk       (0x1ul << USPI_PROTSTS_SLVUDR_Pos)             /*!< USPI_T::PROTSTS: SLVUDR Mask        */
N
N/**@}*/ /* USPI_CONST */
N/**@}*/ /* end of USPI register group */
N
N
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __USPI_REG_H__ */
L 181 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "uuart_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\uuart_reg.h" 1
N/**************************************************************************//**
N * @file     uuart_reg.h
N * @version  V1.00
N * @brief    UUART register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __UUART_REG_H__
N#define __UUART_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup UUART UART Mode of USCI Controller (UUART)
N    Memory Mapped Structure for UUART Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var UUART_T::CTL
N     * Offset: 0x00  USCI Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |FUNMODE   |Function Mode
N     * |        |          |This bit field selects the protocol for this USCI controller.
N     * |        |          |Selecting a protocol that is not available or a reserved combination disables the USCI.
N     * |        |          |When switching between two protocols, the USCI has to be disabled before selecting a new protocol.
N     * |        |          |Simultaneously, the USCI will be reset when user write 000 to FUNMODE.
N     * |        |          |000 = The USCI is disabled. All protocol related state machines are set to idle state.
N     * |        |          |001 = The SPI protocol is selected.
N     * |        |          |010 = The UART protocol is selected.
N     * |        |          |100 = The I2C protocol is selected.
N     * |        |          |Note: Other bit combinations are reserved.
N     * @var UUART_T::INTEN
N     * Offset: 0x04  USCI Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TXSTIEN   |Transmit Start Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a transmit start event.
N     * |        |          |0 = The transmit start interrupt Disabled.
N     * |        |          |1 = The transmit start interrupt Enabled.
N     * |[2]     |TXENDIEN  |Transmit End Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a transmit finish event.
N     * |        |          |0 = The transmit finish interrupt Disabled.
N     * |        |          |1 = The transmit finish interrupt Enabled.
N     * |[3]     |RXSTIEN   |Receive Start Interrupt Enable BIt
N     * |        |          |This bit enables the interrupt generation in case of a receive start event.
N     * |        |          |0 = The receive start interrupt Disabled.
N     * |        |          |1 = The receive start interrupt Enabled.
N     * |[4]     |RXENDIEN  |Receive End Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a receive finish event.
N     * |        |          |0 = The receive end interrupt Disabled.
N     * |        |          |1 = The receive end interrupt Enabled.
N     * @var UUART_T::BRGEN
N     * Offset: 0x08  USCI Baud Rate Generator Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RCLKSEL   |Reference Clock Source Selection
N     * |        |          |This bit selects the source signal of reference clock (fREF_CLK).
N     * |        |          |0 = Peripheral device clock fPCLK.
N     * |        |          |1 = Reserved.
N     * |[1]     |PTCLKSEL  |Protocol Clock Source Selection
N     * |        |          |This bit selects the source signal of protocol clock (fPROT_CLK).
N     * |        |          |0 = Reference clock fREF_CLK.
N     * |        |          |1 = fREF_CLK2 (its frequency is half of fREF_CLK).
N     * |[3:2]   |SPCLKSEL  |Sample Clock Source Selection
N     * |        |          |This bit field used for the clock source selection of a sample clock (fSAMP_CLK) for the protocol processor.
N     * |        |          |00 = fSAMP_CLK = fDIV_CLK.
N     * |        |          |01 = fSAMP_CLK = fPROT_CLK.
N     * |        |          |10 = fSAMP_CLK = fSCLK.
N     * |        |          |11 = fSAMP_CLK = fREF_CLK.
N     * |[4]     |TMCNTEN   |Timing Measurement Counter Enable Bit
N     * |        |          |This bit enables the 10-bit timing measurement counter.
N     * |        |          |0 = Timing measurement counter is Disabled.
N     * |        |          |1 = Timing measurement counter is Enabled.
N     * |[5]     |TMCNTSRC  |Timing Measurement Counter Clock Source Selection
N     * |        |          |0 = Timing measurement counter with fPROT_CLK.
N     * |        |          |1 = Timing measurement counter with fDIV_CLK.
N     * |[9:8]   |PDSCNT    |Pre-divider for Sample Counter
N     * |        |          |This bit field defines the divide ratio of the clock division from sample clock fSAMP_CLK.
N     * |        |          |The divided frequency fPDS_CNT = fSAMP_CLK / (PDSCNT+1).
N     * |[14:10] |DSCNT     |Denominator for Sample Counter
N     * |        |          |This bit field defines the divide ratio of the sample clock fSAMP_CLK.
N     * |        |          |The divided frequency fDS_CNT = fPDS_CNT / (DSCNT+1).
N     * |        |          |Note: The maximum value of DSCNT is 0xF on UART mode and suggest to set over 4 to confirm the receiver data is sampled in right value.
N     * |[25:16] |CLKDIV    |Clock Divider
N     * |        |          |This bit field defines the ratio between the protocol clock frequency fPROT_CLK and the clock divider frequency fDIV_CLK (fDIV_CLK = fPROT_CLK / (CLKDIV+1) ).
N     * |        |          |Note: In UART function, it can be updated by hardware in the 4th falling edge of the input data 0x55 when the auto baud rate function (ABREN(UUART_PROTCTL[6])) is enabled.
N     * |        |          |The revised value is the average bit time between bit 5 and bit 6.
N     * |        |          |The user can use revised CLKDIV and new BRDETITV (UUART_PROTCTL[24:16]) to calculate the precise baud rate.
N     * @var UUART_T::DATIN0
N     * Offset: 0x10  USCI Input Data Signal Configuration Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input   Signal Synchronization Selection
N     * |        |          |This bit   selects if the un-synchronized input signal (with optionally inverted) or the   synchronized (and optionally filtered) signal can be used as input for the   data shift unit.
N     * |        |          |0 = The   un-synchronized signal can be taken as input for the data shift unit.
N     * |        |          |1 = The   synchronized signal can be taken as input for the data shift unit.
N     * |[2]     |ININV     |Input   Signal Inverse Selection
N     * |        |          |This bit   defines the inverter enable of the input asynchronous signal.
N     * |        |          |0 = The   un-synchronized input signal will not be inverted.
N     * |        |          |1 = The   un-synchronized input signal will be inverted.
N     * |[4:3]   |EDGEDET   |Input   Signal Edge Detection Mode
N     * |        |          |This bit   field selects which edge actives the trigger event of input data signal.
N     * |        |          |00 = The   trigger event activation is disabled.
N     * |        |          |01 = A rising   edge activates the trigger event of input data signal.
N     * |        |          |10 = A   falling edge activates the trigger event of input data signal.
N     * |        |          |11 = Both edges   activate the trigger event of input data signal.
N     * |        |          |Note: In UART function mode, it is suggested to   set this bit field as 10.
N     * @var UUART_T::CTLIN0
N     * Offset: 0x20  USCI Input Control Signal Configuration Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input   Synchronization Signal Selection
N     * |        |          |This bit   selects if the un-synchronized input signal (with optionally inverted) or the   synchronized (and optionally filtered) signal can be used as input for the   data shift unit.
N     * |        |          |0 = The   un-synchronized signal can be taken as input for the data shift unit.
N     * |        |          |1 = The   synchronized signal can be taken as input for the data shift unit.
N     * |[2]     |ININV     |Input   Signal Inverse Selection
N     * |        |          |This bit   defines the inverter enable of the input asynchronous signal.
N     * |        |          |0 = The   un-synchronized input signal will not be inverted.
N     * |        |          |1 = The   un-synchronized input signal will be inverted.
N     * @var UUART_T::CLKIN
N     * Offset: 0x28  USCI Input Clock Signal Configuration Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input   Synchronization Signal Selection
N     * |        |          |This bit   selects if the un-synchronized input signal or the synchronized (and optionally   filtered) signal can be used as input for the data shift unit.
N     * |        |          |0 = The   un-synchronized signal can be taken as input for the data shift unit.
N     * |        |          |1 = The   synchronized signal can be taken as input for the data shift unit.
N     * @var UUART_T::LINECTL
N     * Offset: 0x2C  USCI Line Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |LSB       |LSB First Transmission Selection
N     * |        |          |0 = The MSB, which bit of transmit/receive data buffer depends on the setting of DWIDTH, is transmitted/received first.
N     * |        |          |1 = The LSB, the bit 0 of data buffer, will be transmitted/received first.
N     * |[5]     |DATOINV   |Data Output Inverse Selection
N     * |        |          |This bit defines the relation between the internal shift data value and the output data signal of USCIx_DAT1 pin.
N     * |        |          |0 = The value of USCIx_DAT1 is equal to the data shift register.
N     * |        |          |1 = The value of USCIx_DAT1 is the inversion of data shift register.
N     * |[7]     |CTLOINV   |Control Signal Output Inverse Selection
N     * |        |          |This bit defines the relation between the internal control signal and the output control signal.
N     * |        |          |0 = No effect.
N     * |        |          |1 = The control signal will be inverted before its output.
N     * |        |          |Note: In UART protocol, the control signal means nRTS signal.
N     * |[11:8]  |DWIDTH    |Word Length of Transmission
N     * |        |          |This bit field defines the data word length (amount of bits) for reception and transmission.
N     * |        |          |The data word is always right-aligned in the data buffer.
N     * |        |          |USCI support word length from 4 to 16 bits.
N     * |        |          |0x0: The data word contains 16 bits located at bit positions [15:0].
N     * |        |          |0x1: Reserved.
N     * |        |          |0x2: Reserved.
N     * |        |          |0x3: Reserved.
N     * |        |          |0x4: The data word contains 4 bits located at bit positions [3:0].
N     * |        |          |0x5: The data word contains 5 bits located at bit positions [4:0].
N     * |        |          |...
N     * |        |          |0xF: The data word contains 15 bits located at bit positions [14:0].
N     * |        |          |Note: In UART protocol, the length can be configured as 6~13 bits.
N     * @var UUART_T::TXDAT
N     * Offset: 0x30  USCI Transmit Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |TXDAT     |Transmit Data
N     * |        |          |Software can use this bit field to write 16-bit transmit data for transmission.
N     * @var UUART_T::RXDAT
N     * Offset: 0x34  USCI Receive Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RXDAT     |Received Data
N     * |        |          |This bit field monitors the received data which stored in receive data buffer.
N     * |        |          |Note: RXDAT[15:13] indicate the same frame status of BREAK, FRMERR and PARITYERR (UUART_PROTSTS[7:5]).
N     * @var UUART_T::BUFCTL
N     * Offset: 0x38  USCI Transmit/Receive Buffer Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7]     |TXCLR     |Clear Transmit Buffer
N     * |        |          |0 = No effect.
N     * |        |          |1 = The transmit buffer is cleared (filling level is cleared and output pointer is set to input pointer value).
N     * |        |          |Should only be used while the buffer is not taking part in data traffic.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * |[14]    |RXOVIEN   |Receive Buffer Overrun Error Interrupt Enable Bit
N     * |        |          |0 = Receive overrun interrupt Disabled.
N     * |        |          |1 = Receive overrun interrupt Enabled.
N     * |[15]    |RXCLR     |Clear Receive Buffer
N     * |        |          |0 = No effect.
N     * |        |          |1 = The receive buffer is cleared (filling level is cleared and output pointer is set to input pointer value).
N     * |        |          |Should only be used while the buffer is not taking part in data traffic.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * |[16]    |TXRST     |Transmit Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the transmit-related counters, state machine, and the content of transmit shift register and data buffer.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * |[17]    |RXRST     |Receive Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the receive-related counters, state machine, and the content of receive shift register and data buffer.
N     * |        |          |Note1: It is cleared automatically after one PCLK cycle.
N     * |        |          |Note2: It is suggested to check the RXBUSY (UUART_PROTSTS[10]) before this bit will be set to 1.
N     * @var UUART_T::BUFSTS
N     * Offset: 0x3C  USCI Transmit/Receive Buffer Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RXEMPTY   |Receive Buffer Empty Indicator
N     * |        |          |0 = Receive buffer is not empty.
N     * |        |          |1 = Receive buffer is empty.
N     * |[1]     |RXFULL    |Receive Buffer Full Indicator
N     * |        |          |0 = Receive buffer is not full.
N     * |        |          |1 = Receive buffer is full.
N     * |[3]     |RXOVIF    |Receive Buffer Over-run Error Interrupt Status
N     * |        |          |This bit indicates that a receive buffer overrun error event has been detected.
N     * |        |          |If RXOVIEN (UUART_BUFCTL[14]) is enabled, the corresponding interrupt request is activated.
N     * |        |          |It is cleared by software writes 1 to this bit.
N     * |        |          |0 = A receive buffer overrun error event has not been detected.
N     * |        |          |1 = A receive buffer overrun error event has been detected.
N     * |[8]     |TXEMPTY   |Transmit Buffer Empty Indicator
N     * |        |          |0 = Transmit buffer is not empty.
N     * |        |          |1 = Transmit buffer is empty.
N     * |[9]     |TXFULL    |Transmit Buffer Full Indicator
N     * |        |          |0 = Transmit buffer is not full.
N     * |        |          |1 = Transmit buffer is full.
N     * @var UUART_T::PDMACTL
N     * Offset: 0x40  USCI PDMA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |PDMARST   |PDMA Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the USCI's PDMA control logic. This bit will be cleared to 0 automatically.
N     * |[1]     |TXPDMAEN  |PDMA Transmit Channel Available
N     * |        |          |0 = Transmit PDMA function Disabled.
N     * |        |          |1 = Transmit PDMA function Enabled.
N     * |[2]     |RXPDMAEN  |PDMA Receive Channel Available
N     * |        |          |0 = Receive PDMA function Disabled.
N     * |        |          |1 = Receive PDMA function Enabled.
N     * |[3]     |PDMAEN    |PDMA Mode Enable Bit
N     * |        |          |0 = PDMA function Disabled.
N     * |        |          |1 = PDMA function Enabled.
N     * @var UUART_T::WKCTL
N     * Offset: 0x54  USCI Wake-up Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKEN      |Wake-up Enable Bit
N     * |        |          |0 = Wake-up function Disabled.
N     * |        |          |1 = Wake-up function Enabled.
N     * |[2]     |PDBOPT    |Power Down Blocking Option
N     * |        |          |0 = If user attempts to enter Power-down mode by executing WFI while the protocol is in transferring, MCU will stop the transfer and enter Power-down mode immediately.
N     * |        |          |1 = If user attempts to enter Power-down mode by executing WFI while the protocol is in transferring, the on-going transfer will not be stopped and MCU will enter idle mode immediately.
N     * @var UUART_T::WKSTS
N     * Offset: 0x58  USCI Wake-up Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKF       |Wake-up Flag
N     * |        |          |When chip is woken up from Power-down mode, this bit is set to 1.
N     * |        |          |Software can write 1 to clear this bit.
N     * @var UUART_T::PROTCTL
N     * Offset: 0x5C  USCI Protocol Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |STOPB     |Stop Bits
N     * |        |          |This bit defines the number of stop bits in an UART frame.
N     * |        |          |0 = The number of stop bits is 1.
N     * |        |          |1 = The number of stop bits is 2.
N     * |[1]     |PARITYEN  |Parity Enable Bit
N     * |        |          |This bit defines the parity bit is enabled in an UART frame.
N     * |        |          |0 = The parity bit Disabled.
N     * |        |          |1 = The parity bit Enabled.
N     * |[2]     |EVENPARITY|Even Parity Enable Bit
N     * |        |          |0 = Odd number of logic 1's is transmitted and checked in each word.
N     * |        |          |1 = Even number of logic 1's is transmitted and checked in each word.
N     * |        |          |Note: This bit has effect only when PARITYEN is set.
N     * |[3]     |RTSAUTOEN |nRTS Auto-flow Control Enable Bit
N     * |        |          |When nRTS auto-flow is enabled, if the receiver buffer is full (RXFULL (UUART_BUFSTS[1] =1), the UART will de-assert nRTS signal.
N     * |        |          |0 = nRTS auto-flow control Disabled.
N     * |        |          |1 = nRTS auto-flow control Enabled.
N     * |        |          |Note: This bit has effect only when the RTSAUDIREN is not set.
N     * |[4]     |CTSAUTOEN |nCTS Auto-flow Control Enable Bit
N     * |        |          |When nCTS auto-flow is enabled, the UART will send data to external device when nCTS input assert (UART will not send data to device if nCTS input is dis-asserted).
N     * |        |          |0 = nCTS auto-flow control Disabled.
N     * |        |          |1 = nCTS auto-flow control Enabled.
N     * |[5]     |RTSAUDIREN|nRTS Auto Direction Enable Bit
N     * |        |          |When nRTS auto direction is enabled, if the transmitted bytes in the TX buffer is empty, the UART asserted nRTS signal automatically.
N     * |        |          |0 = nRTS auto direction control Disabled.
N     * |        |          |1 = nRTS auto direction control Enabled.
N     * |        |          |Note 1: This bit is used for nRTS auto direction control for RS485.
N     * |        |          |Note 2: This bit has effect only when the RTSAUTOEN is not set.
N     * |[6]     |ABREN     |Auto-baud Rate Detect Enable Bit
N     * |        |          |0 = Auto-baud rate detect function Disabled.
N     * |        |          |1 = Auto-baud rate detect function Enabled.
N     * |        |          |Note: When the auto - baud rate detect operation finishes, hardware will clear this bit.
N     * |        |          |The associated interrupt ABRDETIF (UUART_PROTST[9]) will be generated (If ARBIEN (UUART_PROTIEN [1]) is enabled).
N     * |[9]     |DATWKEN   |Data Wake-up Mode Enable Bit
N     * |        |          |0 = Data wake-up mode Disabled.
N     * |        |          |1 = Data wake-up mode Enabled.
N     * |[10]    |CTSWKEN   |nCTS Wake-up Mode Enable Bit
N     * |        |          |0 = nCTS wake-up mode Disabled.
N     * |        |          |1 = nCTS wake-up mode Enabled.
N     * |[14:11] |WAKECNT   |Wake-up Counter
N     * |        |          |These bits field indicate how many clock cycle selected by fPDS_CNT do the slave can get the 1st bit (start bit) when the device is wake-up from Power-down mode.
N     * |[24:16] |BRDETITV  |Baud Rate Detection Interval
N     * |        |          |This bit fields indicate how many clock cycle selected by TMCNTSRC (UUART_BRGEN [5]) does the slave calculates the baud rate in one bits.
N     * |        |          |The order of the bus shall be 1 and 0 step by step (e.g.
N     * |        |          |the input data pattern shall be 0x55).
N     * |        |          |The user can read the value to know the current input baud rate of the bus whenever the ABRDETIF (UUART_PROTSTS[9]) is set.
N     * |        |          |Note: This bit can be cleared to 0 by software writing '0' to the BRDETITV.
N     * |[26]    |STICKEN   |Stick Parity Enable Bit
N     * |        |          |0 = Stick parity Disabled.
N     * |        |          |1 = Stick parity Enabled.
N     * |        |          |Note: Refer to RS-485 Support section for detailed information.
N     * |[29]    |BCEN      |Transmit Break Control Enable Bit
N     * |        |          |0 = Transmit Break Control Disabled.
N     * |        |          |1 = Transmit Break Control Enabled.
N     * |        |          |Note: When this bit is set to logic 1, the serial data output (TX) is forced to the Spacing State (logic 0).
N     * |        |          |This bit acts only on TX line and has no effect on the transmitter logic.
N     * |[31]    |PROTEN    |UART Protocol Enable Bit
N     * |        |          |0 = UART Protocol Disabled.
N     * |        |          |1 = UART Protocol Enabled.
N     * @var UUART_T::PROTIEN
N     * Offset: 0x60  USCI Protocol Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |ABRIEN    |Auto-baud Rate Interrupt Enable Bit
N     * |        |          |0 = Auto-baud rate interrupt Disabled.
N     * |        |          |1 = Auto-baud rate interrupt Enabled.
N     * |[2]     |RLSIEN    |Receive Line Status Interrupt Enable Bit
N     * |        |          |0 = Receive line status interrupt Disabled.
N     * |        |          |1 = Receive line status interrupt Enabled.
N     * |        |          |Note: UUART_PROTSTS[7:5] indicates the current interrupt event for receive line status interrupt.
N     * @var UUART_T::PROTSTS
N     * Offset: 0x64  USCI Protocol Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TXSTIF    |Transmit Start Interrupt Flag
N     * |        |          |0 = A transmit start interrupt status has not occurred.
N     * |        |          |1 = A transmit start interrupt status has occurred.
N     * |        |          |Note1: It is cleared by software writing one into this bit.
N     * |        |          |Note2: Used for user to load next transmit data when there is no data in transmit buffer.
N     * |[2]     |TXENDIF   |Transmit End Interrupt Flag
N     * |        |          |0 = A transmit end interrupt status has not occurred.
N     * |        |          |1 = A transmit end interrupt status has occurred.
N     * |        |          |Note: It is cleared by software writing 1 into this bit.
N     * |[3]     |RXSTIF    |Receive Start Interrupt Flag
N     * |        |          |0 = A receive start interrupt status has not occurred.
N     * |        |          |1 = A receive start interrupt status has occurred.
N     * |        |          |Note: It is cleared by software writing 1 into this bit.
N     * |[4]     |RXENDIF   |Receive End Interrupt Flag
N     * |        |          |0 = A receive finish interrupt status has not occurred.
N     * |        |          |1 = A receive finish interrupt status has occurred.
N     * |        |          |Note: It is cleared by software writing 1 into this bit.
N     * |[5]     |PARITYERR |Parity Error Flag
N     * |        |          |This bit is set to logic 1 whenever the received character does not have a valid "parity bit".
N     * |        |          |0 = No parity error is generated.
N     * |        |          |1 = Parity error is generated.
N     * |        |          |Note: This bit can be cleared by writing "1" among the BREAK, FRMERR and PARITYERR bits.
N     * |[6]     |FRMERR    |Framing Error Flag
N     * |        |          |This bit is set to logic 1 whenever the received character does not have a valid "stop bit" (that is, the stop bit following the last data bit or parity bit is detected as logic 0).
N     * |        |          |0 = No framing error is generated.
N     * |        |          |1 = Framing error is generated.
N     * |        |          |Note: This bit can be cleared by writing "1" among the BREAK, FRMERR and PARITYERR bits.
N     * |[7]     |BREAK     |Break Flag
N     * |        |          |This bit is set to logic 1 whenever the received data input (RX) is held in the "spacing state" (logic 0) for longer than a full word transmission time (that is, the total time of "start bit" + data bits + parity + stop bits).
N     * |        |          |0 = No Break is generated.
N     * |        |          |1 = Break is generated in the receiver bus.
N     * |        |          |Note: This bit can be cleared by writing "1" among the BREAK, FRMERR and PARITYERR bits.
N     * |[9]     |ABRDETIF  |Auto-baud Rate Interrupt Flag
N     * |        |          |This bit is set when auto-baud rate detection is done among the falling edge of the input data.
N     * |        |          |If the ABRIEN (UUART_PROTCTL[6]) is set, the auto-baud rate interrupt will be generated.
N     * |        |          |This bit can be set 4 times when the input data pattern is 0x55 and it is cleared before the next falling edge of the input bus.
N     * |        |          |0 = Auto-baud rate detect function is not done.
N     * |        |          |1 = One Bit auto-baud rate detect function is done.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[10]    |RXBUSY    |RX Bus Status Flag (Read Only)
N     * |        |          |This bit indicates the busy status of the receiver.
N     * |        |          |0 = The receiver is Idle.
N     * |        |          |1 = The receiver is BUSY.
N     * |[11]    |ABERRSTS  |Auto-baud Rate Error Status
N     * |        |          |This bit is set when auto-baud rate detection counter overrun.
N     * |        |          |When the auto-baud rate counter overrun, the user shall revise the CLKDIV (UUART_BRGEN[25:16]) value and enable ABREN (UUART_PROTCTL[6]) to detect the correct baud rate again.
N     * |        |          |0 = Auto-baud rate detect counter is not overrun.
N     * |        |          |1 = Auto-baud rate detect counter is overrun.
N     * |        |          |Note 1: This bit is set at the same time of ABRDETIF.
N     * |        |          |Note 2: This bit can be cleared by writing "1" to ABRDETIF or ABERRSTS.
N     * |[16]    |CTSSYNCLV |nCTS Synchronized Level Status (Read Only)
N     * |        |          |This bit used to indicate the current status of the internal synchronized nCTS signal.
N     * |        |          |0 = The internal synchronized nCTS is low.
N     * |        |          |1 = The internal synchronized nCTS is high.
N     * |[17]    |CTSLV     |nCTS Pin Status (Read Only)
N     * |        |          |This bit used to monitor the current status of nCTS pin input.
N     * |        |          |0 = nCTS pin input is low level voltage logic state.
N     * |        |          |1 = nCTS pin input is high level voltage logic state.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] USCI Control Register                                            */
X    volatile uint32_t CTL;                    
N    __IO uint32_t INTEN;                 /*!< [0x0004] USCI Interrupt Enable Register                                   */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t BRGEN;                 /*!< [0x0008] USCI Baud Rate Generator Register                                */
X    volatile uint32_t BRGEN;                  
N    __I  uint32_t RESERVE0[1];
X    volatile const  uint32_t RESERVE0[1];
N    __IO uint32_t DATIN0;                /*!< [0x0010] USCI Input Data Signal Configuration Register 0                  */
X    volatile uint32_t DATIN0;                 
N    __I  uint32_t RESERVE1[3];
X    volatile const  uint32_t RESERVE1[3];
N    __IO uint32_t CTLIN0;                /*!< [0x0020] USCI Input Control Signal Configuration Register 0               */
X    volatile uint32_t CTLIN0;                 
N    __I  uint32_t RESERVE2[1];
X    volatile const  uint32_t RESERVE2[1];
N    __IO uint32_t CLKIN;                 /*!< [0x0028] USCI Input Clock Signal Configuration Register                   */
X    volatile uint32_t CLKIN;                  
N    __IO uint32_t LINECTL;               /*!< [0x002c] USCI Line Control Register                                       */
X    volatile uint32_t LINECTL;                
N    __O  uint32_t TXDAT;                 /*!< [0x0030] USCI Transmit Data Register                                      */
X    volatile  uint32_t TXDAT;                  
N    __I  uint32_t RXDAT;                 /*!< [0x0034] USCI Receive Data Register                                       */
X    volatile const  uint32_t RXDAT;                  
N    __IO uint32_t BUFCTL;                /*!< [0x0038] USCI Transmit/Receive Buffer Control Register                    */
X    volatile uint32_t BUFCTL;                 
N    __IO uint32_t BUFSTS;                /*!< [0x003c] USCI Transmit/Receive Buffer Status Register                     */
X    volatile uint32_t BUFSTS;                 
N    __IO uint32_t PDMACTL;               /*!< [0x0040] USCI PDMA Control Register                                       */
X    volatile uint32_t PDMACTL;                
N    __I  uint32_t RESERVE3[4];
X    volatile const  uint32_t RESERVE3[4];
N    __IO uint32_t WKCTL;                 /*!< [0x0054] USCI Wake-up Control Register                                    */
X    volatile uint32_t WKCTL;                  
N    __IO uint32_t WKSTS;                 /*!< [0x0058] USCI Wake-up Status Register                                     */
X    volatile uint32_t WKSTS;                  
N    __IO uint32_t PROTCTL;               /*!< [0x005c] USCI Protocol Control Register                                   */
X    volatile uint32_t PROTCTL;                
N    __IO uint32_t PROTIEN;               /*!< [0x0060] USCI Protocol Interrupt Enable Register                          */
X    volatile uint32_t PROTIEN;                
N    __IO uint32_t PROTSTS;               /*!< [0x0064] USCI Protocol Status Register                                    */
X    volatile uint32_t PROTSTS;                
N
N} UUART_T;
N
N/**
N    @addtogroup UUART_CONST UUART Bit Field Definition
N    Constant Definitions for UUART Controller
N@{ */
N
N#define UUART_CTL_FUNMODE_Pos        (0)                                           /*!< UUART_T::CTL: FUNMODE Position     */
N#define UUART_CTL_FUNMODE_Msk        (0x7ul << UUART_CTL_FUNMODE_Pos)              /*!< UUART_T::CTL: FUNMODE Mask         */
N
N#define UUART_INTEN_TXSTIEN_Pos      (1)                                           /*!< UUART_T::INTEN: TXSTIEN Position   */
N#define UUART_INTEN_TXSTIEN_Msk      (0x1ul << UUART_INTEN_TXSTIEN_Pos)            /*!< UUART_T::INTEN: TXSTIEN Mask       */
N
N#define UUART_INTEN_TXENDIEN_Pos     (2)                                           /*!< UUART_T::INTEN: TXENDIEN Position  */
N#define UUART_INTEN_TXENDIEN_Msk     (0x1ul << UUART_INTEN_TXENDIEN_Pos)           /*!< UUART_T::INTEN: TXENDIEN Mask      */
N
N#define UUART_INTEN_RXSTIEN_Pos      (3)                                           /*!< UUART_T::INTEN: RXSTIEN Position   */
N#define UUART_INTEN_RXSTIEN_Msk      (0x1ul << UUART_INTEN_RXSTIEN_Pos)            /*!< UUART_T::INTEN: RXSTIEN Mask       */
N
N#define UUART_INTEN_RXENDIEN_Pos     (4)                                           /*!< UUART_T::INTEN: RXENDIEN Position  */
N#define UUART_INTEN_RXENDIEN_Msk     (0x1ul << UUART_INTEN_RXENDIEN_Pos)           /*!< UUART_T::INTEN: RXENDIEN Mask      */
N
N#define UUART_BRGEN_RCLKSEL_Pos      (0)                                           /*!< UUART_T::BRGEN: RCLKSEL Position   */
N#define UUART_BRGEN_RCLKSEL_Msk      (0x1ul << UUART_BRGEN_RCLKSEL_Pos)            /*!< UUART_T::BRGEN: RCLKSEL Mask       */
N
N#define UUART_BRGEN_PTCLKSEL_Pos     (1)                                           /*!< UUART_T::BRGEN: PTCLKSEL Position  */
N#define UUART_BRGEN_PTCLKSEL_Msk     (0x1ul << UUART_BRGEN_PTCLKSEL_Pos)           /*!< UUART_T::BRGEN: PTCLKSEL Mask      */
N
N#define UUART_BRGEN_SPCLKSEL_Pos     (2)                                           /*!< UUART_T::BRGEN: SPCLKSEL Position  */
N#define UUART_BRGEN_SPCLKSEL_Msk     (0x3ul << UUART_BRGEN_SPCLKSEL_Pos)           /*!< UUART_T::BRGEN: SPCLKSEL Mask      */
N
N#define UUART_BRGEN_TMCNTEN_Pos      (4)                                           /*!< UUART_T::BRGEN: TMCNTEN Position   */
N#define UUART_BRGEN_TMCNTEN_Msk      (0x1ul << UUART_BRGEN_TMCNTEN_Pos)            /*!< UUART_T::BRGEN: TMCNTEN Mask       */
N
N#define UUART_BRGEN_TMCNTSRC_Pos     (5)                                           /*!< UUART_T::BRGEN: TMCNTSRC Position  */
N#define UUART_BRGEN_TMCNTSRC_Msk     (0x1ul << UUART_BRGEN_TMCNTSRC_Pos)           /*!< UUART_T::BRGEN: TMCNTSRC Mask      */
N
N#define UUART_BRGEN_PDSCNT_Pos       (8)                                           /*!< UUART_T::BRGEN: PDSCNT Position    */
N#define UUART_BRGEN_PDSCNT_Msk       (0x3ul << UUART_BRGEN_PDSCNT_Pos)             /*!< UUART_T::BRGEN: PDSCNT Mask        */
N
N#define UUART_BRGEN_DSCNT_Pos        (10)                                          /*!< UUART_T::BRGEN: DSCNT Position     */
N#define UUART_BRGEN_DSCNT_Msk        (0x1ful << UUART_BRGEN_DSCNT_Pos)             /*!< UUART_T::BRGEN: DSCNT Mask         */
N
N#define UUART_BRGEN_CLKDIV_Pos       (16)                                          /*!< UUART_T::BRGEN: CLKDIV Position    */
N#define UUART_BRGEN_CLKDIV_Msk       (0x3fful << UUART_BRGEN_CLKDIV_Pos)           /*!< UUART_T::BRGEN: CLKDIV Mask        */
N
N#define UUART_DATIN0_SYNCSEL_Pos     (0)                                           /*!< UUART_T::DATIN0: SYNCSEL Position  */
N#define UUART_DATIN0_SYNCSEL_Msk     (0x1ul << UUART_DATIN0_SYNCSEL_Pos)           /*!< UUART_T::DATIN0: SYNCSEL Mask      */
N
N#define UUART_DATIN0_ININV_Pos       (2)                                           /*!< UUART_T::DATIN0: ININV Position    */
N#define UUART_DATIN0_ININV_Msk       (0x1ul << UUART_DATIN0_ININV_Pos)             /*!< UUART_T::DATIN0: ININV Mask        */
N
N#define UUART_DATIN0_EDGEDET_Pos     (3)                                           /*!< UUART_T::DATIN0: EDGEDET Position  */
N#define UUART_DATIN0_EDGEDET_Msk     (0x3ul << UUART_DATIN0_EDGEDET_Pos)           /*!< UUART_T::DATIN0: EDGEDET Mask      */
N
N#define UUART_CTLIN0_SYNCSEL_Pos     (0)                                           /*!< UUART_T::CTLIN0: SYNCSEL Position  */
N#define UUART_CTLIN0_SYNCSEL_Msk     (0x1ul << UUART_CTLIN0_SYNCSEL_Pos)           /*!< UUART_T::CTLIN0: SYNCSEL Mask      */
N
N#define UUART_CTLIN0_ININV_Pos       (2)                                           /*!< UUART_T::CTLIN0: ININV Position    */
N#define UUART_CTLIN0_ININV_Msk       (0x1ul << UUART_CTLIN0_ININV_Pos)             /*!< UUART_T::CTLIN0: ININV Mask        */
N
N#define UUART_CLKIN_SYNCSEL_Pos      (0)                                           /*!< UUART_T::CLKIN: SYNCSEL Position   */
N#define UUART_CLKIN_SYNCSEL_Msk      (0x1ul << UUART_CLKIN_SYNCSEL_Pos)            /*!< UUART_T::CLKIN: SYNCSEL Mask       */
N
N#define UUART_LINECTL_LSB_Pos        (0)                                           /*!< UUART_T::LINECTL: LSB Position     */
N#define UUART_LINECTL_LSB_Msk        (0x1ul << UUART_LINECTL_LSB_Pos)              /*!< UUART_T::LINECTL: LSB Mask         */
N
N#define UUART_LINECTL_DATOINV_Pos    (5)                                           /*!< UUART_T::LINECTL: DATOINV Position */
N#define UUART_LINECTL_DATOINV_Msk    (0x1ul << UUART_LINECTL_DATOINV_Pos)          /*!< UUART_T::LINECTL: DATOINV Mask     */
N
N#define UUART_LINECTL_CTLOINV_Pos    (7)                                           /*!< UUART_T::LINECTL: CTLOINV Position */
N#define UUART_LINECTL_CTLOINV_Msk    (0x1ul << UUART_LINECTL_CTLOINV_Pos)          /*!< UUART_T::LINECTL: CTLOINV Mask     */
N
N#define UUART_LINECTL_DWIDTH_Pos     (8)                                           /*!< UUART_T::LINECTL: DWIDTH Position  */
N#define UUART_LINECTL_DWIDTH_Msk     (0xful << UUART_LINECTL_DWIDTH_Pos)           /*!< UUART_T::LINECTL: DWIDTH Mask      */
N
N#define UUART_TXDAT_TXDAT_Pos        (0)                                           /*!< UUART_T::TXDAT: TXDAT Position     */
N#define UUART_TXDAT_TXDAT_Msk        (0xfffful << UUART_TXDAT_TXDAT_Pos)           /*!< UUART_T::TXDAT: TXDAT Mask         */
N
N#define UUART_RXDAT_RXDAT_Pos        (0)                                           /*!< UUART_T::RXDAT: RXDAT Position     */
N#define UUART_RXDAT_RXDAT_Msk        (0xfffful << UUART_RXDAT_RXDAT_Pos)           /*!< UUART_T::RXDAT: RXDAT Mask         */
N
N#define UUART_BUFCTL_TXCLR_Pos       (7)                                           /*!< UUART_T::BUFCTL: TXCLR Position    */
N#define UUART_BUFCTL_TXCLR_Msk       (0x1ul << UUART_BUFCTL_TXCLR_Pos)             /*!< UUART_T::BUFCTL: TXCLR Mask        */
N
N#define UUART_BUFCTL_RXOVIEN_Pos     (14)                                          /*!< UUART_T::BUFCTL: RXOVIEN Position  */
N#define UUART_BUFCTL_RXOVIEN_Msk     (0x1ul << UUART_BUFCTL_RXOVIEN_Pos)           /*!< UUART_T::BUFCTL: RXOVIEN Mask      */
N
N#define UUART_BUFCTL_RXCLR_Pos       (15)                                          /*!< UUART_T::BUFCTL: RXCLR Position    */
N#define UUART_BUFCTL_RXCLR_Msk       (0x1ul << UUART_BUFCTL_RXCLR_Pos)             /*!< UUART_T::BUFCTL: RXCLR Mask        */
N
N#define UUART_BUFCTL_TXRST_Pos       (16)                                          /*!< UUART_T::BUFCTL: TXRST Position    */
N#define UUART_BUFCTL_TXRST_Msk       (0x1ul << UUART_BUFCTL_TXRST_Pos)             /*!< UUART_T::BUFCTL: TXRST Mask        */
N
N#define UUART_BUFCTL_RXRST_Pos       (17)                                          /*!< UUART_T::BUFCTL: RXRST Position    */
N#define UUART_BUFCTL_RXRST_Msk       (0x1ul << UUART_BUFCTL_RXRST_Pos)             /*!< UUART_T::BUFCTL: RXRST Mask        */
N
N#define UUART_BUFSTS_RXEMPTY_Pos     (0)                                           /*!< UUART_T::BUFSTS: RXEMPTY Position  */
N#define UUART_BUFSTS_RXEMPTY_Msk     (0x1ul << UUART_BUFSTS_RXEMPTY_Pos)           /*!< UUART_T::BUFSTS: RXEMPTY Mask      */
N
N#define UUART_BUFSTS_RXFULL_Pos      (1)                                           /*!< UUART_T::BUFSTS: RXFULL Position   */
N#define UUART_BUFSTS_RXFULL_Msk      (0x1ul << UUART_BUFSTS_RXFULL_Pos)            /*!< UUART_T::BUFSTS: RXFULL Mask       */
N
N#define UUART_BUFSTS_RXOVIF_Pos      (3)                                           /*!< UUART_T::BUFSTS: RXOVIF Position   */
N#define UUART_BUFSTS_RXOVIF_Msk      (0x1ul << UUART_BUFSTS_RXOVIF_Pos)            /*!< UUART_T::BUFSTS: RXOVIF Mask       */
N
N#define UUART_BUFSTS_TXEMPTY_Pos     (8)                                           /*!< UUART_T::BUFSTS: TXEMPTY Position  */
N#define UUART_BUFSTS_TXEMPTY_Msk     (0x1ul << UUART_BUFSTS_TXEMPTY_Pos)           /*!< UUART_T::BUFSTS: TXEMPTY Mask      */
N
N#define UUART_BUFSTS_TXFULL_Pos      (9)                                           /*!< UUART_T::BUFSTS: TXFULL Position   */
N#define UUART_BUFSTS_TXFULL_Msk      (0x1ul << UUART_BUFSTS_TXFULL_Pos)            /*!< UUART_T::BUFSTS: TXFULL Mask       */
N
N#define UUART_PDMACTL_PDMARST_Pos    (0)                                           /*!< UUART_T::PDMACTL: PDMARST Position */
N#define UUART_PDMACTL_PDMARST_Msk    (0x1ul << UUART_PDMACTL_PDMARST_Pos)          /*!< UUART_T::PDMACTL: PDMARST Mask     */
N
N#define UUART_PDMACTL_TXPDMAEN_Pos   (1)                                           /*!< UUART_T::PDMACTL: TXPDMAEN Position*/
N#define UUART_PDMACTL_TXPDMAEN_Msk   (0x1ul << UUART_PDMACTL_TXPDMAEN_Pos)         /*!< UUART_T::PDMACTL: TXPDMAEN Mask    */
N
N#define UUART_PDMACTL_RXPDMAEN_Pos   (2)                                           /*!< UUART_T::PDMACTL: RXPDMAEN Position*/
N#define UUART_PDMACTL_RXPDMAEN_Msk   (0x1ul << UUART_PDMACTL_RXPDMAEN_Pos)         /*!< UUART_T::PDMACTL: RXPDMAEN Mask    */
N
N#define UUART_PDMACTL_PDMAEN_Pos     (3)                                           /*!< UUART_T::PDMACTL: PDMAEN Position  */
N#define UUART_PDMACTL_PDMAEN_Msk     (0x1ul << UUART_PDMACTL_PDMAEN_Pos)           /*!< UUART_T::PDMACTL: PDMAEN Mask      */
N
N#define UUART_WKCTL_WKEN_Pos         (0)                                           /*!< UUART_T::WKCTL: WKEN Position      */
N#define UUART_WKCTL_WKEN_Msk         (0x1ul << UUART_WKCTL_WKEN_Pos)               /*!< UUART_T::WKCTL: WKEN Mask          */
N
N#define UUART_WKCTL_PDBOPT_Pos       (2)                                           /*!< UUART_T::WKCTL: PDBOPT Position    */
N#define UUART_WKCTL_PDBOPT_Msk       (0x1ul << UUART_WKCTL_PDBOPT_Pos)             /*!< UUART_T::WKCTL: PDBOPT Mask        */
N
N#define UUART_WKSTS_WKF_Pos          (0)                                           /*!< UUART_T::WKSTS: WKF Position       */
N#define UUART_WKSTS_WKF_Msk          (0x1ul << UUART_WKSTS_WKF_Pos)                /*!< UUART_T::WKSTS: WKF Mask           */
N
N#define UUART_PROTCTL_STOPB_Pos      (0)                                           /*!< UUART_T::PROTCTL: STOPB Position   */
N#define UUART_PROTCTL_STOPB_Msk      (0x1ul << UUART_PROTCTL_STOPB_Pos)            /*!< UUART_T::PROTCTL: STOPB Mask       */
N
N#define UUART_PROTCTL_PARITYEN_Pos   (1)                                           /*!< UUART_T::PROTCTL: PARITYEN Position*/
N#define UUART_PROTCTL_PARITYEN_Msk   (0x1ul << UUART_PROTCTL_PARITYEN_Pos)         /*!< UUART_T::PROTCTL: PARITYEN Mask    */
N
N#define UUART_PROTCTL_EVENPARITY_Pos (2)                                           /*!< UUART_T::PROTCTL: EVENPARITY Position*/
N#define UUART_PROTCTL_EVENPARITY_Msk (0x1ul << UUART_PROTCTL_EVENPARITY_Pos)       /*!< UUART_T::PROTCTL: EVENPARITY Mask  */
N
N#define UUART_PROTCTL_RTSAUTOEN_Pos  (3)                                           /*!< UUART_T::PROTCTL: RTSAUTOEN Position*/
N#define UUART_PROTCTL_RTSAUTOEN_Msk  (0x1ul << UUART_PROTCTL_RTSAUTOEN_Pos)        /*!< UUART_T::PROTCTL: RTSAUTOEN Mask   */
N
N#define UUART_PROTCTL_CTSAUTOEN_Pos  (4)                                           /*!< UUART_T::PROTCTL: CTSAUTOEN Position*/
N#define UUART_PROTCTL_CTSAUTOEN_Msk  (0x1ul << UUART_PROTCTL_CTSAUTOEN_Pos)        /*!< UUART_T::PROTCTL: CTSAUTOEN Mask   */
N
N#define UUART_PROTCTL_RTSAUDIREN_Pos (5)                                           /*!< UUART_T::PROTCTL: RTSAUDIREN Position*/
N#define UUART_PROTCTL_RTSAUDIREN_Msk (0x1ul << UUART_PROTCTL_RTSAUDIREN_Pos)       /*!< UUART_T::PROTCTL: RTSAUDIREN Mask  */
N
N#define UUART_PROTCTL_ABREN_Pos      (6)                                           /*!< UUART_T::PROTCTL: ABREN Position   */
N#define UUART_PROTCTL_ABREN_Msk      (0x1ul << UUART_PROTCTL_ABREN_Pos)            /*!< UUART_T::PROTCTL: ABREN Mask       */
N
N#define UUART_PROTCTL_DATWKEN_Pos    (9)                                           /*!< UUART_T::PROTCTL: DATWKEN Position */
N#define UUART_PROTCTL_DATWKEN_Msk    (0x1ul << UUART_PROTCTL_DATWKEN_Pos)          /*!< UUART_T::PROTCTL: DATWKEN Mask     */
N
N#define UUART_PROTCTL_CTSWKEN_Pos    (10)                                          /*!< UUART_T::PROTCTL: CTSWKEN Position */
N#define UUART_PROTCTL_CTSWKEN_Msk    (0x1ul << UUART_PROTCTL_CTSWKEN_Pos)          /*!< UUART_T::PROTCTL: CTSWKEN Mask     */
N
N#define UUART_PROTCTL_WAKECNT_Pos    (11)                                          /*!< UUART_T::PROTCTL: WAKECNT Position */
N#define UUART_PROTCTL_WAKECNT_Msk    (0xful << UUART_PROTCTL_WAKECNT_Pos)          /*!< UUART_T::PROTCTL: WAKECNT Mask     */
N
N#define UUART_PROTCTL_BRDETITV_Pos   (16)                                          /*!< UUART_T::PROTCTL: BRDETITV Position*/
N#define UUART_PROTCTL_BRDETITV_Msk   (0x1fful << UUART_PROTCTL_BRDETITV_Pos)       /*!< UUART_T::PROTCTL: BRDETITV Mask    */
N
N#define UUART_PROTCTL_STICKEN_Pos    (26)                                          /*!< UUART_T::PROTCTL: STICKEN Position */
N#define UUART_PROTCTL_STICKEN_Msk    (0x1ul << UUART_PROTCTL_STICKEN_Pos)          /*!< UUART_T::PROTCTL: STICKEN Mask     */
N
N#define UUART_PROTCTL_BCEN_Pos       (29)                                          /*!< UUART_T::PROTCTL: BCEN Position    */
N#define UUART_PROTCTL_BCEN_Msk       (0x1ul << UUART_PROTCTL_BCEN_Pos)             /*!< UUART_T::PROTCTL: BCEN Mask        */
N
N#define UUART_PROTCTL_PROTEN_Pos     (31)                                          /*!< UUART_T::PROTCTL: PROTEN Position  */
N#define UUART_PROTCTL_PROTEN_Msk     (0x1ul << UUART_PROTCTL_PROTEN_Pos)           /*!< UUART_T::PROTCTL: PROTEN Mask      */
N
N#define UUART_PROTIEN_ABRIEN_Pos     (1)                                           /*!< UUART_T::PROTIEN: ABRIEN Position  */
N#define UUART_PROTIEN_ABRIEN_Msk     (0x1ul << UUART_PROTIEN_ABRIEN_Pos)           /*!< UUART_T::PROTIEN: ABRIEN Mask      */
N
N#define UUART_PROTIEN_RLSIEN_Pos     (2)                                           /*!< UUART_T::PROTIEN: RLSIEN Position  */
N#define UUART_PROTIEN_RLSIEN_Msk     (0x1ul << UUART_PROTIEN_RLSIEN_Pos)           /*!< UUART_T::PROTIEN: RLSIEN Mask      */
N
N#define UUART_PROTSTS_TXSTIF_Pos     (1)                                           /*!< UUART_T::PROTSTS: TXSTIF Position  */
N#define UUART_PROTSTS_TXSTIF_Msk     (0x1ul << UUART_PROTSTS_TXSTIF_Pos)           /*!< UUART_T::PROTSTS: TXSTIF Mask      */
N
N#define UUART_PROTSTS_TXENDIF_Pos    (2)                                           /*!< UUART_T::PROTSTS: TXENDIF Position */
N#define UUART_PROTSTS_TXENDIF_Msk    (0x1ul << UUART_PROTSTS_TXENDIF_Pos)          /*!< UUART_T::PROTSTS: TXENDIF Mask     */
N
N#define UUART_PROTSTS_RXSTIF_Pos     (3)                                           /*!< UUART_T::PROTSTS: RXSTIF Position  */
N#define UUART_PROTSTS_RXSTIF_Msk     (0x1ul << UUART_PROTSTS_RXSTIF_Pos)           /*!< UUART_T::PROTSTS: RXSTIF Mask      */
N
N#define UUART_PROTSTS_RXENDIF_Pos    (4)                                           /*!< UUART_T::PROTSTS: RXENDIF Position */
N#define UUART_PROTSTS_RXENDIF_Msk    (0x1ul << UUART_PROTSTS_RXENDIF_Pos)          /*!< UUART_T::PROTSTS: RXENDIF Mask     */
N
N#define UUART_PROTSTS_PARITYERR_Pos  (5)                                           /*!< UUART_T::PROTSTS: PARITYERR Position*/
N#define UUART_PROTSTS_PARITYERR_Msk  (0x1ul << UUART_PROTSTS_PARITYERR_Pos)        /*!< UUART_T::PROTSTS: PARITYERR Mask   */
N
N#define UUART_PROTSTS_FRMERR_Pos     (6)                                           /*!< UUART_T::PROTSTS: FRMERR Position  */
N#define UUART_PROTSTS_FRMERR_Msk     (0x1ul << UUART_PROTSTS_FRMERR_Pos)           /*!< UUART_T::PROTSTS: FRMERR Mask      */
N
N#define UUART_PROTSTS_BREAK_Pos      (7)                                           /*!< UUART_T::PROTSTS: BREAK Position   */
N#define UUART_PROTSTS_BREAK_Msk      (0x1ul << UUART_PROTSTS_BREAK_Pos)            /*!< UUART_T::PROTSTS: BREAK Mask       */
N
N#define UUART_PROTSTS_ABRDETIF_Pos   (9)                                           /*!< UUART_T::PROTSTS: ABRDETIF Position*/
N#define UUART_PROTSTS_ABRDETIF_Msk   (0x1ul << UUART_PROTSTS_ABRDETIF_Pos)         /*!< UUART_T::PROTSTS: ABRDETIF Mask    */
N
N#define UUART_PROTSTS_RXBUSY_Pos     (10)                                          /*!< UUART_T::PROTSTS: RXBUSY Position  */
N#define UUART_PROTSTS_RXBUSY_Msk     (0x1ul << UUART_PROTSTS_RXBUSY_Pos)           /*!< UUART_T::PROTSTS: RXBUSY Mask      */
N
N#define UUART_PROTSTS_ABERRSTS_Pos   (11)                                          /*!< UUART_T::PROTSTS: ABERRSTS Position*/
N#define UUART_PROTSTS_ABERRSTS_Msk   (0x1ul << UUART_PROTSTS_ABERRSTS_Pos)         /*!< UUART_T::PROTSTS: ABERRSTS Mask    */
N
N#define UUART_PROTSTS_CTSSYNCLV_Pos  (16)                                          /*!< UUART_T::PROTSTS: CTSSYNCLV Position*/
N#define UUART_PROTSTS_CTSSYNCLV_Msk  (0x1ul << UUART_PROTSTS_CTSSYNCLV_Pos)        /*!< UUART_T::PROTSTS: CTSSYNCLV Mask   */
N
N#define UUART_PROTSTS_CTSLV_Pos      (17)                                          /*!< UUART_T::PROTSTS: CTSLV Position   */
N#define UUART_PROTSTS_CTSLV_Msk      (0x1ul << UUART_PROTSTS_CTSLV_Pos)            /*!< UUART_T::PROTSTS: CTSLV Mask       */
N
N/**@}*/ /* UUART_CONST */
N/**@}*/ /* end of UUART register group */
N
N
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __UUART_REG_H__ */
L 182 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "wdt_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\wdt_reg.h" 1
N/**************************************************************************//**
N * @file     wdt_reg.h
N * @version  V1.00
N * @brief    WDT register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0 
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __WDT_REG_H__
N#define __WDT_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup WDT Watch Dog Timer Controller(WDT)
N    Memory Mapped Structure for WDT Controller
N@{ */
N
Ntypedef struct
N{
N
N    /**
N     * @var WDT_T::CTL
N     * Offset: 0x00  WDT Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |RSTEN     |WDT Time-out Reset Enable Bit (Write Protect)
N     * |        |          |Setting this bit will enable the WDT time-out reset function If the WDT up counter value has not been cleared after the specific WDT reset delay period expires.
N     * |        |          |0 = WDT time-out reset function Disabled.
N     * |        |          |1 = WDT time-out reset function Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[2]     |RSTF      |WDT Time-out Reset Flag
N     * |        |          |This bit indicates the system has been reset by WDT time-out reset or not.
N     * |        |          |0 = WDT time-out reset did not occur.
N     * |        |          |1 = WDT time-out reset occurred.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[3]     |IF        |WDT Time-out Interrupt Flag
N     * |        |          |This bit will set to 1 while WDT up counter value reaches the selected WDT time-out interval.
N     * |        |          |0 = WDT time-out interrupt did not occur.
N     * |        |          |1 = WDT time-out interrupt occurred.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[4]     |WKEN      |WDT Time-out Wake-up Function Control (Write Protect)
N     * |        |          |If this bit is set to 1, while WDT time-out interrupt flag IF (WDT_CTL[3]) is generated to 1 and interrupt enable bit INTEN (WDT_CTL[6]) is enabled, the WDT time-out interrupt signal will generate a wake-up trigger event to chip.
N     * |        |          |0 = Wake-up trigger event Disabled if WDT time-out interrupt signal generated.
N     * |        |          |1 = Wake-up trigger event Enabled if WDT time-out interrupt signal generated.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: Chip can be woken up by WDT time-out interrupt signal generated only if WDT clock source is selected to 10 kHz internal low speed RC oscillator (LIRC) or LXT.
N     * |[5]     |WKF       |WDT Time-out Wake-up Flag (Write Protect)
N     * |        |          |This bit indicates the interrupt wake-up flag status of WDT.
N     * |        |          |0 = WDT does not cause chip wake-up.
N     * |        |          |1 = Chip wake-up from Idle or Power-down mode if WDT time-out interrupt signal generated.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: This bit is cleared by writing 1 to it.
N     * |[6]     |INTEN     |WDT Time-out Interrupt Enable Bit (Write Protect)
N     * |        |          |If this bit is enabled, the WDT time-out interrupt signal is generated and inform to CPU.
N     * |        |          |0 = WDT time-out interrupt Disabled.
N     * |        |          |1 = WDT time-out interrupt Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[7]     |WDTEN     |WDT Enable Bit (Write Protect)
N     * |        |          |0 = WDT Disabled (This action will reset the internal up counter value).
N     * |        |          |1 = WDT Enabled.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: If CWDTEN[2:0] (combined by Config0[31] and Config0[4:3]) bits is not configured to 111, this bit is forced as 1 and user cannot change this bit to 0.
N     * |[11:8]  |TOUTSEL   |WDT Time-out Interval Selection (Write Protect)
N     * |        |          |These four bits select the time-out interval period for the WDT.
N     * |        |          |0000 = 24 * WDT_CLK.
N     * |        |          |0001 = 26 * WDT_CLK.
N     * |        |          |0010 = 28 * WDT_CLK.
N     * |        |          |0011 = 210 * WDT_CLK.
N     * |        |          |0100 = 212 * WDT_CLK.
N     * |        |          |0101 = 214 * WDT_CLK.
N     * |        |          |0110 = 216 * WDT_CLK.
N     * |        |          |0111 = 218 * WDT_CLK.
N     * |        |          |1000 = 220 * WDT_CLK.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[30]    |SYNC      |WDT Enable Control SYNC Flag Indicator (Read Only)
N     * |        |          |If user executes enable/disable WDTEN (WDT_CTL[7]), this flag can be indicated enable/disable WDTEN function is completed or not.
N     * |        |          |0 = Set WDTEN bit is completed.
N     * |        |          |1 = Set WDTEN bit is synchronizing and not become active yet.
N     * |        |          |Note: Performing enable or disable WDTEN bit needs 2 * WDT_CLK period to become active.
N     * |[31]    |ICEDEBUG  |ICE Debug Mode Acknowledge Disable Bit (Write Protect)
N     * |        |          |0 = ICE debug mode acknowledgement affects WDT counting.
N     * |        |          |WDT up counter will be held while CPU is held by ICE.
N     * |        |          |1 = ICE debug mode acknowledgement Disabled.
N     * |        |          |WDT up counter will keep going no matter CPU is held by ICE or not.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var WDT_T::ALTCTL
N     * Offset: 0x04  WDT Alternative Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |RSTDSEL   |WDT Reset Delay Selection (Write Protect).
N     * |        |          |When WDT time-out happened, user has a time named WDT Reset Delay Period to clear WDT counter by writing 0x00005aa5 to RSTCNT (WDT_RSTCNT[31:0]) to prevent WDT time-out reset happened.
N     * |        |          |User can select a suitable setting of RSTDSEL for different WDT Reset Delay Period.
N     * |        |          |00 = WDT Reset Delay Period is 1026 * WDT_CLK.
N     * |        |          |01 = WDT Reset Delay Period is 130 * WDT_CLK.
N     * |        |          |10 = WDT Reset Delay Period is 18 * WDT_CLK.
N     * |        |          |11 = WDT Reset Delay Period is 3 * WDT_CLK.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: This register will be reset to 0 if WDT time-out reset happened.
N     * @var WDT_T::RSTCNT
N     * Offset: 0x08  WDT Reset Counter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |RSTCNT    |WDT Reset Counter Register
N     * |        |          |Writing 0x00005AA5 to this field will reset the internal 18-bit WDT up counter value to 0.
N     * |        |          |Note1: Performing RSTCNT to reset counter needs 2 * WDT_CLK period to become active.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] WDT Control Register                                             */
X    volatile uint32_t CTL;                    
N    __IO uint32_t ALTCTL;                /*!< [0x0004] WDT Alternative Control Register                                 */
X    volatile uint32_t ALTCTL;                 
N    __O  uint32_t RSTCNT;                /*!< [0x0008] WDT Reset Counter Register                                       */
X    volatile  uint32_t RSTCNT;                 
N
N} WDT_T;
N
N/**
N    @addtogroup WDT_CONST WDT Bit Field Definition
N    Constant Definitions for WDT Controller
N@{ */
N
N#define WDT_CTL_RSTEN_Pos                (1)                                               /*!< WDT_T::CTL: RSTEN Position             */
N#define WDT_CTL_RSTEN_Msk                (0x1ul << WDT_CTL_RSTEN_Pos)                      /*!< WDT_T::CTL: RSTEN Mask                 */
N
N#define WDT_CTL_RSTF_Pos                 (2)                                               /*!< WDT_T::CTL: RSTF Position              */
N#define WDT_CTL_RSTF_Msk                 (0x1ul << WDT_CTL_RSTF_Pos)                       /*!< WDT_T::CTL: RSTF Mask                  */
N
N#define WDT_CTL_IF_Pos                   (3)                                               /*!< WDT_T::CTL: IF Position                */
N#define WDT_CTL_IF_Msk                   (0x1ul << WDT_CTL_IF_Pos)                         /*!< WDT_T::CTL: IF Mask                    */
N
N#define WDT_CTL_WKEN_Pos                 (4)                                               /*!< WDT_T::CTL: WKEN Position              */
N#define WDT_CTL_WKEN_Msk                 (0x1ul << WDT_CTL_WKEN_Pos)                       /*!< WDT_T::CTL: WKEN Mask                  */
N
N#define WDT_CTL_WKF_Pos                  (5)                                               /*!< WDT_T::CTL: WKF Position               */
N#define WDT_CTL_WKF_Msk                  (0x1ul << WDT_CTL_WKF_Pos)                        /*!< WDT_T::CTL: WKF Mask                   */
N
N#define WDT_CTL_INTEN_Pos                (6)                                               /*!< WDT_T::CTL: INTEN Position             */
N#define WDT_CTL_INTEN_Msk                (0x1ul << WDT_CTL_INTEN_Pos)                      /*!< WDT_T::CTL: INTEN Mask                 */
N
N#define WDT_CTL_WDTEN_Pos                (7)                                               /*!< WDT_T::CTL: WDTEN Position             */
N#define WDT_CTL_WDTEN_Msk                (0x1ul << WDT_CTL_WDTEN_Pos)                      /*!< WDT_T::CTL: WDTEN Mask                 */
N
N#define WDT_CTL_TOUTSEL_Pos              (8)                                               /*!< WDT_T::CTL: TOUTSEL Position           */
N#define WDT_CTL_TOUTSEL_Msk              (0xful << WDT_CTL_TOUTSEL_Pos)                    /*!< WDT_T::CTL: TOUTSEL Mask               */
N
N#define WDT_CTL_SYNC_Pos                 (30)                                              /*!< WDT_T::CTL: SYNC Position              */
N#define WDT_CTL_SYNC_Msk                 (0x1ul << WDT_CTL_SYNC_Pos)                       /*!< WDT_T::CTL: SYNC Mask                  */
N
N#define WDT_CTL_ICEDEBUG_Pos             (31)                                              /*!< WDT_T::CTL: ICEDEBUG Position          */
N#define WDT_CTL_ICEDEBUG_Msk             (0x1ul << WDT_CTL_ICEDEBUG_Pos)                   /*!< WDT_T::CTL: ICEDEBUG Mask              */
N
N#define WDT_ALTCTL_RSTDSEL_Pos           (0)                                               /*!< WDT_T::ALTCTL: RSTDSEL Position        */
N#define WDT_ALTCTL_RSTDSEL_Msk           (0x3ul << WDT_ALTCTL_RSTDSEL_Pos)                 /*!< WDT_T::ALTCTL: RSTDSEL Mask            */
N
N#define WDT_RSTCNT_RSTCNT_Pos            (0)                                               /*!< WDT_T::RSTCNT: RSTCNT Position         */
N#define WDT_RSTCNT_RSTCNT_Msk            (0xfffffffful << WDT_RSTCNT_RSTCNT_Pos)           /*!< WDT_T::RSTCNT: RSTCNT Mask             */
N
N/**@}*/ /* WDT_CONST */
N/**@}*/ /* end of WDT register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __WDT_REG_H__ */
N
L 183 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "wwdt_reg.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\wwdt_reg.h" 1
N/**************************************************************************//**
N * @file     wwdt_reg.h
N * @version  V1.00
N * @brief    WWDT register definition header file
N *
N * SPDX-License-Identifier: Apache-2.0 
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __WWDT_REG_H__
N#define __WWDT_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup WWDT Window Watchdog Timer(WWDT)
N    Memory Mapped Structure for WWDT Controller
N@{ */
N
Ntypedef struct
N{
N
N
N    /**
N     * @var WWDT_T::RLDCNT
N     * Offset: 0x00  WWDT Reload Counter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |RLDCNT    |WWDT Reload Counter Register
N     * |        |          |Writing 0x00005AA5 to this register will reload the WWDT counter value to 0x3F.
N     * |        |          |Note: User can only write WWDT_RLDCNT register to reload WWDT counter value when current WWDT counter value between 0 and CMPDAT (WWDT_CTL[21:16]).
N     * |        |          |If user writes WWDT_RLDCNT when current WWDT counter value is larger than CMPDAT, WWDT reset signal will be generated immediately.
N     * @var WWDT_T::CTL
N     * Offset: 0x04  WWDT Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WWDTEN    |WWDT Enable Bit
N     * |        |          |0 = WWDT counter is stopped.
N     * |        |          |1 = WWDT counter starts counting.
N     * |[1]     |INTEN     |WWDT Interrupt Enable Bit
N     * |        |          |If this bit is enabled, the WWDT counter compare match interrupt signal is generated and inform to CPU.
N     * |        |          |0 = WWDT counter compare match interrupt Disabled.
N     * |        |          |1 = WWDT counter compare match interrupt Enabled.
N     * |[11:8]  |PSCSEL    |WWDT Counter Prescale Period Selection
N     * |        |          |0000 = Pre-scale is 1; Max time-out period is 1 * 64 * WWDT_CLK.
N     * |        |          |0001 = Pre-scale is 2; Max time-out period is 2 * 64 * WWDT_CLK.
N     * |        |          |0010 = Pre-scale is 4; Max time-out period is 4 * 64 * WWDT_CLK.
N     * |        |          |0011 = Pre-scale is 8; Max time-out period is 8 * 64 * WWDT_CLK.
N     * |        |          |0100 = Pre-scale is 16; Max time-out period is 16 * 64 * WWDT_CLK.
N     * |        |          |0101 = Pre-scale is 32; Max time-out period is 32 * 64 * WWDT_CLK.
N     * |        |          |0110 = Pre-scale is 64; Max time-out period is 64 * 64 * WWDT_CLK.
N     * |        |          |0111 = Pre-scale is 128; Max time-out period is 128 * 64 * WWDT_CLK.
N     * |        |          |1000 = Pre-scale is 192; Max time-out period is 192 * 64 * WWDT_CLK.
N     * |        |          |1001 = Pre-scale is 256; Max time-out period is 256 * 64 * WWDT_CLK.
N     * |        |          |1010 = Pre-scale is 384; Max time-out period is 384 * 64 * WWDT_CLK.
N     * |        |          |1011 = Pre-scale is 512; Max time-out period is 512 * 64 * WWDT_CLK.
N     * |        |          |1100 = Pre-scale is 768; Max time-out period is 768 * 64 * WWDT_CLK.
N     * |        |          |1101 = Pre-scale is 1024; Max time-out period is 1024 * 64 * WWDT_CLK.
N     * |        |          |1110 = Pre-scale is 1536; Max time-out period is 1536 * 64 * WWDT_CLK.
N     * |        |          |1111 = Pre-scale is 2048; Max time-out period is 2048 * 64 * WWDT_CLK.
N     * |[21:16] |CMPDAT    |WWDT Window Compare Register
N     * |        |          |Set this register to adjust the valid reload window.
N     * |        |          |Note: User can only write WWDT_RLDCNT register to reload WWDT counter value when current WWDT counter value between 0 and CMPDAT.
N     * |        |          |If user writes WWDT_RLDCNT register when current WWDT counter value larger than CMPDAT, WWDT reset signal will generate immediately.
N     * |[31]    |ICEDEBUG  |ICE Debug Mode Acknowledge Disable Bit
N     * |        |          |0 = ICE debug mode acknowledgement effects WWDT counting.
N     * |        |          |WWDT down counter will be held while CPU is held by ICE.
N     * |        |          |1 = ICE debug mode acknowledgement Disabled.
N     * |        |          |Note: WWDT down counter will keep going no matter CPU is held by ICE or not.
N     * @var WWDT_T::STATUS
N     * Offset: 0x08  WWDT Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WWDTIF    |WWDT Compare Match Interrupt Flag
N     * |        |          |This bit indicates the interrupt flag status of WWDT while WWDT counter value matches CMPDAT (WWDT_CTL[21:16]).
N     * |        |          |0 = No effect.
N     * |        |          |1 = WWDT counter value matches CMPDAT.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[1]     |WWDTRF    |WWDT Timer-out Reset Flag
N     * |        |          |This bit indicates the system has been reset by WWDT time-out reset or not.
N     * |        |          |0 = WWDT time-out reset did not occur.
N     * |        |          |1 = WWDT time-out reset occurred.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * @var WWDT_T::CNT
N     * Offset: 0x0C  WWDT Counter Value Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CNTDAT    |WWDT Counter Value
N     * |        |          |CNTDAT will be updated continuously to monitor 6-bit WWDT down counter value.
N     */
N    __O  uint32_t RLDCNT;                /*!< [0x0000] WWDT Reload Counter Register                                     */
X    volatile  uint32_t RLDCNT;                 
N    __IO uint32_t CTL;                   /*!< [0x0004] WWDT Control Register                                            */
X    volatile uint32_t CTL;                    
N    __IO uint32_t STATUS;                /*!< [0x0008] WWDT Status Register                                             */
X    volatile uint32_t STATUS;                 
N    __I  uint32_t CNT;                   /*!< [0x000c] WWDT Counter Value Register                                      */
X    volatile const  uint32_t CNT;                    
N
N} WWDT_T;
N
N/**
N    @addtogroup WWDT_CONST WWDT Bit Field Definition
N    Constant Definitions for WWDT Controller
N@{ */
N
N#define WWDT_RLDCNT_RLDCNT_Pos           (0)                                               /*!< WWDT_T::RLDCNT: RLDCNT Position        */
N#define WWDT_RLDCNT_RLDCNT_Msk           (0xfffffffful << WWDT_RLDCNT_RLDCNT_Pos)          /*!< WWDT_T::RLDCNT: RLDCNT Mask            */
N
N#define WWDT_CTL_WWDTEN_Pos              (0)                                               /*!< WWDT_T::CTL: WWDTEN Position           */
N#define WWDT_CTL_WWDTEN_Msk              (0x1ul << WWDT_CTL_WWDTEN_Pos)                    /*!< WWDT_T::CTL: WWDTEN Mask               */
N
N#define WWDT_CTL_INTEN_Pos               (1)                                               /*!< WWDT_T::CTL: INTEN Position            */
N#define WWDT_CTL_INTEN_Msk               (0x1ul << WWDT_CTL_INTEN_Pos)                     /*!< WWDT_T::CTL: INTEN Mask                */
N
N#define WWDT_CTL_PSCSEL_Pos              (8)                                               /*!< WWDT_T::CTL: PSCSEL Position           */
N#define WWDT_CTL_PSCSEL_Msk              (0xful << WWDT_CTL_PSCSEL_Pos)                    /*!< WWDT_T::CTL: PSCSEL Mask               */
N
N#define WWDT_CTL_CMPDAT_Pos              (16)                                              /*!< WWDT_T::CTL: CMPDAT Position           */
N#define WWDT_CTL_CMPDAT_Msk              (0x3ful << WWDT_CTL_CMPDAT_Pos)                   /*!< WWDT_T::CTL: CMPDAT Mask               */
N
N#define WWDT_CTL_ICEDEBUG_Pos            (31)                                              /*!< WWDT_T::CTL: ICEDEBUG Position         */
N#define WWDT_CTL_ICEDEBUG_Msk            (0x1ul << WWDT_CTL_ICEDEBUG_Pos)                  /*!< WWDT_T::CTL: ICEDEBUG Mask             */
N
N#define WWDT_STATUS_WWDTIF_Pos           (0)                                               /*!< WWDT_T::STATUS: WWDTIF Position        */
N#define WWDT_STATUS_WWDTIF_Msk           (0x1ul << WWDT_STATUS_WWDTIF_Pos)                 /*!< WWDT_T::STATUS: WWDTIF Mask            */
N
N#define WWDT_STATUS_WWDTRF_Pos           (1)                                               /*!< WWDT_T::STATUS: WWDTRF Position        */
N#define WWDT_STATUS_WWDTRF_Msk           (0x1ul << WWDT_STATUS_WWDTRF_Pos)                 /*!< WWDT_T::STATUS: WWDTRF Mask            */
N
N#define WWDT_CNT_CNTDAT_Pos              (0)                                               /*!< WWDT_T::CNT: CNTDAT Position           */
N#define WWDT_CNT_CNTDAT_Msk              (0x3ful << WWDT_CNT_CNTDAT_Pos)                   /*!< WWDT_T::CNT: CNTDAT Mask               */
N
N/**@}*/ /* WWDT_CONST */
N/**@}*/ /* end of WWDT register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N#endif /* __WWDT_REG_H__ */
L 184 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N
N
N/******************************************************************************/
N/*                         Peripheral memory map                              */
N/******************************************************************************/
N/** @addtogroup PERIPHERAL_BASE Peripheral Memory Base
N  Memory Mapped Structure for Series Peripheral
N  @{
N */
N/* Peripheral and SRAM base address */
N#define FLASH_BASE          ((     uint32_t)0x00000000)
N#define SRAM_BASE           ((     uint32_t)0x20000000)
N#define AHB_BASE            ((     uint32_t)0x40000000)
N#define APB1_BASE           ((     uint32_t)0x40000000)
N#define APB2_BASE           ((     uint32_t)0x40000000)
N
N/* Peripheral memory map */
N
N#define SYS_BASE            (AHB_BASE       + 0x00000)                  /*!< System Global Controller Base Address            */
N#define CLK_BASE            (AHB_BASE       + 0x00200)                  /*!< System Clock Controller Base Address             */
N#define INT_BASE            (AHB_BASE       + 0x00300)                  /*!< Interrupt Source Controller Base Address         */
N#define NMI_BASE            (AHB_BASE       + 0x00300)                  /*!< Interrupt Source Controller Base Address         */
N
N#define GPIO_BASE           (AHB_BASE       + 0x4000)                   /*!< GPIO Base Address                                */
N#define PA_BASE             (GPIO_BASE              )                   /*!< GPIO PA Base Address                             */
N#define PB_BASE             (GPIO_BASE      + 0x0040)                   /*!< GPIO PB Base Address                             */
N#define PC_BASE             (GPIO_BASE      + 0x0080)                   /*!< GPIO PC Base Address                             */
N#define PD_BASE             (GPIO_BASE      + 0x00C0)                   /*!< GPIO PD Base Address                             */
N#define PE_BASE             (GPIO_BASE      + 0x0100)                   /*!< GPIO PE Base Address                             */
N#define PF_BASE             (GPIO_BASE      + 0x0140)                   /*!< GPIO PF Base Address                             */
N#define PG_BASE             (GPIO_BASE      + 0x0180)                   /*!< GPIO PG Base Address                             */
N#define PH_BASE             (GPIO_BASE      + 0x01C0)                   /*!< GPIO PH Base Address                             */
N#define GPIO_DBCTL_BASE     (GPIO_BASE      + 0x0440)                   /*!< GPIO De-bounce Cycle Control Base Address        */
N#define GPIO_PIN_DATA_BASE  (GPIO_BASE      + 0x0800)                   /*!< GPIO Pin Data Input/Output Control Base Address  */
N
N#define PDMA_BASE           (AHB_BASE       + 0x08000)                  /*!< PDMA Base Address                                */
N#define FMC_BASE            (AHB_BASE       + 0x0C000)                  /*!< Flash Memory Controller Base Address             */
N#define EBI_BASE            (AHB_BASE       + 0x10000)                  /*!< EBI Base Address                                 */
N#define HDIV_BASE           (AHB_BASE       + 0x14000)                  /*!< HDIV Base Address                                */
N#define CRC_BASE            (AHB_BASE       + 0x31000)                  /*!< CRC Base Address                                 */
N
N#define WDT_BASE            (APB1_BASE      + 0x40000)                  /*!< Watch Dog Timer Base Address                     */
N#define WWDT_BASE           (APB1_BASE      + 0x40100)                  /*!< Window Watch Dog Timer Base Address              */
N#define RTC_BASE            (APB1_BASE      + 0x41000)                  /*!< RTC Base Address                                 */
N#define ADC_BASE            (APB1_BASE      + 0x43000)                  /*!< ADC Base Address                                 */
N#define ACMP01_BASE         (APB1_BASE      + 0x45000)                  /*!< ACMP01 Base Address                              */
N
N#define TIMER0_BASE         (APB1_BASE      + 0x50000)                  /*!< Timer0 Base Address                              */
N#define TIMER1_BASE         (APB1_BASE      + 0x50020)                  /*!< Timer1 Base Address                              */
N#define TIMER2_BASE         (APB2_BASE      + 0x51000)                  /*!< Timer2 Base Address                              */
N#define TIMER3_BASE         (APB2_BASE      + 0x51020)                  /*!< Timer3 Base Address                              */
N
N#define PWM0_BASE           (APB1_BASE      + 0x58000)                  /*!< PWM0 Base Address                                */
N#define PWM1_BASE           (APB2_BASE      + 0x59000)                  /*!< PWM1 Base Address                                */
N
N#define BPWM0_BASE          (APB1_BASE      + 0x5A000)                  /*!< BPWM0 Base Address                               */
N#define BPWM1_BASE          (APB2_BASE      + 0x5B000)                  /*!< BPWM1 Base Address                               */
N
N#define QSPI0_BASE          (APB1_BASE      + 0x60000)                  /*!< QSPI0 Base Address                               */
N#define SPI0_BASE           (APB1_BASE      + 0x61000)                  /*!< SPI0 Base Address                                */
N
N#define UART0_BASE          (APB1_BASE      + 0x70000)                  /*!< UART0 Base Address                               */
N#define UART1_BASE          (APB2_BASE      + 0x71000)                  /*!< UART1 Base Address                               */
N#define UART2_BASE          (APB2_BASE      + 0x72000)                  /*!< UART2 Base Address                               */
N#define UART3_BASE          (APB2_BASE      + 0x73000)                  /*!< UART3 Base Address                               */
N#define UART4_BASE          (APB2_BASE      + 0x74000)                  /*!< UART4 Base Address                               */
N#define UART5_BASE          (APB2_BASE      + 0x75000)                  /*!< UART5 Base Address                               */
N#define UART6_BASE          (APB2_BASE      + 0x76000)                  /*!< UART6 Base Address                               */
N#define UART7_BASE          (APB2_BASE      + 0x77000)                  /*!< UART7 Base Address                               */
N
N#define I2C0_BASE           (APB1_BASE      + 0x80000)                  /*!< I2C0 Base Address                                */
N#define I2C1_BASE           (APB2_BASE      + 0x81000)                  /*!< I2C1 Base Address                                */
N
N#define USBD_BASE           (AHB_BASE       + 0xC0000)                  /*!< USBD1.1 Base Address                             */
N#define USCI0_BASE          (APB1_BASE      + 0xD0000)                  /*!< USCI0 Base Address                               */
N#define USCI1_BASE          (APB2_BASE      + 0xD1000)                  /*!< USCI1 Base Address                               */
N
N
N/**@}*/ /* PERIPHERAL */
N
N/******************************************************************************/
N/*                         Peripheral declaration                             */
N/******************************************************************************/
N
N/** @addtogroup PMODULE Peripheral Pointer
N  The Declaration of Peripheral Pointer
N  @{
N */
N#define PA                  ((GPIO_T *) PA_BASE)                        /*!< GPIO PORTA Configuration Struct                        */
N#define PB                  ((GPIO_T *) PB_BASE)                        /*!< GPIO PORTB Configuration Struct                        */
N#define PC                  ((GPIO_T *) PC_BASE)                        /*!< GPIO PORTC Configuration Struct                        */
N#define PD                  ((GPIO_T *) PD_BASE)                        /*!< GPIO PORTD Configuration Struct                        */
N#define PE                  ((GPIO_T *) PE_BASE)                        /*!< GPIO PORTE Configuration Struct                        */
N#define PF                  ((GPIO_T *) PF_BASE)                        /*!< GPIO PORTF Configuration Struct                        */
N#define PG                  ((GPIO_T *) PG_BASE)                        /*!< GPIO PORTG Configuration Struct                        */
N#define PH                  ((GPIO_T *) PH_BASE)                        /*!< GPIO PORTH Configuration Struct                        */
N#define GPIO                ((GPIO_DBCTL_T *) GPIO_DBCTL_BASE)          /*!< Interrupt De-bounce Cycle Control Configuration Struct */
N
N#define UART0               ((UART_T *) UART0_BASE)                     /*!< UART0 Configuration Struct                       */
N#define UART1               ((UART_T *) UART1_BASE)                     /*!< UART1 Configuration Struct                       */
N#define UART2               ((UART_T *) UART2_BASE)                     /*!< UART2 Configuration Struct                       */
N#define UART3               ((UART_T *) UART3_BASE)                     /*!< UART3 Configuration Struct                       */
N#define UART4               ((UART_T *) UART4_BASE)                     /*!< UART4 Configuration Struct                       */
N#define UART5               ((UART_T *) UART5_BASE)                     /*!< UART5 Configuration Struct                       */
N#define UART6               ((UART_T *) UART6_BASE)                     /*!< UART6 Configuration Struct                       */
N#define UART7               ((UART_T *) UART7_BASE)                     /*!< UART7 Configuration Struct                       */
N
N#define TIMER0              ((TIMER_T *) TIMER0_BASE)                   /*!< TIMER0 Configuration Struct                      */
N#define TIMER1              ((TIMER_T *) TIMER1_BASE)                   /*!< TIMER1 Configuration Struct                      */
N#define TIMER2              ((TIMER_T *) TIMER2_BASE)                   /*!< TIMER2 Configuration Struct                      */
N#define TIMER3              ((TIMER_T *) TIMER3_BASE)                   /*!< TIMER3 Configuration Struct                      */
N
N#define WDT                 ((WDT_T *) WDT_BASE)                        /*!< Watch Dog Timer Configuration Struct             */
N
N#define WWDT                ((WWDT_T *) WWDT_BASE)                      /*!< Window Watch Dog Timer Configuration Struct      */
N
N#define SPI0                ((SPI_T *) SPI0_BASE)                       /*!< SPI0 Configuration Struct                        */
N#define QSPI0               ((QSPI_T *) QSPI0_BASE)                     /*!< QSPI0 Configuration Struct                       */
N
N#define I2C0                ((I2C_T *) I2C0_BASE)                       /*!< I2C0 Configuration Struct                        */
N#define I2C1                ((I2C_T *) I2C1_BASE)                       /*!< I2C1 Configuration Struct                        */
N
N#define ADC                 ((ADC_T *) ADC_BASE)                        /*!< ADC Configuration Struct                         */
N
N#define ACMP01              ((ACMP_T *) ACMP01_BASE)                    /*!< ACMP01 Configuration Struct                      */
N
N#define CLK                 ((CLK_T *) CLK_BASE)                        /*!< System Clock Controller Configuration Struct     */
N
N#define SYS                 ((SYS_T *) SYS_BASE)                        /*!< System Global Controller Configuration Struct    */
N
N#define SYSINT              ((NMI_T *) INT_BASE)                        /*!< Interrupt Source Controller Configuration Struct */
N#define NMI                 ((NMI_T *) NMI_BASE)                        /*!< Interrupt Source Controller Configuration Struct */
N
N#define FMC                 ((FMC_T *) FMC_BASE)                        /*!< Flash Memory Controller                          */
N
N#define PWM0                ((PWM_T *) PWM0_BASE)                       /*!< PWM0 Configuration Struct                        */
N#define PWM1                ((PWM_T *) PWM1_BASE)                       /*!< PWM1 Configuration Struct                        */
N#define BPWM0               ((BPWM_T *) BPWM0_BASE)                     /*!< BPWM0 Configuration Struct                       */
N#define BPWM1               ((BPWM_T *) BPWM1_BASE)                     /*!< BPWM1 Configuration Struct                       */
N
N#define EBI                 ((EBI_T *) EBI_BASE)                        /*!< EBI Configuration Struct                         */
N
N#define HDIV                ((HDIV_T *) HDIV_BASE)                      /*!< HDIV Configuration Struct                        */
N
N#define CRC                 ((CRC_T *) CRC_BASE)                        /*!< CRC Configuration Struct                         */
N
N#define USBD                ((USBD_T *) USBD_BASE)                      /*!< CRC Configuration Struct                         */
N
N#define PDMA                ((PDMA_T *) PDMA_BASE)                      /*!< PDMA Configuration Struct                        */
N
N#define UI2C0               ((UI2C_T *) USCI0_BASE)                     /*!< UI2C0 Configuration Struct                       */
N#define UI2C1               ((UI2C_T *) USCI1_BASE)                     /*!< UI2C1 Configuration Struct                       */
N
N#define USPI0               ((USPI_T *) USCI0_BASE)                     /*!< USPI0 Configuration Struct                       */
N#define USPI1               ((USPI_T *) USCI1_BASE)                     /*!< USPI1 Configuration Struct                       */
N
N#define UUART0              ((UUART_T *) USCI0_BASE)                    /*!< UUART0 Configuration Struct                      */
N#define UUART1              ((UUART_T *) USCI1_BASE)                    /*!< UUART1 Configuration Struct                      */
N
N#define RTC                 ((RTC_T *)   RTC_BASE)                      /*!< RTC Configuration Struct                         */
N
N/**@}*/ /* end of group PMODULE */
N
N
N//=============================================================================
N
N/** @addtogroup IO_ROUTINE I/O Routines
N  The Declaration of I/O Routines
N  @{
N */
N
Ntypedef volatile unsigned char  vu8;
Ntypedef volatile unsigned long  vu32;
Ntypedef volatile unsigned short vu16;
N
N/**
N  * @brief Get a 8-bit unsigned value from specified address
N  * @param[in] addr Address to get 8-bit data from
N  * @return  8-bit unsigned value stored in specified address
N  */
N#define M8(addr)  (*((vu8  *) (addr)))
N
N/**
N  * @brief Get a 16-bit unsigned value from specified address
N  * @param[in] addr Address to get 16-bit data from
N  * @return  16-bit unsigned value stored in specified address
N  * @note The input address must be 16-bit aligned
N  */
N#define M16(addr) (*((vu16 *) (addr)))
N
N/**
N  * @brief Get a 32-bit unsigned value from specified address
N  * @param[in] addr Address to get 32-bit data from
N  * @return  32-bit unsigned value stored in specified address
N  * @note The input address must be 32-bit aligned
N  */
N#define M32(addr) (*((vu32 *) (addr)))
N
N/**
N  * @brief Set a 32-bit unsigned value to specified I/O port
N  * @param[in] port Port address to set 32-bit data
N  * @param[in] value Value to write to I/O port
N  * @return  None
N  * @note The output port must be 32-bit aligned
N  */
N#define outpw(port,value)   (*((volatile unsigned int *)(port))=(value))
N
N/**
N  * @brief Get a 32-bit unsigned value from specified I/O port
N  * @param[in] port Port address to get 32-bit data from
N  * @return  32-bit unsigned value stored in specified I/O port
N  * @note The input port must be 32-bit aligned
N  */
N#define inpw(port)          ((*((volatile unsigned int *)(port))))
N
N/**
N  * @brief Set a 16-bit unsigned value to specified I/O port
N  * @param[in] port Port address to set 16-bit data
N  * @param[in] value Value to write to I/O port
N  * @return  None
N  * @note The output port must be 16-bit aligned
N  */
N#define outps(port,value)   (*((volatile unsigned short *)(port))=(value))
N
N/**
N  * @brief Get a 16-bit unsigned value from specified I/O port
N  * @param[in] port Port address to get 16-bit data from
N  * @return  16-bit unsigned value stored in specified I/O port
N  * @note The input port must be 16-bit aligned
N  */
N#define inps(port)          ((*((volatile unsigned short *)(port))))
N
N/**
N  * @brief Set a 8-bit unsigned value to specified I/O port
N  * @param[in] port Port address to set 8-bit data
N  * @param[in] value Value to write to I/O port
N  * @return  None
N  */
N#define outpb(port,value)   (*((volatile unsigned char *)(port))=(value))
N
N/**
N  * @brief Get a 8-bit unsigned value from specified I/O port
N  * @param[in] port Port address to get 8-bit data from
N  * @return  8-bit unsigned value stored in specified I/O port
N  */
N#define inpb(port)          ((*((volatile unsigned char *)(port))))
N
N/**
N  * @brief Set a 32-bit unsigned value to specified I/O port
N  * @param[in] port Port address to set 32-bit data
N  * @param[in] value Value to write to I/O port
N  * @return  None
N  * @note The output port must be 32-bit aligned
N  */
N#define outp32(port,value)  (*((volatile unsigned int *)(port))=(value))
N
N/**
N  * @brief Get a 32-bit unsigned value from specified I/O port
N  * @param[in] port Port address to get 32-bit data from
N  * @return  32-bit unsigned value stored in specified I/O port
N  * @note The input port must be 32-bit aligned
N  */
N#define inp32(port)         ((*((volatile unsigned int *)(port))))
N
N/**
N  * @brief Set a 16-bit unsigned value to specified I/O port
N  * @param[in] port Port address to set 16-bit data
N  * @param[in] value Value to write to I/O port
N  * @return  None
N  * @note The output port must be 16-bit aligned
N  */
N#define outp16(port,value)  (*((volatile unsigned short *)(port))=(value))
N
N/**
N  * @brief Get a 16-bit unsigned value from specified I/O port
N  * @param[in] port Port address to get 16-bit data from
N  * @return  16-bit unsigned value stored in specified I/O port
N  * @note The input port must be 16-bit aligned
N  */
N#define inp16(port)         ((*((volatile unsigned short *)(port))))
N
N/**
N  * @brief Set a 8-bit unsigned value to specified I/O port
N  * @param[in] port Port address to set 8-bit data
N  * @param[in] value Value to write to I/O port
N  * @return  None
N  */
N#define outp8(port,value)   (*((volatile unsigned char *)(port))=(value))
N
N/**
N  * @brief Get a 8-bit unsigned value from specified I/O port
N  * @param[in] port Port address to get 8-bit data from
N  * @return  8-bit unsigned value stored in specified I/O port
N  */
N#define inp8(port)          ((*((volatile unsigned char *)(port))))
N
N/*@}*/ /* end of group IO_ROUTINE */
N
N/******************************************************************************/
N/*                Legacy Constants                                            */
N/******************************************************************************/
N
N/** @addtogroup Legacy_Constants Legacy Constants
N  Legacy Constants
N  @{
N*/
N
N#define E_SUCCESS (0)
N
N#ifndef NULL
S#define NULL      (0)                 ///< NULL pointer
N#endif
N
N#define TRUE      (1UL)               ///< Boolean true, define to use in API parameters or return value
N#define FALSE     (0UL)               ///< Boolean false, define to use in API parameters or return value
N
N#define ENABLE    (1UL)               ///< Enable, define to use in API parameters
N#define DISABLE   (0UL)               ///< Disable, define to use in API parameters
N
N/* Define one bit mask */
N#define BIT0     (0x00000001UL)       ///< Bit 0 mask of an 32 bit integer
N#define BIT1     (0x00000002UL)       ///< Bit 1 mask of an 32 bit integer
N#define BIT2     (0x00000004UL)       ///< Bit 2 mask of an 32 bit integer
N#define BIT3     (0x00000008UL)       ///< Bit 3 mask of an 32 bit integer
N#define BIT4     (0x00000010UL)       ///< Bit 4 mask of an 32 bit integer
N#define BIT5     (0x00000020UL)       ///< Bit 5 mask of an 32 bit integer
N#define BIT6     (0x00000040UL)       ///< Bit 6 mask of an 32 bit integer
N#define BIT7     (0x00000080UL)       ///< Bit 7 mask of an 32 bit integer
N#define BIT8     (0x00000100UL)       ///< Bit 8 mask of an 32 bit integer
N#define BIT9     (0x00000200UL)       ///< Bit 9 mask of an 32 bit integer
N#define BIT10    (0x00000400UL)       ///< Bit 10 mask of an 32 bit integer
N#define BIT11    (0x00000800UL)       ///< Bit 11 mask of an 32 bit integer
N#define BIT12    (0x00001000UL)       ///< Bit 12 mask of an 32 bit integer
N#define BIT13    (0x00002000UL)       ///< Bit 13 mask of an 32 bit integer
N#define BIT14    (0x00004000UL)       ///< Bit 14 mask of an 32 bit integer
N#define BIT15    (0x00008000UL)       ///< Bit 15 mask of an 32 bit integer
N#define BIT16    (0x00010000UL)       ///< Bit 16 mask of an 32 bit integer
N#define BIT17    (0x00020000UL)       ///< Bit 17 mask of an 32 bit integer
N#define BIT18    (0x00040000UL)       ///< Bit 18 mask of an 32 bit integer
N#define BIT19    (0x00080000UL)       ///< Bit 19 mask of an 32 bit integer
N#define BIT20    (0x00100000UL)       ///< Bit 20 mask of an 32 bit integer
N#define BIT21    (0x00200000UL)       ///< Bit 21 mask of an 32 bit integer
N#define BIT22    (0x00400000UL)       ///< Bit 22 mask of an 32 bit integer
N#define BIT23    (0x00800000UL)       ///< Bit 23 mask of an 32 bit integer
N#define BIT24    (0x01000000UL)       ///< Bit 24 mask of an 32 bit integer
N#define BIT25    (0x02000000UL)       ///< Bit 25 mask of an 32 bit integer
N#define BIT26    (0x04000000UL)       ///< Bit 26 mask of an 32 bit integer
N#define BIT27    (0x08000000UL)       ///< Bit 27 mask of an 32 bit integer
N#define BIT28    (0x10000000UL)       ///< Bit 28 mask of an 32 bit integer
N#define BIT29    (0x20000000UL)       ///< Bit 29 mask of an 32 bit integer
N#define BIT30    (0x40000000UL)       ///< Bit 30 mask of an 32 bit integer
N#define BIT31    (0x80000000UL)       ///< Bit 31 mask of an 32 bit integer
N
N
N/* Byte Mask Definitions */
N#define BYTE0_Msk              (0x000000FFUL)                   ///< Mask to get bit0~bit7 from a 32 bit integer
N#define BYTE1_Msk              (0x0000FF00UL)                   ///< Mask to get bit8~bit15 from a 32 bit integer
N#define BYTE2_Msk              (0x00FF0000UL)                   ///< Mask to get bit16~bit23 from a 32 bit integer
N#define BYTE3_Msk              (0xFF000000UL)                   ///< Mask to get bit24~bit31 from a 32 bit integer
N
N#define GET_BYTE0(u32Param)    (((u32Param) & BYTE0_Msk)      ) /*!< Extract Byte 0 (Bit  0~ 7) from parameter u32Param */
N#define GET_BYTE1(u32Param)    (((u32Param) & BYTE1_Msk) >>  8) /*!< Extract Byte 1 (Bit  8~15) from parameter u32Param */
N#define GET_BYTE2(u32Param)    (((u32Param) & BYTE2_Msk) >> 16) /*!< Extract Byte 2 (Bit 16~23) from parameter u32Param */
N#define GET_BYTE3(u32Param)    (((u32Param) & BYTE3_Msk) >> 24) /*!< Extract Byte 3 (Bit 24~31) from parameter u32Param */
N
N/* Chip Series number definitions */
N#define GET_CHIP_SERIES_NUM    ((SYS->PDID & 0xF00) >> 8)       /*!< Extract chip series number from PDID */
N#define CHIP_SERIES_NUM_B      (0xBUL)                          /*!< Chip series number for M031_B */
N#define CHIP_SERIES_NUM_C      (0xCUL)                          /*!< Chip series number for M031_C */
N#define CHIP_SERIES_NUM_D      (0xDUL)                          /*!< Chip series number for M031_D */
N#define CHIP_SERIES_NUM_E      (0xEUL)                          /*!< Chip series number for M031_E */
N#define CHIP_SERIES_NUM_G      (0x6UL)                          /*!< Chip series number for M031_G */
N#define CHIP_SERIES_NUM_I      (0x1UL)                          /*!< Chip series number for M031_I */
N
N/*@}*/ /* end of group Legacy_Constants */
N
N/******************************************************************************/
N/*                         Peripheral header files                            */
N/******************************************************************************/
N#include "sys.h"
L 1 "..\..\..\Library\StdDriver\inc\sys.h" 1
N/**************************************************************************//**
N * @file     sys.h
N * @version  V0.10
N * $Revision: 7 $
N * $Date: 19/06/10 2:48p $
N * @brief    M031 Series SYS Driver Header File
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __SYS_H__
N#define __SYS_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup SYS_Driver SYS Driver
N  @{
N*/
N
N/** @addtogroup SYS_EXPORTED_CONSTANTS SYS Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Module Reset Control Resister constant definitions.                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_RST    ((0x0<<24)|SYS_IPRST0_PDMARST_Pos)      /*!< PDMA  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define EBI_RST     ((0x0<<24)|SYS_IPRST0_EBIRST_Pos)       /*!< EBI   reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define HDIV_RST    ((0x0<<24)|SYS_IPRST0_HDIVRST_Pos)      /*!< HDIV  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define CRC_RST     ((0x0<<24)|SYS_IPRST0_CRCRST_Pos)       /*!< CRC   reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N
N#define GPIO_RST    ((0x4<<24)|SYS_IPRST1_GPIORST_Pos)      /*!< GPIO  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define TMR0_RST    ((0x4<<24)|SYS_IPRST1_TMR0RST_Pos)      /*!< TMR0  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define TMR1_RST    ((0x4<<24)|SYS_IPRST1_TMR1RST_Pos)      /*!< TMR1  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define TMR2_RST    ((0x4<<24)|SYS_IPRST1_TMR2RST_Pos)      /*!< TMR2  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define TMR3_RST    ((0x4<<24)|SYS_IPRST1_TMR3RST_Pos)      /*!< TMR3  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define ACMP01_RST  ((0x4<<24)|SYS_IPRST1_ACMP01RST_Pos)    /*!< ACMP  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define I2C0_RST    ((0x4<<24)|SYS_IPRST1_I2C0RST_Pos)      /*!< I2C0  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define I2C1_RST    ((0x4<<24)|SYS_IPRST1_I2C1RST_Pos)      /*!< I2C1  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define QSPI0_RST   ((0x4<<24)|SYS_IPRST1_QSPI0RST_Pos)     /*!< QSPI0 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define SPI0_RST    ((0x4<<24)|SYS_IPRST1_SPI0RST_Pos)      /*!< SPI0  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define UART0_RST   ((0x4<<24)|SYS_IPRST1_UART0RST_Pos)     /*!< UART0 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define UART1_RST   ((0x4<<24)|SYS_IPRST1_UART1RST_Pos)     /*!< UART1 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define UART2_RST   ((0x4<<24)|SYS_IPRST1_UART2RST_Pos)     /*!< UART2 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define UART3_RST   ((0x4<<24)|SYS_IPRST1_UART3RST_Pos)     /*!< UART3 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define UART4_RST   ((0x4<<24)|SYS_IPRST1_UART4RST_Pos)     /*!< UART4 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define UART5_RST   ((0x4<<24)|SYS_IPRST1_UART5RST_Pos)     /*!< UART5 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define UART6_RST   ((0x4<<24)|SYS_IPRST1_UART6RST_Pos)     /*!< UART6 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define UART7_RST   ((0x4<<24)|SYS_IPRST1_UART7RST_Pos)     /*!< UART7 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define USBD_RST    ((0x4<<24)|SYS_IPRST1_USBDRST_Pos)      /*!< USBD  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define ADC_RST     ((0x4<<24)|SYS_IPRST1_ADCRST_Pos)       /*!< ADC   reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N
N#define USCI0_RST   ((0x8<<24)|SYS_IPRST2_USCI0RST_Pos)     /*!< USCI0 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define USCI1_RST   ((0x8<<24)|SYS_IPRST2_USCI1RST_Pos)     /*!< USCI1 reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define PWM0_RST    ((0x8<<24)|SYS_IPRST2_PWM0RST_Pos)      /*!< PWM0  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define PWM1_RST    ((0x8<<24)|SYS_IPRST2_PWM1RST_Pos)      /*!< PWM1  reset is one of the \ref SYS_ResetModule parameter   \hideinitializer */
N#define BPWM0_RST   ((0x8<<24)|SYS_IPRST2_BPWM0RST_Pos)     /*!< BPWM0  reset is one of the \ref SYS_ResetModule parameter  \hideinitializer */
N#define BPWM1_RST   ((0x8<<24)|SYS_IPRST2_BPWM1RST_Pos)     /*!< BPWM1  reset is one of the \ref SYS_ResetModule parameter  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Brown Out Detector Threshold Voltage Selection constant definitions.                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define SYS_BODCTL_BOD_RST_EN           (1UL<<SYS_BODCTL_BODRSTEN_Pos)          /*!< Brown-out Reset Enable     \hideinitializer */
N#define SYS_BODCTL_BOD_INTERRUPT_EN     (0UL<<SYS_BODCTL_BODRSTEN_Pos)          /*!< Brown-out Interrupt Enable \hideinitializer */
N
N#define SYS_BODCTL_BODVL_2_5V           (0x1UL<<SYS_BODCTL_BODVL_Pos)           /*!< Setting Brown Out Detector Threshold Voltage as 2.5V   \hideinitializer */
N#define SYS_BODCTL_BODVL_2_0V           (0x0UL<<SYS_BODCTL_BODVL_Pos)           /*!< Setting Brown Out Detector Threshold Voltage as 2.0V   \hideinitializer */
N
N#define SYS_BODCTL_LVRDGSEL_0HCLK       (0x0UL<<SYS_BODCTL_LVRDGSEL_Pos)        /*!< LVR Output De-glitch Time Without de-glitch function.  \hideinitializer */
N#define SYS_BODCTL_LVRDGSEL_64HCLK      (0x1UL<<SYS_BODCTL_LVRDGSEL_Pos)        /*!< LVR Output De-glitch Time is selected 64HCLK           \hideinitializer */
N#define SYS_BODCTL_LVRDGSEL_128HCLK     (0x2UL<<SYS_BODCTL_LVRDGSEL_Pos)        /*!< LVR Output De-glitch Time is selected 128HCLK          \hideinitializer */
N#define SYS_BODCTL_LVRDGSEL_256HCLK     (0x3UL<<SYS_BODCTL_LVRDGSEL_Pos)        /*!< LVR Output De-glitch Time is selected 256HCLK          \hideinitializer */
N#define SYS_BODCTL_LVRDGSEL_512HCLK     (0x4UL<<SYS_BODCTL_LVRDGSEL_Pos)        /*!< LVR Output De-glitch Time is selected 512HCLK          \hideinitializer */
N#define SYS_BODCTL_LVRDGSEL_1024HCLK    (0x5UL<<SYS_BODCTL_LVRDGSEL_Pos)        /*!< LVR Output De-glitch Time is selected 1024HCLK         \hideinitializer */
N#define SYS_BODCTL_LVRDGSEL_2048HCLK    (0x6UL<<SYS_BODCTL_LVRDGSEL_Pos)        /*!< LVR Output De-glitch Time is selected 2048HCLK         \hideinitializer */
N#define SYS_BODCTL_LVRDGSEL_4096HCLK    (0x7UL<<SYS_BODCTL_LVRDGSEL_Pos)        /*!< LVR Output De-glitch Time is selected 4096HCLK         \hideinitializer */
N
N#define SYS_BODCTL_BODDGSEL_0HCLK       (0x0UL<<SYS_BODCTL_BODDGSEL_Pos)        /*!< BOD Output De-glitch Time is sampled by RC10K clock.   \hideinitializer */
N#define SYS_BODCTL_BODDGSEL_64HCLK      (0x1UL<<SYS_BODCTL_BODDGSEL_Pos)        /*!< BOD Output De-glitch Time is selected 64HCLK           \hideinitializer */
N#define SYS_BODCTL_BODDGSEL_128HCLK     (0x2UL<<SYS_BODCTL_BODDGSEL_Pos)        /*!< BOD Output De-glitch Time is selected 128HCLK          \hideinitializer */
N#define SYS_BODCTL_BODDGSEL_256HCLK     (0x3UL<<SYS_BODCTL_BODDGSEL_Pos)        /*!< BOD Output De-glitch Time is selected 256HCLK          \hideinitializer */
N#define SYS_BODCTL_BODDGSEL_512HCLK     (0x4UL<<SYS_BODCTL_BODDGSEL_Pos)        /*!< BOD Output De-glitch Time is selected 512HCLK          \hideinitializer */
N#define SYS_BODCTL_BODDGSEL_1024HCLK    (0x5UL<<SYS_BODCTL_BODDGSEL_Pos)        /*!< BOD Output De-glitch Time is selected 1024HCLK         \hideinitializer */
N#define SYS_BODCTL_BODDGSEL_2048HCLK    (0x6UL<<SYS_BODCTL_BODDGSEL_Pos)        /*!< BOD Output De-glitch Time is selected 2048HCLK         \hideinitializer */
N#define SYS_BODCTL_BODDGSEL_4096HCLK    (0x7UL<<SYS_BODCTL_BODDGSEL_Pos)        /*!< BOD Output De-glitch Time is selected 4096HCLK         \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Multi-Function constant definitions.                                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N
N/* How to use below #define?
N
NExample: If user want to set PD.3 as UART0_TXD and PD.2 as UART0_RXD in initial function,
N         user can issue following command to achieve it.
N
N         SYS->GPD_MFPL = (SYS->GPD_MFPL & ~SYS_GPD_MFPL_PD2MFP_Msk) | SYS_GPD_MFPL_PD2MFP_UART0_RXD;
N         SYS->GPD_MFPL = (SYS->GPD_MFPL & ~SYS_GPD_MFPL_PD3MFP_Msk) | SYS_GPD_MFPL_PD3MFP_UART0_TXD;
N*/
N/* PA.0 MFP */
N#define SYS_GPA_MFPL_PA0MFP_GPIO         (0x00UL<<SYS_GPA_MFPL_PA0MFP_Pos) /*!< GPA_MFPL PA0 setting for GPIO        \hideinitializer */
N#define SYS_GPA_MFPL_PA0MFP_QSPI0_MOSI0  (0x03UL<<SYS_GPA_MFPL_PA0MFP_Pos) /*!< GPA_MFPL PA0 setting for QSPI0_MOSI0 \hideinitializer */
N#define SYS_GPA_MFPL_PA0MFP_SPI0_MOSI    (0x04UL<<SYS_GPA_MFPL_PA0MFP_Pos) /*!< GPA_MFPL PA0 setting for SPI0_MOSI   \hideinitializer */
N#define SYS_GPA_MFPL_PA0MFP_UART0_RXD    (0x07UL<<SYS_GPA_MFPL_PA0MFP_Pos) /*!< GPA_MFPL PA0 setting for UART0_RXD   \hideinitializer */
N#define SYS_GPA_MFPL_PA0MFP_UART1_nRTS   (0x08UL<<SYS_GPA_MFPL_PA0MFP_Pos) /*!< GPA_MFPL PA0 setting for UART1_nRTS  \hideinitializer */
N#define SYS_GPA_MFPL_PA0MFP_BPWM0_CH0    (0x0CUL<<SYS_GPA_MFPL_PA0MFP_Pos) /*!< GPA_MFPL PA0 setting for BPWM0_CH0   \hideinitializer */
N#define SYS_GPA_MFPL_PA0MFP_PWM0_CH5     (0x0DUL<<SYS_GPA_MFPL_PA0MFP_Pos) /*!< GPA_MFPL PA0 setting for PWM0_CH5    \hideinitializer */
N
N/* PA.1 MFP */
N#define SYS_GPA_MFPL_PA1MFP_GPIO         (0x00UL<<SYS_GPA_MFPL_PA1MFP_Pos) /*!< GPA_MFPL PA1 setting for GPIO        \hideinitializer */
N#define SYS_GPA_MFPL_PA1MFP_QSPI0_MISO0  (0x03UL<<SYS_GPA_MFPL_PA1MFP_Pos) /*!< GPA_MFPL PA1 setting for QSPI0_MISO0 \hideinitializer */
N#define SYS_GPA_MFPL_PA1MFP_SPI0_MISO    (0x04UL<<SYS_GPA_MFPL_PA1MFP_Pos) /*!< GPA_MFPL PA1 setting for SPI0_MISO   \hideinitializer */
N#define SYS_GPA_MFPL_PA1MFP_UART0_TXD    (0x07UL<<SYS_GPA_MFPL_PA1MFP_Pos) /*!< GPA_MFPL PA1 setting for UART0_TXD   \hideinitializer */
N#define SYS_GPA_MFPL_PA1MFP_UART1_nCTS   (0x08UL<<SYS_GPA_MFPL_PA1MFP_Pos) /*!< GPA_MFPL PA1 setting for UART1_nCTS  \hideinitializer */
N#define SYS_GPA_MFPL_PA1MFP_USCI1_CLK    (0x0BUL<<SYS_GPA_MFPL_PA1MFP_Pos) /*!< GPA_MFPL PA1 setting for USCI1_CLK   \hideinitializer */
N#define SYS_GPA_MFPL_PA1MFP_BPWM0_CH1    (0x0CUL<<SYS_GPA_MFPL_PA1MFP_Pos) /*!< GPA_MFPL PA1 setting for BPWM0_CH1   \hideinitializer */
N#define SYS_GPA_MFPL_PA1MFP_PWM0_CH4     (0x0DUL<<SYS_GPA_MFPL_PA1MFP_Pos) /*!< GPA_MFPL PA1 setting for PWM0_CH4    \hideinitializer */
N
N/* PA.2 MFP */
N#define SYS_GPA_MFPL_PA2MFP_GPIO         (0x00UL<<SYS_GPA_MFPL_PA2MFP_Pos) /*!< GPA_MFPL PA2 setting for GPIO        \hideinitializer */
N#define SYS_GPA_MFPL_PA2MFP_QSPI0_CLK    (0x03UL<<SYS_GPA_MFPL_PA2MFP_Pos) /*!< GPA_MFPL PA2 setting for QSPI0_CLK   \hideinitializer */
N#define SYS_GPA_MFPL_PA2MFP_SPI0_CLK     (0x04UL<<SYS_GPA_MFPL_PA2MFP_Pos) /*!< GPA_MFPL PA2 setting for SPI0_CLK    \hideinitializer */
N#define SYS_GPA_MFPL_PA2MFP_UART4_RXD    (0x05UL<<SYS_GPA_MFPL_PA2MFP_Pos) /*!< GPA_MFPL PA2 setting for UART4_RXD   \hideinitializer */
N#define SYS_GPA_MFPL_PA2MFP_I2C0_SMBSUS  (0x07UL<<SYS_GPA_MFPL_PA2MFP_Pos) /*!< GPA_MFPL PA2 setting for I2C0_SMBSUS \hideinitializer */
N#define SYS_GPA_MFPL_PA2MFP_UART1_RXD    (0x08UL<<SYS_GPA_MFPL_PA2MFP_Pos) /*!< GPA_MFPL PA2 setting for UART1_RXD   \hideinitializer */
N#define SYS_GPA_MFPL_PA2MFP_I2C1_SDA     (0x09UL<<SYS_GPA_MFPL_PA2MFP_Pos) /*!< GPA_MFPL PA2 setting for I2C1_SDA    \hideinitializer */
N#define SYS_GPA_MFPL_PA2MFP_USCI1_DAT0   (0x0BUL<<SYS_GPA_MFPL_PA2MFP_Pos) /*!< GPA_MFPL PA2 setting for USCI1_DAT0  \hideinitializer */
N#define SYS_GPA_MFPL_PA2MFP_BPWM0_CH2    (0x0CUL<<SYS_GPA_MFPL_PA2MFP_Pos) /*!< GPA_MFPL PA2 setting for BPWM0_CH2   \hideinitializer */
N#define SYS_GPA_MFPL_PA2MFP_PWM0_CH3     (0x0DUL<<SYS_GPA_MFPL_PA2MFP_Pos) /*!< GPA_MFPL PA2 setting for PWM0_CH3    \hideinitializer */
N
N/* PA.3 MFP */
N#define SYS_GPA_MFPL_PA3MFP_GPIO         (0x00UL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for GPIO        \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_QSPI0_SS     (0x03UL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for QSPI0_SS    \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_SPI0_SS      (0x04UL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for SPI0_SS     \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_UART4_TXD    (0x05UL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for UART4_TXD   \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_I2C0_SMBAL   (0x07UL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for I2C0_SMBAL  \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_UART1_TXD    (0x08UL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for UART1_TXD   \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_I2C1_SCL     (0x09UL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for I2C1_SCL    \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_USCI1_DAT1   (0x0BUL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for USCI1_DAT1  \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_BPWM0_CH3    (0x0CUL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for BPWM0_CH3   \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_PWM0_CH2     (0x0DUL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for PWM0_CH2    \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_CLKO         (0x0EUL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPB_MFPL PA3 setting for CLKO        \hideinitializer */
N#define SYS_GPA_MFPL_PA3MFP_PWM1_BRAKE1  (0x0FUL<<SYS_GPA_MFPL_PA3MFP_Pos) /*!< GPA_MFPL PA3 setting for PWM1_BRAKE1 \hideinitializer */
N
N/* PA.4 MFP */
N#define SYS_GPA_MFPL_PA4MFP_GPIO         (0x00UL<<SYS_GPA_MFPL_PA4MFP_Pos) /*!< GPA_MFPL PA4 setting for GPIO           \hideinitializer */
N#define SYS_GPA_MFPL_PA4MFP_QSPI0_MOSI1  (0x03UL<<SYS_GPA_MFPL_PA4MFP_Pos) /*!< GPA_MFPL PA4 setting for QSPI0_MOSI1    \hideinitializer */
N#define SYS_GPA_MFPL_PA4MFP_SPI0_I2SMCLK (0x04UL<<SYS_GPA_MFPL_PA4MFP_Pos) /*!< GPA_MFPL PA4 setting for SPI0_I2SMCLK   \hideinitializer */
N#define SYS_GPA_MFPL_PA4MFP_UART0_nRTS   (0x07UL<<SYS_GPA_MFPL_PA4MFP_Pos) /*!< GPA_MFPL PA4 setting for UART0_nRTS     \hideinitializer */
N#define SYS_GPA_MFPL_PA4MFP_UART0_RXD    (0x08UL<<SYS_GPA_MFPL_PA4MFP_Pos) /*!< GPA_MFPL PA4 setting for UART0_RXD      \hideinitializer */
N#define SYS_GPA_MFPL_PA4MFP_I2C0_SDA     (0x09UL<<SYS_GPA_MFPL_PA4MFP_Pos) /*!< GPA_MFPL PA4 setting for I2C0_SDA       \hideinitializer */
N#define SYS_GPA_MFPL_PA4MFP_UART5_RXD    (0x0BUL<<SYS_GPA_MFPL_PA4MFP_Pos) /*!< GPA_MFPL PA4 setting for UART5_RXD      \hideinitializer */
N#define SYS_GPA_MFPL_PA4MFP_BPWM0_CH4    (0x0CUL<<SYS_GPA_MFPL_PA4MFP_Pos) /*!< GPA_MFPL PA4 setting for BPWM0_CH4      \hideinitializer */
N#define SYS_GPA_MFPL_PA4MFP_PWM0_CH1     (0x0DUL<<SYS_GPA_MFPL_PA4MFP_Pos) /*!< GPA_MFPL PA4 setting for PWM0_CH1       \hideinitializer */
N
N/* PA.5 MFP */
N#define SYS_GPA_MFPL_PA5MFP_GPIO         (0x00UL<<SYS_GPA_MFPL_PA5MFP_Pos) /*!< GPA_MFPL PA5 setting for GPIO        \hideinitializer */
N#define SYS_GPA_MFPL_PA5MFP_QSPI0_MISO1  (0x03UL<<SYS_GPA_MFPL_PA5MFP_Pos) /*!< GPA_MFPL PA5 setting for QSPI0_MISO1 \hideinitializer */
N#define SYS_GPA_MFPL_PA5MFP_UART0_nCTS   (0x07UL<<SYS_GPA_MFPL_PA5MFP_Pos) /*!< GPA_MFPL PA5 setting for UART0_nCTS  \hideinitializer */
N#define SYS_GPA_MFPL_PA5MFP_UART0_TXD    (0x08UL<<SYS_GPA_MFPL_PA5MFP_Pos) /*!< GPA_MFPL PA5 setting for UART0_TXD   \hideinitializer */
N#define SYS_GPA_MFPL_PA5MFP_I2C0_SCL     (0x09UL<<SYS_GPA_MFPL_PA5MFP_Pos) /*!< GPA_MFPL PA5 setting for I2C0_SCL    \hideinitializer */
N#define SYS_GPA_MFPL_PA5MFP_UART5_TXD    (0x0BUL<<SYS_GPA_MFPL_PA5MFP_Pos) /*!< GPA_MFPL PA5 setting for UART5_TXD   \hideinitializer */
N#define SYS_GPA_MFPL_PA5MFP_BPWM0_CH5    (0x0CUL<<SYS_GPA_MFPL_PA5MFP_Pos) /*!< GPA_MFPL PA5 setting for BPWM0_CH5   \hideinitializer */
N#define SYS_GPA_MFPL_PA5MFP_PWM0_CH0     (0x0DUL<<SYS_GPA_MFPL_PA5MFP_Pos) /*!< GPA_MFPL PA5 setting for PWM0_CH0    \hideinitializer */
N
N/* PA.6 MFP */
N#define SYS_GPA_MFPL_PA6MFP_GPIO         (0x00UL<<SYS_GPA_MFPL_PA6MFP_Pos) /*!< GPA_MFPL PA6 setting for GPIO        \hideinitializer */
N#define SYS_GPA_MFPL_PA6MFP_EBI_AD6      (0x02UL<<SYS_GPA_MFPL_PA6MFP_Pos) /*!< GPA_MFPL PA6 setting for EBI_AD6     \hideinitializer */
N#define SYS_GPA_MFPL_PA6MFP_UART0_RXD    (0x07UL<<SYS_GPA_MFPL_PA6MFP_Pos) /*!< GPA_MFPL PA6 setting for UART0_RXD   \hideinitializer */
N#define SYS_GPA_MFPL_PA6MFP_I2C1_SDA     (0x08UL<<SYS_GPA_MFPL_PA6MFP_Pos) /*!< GPA_MFPL PA6 setting for I2C1_SDA    \hideinitializer */
N#define SYS_GPA_MFPL_PA6MFP_PWM1_CH5     (0x0BUL<<SYS_GPA_MFPL_PA6MFP_Pos) /*!< GPA_MFPL PA6 setting for PWM1_CH5    \hideinitializer */
N#define SYS_GPA_MFPL_PA6MFP_BPWM1_CH3    (0x0CUL<<SYS_GPA_MFPL_PA6MFP_Pos) /*!< GPA_MFPL PA6 setting for BPWM1_CH3   \hideinitializer */
N#define SYS_GPA_MFPL_PA6MFP_ACMP1_WLAT   (0x0DUL<<SYS_GPA_MFPL_PA6MFP_Pos) /*!< GPA_MFPL PA6 setting for ACMP1_WLAT  \hideinitializer */
N#define SYS_GPA_MFPL_PA6MFP_TM3          (0x0EUL<<SYS_GPA_MFPL_PA6MFP_Pos) /*!< GPA_MFPL PA6 setting for TM3         \hideinitializer */
N#define SYS_GPA_MFPL_PA6MFP_INT0         (0x0FUL<<SYS_GPA_MFPL_PA6MFP_Pos) /*!< GPA_MFPL PA6 setting for INT0        \hideinitializer */
N
N/* PA.7 MFP */
N#define SYS_GPA_MFPL_PA7MFP_GPIO         (0x00UL<<SYS_GPA_MFPL_PA7MFP_Pos) /*!< GPA_MFPL PA7 setting for GPIO        \hideinitializer */
N#define SYS_GPA_MFPL_PA7MFP_EBI_AD7      (0x02UL<<SYS_GPA_MFPL_PA7MFP_Pos) /*!< GPA_MFPL PA7 setting for EBI_AD7     \hideinitializer */
N#define SYS_GPA_MFPL_PA7MFP_UART0_TXD    (0x07UL<<SYS_GPA_MFPL_PA7MFP_Pos) /*!< GPA_MFPL PA7 setting for UART0_TXD   \hideinitializer */
N#define SYS_GPA_MFPL_PA7MFP_I2C1_SCL     (0x08UL<<SYS_GPA_MFPL_PA7MFP_Pos) /*!< GPA_MFPL PA7 setting for I2C1_SCL    \hideinitializer */
N#define SYS_GPA_MFPL_PA7MFP_PWM1_CH4     (0x0BUL<<SYS_GPA_MFPL_PA7MFP_Pos) /*!< GPA_MFPL PA7 setting for PWM1_CH4    \hideinitializer */
N#define SYS_GPA_MFPL_PA7MFP_BPWM1_CH2    (0x0CUL<<SYS_GPA_MFPL_PA7MFP_Pos) /*!< GPA_MFPL PA7 setting for BPWM1_CH2   \hideinitializer */
N#define SYS_GPA_MFPL_PA7MFP_ACMP0_WLAT   (0x0DUL<<SYS_GPA_MFPL_PA7MFP_Pos) /*!< GPA_MFPL PA7 setting for ACMP0_WLAT  \hideinitializer */
N#define SYS_GPA_MFPL_PA7MFP_TM2          (0x0EUL<<SYS_GPA_MFPL_PA7MFP_Pos) /*!< GPA_MFPL PA7 setting for TM2         \hideinitializer */
N#define SYS_GPA_MFPL_PA7MFP_INT1         (0x0FUL<<SYS_GPA_MFPL_PA7MFP_Pos) /*!< GPA_MFPL PA7 setting for INT1        \hideinitializer */
N
N/* PA.8 MFP */
N#define SYS_GPA_MFPH_PA8MFP_GPIO         (0x00UL<<SYS_GPA_MFPH_PA8MFP_Pos) /*!< GPA_MFPH PA8 setting for GPIO        \hideinitializer */
N#define SYS_GPA_MFPH_PA8MFP_EBI_ALE      (0x02UL<<SYS_GPA_MFPH_PA8MFP_Pos) /*!< GPA_MFPH PA8 setting for EBI_ALE     \hideinitializer */
N#define SYS_GPA_MFPH_PA8MFP_USCI0_CTL1   (0x06UL<<SYS_GPA_MFPH_PA8MFP_Pos) /*!< GPA_MFPH PA8 setting for USCI0_CTL1  \hideinitializer */
N#define SYS_GPA_MFPH_PA8MFP_UART1_RXD    (0x07UL<<SYS_GPA_MFPH_PA8MFP_Pos) /*!< GPA_MFPH PA8 setting for UART1_RXD   \hideinitializer */
N#define SYS_GPA_MFPH_PA8MFP_UART7_RXD    (0x08UL<<SYS_GPA_MFPH_PA8MFP_Pos) /*!< GPA_MFPH PA8 setting for UART7_RXD   \hideinitializer */
N#define SYS_GPA_MFPH_PA8MFP_BPWM0_CH3    (0x09UL<<SYS_GPA_MFPH_PA8MFP_Pos) /*!< GPA_MFPH PA8 setting for BPWM0_CH3   \hideinitializer */
N#define SYS_GPA_MFPH_PA8MFP_TM3_EXT      (0x0DUL<<SYS_GPA_MFPH_PA8MFP_Pos) /*!< GPA_MFPH PA8 setting for TM3_EXT     \hideinitializer */
N#define SYS_GPA_MFPH_PA8MFP_INT4         (0x0FUL<<SYS_GPA_MFPH_PA8MFP_Pos) /*!< GPA_MFPH PA8 setting for INT4        \hideinitializer */
N
N/* PA.9 MFP */
N#define SYS_GPA_MFPH_PA9MFP_GPIO         (0x00UL<<SYS_GPA_MFPH_PA9MFP_Pos) /*!< GPA_MFPH PA9 setting for GPIO        \hideinitializer */
N#define SYS_GPA_MFPH_PA9MFP_EBI_MCLK     (0x02UL<<SYS_GPA_MFPH_PA9MFP_Pos) /*!< GPA_MFPH PA9 setting for EBI_MCLK    \hideinitializer */
N#define SYS_GPA_MFPH_PA9MFP_USCI0_DAT1   (0x06UL<<SYS_GPA_MFPH_PA9MFP_Pos) /*!< GPA_MFPH PA9 setting for USCI0_DAT1  \hideinitializer */
N#define SYS_GPA_MFPH_PA9MFP_UART1_TXD    (0x07UL<<SYS_GPA_MFPH_PA9MFP_Pos) /*!< GPA_MFPH PA9 setting for UART1_TXD   \hideinitializer */
N#define SYS_GPA_MFPH_PA9MFP_UART7_TXD    (0x08UL<<SYS_GPA_MFPH_PA9MFP_Pos) /*!< GPA_MFPH PA9 setting for UART7_TXD   \hideinitializer */
N#define SYS_GPA_MFPH_PA9MFP_BPWM0_CH2    (0x09UL<<SYS_GPA_MFPH_PA9MFP_Pos) /*!< GPA_MFPH PA9 setting for BPWM0_CH2   \hideinitializer */
N#define SYS_GPA_MFPH_PA9MFP_TM2_EXT      (0x0DUL<<SYS_GPA_MFPH_PA9MFP_Pos) /*!< GPA_MFPH PA9 setting for TM2_EXT     \hideinitializer */
N
N/* PA.10 MFP */
N#define SYS_GPA_MFPH_PA10MFP_GPIO        (0x00UL<<SYS_GPA_MFPH_PA10MFP_Pos)/*!< GPA_MFPH PA10 setting for GPIO       \hideinitializer */
N#define SYS_GPA_MFPH_PA10MFP_ACMP1_P0    (0x01UL<<SYS_GPA_MFPH_PA10MFP_Pos)/*!< GPA_MFPH PA10 setting for ACMP1_P0   \hideinitializer */
N#define SYS_GPA_MFPH_PA10MFP_EBI_nWR     (0x02UL<<SYS_GPA_MFPH_PA10MFP_Pos)/*!< GPA_MFPH PA10 setting for EBI_nWR    \hideinitializer */
N#define SYS_GPA_MFPH_PA10MFP_USCI0_DAT0  (0x06UL<<SYS_GPA_MFPH_PA10MFP_Pos)/*!< GPA_MFPH PA10 setting for USCI0_DAT0 \hideinitializer */
N#define SYS_GPA_MFPH_PA10MFP_UART6_RXD   (0x08UL<<SYS_GPA_MFPH_PA10MFP_Pos)/*!< GPA_MFPH PA10 setting for UART6_RXD  \hideinitializer */
N#define SYS_GPA_MFPH_PA10MFP_BPWM0_CH1   (0x09UL<<SYS_GPA_MFPH_PA10MFP_Pos)/*!< GPA_MFPH PA10 setting for BPWM0_CH1  \hideinitializer */
N#define SYS_GPA_MFPH_PA10MFP_TM1_EXT     (0x0DUL<<SYS_GPA_MFPH_PA10MFP_Pos)/*!< GPA_MFPH PA10 setting for TM1_EXT    \hideinitializer */
N
N/* PA.11 MFP */
N#define SYS_GPA_MFPH_PA11MFP_GPIO        (0x00UL<<SYS_GPA_MFPH_PA11MFP_Pos)/*!< GPA_MFPH PA11 setting for GPIO       \hideinitializer */
N#define SYS_GPA_MFPH_PA11MFP_ACMP0_P0    (0x01UL<<SYS_GPA_MFPH_PA11MFP_Pos)/*!< GPA_MFPH PA11 setting for ACMP0_P0   \hideinitializer */
N#define SYS_GPA_MFPH_PA11MFP_EBI_nRD     (0x02UL<<SYS_GPA_MFPH_PA11MFP_Pos)/*!< GPA_MFPH PA11 setting for EBI_nRD    \hideinitializer */
N#define SYS_GPA_MFPH_PA11MFP_USCI0_CLK   (0x06UL<<SYS_GPA_MFPH_PA11MFP_Pos)/*!< GPA_MFPH PA11 setting for USCI0_CLK  \hideinitializer */
N#define SYS_GPA_MFPH_PA11MFP_UART6_TXD   (0x08UL<<SYS_GPA_MFPH_PA11MFP_Pos)/*!< GPA_MFPH PA11 setting for UART6_TXD  \hideinitializer */
N#define SYS_GPA_MFPH_PA11MFP_BPWM0_CH0   (0x09UL<<SYS_GPA_MFPH_PA11MFP_Pos)/*!< GPA_MFPH PA11 setting for BPWM0_CH0  \hideinitializer */
N#define SYS_GPA_MFPH_PA11MFP_TM0_EXT     (0x0DUL<<SYS_GPA_MFPH_PA11MFP_Pos)/*!< GPA_MFPH PA11 setting for TM0_EXT    \hideinitializer */
N
N/* PA.12 MFP */
N#define SYS_GPA_MFPH_PA12MFP_GPIO        (0x00UL<<SYS_GPA_MFPH_PA12MFP_Pos)/*!< GPA_MFPH PA12 setting for GPIO       \hideinitializer */
N#define SYS_GPA_MFPH_PA12MFP_UART4_TXD   (0x03UL<<SYS_GPA_MFPH_PA12MFP_Pos)/*!< GPA_MFPH PA12 setting for UART4_TXD  \hideinitializer */
N#define SYS_GPA_MFPH_PA12MFP_I2C1_SCL    (0x04UL<<SYS_GPA_MFPH_PA12MFP_Pos)/*!< GPA_MFPH PA12 setting for I2C1_SCL   \hideinitializer */
N#define SYS_GPA_MFPH_PA12MFP_BPWM1_CH2   (0x0BUL<<SYS_GPA_MFPH_PA12MFP_Pos)/*!< GPA_MFPH PA12 setting for BPWM1_CH2  \hideinitializer */
N
N/* PA.13 MFP */
N#define SYS_GPA_MFPH_PA13MFP_GPIO        (0x00UL<<SYS_GPA_MFPH_PA13MFP_Pos)/*!< GPA_MFPH PA13 setting for GPIO       \hideinitializer */
N#define SYS_GPA_MFPH_PA13MFP_UART4_RXD   (0x03UL<<SYS_GPA_MFPH_PA13MFP_Pos)/*!< GPA_MFPH PA13 setting for UART4_RXD  \hideinitializer */
N#define SYS_GPA_MFPH_PA13MFP_I2C1_SDA    (0x04UL<<SYS_GPA_MFPH_PA13MFP_Pos)/*!< GPA_MFPH PA13 setting for I2C1_SDA   \hideinitializer */
N#define SYS_GPA_MFPH_PA13MFP_BPWM1_CH3   (0x0BUL<<SYS_GPA_MFPH_PA13MFP_Pos)/*!< GPA_MFPH PA13 setting for BPWM1_CH3  \hideinitializer */
N
N/* PA.14 MFP */
N#define SYS_GPA_MFPH_PA14MFP_GPIO        (0x00UL<<SYS_GPA_MFPH_PA14MFP_Pos)/*!< GPA_MFPH PA14 setting for GPIO       \hideinitializer */
N#define SYS_GPA_MFPH_PA14MFP_UART0_TXD   (0x03UL<<SYS_GPA_MFPH_PA14MFP_Pos)/*!< GPA_MFPH PA14 setting for UART0_TXD  \hideinitializer */
N#define SYS_GPA_MFPH_PA14MFP_BPWM1_CH4   (0x0BUL<<SYS_GPA_MFPH_PA14MFP_Pos)/*!< GPA_MFPH PA14 setting for BPWM1_CH4  \hideinitializer */
N
N/* PA.15 MFP */
N#define SYS_GPA_MFPH_PA15MFP_GPIO        (0x00UL<<SYS_GPA_MFPH_PA15MFP_Pos)/*!< GPA_MFPH PA15 setting for GPIO       \hideinitializer */
N#define SYS_GPA_MFPH_PA15MFP_UART0_RXD   (0x03UL<<SYS_GPA_MFPH_PA15MFP_Pos)/*!< GPA_MFPH PA15 setting for UART0_RXD  \hideinitializer */
N#define SYS_GPA_MFPH_PA15MFP_BPWM1_CH5   (0x0BUL<<SYS_GPA_MFPH_PA15MFP_Pos)/*!< GPA_MFPH PA15 setting for BPWM1_CH5  \hideinitializer */
N
N/* PB.0 MFP */
N#define SYS_GPB_MFPL_PB0MFP_GPIO         (0x00UL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for GPIO           \hideinitializer */
N#define SYS_GPB_MFPL_PB0MFP_ADC_CH0      (0x01UL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for ADC_CH0        \hideinitializer */
N#define SYS_GPB_MFPL_PB0MFP_ADC0_CH0     (0x01UL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for ADC0_CH0       \hideinitializer */
N#define SYS_GPB_MFPL_PB0MFP_EBI_ADR9     (0x02UL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for EBI_ADR9       \hideinitializer */
N#define SYS_GPB_MFPL_PB0MFP_UART2_RXD    (0x07UL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for UART2_RXD      \hideinitializer */
N#define SYS_GPB_MFPL_PB0MFP_SPI0_I2SMCLK (0x08UL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for SPI0_I2SMCLK   \hideinitializer */
N#define SYS_GPB_MFPL_PB0MFP_I2C1_SDA     (0x09UL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for I2C1_SDA       \hideinitializer */
N#define SYS_GPB_MFPL_PB0MFP_QSPI0_MOSI1  (0x0AUL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for QSPI0_MOSI1    \hideinitializer */
N#define SYS_GPB_MFPL_PB0MFP_PWM0_CH5     (0x0BUL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for PWM0_CH5       \hideinitializer */
N#define SYS_GPB_MFPL_PB0MFP_PWM1_CH5     (0x0CUL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for PWM1_CH5       \hideinitializer */
N#define SYS_GPB_MFPL_PB0MFP_PWM0_BRAKE1  (0x0DUL<<SYS_GPB_MFPL_PB0MFP_Pos) /*!< GPB_MFPL PB0 setting for PWM0_BRAKE1    \hideinitializer */
N
N/* PB.1 MFP */
N#define SYS_GPB_MFPL_PB1MFP_GPIO         (0x00UL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for GPIO        \hideinitializer */
N#define SYS_GPB_MFPL_PB1MFP_ADC_CH1      (0x01UL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for ADC_CH1     \hideinitializer */
N#define SYS_GPB_MFPL_PB1MFP_ADC0_CH1     (0x01UL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for ADC0_CH1    \hideinitializer */
N#define SYS_GPB_MFPL_PB1MFP_EBI_ADR8     (0x02UL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for EBI_ADR8    \hideinitializer */
N#define SYS_GPB_MFPL_PB1MFP_UART2_TXD    (0x07UL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for UART2_TXD   \hideinitializer */
N#define SYS_GPB_MFPL_PB1MFP_USCI1_CLK    (0x08UL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for USCI1_CLK   \hideinitializer */
N#define SYS_GPB_MFPL_PB1MFP_I2C1_SCL     (0x09UL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for I2C1_SCL    \hideinitializer */
N#define SYS_GPB_MFPL_PB1MFP_QSPI0_MISO1  (0x0AUL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for QSPI0_MISO1 \hideinitializer */
N#define SYS_GPB_MFPL_PB1MFP_PWM0_CH4     (0x0BUL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for PWM0_CH4    \hideinitializer */
N#define SYS_GPB_MFPL_PB1MFP_PWM1_CH4     (0x0CUL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for PWM1_CH4    \hideinitializer */
N#define SYS_GPB_MFPL_PB1MFP_PWM0_BRAKE0  (0x0DUL<<SYS_GPB_MFPL_PB1MFP_Pos) /*!< GPB_MFPL PB1 setting for PWM0_BRAKE0 \hideinitializer */
N
N/* PB.2 MFP */
N#define SYS_GPB_MFPL_PB2MFP_GPIO         (0x00UL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for GPIO        \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_ADC_CH2      (0x01UL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for ADC_CH2     \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_ADC0_CH2     (0x01UL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for ADC0_CH2    \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_ACMP0_P1     (0x01UL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for ACMP0_P1    \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_EBI_ADR3     (0x02UL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for EBI_ADR3    \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_I2C1_SDA     (0x04UL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for I2C1_SDA    \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_UART1_RXD    (0x06UL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for UART1_RXD   \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_UART5_nCTS   (0x07UL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for UART5_nCTS  \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_USCI1_DAT0   (0x08UL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for USCI1_DAT0  \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_PWM0_CH3     (0x0BUL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for PWM0_CH3    \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_TM3          (0x0EUL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for TM3         \hideinitializer */
N#define SYS_GPB_MFPL_PB2MFP_INT3         (0x0FUL<<SYS_GPB_MFPL_PB2MFP_Pos) /*!< GPB_MFPL PB2 setting for INT3        \hideinitializer */
N
N/* PB.3 MFP */
N#define SYS_GPB_MFPL_PB3MFP_GPIO         (0x00UL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for GPIO        \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_ADC_CH3      (0x01UL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for ADC_CH3     \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_ADC0_CH3     (0x01UL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for ADC0_CH3    \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_ACMP0_N      (0x01UL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for ACMP0_N     \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_EBI_ADR2     (0x02UL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for EBI_ADR2    \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_I2C1_SCL     (0x04UL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for I2C1_SCL    \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_UART1_TXD    (0x06UL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for UART1_TXD   \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_UART5_nRTS   (0x07UL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for UART5_nRTS  \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_USCI1_DAT1   (0x08UL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for USCI1_DAT1  \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_PWM0_CH2     (0x0BUL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for PWM0_CH2    \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_PWM0_BRAKE0  (0x0DUL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for PWM0_BRAKE0 \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_TM2          (0x0EUL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for TM2         \hideinitializer */
N#define SYS_GPB_MFPL_PB3MFP_INT2         (0x0FUL<<SYS_GPB_MFPL_PB3MFP_Pos) /*!< GPB_MFPL PB3 setting for INT2        \hideinitializer */
N
N/* PB.4 MFP */
N#define SYS_GPB_MFPL_PB4MFP_GPIO         (0x00UL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for GPIO        \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_ADC_CH4      (0x01UL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for ADC_CH4     \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_ADC0_CH4     (0x01UL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for ADC0_CH4    \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_ACMP1_P1     (0x01UL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for ACMP1_P1    \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_EBI_ADR1     (0x02UL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for EBI_ADR1    \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_I2C0_SDA     (0x06UL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for I2C0_SDA    \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_UART5_RXD    (0x07UL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for UART5_RXD   \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_USCI1_CTL1   (0x08UL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for USCI1_CTL1  \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_PWM0_CH1     (0x0BUL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for PWM0_CH1    \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_UART2_RXD    (0x0DUL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for UART2_RXD   \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_TM1          (0x0EUL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for TM1         \hideinitializer */
N#define SYS_GPB_MFPL_PB4MFP_INT1         (0x0FUL<<SYS_GPB_MFPL_PB4MFP_Pos) /*!< GPB_MFPL PB4 setting for INT1        \hideinitializer */
N
N/* PB.5 MFP */
N#define SYS_GPB_MFPL_PB5MFP_GPIO         (0x00UL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for GPIO        \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_ADC_CH5      (0x01UL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for ADC_CH5     \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_ADC0_CH5     (0x01UL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for ADC0_CH5    \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_ACMP1_N      (0x01UL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for ACMP1_N     \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_EBI_ADR0     (0x02UL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for EBI_ADR0    \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_I2C0_SCL     (0x06UL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for I2C0_SCL    \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_UART5_TXD    (0x07UL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for UART5_TXD   \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_USCI1_CTL0   (0x08UL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for USCI1_CTL0  \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_PWM0_CH0     (0x0BUL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for PWM0_CH0    \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_UART2_TXD    (0x0DUL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for UART2_TXD   \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_TM0          (0x0EUL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for TM0         \hideinitializer */
N#define SYS_GPB_MFPL_PB5MFP_INT0         (0x0FUL<<SYS_GPB_MFPL_PB5MFP_Pos) /*!< GPB_MFPL PB5 setting for INT0        \hideinitializer */
N
N/* PB.6 MFP */
N#define SYS_GPB_MFPL_PB6MFP_GPIO         (0x00UL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for GPIO        \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_ADC_CH6      (0x01UL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for ADC_CH6     \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_ADC0_CH6     (0x01UL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for ADC0_CH6    \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_EBI_nWRH     (0x02UL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for EBI_nWRH    \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_USCI1_DAT1   (0x04UL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for USCI1_DAT1  \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_UART1_RXD    (0x06UL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for UART1_RXD   \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_EBI_nCS1     (0x08UL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for EBI_nCS1    \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_BPWM1_CH5    (0x0AUL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for BPWM1_CH5   \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_PWM1_BRAKE1  (0x0BUL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for PWM1_BRAKE1 \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_PWM1_CH5     (0x0CUL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for PWM1_CH5    \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_INT4         (0x0DUL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for INT4        \hideinitializer */
N#define SYS_GPB_MFPL_PB6MFP_ACMP1_O      (0x0FUL<<SYS_GPB_MFPL_PB6MFP_Pos) /*!< GPB_MFPL PB6 setting for ACMP1_O     \hideinitializer */
N
N/* PB.7 MFP */
N#define SYS_GPB_MFPL_PB7MFP_GPIO         (0x00UL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for GPIO        \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_ADC_CH7      (0x01UL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for ADC_CH7     \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_ADC0_CH7     (0x01UL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for ADC0_CH7    \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_EBI_nWRL     (0x02UL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for EBI_nWRL    \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_USCI1_DAT0   (0x04UL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for USCI1_DAT0  \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_UART1_TXD    (0x06UL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for UART1_TXD   \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_EBI_nCS0     (0x08UL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for EBI_nCS0    \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_BPWM1_CH4    (0x0AUL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for BPWM1_CH4   \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_PWM1_BRAKE0  (0x0BUL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for PWM1_BRAKE0 \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_PWM1_CH4     (0x0CUL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for PWM1_CH4    \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_INT5         (0x0DUL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for INT5        \hideinitializer */
N#define SYS_GPB_MFPL_PB7MFP_ACMP0_O      (0x0FUL<<SYS_GPB_MFPL_PB7MFP_Pos) /*!< GPB_MFPL PB7 setting for ACMP0_O     \hideinitializer */
N
N/* PB.8 MFP */
N#define SYS_GPB_MFPH_PB8MFP_GPIO         (0x00UL<<SYS_GPB_MFPH_PB8MFP_Pos) /*!< GPB_MFPH PB8 setting for GPIO        \hideinitializer */
N#define SYS_GPB_MFPH_PB8MFP_ADC_CH8      (0x01UL<<SYS_GPB_MFPH_PB8MFP_Pos) /*!< GPB_MFPH PB8 setting for ADC_CH8     \hideinitializer */
N#define SYS_GPB_MFPH_PB8MFP_ADC0_CH8     (0x01UL<<SYS_GPB_MFPH_PB8MFP_Pos) /*!< GPB_MFPH PB8 setting for ADC0_CH8    \hideinitializer */
N#define SYS_GPB_MFPH_PB8MFP_EBI_ADR19    (0x02UL<<SYS_GPB_MFPH_PB8MFP_Pos) /*!< GPB_MFPH PB8 setting for EBI_ADR19   \hideinitializer */
N#define SYS_GPB_MFPH_PB8MFP_USCI1_CLK    (0x04UL<<SYS_GPB_MFPH_PB8MFP_Pos) /*!< GPB_MFPH PB8 setting for USCI1_CLK   \hideinitializer */
N#define SYS_GPB_MFPH_PB8MFP_UART0_RXD    (0x05UL<<SYS_GPB_MFPH_PB8MFP_Pos) /*!< GPB_MFPH PB8 setting for UART0_RXD   \hideinitializer */
N#define SYS_GPB_MFPH_PB8MFP_UART1_nRTS   (0x06UL<<SYS_GPB_MFPH_PB8MFP_Pos) /*!< GPB_MFPH PB8 setting for UART1_nRTS  \hideinitializer */
N#define SYS_GPB_MFPH_PB8MFP_UART7_RXD    (0x08UL<<SYS_GPB_MFPH_PB8MFP_Pos) /*!< GPB_MFPH PB8 setting for UART7_RXD   \hideinitializer */
N#define SYS_GPB_MFPH_PB8MFP_BPWM1_CH3    (0x0AUL<<SYS_GPB_MFPH_PB8MFP_Pos) /*!< GPB_MFPH PB8 setting for BPWM1_CH3   \hideinitializer */
N
N/* PB.9 MFP */
N#define SYS_GPB_MFPH_PB9MFP_GPIO         (0x00UL<<SYS_GPB_MFPH_PB9MFP_Pos) /*!< GPB_MFPH PB9 setting for GPIO        \hideinitializer */
N#define SYS_GPB_MFPH_PB9MFP_ADC_CH9      (0x01UL<<SYS_GPB_MFPH_PB9MFP_Pos) /*!< GPB_MFPH PB9 setting for ADC_CH9     \hideinitializer */
N#define SYS_GPB_MFPH_PB9MFP_ADC0_CH9     (0x01UL<<SYS_GPB_MFPH_PB9MFP_Pos) /*!< GPB_MFPH PB9 setting for ADC0_CH9    \hideinitializer */
N#define SYS_GPB_MFPH_PB9MFP_EBI_ADR18    (0x02UL<<SYS_GPB_MFPH_PB9MFP_Pos) /*!< GPB_MFPH PB9 setting for EBI_ADR18   \hideinitializer */
N#define SYS_GPB_MFPH_PB9MFP_USCI1_CTL1   (0x04UL<<SYS_GPB_MFPH_PB9MFP_Pos) /*!< GPB_MFPH PB9 setting for USCI1_CTL1  \hideinitializer */
N#define SYS_GPB_MFPH_PB9MFP_UART0_TXD    (0x05UL<<SYS_GPB_MFPH_PB9MFP_Pos) /*!< GPB_MFPH PB9 setting for UART0_TXD   \hideinitializer */
N#define SYS_GPB_MFPH_PB9MFP_UART1_nCTS   (0x06UL<<SYS_GPB_MFPH_PB9MFP_Pos) /*!< GPB_MFPH PB9 setting for UART1_nCTS  \hideinitializer */
N#define SYS_GPB_MFPH_PB9MFP_UART7_TXD    (0x08UL<<SYS_GPB_MFPH_PB9MFP_Pos) /*!< GPB_MFPH PB9 setting for UART7_TXD   \hideinitializer */
N#define SYS_GPB_MFPH_PB9MFP_BPWM1_CH2    (0x0AUL<<SYS_GPB_MFPH_PB9MFP_Pos) /*!< GPB_MFPH PB9 setting for BPWM1_CH2   \hideinitializer */
N
N/* PB.10 MFP */
N#define SYS_GPB_MFPH_PB10MFP_GPIO        (0x00UL<<SYS_GPB_MFPH_PB10MFP_Pos)/*!< GPB_MFPH PB10 setting for GPIO       \hideinitializer */
N#define SYS_GPB_MFPH_PB10MFP_ADC_CH10    (0x01UL<<SYS_GPB_MFPH_PB10MFP_Pos)/*!< GPB_MFPH PB10 setting for ADC_CH10   \hideinitializer */
N#define SYS_GPB_MFPH_PB10MFP_ADC0_CH10   (0x01UL<<SYS_GPB_MFPH_PB10MFP_Pos)/*!< GPB_MFPH PB10 setting for ADC0_CH10  \hideinitializer */
N#define SYS_GPB_MFPH_PB10MFP_EBI_ADR17   (0x02UL<<SYS_GPB_MFPH_PB10MFP_Pos)/*!< GPB_MFPH PB10 setting for EBI_ADR17  \hideinitializer */
N#define SYS_GPB_MFPH_PB10MFP_USCI1_CTL0  (0x04UL<<SYS_GPB_MFPH_PB10MFP_Pos)/*!< GPB_MFPH PB10 setting for USCI1_CTL0 \hideinitializer */
N#define SYS_GPB_MFPH_PB10MFP_UART0_nRTS  (0x05UL<<SYS_GPB_MFPH_PB10MFP_Pos)/*!< GPB_MFPH PB10 setting for UART0_nRTS \hideinitializer */
N#define SYS_GPB_MFPH_PB10MFP_UART4_RXD   (0x06UL<<SYS_GPB_MFPH_PB10MFP_Pos)/*!< GPB_MFPH PB10 setting for UART4_RXD  \hideinitializer */
N#define SYS_GPB_MFPH_PB10MFP_I2C1_SDA    (0x07UL<<SYS_GPB_MFPH_PB10MFP_Pos)/*!< GPB_MFPH PB10 setting for I2C1_SDA   \hideinitializer */
N#define SYS_GPB_MFPH_PB10MFP_BPWM1_CH1   (0x0AUL<<SYS_GPB_MFPH_PB10MFP_Pos)/*!< GPB_MFPH PB10 setting for BPWM1_CH1  \hideinitializer */
N
N/* PB.11 MFP */
N#define SYS_GPB_MFPH_PB11MFP_GPIO        (0x00UL<<SYS_GPB_MFPH_PB11MFP_Pos) /*!< GPB_MFPH PB11 setting for GPIO         \hideinitializer */
N#define SYS_GPB_MFPH_PB11MFP_ADC_CH11    (0x01UL<<SYS_GPB_MFPH_PB11MFP_Pos) /*!< GPB_MFPH PB11 setting for ADC_CH11     \hideinitializer */
N#define SYS_GPB_MFPH_PB11MFP_ADC0_CH11   (0x01UL<<SYS_GPB_MFPH_PB11MFP_Pos) /*!< GPB_MFPH PB11 setting for ADC0_CH11    \hideinitializer */
N#define SYS_GPB_MFPH_PB11MFP_EBI_ADR16   (0x02UL<<SYS_GPB_MFPH_PB11MFP_Pos) /*!< GPB_MFPH PB11 setting for EBI_ADR16    \hideinitializer */
N#define SYS_GPB_MFPH_PB11MFP_UART0_nCTS  (0x05UL<<SYS_GPB_MFPH_PB11MFP_Pos) /*!< GPB_MFPH PB11 setting for UART0_nCTS   \hideinitializer */
N#define SYS_GPB_MFPH_PB11MFP_UART4_TXD   (0x06UL<<SYS_GPB_MFPH_PB11MFP_Pos) /*!< GPB_MFPH PB11 setting for UART4_TXD    \hideinitializer */
N#define SYS_GPB_MFPH_PB11MFP_I2C1_SCL    (0x07UL<<SYS_GPB_MFPH_PB11MFP_Pos) /*!< GPB_MFPH PB11 setting for I2C1_SCL     \hideinitializer */
N#define SYS_GPB_MFPH_PB11MFP_SPI0_I2SMCLK (0x09UL<<SYS_GPB_MFPH_PB11MFP_Pos)/*!< GPB_MFPH PB11 setting for SPI0_I2SMCLK \hideinitializer */
N#define SYS_GPB_MFPH_PB11MFP_BPWM1_CH0   (0x0AUL<<SYS_GPB_MFPH_PB11MFP_Pos) /*!< GPB_MFPH PB11 setting for BPWM1_CH0    \hideinitializer */
N
N/* PB.12 MFP */
N#define SYS_GPB_MFPH_PB12MFP_GPIO        (0x00UL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for GPIO       \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_ADC_CH12    (0x01UL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for ADC_CH12   \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_ADC0_CH12   (0x01UL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for ADC0_CH12  \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_ACMP0_P2    (0x01UL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for ACMP0_P2   \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_ACMP1_P2    (0x01UL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for ACMP1_P2   \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_EBI_AD15    (0x02UL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for EBI_AD15   \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_SPI0_MOSI   (0x04UL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for SPI0_MOSI  \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_USCI0_CLK   (0x05UL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for USCI0_CLK  \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_UART0_RXD   (0x06UL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for UART0_RXD  \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_UART3_nCTS  (0x07UL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for UART3_nCTS \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_PWM1_CH3    (0x0BUL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for PWM1_CH3   \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_BPWM0_CH0   (0x0CUL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for BPWM0_CH0  \hideinitializer */
N#define SYS_GPB_MFPH_PB12MFP_TM3_EXT     (0x0DUL<<SYS_GPB_MFPH_PB12MFP_Pos)/*!< GPB_MFPH PB12 setting for TM3_EXT    \hideinitializer */
N
N/* PB.13 MFP */
N#define SYS_GPB_MFPH_PB13MFP_GPIO        (0x00UL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for GPIO       \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_ADC_CH13    (0x01UL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for ADC_CH13   \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_ADC0_CH13   (0x01UL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for ADC0_CH13  \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_ACMP0_P3    (0x01UL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for ACMP0_P3   \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_ACMP1_P3    (0x01UL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for ACMP1_P3   \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_EBI_AD14    (0x02UL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for EBI_AD14   \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_SPI0_MISO   (0x04UL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for SPI0_MISO  \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_USCI0_DAT0  (0x05UL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for USCI0_DAT0 \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_UART0_TXD   (0x06UL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for UART0_TXD  \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_UART3_nRTS  (0x07UL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for UART3_nRTS \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_PWM1_CH2    (0x0BUL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for PWM1_CH2   \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_BPWM0_CH1   (0x0CUL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for BPWM0_CH1  \hideinitializer */
N#define SYS_GPB_MFPH_PB13MFP_TM2_EXT     (0x0DUL<<SYS_GPB_MFPH_PB13MFP_Pos)/*!< GPB_MFPH PB13 setting for TM2_EXT    \hideinitializer */
N
N/* PB.14 MFP */
N#define SYS_GPB_MFPH_PB14MFP_GPIO        (0x00UL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for GPIO       \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_ADC_CH14    (0x01UL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for ADC_CH14   \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_ADC0_CH14   (0x01UL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for ADC0_CH14  \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_EBI_AD13    (0x02UL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for EBI_AD13   \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_SPI0_CLK    (0x04UL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for SPI0_CLK   \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_USCI0_DAT1  (0x05UL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for USCI0_DAT1 \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_UART0_nRTS  (0x06UL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for UART0_nRTS \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_UART3_RXD   (0x07UL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for UART3_RXD  \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_BPWM1_CH5   (0x09UL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for BPWM1_CH5  \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_PWM1_CH1    (0x0BUL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for PWM1_CH1   \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_BPWM0_CH2   (0x0CUL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for BPWM0_CH2  \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_TM1_EXT     (0x0DUL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for TM1_EXT    \hideinitializer */
N#define SYS_GPB_MFPH_PB14MFP_CLKO        (0x0EUL<<SYS_GPB_MFPH_PB14MFP_Pos)/*!< GPB_MFPH PB14 setting for CLKO       \hideinitializer */
N
N/* PB.15 MFP */
N#define SYS_GPB_MFPH_PB15MFP_GPIO        (0x00UL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for GPIO          \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_ADC_CH15    (0x01UL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for ADC_CH15      \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_ADC0_CH15   (0x01UL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for ADC0_CH15     \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_EBI_AD12    (0x02UL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for EBI_AD12      \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_SPI0_SS     (0x04UL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for SPI0_SS       \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_USCI0_CTL1  (0x05UL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for USCI0_CTL1    \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_UART0_nCTS  (0x06UL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for UART0_nCTS    \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_UART3_TXD   (0x07UL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for UART3_TXD     \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_BPWM1_CH4   (0x09UL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for BPWM1_CH4     \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_PWM1_CH0    (0x0BUL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for PWM1_CH0      \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_BPWM0_CH3   (0x0CUL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for BPWM0_CH3     \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_TM0_EXT     (0x0DUL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for TM0_EXT       \hideinitializer */
N#define SYS_GPB_MFPH_PB15MFP_PWM0_BRAKE1 (0x0FUL<<SYS_GPB_MFPH_PB15MFP_Pos)/*!< GPB_MFPH PB15 setting for PWM0_BRAKE1   \hideinitializer */
N
N/* PC.0 MFP */
N#define SYS_GPC_MFPL_PC0MFP_GPIO         (0x00UL<<SYS_GPC_MFPL_PC0MFP_Pos) /*!< GPC_MFPL PC0 setting for GPIO        \hideinitializer */
N#define SYS_GPC_MFPL_PC0MFP_EBI_AD0      (0x02UL<<SYS_GPC_MFPL_PC0MFP_Pos) /*!< GPC_MFPL PC0 setting for EBI_AD0     \hideinitializer */
N#define SYS_GPC_MFPL_PC0MFP_QSPI0_MOSI0  (0x04UL<<SYS_GPC_MFPL_PC0MFP_Pos) /*!< GPC_MFPL PC0 setting for QSPI0_MOSI0 \hideinitializer */
N#define SYS_GPC_MFPL_PC0MFP_UART2_RXD    (0x08UL<<SYS_GPC_MFPL_PC0MFP_Pos) /*!< GPC_MFPL PC0 setting for UART2_RXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC0MFP_I2C0_SDA     (0x09UL<<SYS_GPC_MFPL_PC0MFP_Pos) /*!< GPC_MFPL PC0 setting for I2C0_SDA    \hideinitializer */
N#define SYS_GPC_MFPL_PC0MFP_BPWM1_CH3    (0x0BUL<<SYS_GPC_MFPL_PC0MFP_Pos) /*!< GPC_MFPL PC0 setting for BPWM1_CH3   \hideinitializer */
N#define SYS_GPC_MFPL_PC0MFP_PWM1_CH5     (0x0CUL<<SYS_GPC_MFPL_PC0MFP_Pos) /*!< GPC_MFPL PC0 setting for PWM1_CH5    \hideinitializer */
N#define SYS_GPC_MFPL_PC0MFP_BPWM0_CH4    (0x0DUL<<SYS_GPC_MFPL_PC0MFP_Pos) /*!< GPC_MFPL PC0 setting for BPWM0_CH4   \hideinitializer */
N#define SYS_GPC_MFPL_PC0MFP_ACMP1_O      (0x0EUL<<SYS_GPC_MFPL_PC0MFP_Pos) /*!< GPC_MFPL PC0 setting for ACMP1_O     \hideinitializer */
N
N/* PC.1 MFP */
N#define SYS_GPC_MFPL_PC1MFP_GPIO         (0x00UL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for GPIO        \hideinitializer */
N#define SYS_GPC_MFPL_PC1MFP_EBI_AD1      (0x02UL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for EBI_AD1     \hideinitializer */
N#define SYS_GPC_MFPL_PC1MFP_QSPI0_MISO0  (0x04UL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for QSPI0_MISO0 \hideinitializer */
N#define SYS_GPC_MFPL_PC1MFP_UART2_TXD    (0x08UL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for UART2_TXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC1MFP_I2C0_SCL     (0x09UL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for I2C0_SCL    \hideinitializer */
N#define SYS_GPC_MFPL_PC1MFP_BPWM1_CH2    (0x0BUL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for BPWM1_CH2   \hideinitializer */
N#define SYS_GPC_MFPL_PC1MFP_PWM1_CH4     (0x0CUL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for PWM1_CH4    \hideinitializer */
N#define SYS_GPC_MFPL_PC1MFP_BPWM0_CH5    (0x0DUL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for BPWM0_CH5   \hideinitializer */
N#define SYS_GPC_MFPL_PC1MFP_ACMP0_O      (0x0EUL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for ACMP0_O     \hideinitializer */
N#define SYS_GPC_MFPL_PC1MFP_ADC_ST       (0x0FUL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for ADC_ST      \hideinitializer */
N#define SYS_GPC_MFPL_PC1MFP_ADC0_ST      (0x0FUL<<SYS_GPC_MFPL_PC1MFP_Pos) /*!< GPC_MFPL PC1 setting for ADC0_ST     \hideinitializer */
N
N/* PC.2 MFP */
N#define SYS_GPC_MFPL_PC2MFP_GPIO         (0x00UL<<SYS_GPC_MFPL_PC2MFP_Pos) /*!< GPC_MFPL PC2 setting for GPIO        \hideinitializer */
N#define SYS_GPC_MFPL_PC2MFP_EBI_AD2      (0x02UL<<SYS_GPC_MFPL_PC2MFP_Pos) /*!< GPC_MFPL PC2 setting for EBI_AD2     \hideinitializer */
N#define SYS_GPC_MFPL_PC2MFP_QSPI0_CLK    (0x04UL<<SYS_GPC_MFPL_PC2MFP_Pos) /*!< GPC_MFPL PC2 setting for QSPI0_CLK   \hideinitializer */
N#define SYS_GPC_MFPL_PC2MFP_UART2_nCTS   (0x08UL<<SYS_GPC_MFPL_PC2MFP_Pos) /*!< GPC_MFPL PC2 setting for UART2_nCTS  \hideinitializer */
N#define SYS_GPC_MFPL_PC2MFP_I2C0_SMBSUS  (0x09UL<<SYS_GPC_MFPL_PC2MFP_Pos) /*!< GPC_MFPL PC2 setting for I2C0_SMBSUS \hideinitializer */
N#define SYS_GPC_MFPL_PC2MFP_UART3_RXD    (0x0BUL<<SYS_GPC_MFPL_PC2MFP_Pos) /*!< GPC_MFPL PC2 setting for UART3_RXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC2MFP_PWM1_CH3     (0x0CUL<<SYS_GPC_MFPL_PC2MFP_Pos) /*!< GPC_MFPL PC2 setting for PWM1_CH3    \hideinitializer */
N
N/* PC.3 MFP */
N#define SYS_GPC_MFPL_PC3MFP_GPIO         (0x00UL<<SYS_GPC_MFPL_PC3MFP_Pos) /*!< GPC_MFPL PC3 setting for GPIO        \hideinitializer */
N#define SYS_GPC_MFPL_PC3MFP_EBI_AD3      (0x02UL<<SYS_GPC_MFPL_PC3MFP_Pos) /*!< GPC_MFPL PC3 setting for EBI_AD3     \hideinitializer */
N#define SYS_GPC_MFPL_PC3MFP_QSPI0_SS     (0x04UL<<SYS_GPC_MFPL_PC3MFP_Pos) /*!< GPC_MFPL PC3 setting for QSPI0_SS    \hideinitializer */
N#define SYS_GPC_MFPL_PC3MFP_UART2_nRTS   (0x08UL<<SYS_GPC_MFPL_PC3MFP_Pos) /*!< GPC_MFPL PC3 setting for UART2_nRTS  \hideinitializer */
N#define SYS_GPC_MFPL_PC3MFP_I2C0_SMBAL   (0x09UL<<SYS_GPC_MFPL_PC3MFP_Pos) /*!< GPC_MFPL PC3 setting for I2C0_SMBAL  \hideinitializer */
N#define SYS_GPC_MFPL_PC3MFP_UART3_TXD    (0x0BUL<<SYS_GPC_MFPL_PC3MFP_Pos) /*!< GPC_MFPL PC3 setting for UART3_TXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC3MFP_PWM1_CH2     (0x0CUL<<SYS_GPC_MFPL_PC3MFP_Pos) /*!< GPC_MFPL PC3 setting for PWM1_CH2    \hideinitializer */
N
N/* PC.4 MFP */
N#define SYS_GPC_MFPL_PC4MFP_GPIO         (0x00UL<<SYS_GPC_MFPL_PC4MFP_Pos) /*!< GPC_MFPL PC4 setting for GPIO        \hideinitializer */
N#define SYS_GPC_MFPL_PC4MFP_EBI_AD4      (0x02UL<<SYS_GPC_MFPL_PC4MFP_Pos) /*!< GPC_MFPL PC4 setting for EBI_AD4     \hideinitializer */
N#define SYS_GPC_MFPL_PC4MFP_QSPI0_MOSI1  (0x04UL<<SYS_GPC_MFPL_PC4MFP_Pos) /*!< GPC_MFPL PC4 setting for QSPI0_MOSI1 \hideinitializer */
N#define SYS_GPC_MFPL_PC4MFP_UART2_RXD    (0x08UL<<SYS_GPC_MFPL_PC4MFP_Pos) /*!< GPC_MFPL PC4 setting for UART2_RXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC4MFP_I2C1_SDA     (0x09UL<<SYS_GPC_MFPL_PC4MFP_Pos) /*!< GPC_MFPL PC4 setting for I2C1_SDA    \hideinitializer */
N#define SYS_GPC_MFPL_PC4MFP_UART4_RXD    (0x0BUL<<SYS_GPC_MFPL_PC4MFP_Pos) /*!< GPC_MFPL PC4 setting for UART4_RXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC4MFP_PWM1_CH1     (0x0CUL<<SYS_GPC_MFPL_PC4MFP_Pos) /*!< GPC_MFPL PC4 setting for PWM1_CH1    \hideinitializer */
N
N/* PC.5 MFP */
N#define SYS_GPC_MFPL_PC5MFP_GPIO         (0x00UL<<SYS_GPC_MFPL_PC5MFP_Pos) /*!< GPC_MFPL PC5 setting for GPIO        \hideinitializer */
N#define SYS_GPC_MFPL_PC5MFP_EBI_AD5      (0x02UL<<SYS_GPC_MFPL_PC5MFP_Pos) /*!< GPC_MFPL PC5 setting for EBI_AD5     \hideinitializer */
N#define SYS_GPC_MFPL_PC5MFP_QSPI0_MISO1  (0x04UL<<SYS_GPC_MFPL_PC5MFP_Pos) /*!< GPC_MFPL PC5 setting for QSPI0_MISO1 \hideinitializer */
N#define SYS_GPC_MFPL_PC5MFP_UART2_TXD    (0x08UL<<SYS_GPC_MFPL_PC5MFP_Pos) /*!< GPC_MFPL PC5 setting for UART2_TXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC5MFP_I2C1_SCL     (0x09UL<<SYS_GPC_MFPL_PC5MFP_Pos) /*!< GPC_MFPL PC5 setting for I2C1_SCL    \hideinitializer */
N#define SYS_GPC_MFPL_PC5MFP_UART4_TXD    (0x0BUL<<SYS_GPC_MFPL_PC5MFP_Pos) /*!< GPC_MFPL PC5 setting for UART4_TXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC5MFP_PWM1_CH0     (0x0CUL<<SYS_GPC_MFPL_PC5MFP_Pos) /*!< GPC_MFPL PC5 setting for PWM1_CH0    \hideinitializer */
N
N/* PC.6 MFP */
N#define SYS_GPC_MFPL_PC6MFP_GPIO         (0x00UL<<SYS_GPC_MFPL_PC6MFP_Pos) /*!< GPC_MFPL PC6 setting for GPIO        \hideinitializer */
N#define SYS_GPC_MFPL_PC6MFP_EBI_AD8      (0x02UL<<SYS_GPC_MFPL_PC6MFP_Pos) /*!< GPC_MFPL PC6 setting for EBI_AD8     \hideinitializer */
N#define SYS_GPC_MFPL_PC6MFP_UART4_RXD    (0x05UL<<SYS_GPC_MFPL_PC6MFP_Pos) /*!< GPC_MFPL PC6 setting for UART4_RXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC6MFP_UART0_nRTS   (0x07UL<<SYS_GPC_MFPL_PC6MFP_Pos) /*!< GPC_MFPL PC6 setting for UART0_nRTS  \hideinitializer */
N#define SYS_GPC_MFPL_PC6MFP_UART6_RXD    (0x09UL<<SYS_GPC_MFPL_PC6MFP_Pos) /*!< GPC_MFPL PC6 setting for UART6_RXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC6MFP_PWM1_CH3     (0x0BUL<<SYS_GPC_MFPL_PC6MFP_Pos) /*!< GPC_MFPL PC6 setting for PWM1_CH3    \hideinitializer */
N#define SYS_GPC_MFPL_PC6MFP_BPWM1_CH1    (0x0CUL<<SYS_GPC_MFPL_PC6MFP_Pos) /*!< GPC_MFPL PC6 setting for BPWM1_CH1   \hideinitializer */
N#define SYS_GPC_MFPL_PC6MFP_TM1          (0x0EUL<<SYS_GPC_MFPL_PC6MFP_Pos) /*!< GPC_MFPL PC6 setting for TM1         \hideinitializer */
N#define SYS_GPC_MFPL_PC6MFP_INT2         (0x0FUL<<SYS_GPC_MFPL_PC6MFP_Pos) /*!< GPC_MFPL PC6 setting for INT2        \hideinitializer */
N
N/* PC.7 MFP */
N#define SYS_GPC_MFPL_PC7MFP_GPIO         (0x00UL<<SYS_GPC_MFPL_PC7MFP_Pos) /*!< GPC_MFPL PC7 setting for GPIO        \hideinitializer */
N#define SYS_GPC_MFPL_PC7MFP_EBI_AD9      (0x02UL<<SYS_GPC_MFPL_PC7MFP_Pos) /*!< GPC_MFPL PC7 setting for EBI_AD9     \hideinitializer */
N#define SYS_GPC_MFPL_PC7MFP_UART4_TXD    (0x05UL<<SYS_GPC_MFPL_PC7MFP_Pos) /*!< GPC_MFPL PC7 setting for UART4_TXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC7MFP_UART0_nCTS   (0x07UL<<SYS_GPC_MFPL_PC7MFP_Pos) /*!< GPC_MFPL PC7 setting for UART0_nCTS  \hideinitializer */
N#define SYS_GPC_MFPL_PC7MFP_UART6_TXD    (0x09UL<<SYS_GPC_MFPL_PC7MFP_Pos) /*!< GPC_MFPL PC7 setting for UART6_TXD   \hideinitializer */
N#define SYS_GPC_MFPL_PC7MFP_PWM1_CH2     (0x0BUL<<SYS_GPC_MFPL_PC7MFP_Pos) /*!< GPC_MFPL PC7 setting for PWM1_CH2    \hideinitializer */
N#define SYS_GPC_MFPL_PC7MFP_BPWM1_CH0    (0x0CUL<<SYS_GPC_MFPL_PC7MFP_Pos) /*!< GPC_MFPL PC7 setting for BPWM1_CH0   \hideinitializer */
N#define SYS_GPC_MFPL_PC7MFP_TM0          (0x0EUL<<SYS_GPC_MFPL_PC7MFP_Pos) /*!< GPC_MFPL PC7 setting for TM0         \hideinitializer */
N#define SYS_GPC_MFPL_PC7MFP_INT3         (0x0FUL<<SYS_GPC_MFPL_PC7MFP_Pos) /*!< GPC_MFPL PC7 setting for INT3        \hideinitializer */
N
N/* PC.8 MFP */
N#define SYS_GPC_MFPH_PC8MFP_GPIO         (0x00UL<<SYS_GPC_MFPH_PC8MFP_Pos) /*!< GPC_MFPH PC8 setting for GPIO       \hideinitializer */
N#define SYS_GPC_MFPH_PC8MFP_EBI_ADR16    (0x02UL<<SYS_GPC_MFPH_PC8MFP_Pos) /*!< GPC_MFPH PC8 setting for EBI_ADR16  \hideinitializer */
N#define SYS_GPC_MFPH_PC8MFP_I2C0_SDA     (0x04UL<<SYS_GPC_MFPH_PC8MFP_Pos) /*!< GPC_MFPH PC8 setting for I2C0_SDA   \hideinitializer */
N#define SYS_GPC_MFPH_PC8MFP_UART4_nCTS   (0x05UL<<SYS_GPC_MFPH_PC8MFP_Pos) /*!< GPC_MFPH PC8 setting for UART4_nCTS \hideinitializer */
N#define SYS_GPC_MFPH_PC8MFP_UART1_RXD    (0x08UL<<SYS_GPC_MFPH_PC8MFP_Pos) /*!< GPC_MFPH PC8 setting for UART1_RXD  \hideinitializer */
N#define SYS_GPC_MFPH_PC8MFP_PWM1_CH1     (0x0BUL<<SYS_GPC_MFPH_PC8MFP_Pos) /*!< GPC_MFPH PC8 setting for PWM1_CH1   \hideinitializer */
N#define SYS_GPC_MFPH_PC8MFP_BPWM1_CH4    (0x0CUL<<SYS_GPC_MFPH_PC8MFP_Pos) /*!< GPC_MFPH PC8 setting for BPWM1_CH4  \hideinitializer */
N
N/* PC.9 MFP */
N#define SYS_GPC_MFPH_PC9MFP_GPIO         (0x00UL<<SYS_GPC_MFPH_PC9MFP_Pos) /*!< GPC_MFPH PC9 setting for GPIO       \hideinitializer */
N#define SYS_GPC_MFPH_PC9MFP_EBI_ADR7     (0x02UL<<SYS_GPC_MFPH_PC9MFP_Pos) /*!< GPC_MFPH PC9 setting for EBI_ADR7   \hideinitializer */
N#define SYS_GPC_MFPH_PC9MFP_UART6_nCTS   (0x05UL<<SYS_GPC_MFPH_PC9MFP_Pos) /*!< GPC_MFPH PC9 setting for UART6_nCTS \hideinitializer */
N#define SYS_GPC_MFPH_PC9MFP_UART3_RXD    (0x07UL<<SYS_GPC_MFPH_PC9MFP_Pos) /*!< GPC_MFPH PC9 setting for UART3_RXD  \hideinitializer */
N#define SYS_GPC_MFPH_PC9MFP_PWM1_CH3     (0x0CUL<<SYS_GPC_MFPH_PC9MFP_Pos) /*!< GPC_MFPH PC9 setting for PWM1_CH3   \hideinitializer */
N
N/* PC.10 MFP */
N#define SYS_GPC_MFPH_PC10MFP_GPIO        (0x00UL<<SYS_GPC_MFPH_PC10MFP_Pos)/*!< GPC_MFPH PC10 setting for GPIO          \hideinitializer */
N#define SYS_GPC_MFPH_PC10MFP_EBI_ADR6    (0x02UL<<SYS_GPC_MFPH_PC10MFP_Pos)/*!< GPC_MFPH PC10 setting for EBI_ADR6      \hideinitializer */
N#define SYS_GPC_MFPH_PC10MFP_UART6_nRTS  (0x05UL<<SYS_GPC_MFPH_PC10MFP_Pos)/*!< GPC_MFPH PC10 setting for UART6_nRTS    \hideinitializer */
N#define SYS_GPC_MFPH_PC10MFP_UART3_TXD   (0x07UL<<SYS_GPC_MFPH_PC10MFP_Pos)/*!< GPC_MFPH PC10 setting for UART3_TXD     \hideinitializer */
N#define SYS_GPC_MFPH_PC10MFP_PWM1_CH2    (0x0CUL<<SYS_GPC_MFPH_PC10MFP_Pos)/*!< GPC_MFPH PC10 setting for PWM1_CH2      \hideinitializer */
N
N/* PC.11 MFP */
N#define SYS_GPC_MFPH_PC11MFP_GPIO        (0x00UL<<SYS_GPC_MFPH_PC11MFP_Pos)/*!< GPC_MFPH PC11 setting for GPIO      \hideinitializer */
N#define SYS_GPC_MFPH_PC11MFP_EBI_ADR5    (0x02UL<<SYS_GPC_MFPH_PC11MFP_Pos)/*!< GPC_MFPH PC11 setting for EBI_ADR5  \hideinitializer */
N#define SYS_GPC_MFPH_PC11MFP_UART0_RXD   (0x03UL<<SYS_GPC_MFPH_PC11MFP_Pos)/*!< GPC_MFPH PC11 setting for UART0_RXD \hideinitializer */
N#define SYS_GPC_MFPH_PC11MFP_I2C0_SDA    (0x04UL<<SYS_GPC_MFPH_PC11MFP_Pos)/*!< GPC_MFPH PC11 setting for I2C0_SDA  \hideinitializer */
N#define SYS_GPC_MFPH_PC11MFP_UART6_RXD   (0x05UL<<SYS_GPC_MFPH_PC11MFP_Pos)/*!< GPC_MFPH PC11 setting for UART6_RXD \hideinitializer */
N#define SYS_GPC_MFPH_PC11MFP_PWM1_CH1    (0x0CUL<<SYS_GPC_MFPH_PC11MFP_Pos)/*!< GPC_MFPH PC11 setting for PWM1_CH1  \hideinitializer */
N#define SYS_GPC_MFPH_PC11MFP_ACMP1_O     (0x0EUL<<SYS_GPC_MFPH_PC11MFP_Pos)/*!< GPC_MFPH PC11 setting for ACMP1_O   \hideinitializer */
N
N/* PC.12 MFP */
N#define SYS_GPC_MFPH_PC12MFP_GPIO        (0x00UL<<SYS_GPC_MFPH_PC12MFP_Pos)/*!< GPC_MFPH PC12 setting for GPIO      \hideinitializer */
N#define SYS_GPC_MFPH_PC12MFP_EBI_ADR4    (0x02UL<<SYS_GPC_MFPH_PC12MFP_Pos)/*!< GPC_MFPH PC12 setting for EBI_ADR4  \hideinitializer */
N#define SYS_GPC_MFPH_PC12MFP_UART0_TXD   (0x03UL<<SYS_GPC_MFPH_PC12MFP_Pos)/*!< GPC_MFPH PC12 setting for UART0_TXD \hideinitializer */
N#define SYS_GPC_MFPH_PC12MFP_I2C0_SCL    (0x04UL<<SYS_GPC_MFPH_PC12MFP_Pos)/*!< GPC_MFPH PC12 setting for I2C0_SCL  \hideinitializer */
N#define SYS_GPC_MFPH_PC12MFP_UART6_TXD   (0x05UL<<SYS_GPC_MFPH_PC12MFP_Pos)/*!< GPC_MFPH PC12 setting for UART6_TXD \hideinitializer */
N#define SYS_GPC_MFPH_PC12MFP_PWM1_CH0    (0x0CUL<<SYS_GPC_MFPH_PC12MFP_Pos)/*!< GPC_MFPH PC12 setting for PWM1_CH0  \hideinitializer */
N#define SYS_GPC_MFPH_PC12MFP_ACMP0_O     (0x0EUL<<SYS_GPC_MFPH_PC12MFP_Pos)/*!< GPC_MFPH PC12 setting for ACMP0_O   \hideinitializer */
N
N/* PC.13 MFP */
N#define SYS_GPC_MFPH_PC13MFP_GPIO        (0x00UL<<SYS_GPC_MFPH_PC13MFP_Pos)/*!< GPC_MFPH PC13 setting for GPIO          \hideinitializer */
N#define SYS_GPC_MFPH_PC13MFP_EBI_ADR10   (0x02UL<<SYS_GPC_MFPH_PC13MFP_Pos)/*!< GPC_MFPH PC13 setting for EBI_ADR10     \hideinitializer */
N#define SYS_GPC_MFPH_PC13MFP_USCI0_CTL0  (0x06UL<<SYS_GPC_MFPH_PC13MFP_Pos)/*!< GPC_MFPH PC13 setting for USCI0_CTL0    \hideinitializer */
N#define SYS_GPC_MFPH_PC13MFP_UART2_TXD   (0x07UL<<SYS_GPC_MFPH_PC13MFP_Pos)/*!< GPC_MFPH PC13 setting for UART2_TXD     \hideinitializer */
N#define SYS_GPC_MFPH_PC13MFP_BPWM0_CH4   (0x09UL<<SYS_GPC_MFPH_PC13MFP_Pos)/*!< GPC_MFPH PC13 setting for BPWM0_CH4     \hideinitializer */
N#define SYS_GPC_MFPH_PC13MFP_CLKO        (0x0DUL<<SYS_GPC_MFPH_PC13MFP_Pos)/*!< GPC_MFPH PC13 setting for CLKO          \hideinitializer */
N#define SYS_GPC_MFPH_PC13MFP_ADC_ST      (0x0EUL<<SYS_GPC_MFPH_PC13MFP_Pos)/*!< GPC_MFPH PC13 setting for ADC_ST        \hideinitializer */
N#define SYS_GPC_MFPH_PC13MFP_ADC0_ST     (0x0EUL<<SYS_GPC_MFPH_PC13MFP_Pos)/*!< GPC_MFPH PC13 setting for ADC0_ST       \hideinitializer */
N
N/* PC.14 MFP */
N#define SYS_GPC_MFPH_PC14MFP_GPIO        (0x00UL<<SYS_GPC_MFPH_PC14MFP_Pos) /*!< GPC_MFPH PC14 setting for GPIO         \hideinitializer */
N#define SYS_GPC_MFPH_PC14MFP_EBI_AD11    (0x02UL<<SYS_GPC_MFPH_PC14MFP_Pos) /*!< GPC_MFPH PC14 setting for EBI_AD11     \hideinitializer */
N#define SYS_GPC_MFPH_PC14MFP_SPI0_I2SMCLK (0x04UL<<SYS_GPC_MFPH_PC14MFP_Pos)/*!< GPC_MFPH PC14 setting for SPI0_I2SMCLK \hideinitializer */
N#define SYS_GPC_MFPH_PC14MFP_USCI0_CTL0  (0x05UL<<SYS_GPC_MFPH_PC14MFP_Pos) /*!< GPC_MFPH PC14 setting for USCI0_CTL0   \hideinitializer */
N#define SYS_GPC_MFPH_PC14MFP_QSPI0_CLK   (0x06UL<<SYS_GPC_MFPH_PC14MFP_Pos) /*!< GPC_MFPH PC14 setting for QSPI0_CLK    \hideinitializer */
N#define SYS_GPC_MFPH_PC14MFP_TM1         (0x0DUL<<SYS_GPC_MFPH_PC14MFP_Pos) /*!< GPC_MFPH PC14 setting for TM1          \hideinitializer */
N
N/* PC.15 MFP */
N
N/* PD.0 MFP */
N#define SYS_GPD_MFPL_PD0MFP_GPIO         (0x00UL<<SYS_GPD_MFPL_PD0MFP_Pos) /*!< GPD_MFPL PD0 setting for GPIO        \hideinitializer */
N#define SYS_GPD_MFPL_PD0MFP_EBI_AD13     (0x02UL<<SYS_GPD_MFPL_PD0MFP_Pos) /*!< GPD_MFPL PD0 setting for EBI_AD13    \hideinitializer */
N#define SYS_GPD_MFPL_PD0MFP_USCI0_CLK    (0x03UL<<SYS_GPD_MFPL_PD0MFP_Pos) /*!< GPD_MFPL PD0 setting for USCI0_CLK   \hideinitializer */
N#define SYS_GPD_MFPL_PD0MFP_SPI0_MOSI    (0x04UL<<SYS_GPD_MFPL_PD0MFP_Pos) /*!< GPD_MFPL PD0 setting for SPI0_MOSI   \hideinitializer */
N#define SYS_GPD_MFPL_PD0MFP_UART3_RXD    (0x05UL<<SYS_GPD_MFPL_PD0MFP_Pos) /*!< GPD_MFPL PD0 setting for UART3_RXD   \hideinitializer */
N#define SYS_GPD_MFPL_PD0MFP_TM2          (0x0EUL<<SYS_GPD_MFPL_PD0MFP_Pos) /*!< GPD_MFPL PD0 setting for TM2         \hideinitializer */
N
N/* PD.1 MFP */
N#define SYS_GPD_MFPL_PD1MFP_GPIO         (0x00UL<<SYS_GPD_MFPL_PD1MFP_Pos) /*!< GPD_MFPL PD1 setting for GPIO        \hideinitializer */
N#define SYS_GPD_MFPL_PD1MFP_EBI_AD12     (0x02UL<<SYS_GPD_MFPL_PD1MFP_Pos) /*!< GPD_MFPL PD1 setting for EBI_AD12    \hideinitializer */
N#define SYS_GPD_MFPL_PD1MFP_USCI0_DAT0   (0x03UL<<SYS_GPD_MFPL_PD1MFP_Pos) /*!< GPD_MFPL PD1 setting for USCI0_DAT0  \hideinitializer */
N#define SYS_GPD_MFPL_PD1MFP_SPI0_MISO    (0x04UL<<SYS_GPD_MFPL_PD1MFP_Pos) /*!< GPD_MFPL PD1 setting for SPI0_MISO   \hideinitializer */
N#define SYS_GPD_MFPL_PD1MFP_UART3_TXD    (0x05UL<<SYS_GPD_MFPL_PD1MFP_Pos) /*!< GPD_MFPL PD1 setting for UART3_TXD   \hideinitializer */
N
N/* PD.2 MFP */
N#define SYS_GPD_MFPL_PD2MFP_GPIO         (0x00UL<<SYS_GPD_MFPL_PD2MFP_Pos) /*!< GPD_MFPL PD2 setting for GPIO        \hideinitializer */
N#define SYS_GPD_MFPL_PD2MFP_EBI_AD11     (0x02UL<<SYS_GPD_MFPL_PD2MFP_Pos) /*!< GPD_MFPL PD2 setting for EBI_AD11    \hideinitializer */
N#define SYS_GPD_MFPL_PD2MFP_USCI0_DAT1   (0x03UL<<SYS_GPD_MFPL_PD2MFP_Pos) /*!< GPD_MFPL PD2 setting for USCI0_DAT1  \hideinitializer */
N#define SYS_GPD_MFPL_PD2MFP_SPI0_CLK     (0x04UL<<SYS_GPD_MFPL_PD2MFP_Pos) /*!< GPD_MFPL PD2 setting for SPI0_CLK    \hideinitializer */
N#define SYS_GPD_MFPL_PD2MFP_UART3_nCTS   (0x05UL<<SYS_GPD_MFPL_PD2MFP_Pos) /*!< GPD_MFPL PD2 setting for UART3_nCTS  \hideinitializer */
N#define SYS_GPD_MFPL_PD2MFP_UART0_RXD    (0x09UL<<SYS_GPD_MFPL_PD2MFP_Pos) /*!< GPD_MFPL PD2 setting for UART0_RXD   \hideinitializer */
N
N/* PD.3 MFP */
N#define SYS_GPD_MFPL_PD3MFP_GPIO         (0x00UL<<SYS_GPD_MFPL_PD3MFP_Pos) /*!< GPD_MFPL PD3 setting for GPIO        \hideinitializer */
N#define SYS_GPD_MFPL_PD3MFP_EBI_AD10     (0x02UL<<SYS_GPD_MFPL_PD3MFP_Pos) /*!< GPD_MFPL PD3 setting for EBI_AD10    \hideinitializer */
N#define SYS_GPD_MFPL_PD3MFP_USCI0_CTL1   (0x03UL<<SYS_GPD_MFPL_PD3MFP_Pos) /*!< GPD_MFPL PD3 setting for USCI0_CTL1  \hideinitializer */
N#define SYS_GPD_MFPL_PD3MFP_SPI0_SS      (0x04UL<<SYS_GPD_MFPL_PD3MFP_Pos) /*!< GPD_MFPL PD3 setting for SPI0_SS     \hideinitializer */
N#define SYS_GPD_MFPL_PD3MFP_UART3_nRTS   (0x05UL<<SYS_GPD_MFPL_PD3MFP_Pos) /*!< GPD_MFPL PD3 setting for UART3_nRTS  \hideinitializer */
N#define SYS_GPD_MFPL_PD3MFP_USCI1_CTL0   (0x06UL<<SYS_GPD_MFPL_PD3MFP_Pos) /*!< GPD_MFPL PD3 setting for USCI1_CTL0  \hideinitializer */
N#define SYS_GPD_MFPL_PD3MFP_UART0_TXD    (0x09UL<<SYS_GPD_MFPL_PD3MFP_Pos) /*!< GPD_MFPL PD3 setting for UART0_TXD   \hideinitializer */
N
N/* PD.4 MFP */
N#define SYS_GPD_MFPL_PD4MFP_GPIO         (0x00UL<<SYS_GPD_MFPL_PD4MFP_Pos) /*!< GPD_MFPL PD4 setting for GPIO       \hideinitializer */
N#define SYS_GPD_MFPL_PD4MFP_USCI0_CTL0   (0x03UL<<SYS_GPD_MFPL_PD4MFP_Pos) /*!< GPD_MFPL PD4 setting for USCI0_CTL0 \hideinitializer */
N#define SYS_GPD_MFPL_PD4MFP_I2C1_SDA     (0x04UL<<SYS_GPD_MFPL_PD4MFP_Pos) /*!< GPD_MFPL PD4 setting for I2C1_SDA   \hideinitializer */
N#define SYS_GPD_MFPL_PD4MFP_USCI1_CTL1   (0x06UL<<SYS_GPD_MFPL_PD4MFP_Pos) /*!< GPD_MFPL PD4 setting for USCI1_CTL1 \hideinitializer */
N
N/* PD.5 MFP */
N#define SYS_GPD_MFPL_PD5MFP_GPIO         (0x00UL<<SYS_GPD_MFPL_PD5MFP_Pos) /*!< GPD_MFPL PD5 setting for GPIO       \hideinitializer */
N#define SYS_GPD_MFPL_PD5MFP_I2C1_SCL     (0x04UL<<SYS_GPD_MFPL_PD5MFP_Pos) /*!< GPD_MFPL PD5 setting for I2C1_SCL   \hideinitializer */
N#define SYS_GPD_MFPL_PD5MFP_USCI1_DAT0   (0x06UL<<SYS_GPD_MFPL_PD5MFP_Pos) /*!< GPD_MFPL PD5 setting for USCI1_DAT0 \hideinitializer */
N
N/* PD.6 MFP */
N#define SYS_GPD_MFPL_PD6MFP_GPIO         (0x00UL<<SYS_GPD_MFPL_PD6MFP_Pos) /*!< GPD_MFPL PD6 setting for GPIO       \hideinitializer */
N#define SYS_GPD_MFPL_PD6MFP_UART1_RXD    (0x03UL<<SYS_GPD_MFPL_PD6MFP_Pos) /*!< GPD_MFPL PD6 setting for UART1_RXD  \hideinitializer */
N#define SYS_GPD_MFPL_PD6MFP_I2C0_SDA     (0x04UL<<SYS_GPD_MFPL_PD6MFP_Pos) /*!< GPD_MFPL PD6 setting for I2C0_SDA   \hideinitializer */
N#define SYS_GPD_MFPL_PD6MFP_USCI1_DAT1   (0x06UL<<SYS_GPD_MFPL_PD6MFP_Pos) /*!< GPD_MFPL PD6 setting for USCI1_DAT1 \hideinitializer */
N
N/* PD.7 MFP */
N#define SYS_GPD_MFPL_PD7MFP_GPIO         (0x00UL<<SYS_GPD_MFPL_PD7MFP_Pos) /*!< GPD_MFPL PD7 setting for GPIO       \hideinitializer */
N#define SYS_GPD_MFPL_PD7MFP_UART1_TXD    (0x03UL<<SYS_GPD_MFPL_PD7MFP_Pos) /*!< GPD_MFPL PD7 setting for UART1_TXD  \hideinitializer */
N#define SYS_GPD_MFPL_PD7MFP_I2C0_SCL     (0x04UL<<SYS_GPD_MFPL_PD7MFP_Pos) /*!< GPD_MFPL PD7 setting for I2C0_SCL   \hideinitializer */
N#define SYS_GPD_MFPL_PD7MFP_USCI1_CLK    (0x06UL<<SYS_GPD_MFPL_PD7MFP_Pos) /*!< GPD_MFPL PD7 setting for USCI1_CLK  \hideinitializer */
N
N/* PD.8 MFP */
N#define SYS_GPD_MFPH_PD8MFP_GPIO         (0x00UL<<SYS_GPD_MFPH_PD8MFP_Pos) /*!< GPD_MFPH PD8 setting for GPIO       \hideinitializer */
N#define SYS_GPD_MFPH_PD8MFP_EBI_AD6      (0x02UL<<SYS_GPD_MFPH_PD8MFP_Pos) /*!< GPD_MFPH PD8 setting for EBI_AD6    \hideinitializer */
N#define SYS_GPD_MFPH_PD8MFP_UART2_nRTS   (0x04UL<<SYS_GPD_MFPH_PD8MFP_Pos) /*!< GPD_MFPH PD8 setting for UART2_nRTS \hideinitializer */
N#define SYS_GPD_MFPH_PD8MFP_UART7_RXD    (0x05UL<<SYS_GPD_MFPH_PD8MFP_Pos) /*!< GPD_MFPH PD8 setting for UART7_RXD  \hideinitializer */
N
N/* PD.9 MFP */
N#define SYS_GPD_MFPH_PD9MFP_GPIO         (0x00UL<<SYS_GPD_MFPH_PD9MFP_Pos) /*!< GPD_MFPH PD9 setting for GPIO       \hideinitializer */
N#define SYS_GPD_MFPH_PD9MFP_EBI_AD7      (0x02UL<<SYS_GPD_MFPH_PD9MFP_Pos) /*!< GPD_MFPH PD9 setting for EBI_AD7    \hideinitializer */
N#define SYS_GPD_MFPH_PD9MFP_UART2_nCTS   (0x04UL<<SYS_GPD_MFPH_PD9MFP_Pos) /*!< GPD_MFPH PD9 setting for UART2_nCTS \hideinitializer */
N#define SYS_GPD_MFPH_PD9MFP_UART7_TXD    (0x05UL<<SYS_GPD_MFPH_PD9MFP_Pos) /*!< GPD_MFPH PD9 setting for UART7_TXD  \hideinitializer */
N
N/* PD.10 MFP */
N#define SYS_GPD_MFPH_PD10MFP_GPIO        (0x00UL<<SYS_GPD_MFPH_PD10MFP_Pos)/*!< GPD_MFPH PD10 setting for GPIO      \hideinitializer */
N#define SYS_GPD_MFPH_PD10MFP_EBI_nCS2    (0x02UL<<SYS_GPD_MFPH_PD10MFP_Pos)/*!< GPD_MFPH PD10 setting for EBI_nCS2  \hideinitializer */
N#define SYS_GPD_MFPH_PD10MFP_UART1_RXD   (0x03UL<<SYS_GPD_MFPH_PD10MFP_Pos)/*!< GPD_MFPH PD10 setting for UART1_RXD \hideinitializer */
N
N/* PD.11 MFP */
N#define SYS_GPD_MFPH_PD11MFP_GPIO        (0x00UL<<SYS_GPD_MFPH_PD11MFP_Pos)/*!< GPD_MFPH PD11 setting for GPIO      \hideinitializer */
N#define SYS_GPD_MFPH_PD11MFP_EBI_nCS1    (0x02UL<<SYS_GPD_MFPH_PD11MFP_Pos)/*!< GPD_MFPH PD11 setting for EBI_nCS1  \hideinitializer */
N#define SYS_GPD_MFPH_PD11MFP_UART1_TXD   (0x03UL<<SYS_GPD_MFPH_PD11MFP_Pos)/*!< GPD_MFPH PD11 setting for UART1_TXD \hideinitializer */
N
N/* PD.12 MFP */
N#define SYS_GPD_MFPH_PD12MFP_GPIO        (0x00UL<<SYS_GPD_MFPH_PD12MFP_Pos)/*!< GPD_MFPH PD12 setting for GPIO      \hideinitializer */
N#define SYS_GPD_MFPH_PD12MFP_EBI_nCS0    (0x02UL<<SYS_GPD_MFPH_PD12MFP_Pos)/*!< GPD_MFPH PD12 setting for EBI_nCS0  \hideinitializer */
N#define SYS_GPD_MFPH_PD12MFP_UART2_RXD   (0x07UL<<SYS_GPD_MFPH_PD12MFP_Pos)/*!< GPD_MFPH PD12 setting for UART2_RXD \hideinitializer */
N#define SYS_GPD_MFPH_PD12MFP_BPWM0_CH5   (0x09UL<<SYS_GPD_MFPH_PD12MFP_Pos)/*!< GPD_MFPH PD12 setting for BPWM0_CH5 \hideinitializer */
N#define SYS_GPD_MFPH_PD12MFP_CLKO        (0x0DUL<<SYS_GPD_MFPH_PD12MFP_Pos)/*!< GPD_MFPH PD12 setting for CLKO      \hideinitializer */
N#define SYS_GPD_MFPH_PD12MFP_ADC_ST      (0x0EUL<<SYS_GPD_MFPH_PD12MFP_Pos)/*!< GPD_MFPH PD12 setting for ADC_ST    \hideinitializer */
N#define SYS_GPD_MFPH_PD12MFP_ADC0_ST     (0x0EUL<<SYS_GPD_MFPH_PD12MFP_Pos)/*!< GPD_MFPH PD12 setting for ADC0_ST   \hideinitializer */
N#define SYS_GPD_MFPH_PD12MFP_INT5        (0x0FUL<<SYS_GPD_MFPH_PD12MFP_Pos)/*!< GPD_MFPH PD12 setting for INT5      \hideinitializer */
N
N/* PD.13 MFP */
N#define SYS_GPD_MFPH_PD13MFP_GPIO         (0x00UL<<SYS_GPD_MFPH_PD13MFP_Pos)/*!< GPD_MFPH PD13 setting for GPIO         \hideinitializer */
N#define SYS_GPD_MFPH_PD13MFP_EBI_AD10     (0x02UL<<SYS_GPD_MFPH_PD13MFP_Pos)/*!< GPD_MFPH PD13 setting for EBI_AD10     \hideinitializer */
N#define SYS_GPD_MFPH_PD13MFP_SPI0_I2SMCLK (0x04UL<<SYS_GPD_MFPH_PD13MFP_Pos)/*!< GPD_MFPH PD13 setting for SPI0_I2SMCLK \hideinitializer */
N
N/* PD.14 MFP */
N#define SYS_GPD_MFPH_PD14MFP_GPIO         (0x00UL<<SYS_GPD_MFPH_PD14MFP_Pos)/*!< GPD_MFPH PD14 setting for GPIO         \hideinitializer */
N#define SYS_GPD_MFPH_PD14MFP_EBI_nCS0     (0x02UL<<SYS_GPD_MFPH_PD14MFP_Pos)/*!< GPD_MFPH PD14 setting for EBI_nCS0     \hideinitializer */
N#define SYS_GPD_MFPH_PD14MFP_SPI0_I2SMCLK (0x05UL<<SYS_GPD_MFPH_PD14MFP_Pos)/*!< GPD_MFPH PD14 setting for SPI0_I2SMCLK \hideinitializer */
N#define SYS_GPD_MFPH_PD14MFP_USCI0_CTL0   (0x08UL<<SYS_GPD_MFPH_PD14MFP_Pos)/*!< GPD_MFPH PD14 setting for USCI0_CTL0   \hideinitializer */
N#define SYS_GPD_MFPH_PD14MFP_PWM0_CH4     (0x0BUL<<SYS_GPD_MFPH_PD14MFP_Pos)/*!< GPD_MFPH PD14 setting for PWM0_CH4     \hideinitializer */
N
N/* PD.15 MFP */
N#define SYS_GPD_MFPH_PD15MFP_GPIO        (0x00UL<<SYS_GPD_MFPH_PD15MFP_Pos)/*!< GPD_MFPH PD15 setting for GPIO      \hideinitializer */
N#define SYS_GPD_MFPH_PD15MFP_PWM0_CH5    (0x0CUL<<SYS_GPD_MFPH_PD15MFP_Pos)/*!< GPD_MFPH PD15 setting for PWM0_CH5  \hideinitializer */
N#define SYS_GPD_MFPH_PD15MFP_TM3         (0x0EUL<<SYS_GPD_MFPH_PD15MFP_Pos)/*!< GPD_MFPH PD15 setting for TM3       \hideinitializer */
N#define SYS_GPD_MFPH_PD15MFP_INT1        (0x0FUL<<SYS_GPD_MFPH_PD15MFP_Pos)/*!< GPD_MFPH PD15 setting for INT1      \hideinitializer */
N
N/* PE.0 MFP */
N#define SYS_GPE_MFPL_PE0MFP_GPIO         (0x00UL<<SYS_GPE_MFPL_PE0MFP_Pos) /*!< GPE_MFPL PE0 setting for GPIO           \hideinitializer */
N#define SYS_GPE_MFPL_PE0MFP_EBI_AD11     (0x02UL<<SYS_GPE_MFPL_PE0MFP_Pos) /*!< GPE_MFPL PE0 setting for EBI_AD11       \hideinitializer */
N#define SYS_GPE_MFPL_PE0MFP_QSPI0_MOSI0  (0x03UL<<SYS_GPE_MFPL_PE0MFP_Pos) /*!< GPE_MFPL PE0 setting for QSPI0_MOSI0    \hideinitializer */
N#define SYS_GPE_MFPL_PE0MFP_UART3_RXD    (0x07UL<<SYS_GPE_MFPL_PE0MFP_Pos) /*!< GPE_MFPL PE0 setting for UART3_RXD      \hideinitializer */
N#define SYS_GPE_MFPL_PE0MFP_I2C1_SDA     (0x08UL<<SYS_GPE_MFPL_PE0MFP_Pos) /*!< GPE_MFPL PE0 setting for I2C1_SDA       \hideinitializer */
N#define SYS_GPE_MFPL_PE0MFP_UART4_nRTS   (0x09UL<<SYS_GPE_MFPL_PE0MFP_Pos) /*!< GPE_MFPL PE0 setting for UART4_nRTS     \hideinitializer */
N
N/* PE.1 MFP */
N#define SYS_GPE_MFPL_PE1MFP_GPIO         (0x00UL<<SYS_GPE_MFPL_PE1MFP_Pos) /*!< GPE_MFPL PE1 setting for GPIO           \hideinitializer */
N#define SYS_GPE_MFPL_PE1MFP_EBI_AD10     (0x02UL<<SYS_GPE_MFPL_PE1MFP_Pos) /*!< GPE_MFPL PE1 setting for EBI_AD10       \hideinitializer */
N#define SYS_GPE_MFPL_PE1MFP_QSPI0_MISO0  (0x03UL<<SYS_GPE_MFPL_PE1MFP_Pos) /*!< GPE_MFPL PE1 setting for QSPI0_MISO0    \hideinitializer */
N#define SYS_GPE_MFPL_PE1MFP_UART3_TXD    (0x07UL<<SYS_GPE_MFPL_PE1MFP_Pos) /*!< GPE_MFPL PE1 setting for UART3_TXD      \hideinitializer */
N#define SYS_GPE_MFPL_PE1MFP_I2C1_SCL     (0x08UL<<SYS_GPE_MFPL_PE1MFP_Pos) /*!< GPE_MFPL PE1 setting for I2C1_SCL       \hideinitializer */
N#define SYS_GPE_MFPL_PE1MFP_UART4_nCTS   (0x09UL<<SYS_GPE_MFPL_PE1MFP_Pos) /*!< GPE_MFPL PE1 setting for UART4_nCTS     \hideinitializer */
N
N/* PE.2 MFP */
N#define SYS_GPE_MFPL_PE2MFP_GPIO         (0x00UL<<SYS_GPE_MFPL_PE2MFP_Pos) /*!< GPE_MFPL PE2 setting for GPIO       \hideinitializer */
N#define SYS_GPE_MFPL_PE2MFP_EBI_ALE      (0x02UL<<SYS_GPE_MFPL_PE2MFP_Pos) /*!< GPE_MFPL PE2 setting for EBI_ALE    \hideinitializer */
N#define SYS_GPE_MFPL_PE2MFP_USCI0_CLK    (0x07UL<<SYS_GPE_MFPL_PE2MFP_Pos) /*!< GPE_MFPL PE2 setting for USCI0_CLK  \hideinitializer */
N#define SYS_GPE_MFPL_PE2MFP_UART6_nCTS   (0x08UL<<SYS_GPE_MFPL_PE2MFP_Pos) /*!< GPE_MFPL PE2 setting for UART6_nCTS \hideinitializer */
N#define SYS_GPE_MFPL_PE2MFP_UART7_RXD    (0x09UL<<SYS_GPE_MFPL_PE2MFP_Pos) /*!< GPE_MFPL PE2 setting for UART7_RXD  \hideinitializer */
N#define SYS_GPE_MFPL_PE2MFP_PWM0_CH5     (0x0CUL<<SYS_GPE_MFPL_PE2MFP_Pos) /*!< GPE_MFPL PE2 setting for PWM0_CH5   \hideinitializer */
N#define SYS_GPE_MFPL_PE2MFP_BPWM0_CH0    (0x0DUL<<SYS_GPE_MFPL_PE2MFP_Pos) /*!< GPE_MFPL PE2 setting for BPWM0_CH0  \hideinitializer */
N
N/* PE.3 MFP */
N#define SYS_GPE_MFPL_PE3MFP_GPIO         (0x00UL<<SYS_GPE_MFPL_PE3MFP_Pos) /*!< GPE_MFPL PE3 setting for GPIO       \hideinitializer */
N#define SYS_GPE_MFPL_PE3MFP_EBI_MCLK     (0x02UL<<SYS_GPE_MFPL_PE3MFP_Pos) /*!< GPE_MFPL PE3 setting for EBI_MCLK   \hideinitializer */
N#define SYS_GPE_MFPL_PE3MFP_USCI0_DAT0   (0x07UL<<SYS_GPE_MFPL_PE3MFP_Pos) /*!< GPE_MFPL PE3 setting for USCI0_DAT0 \hideinitializer */
N#define SYS_GPE_MFPL_PE3MFP_UART6_nRTS   (0x08UL<<SYS_GPE_MFPL_PE3MFP_Pos) /*!< GPE_MFPL PE3 setting for UART6_nRTS \hideinitializer */
N#define SYS_GPE_MFPL_PE3MFP_UART7_TXD    (0x09UL<<SYS_GPE_MFPL_PE3MFP_Pos) /*!< GPE_MFPL PE3 setting for UART7_TXD  \hideinitializer */
N#define SYS_GPE_MFPL_PE3MFP_PWM0_CH4     (0x0CUL<<SYS_GPE_MFPL_PE3MFP_Pos) /*!< GPE_MFPL PE3 setting for PWM0_CH4   \hideinitializer */
N#define SYS_GPE_MFPL_PE3MFP_BPWM0_CH1    (0x0DUL<<SYS_GPE_MFPL_PE3MFP_Pos) /*!< GPE_MFPL PE3 setting for BPWM0_CH1  \hideinitializer */
N
N/* PE.4 MFP */
N#define SYS_GPE_MFPL_PE4MFP_GPIO         (0x00UL<<SYS_GPE_MFPL_PE4MFP_Pos) /*!< GPE_MFPL PE4 setting for GPIO       \hideinitializer */
N#define SYS_GPE_MFPL_PE4MFP_EBI_nWR      (0x02UL<<SYS_GPE_MFPL_PE4MFP_Pos) /*!< GPE_MFPL PE4 setting for EBI_nWR    \hideinitializer */
N#define SYS_GPE_MFPL_PE4MFP_USCI0_DAT1   (0x07UL<<SYS_GPE_MFPL_PE4MFP_Pos) /*!< GPE_MFPL PE4 setting for USCI0_DAT1 \hideinitializer */
N#define SYS_GPE_MFPL_PE4MFP_UART6_RXD    (0x08UL<<SYS_GPE_MFPL_PE4MFP_Pos) /*!< GPE_MFPL PE4 setting for UART6_RXD  \hideinitializer */
N#define SYS_GPE_MFPL_PE4MFP_UART7_nCTS   (0x09UL<<SYS_GPE_MFPL_PE4MFP_Pos) /*!< GPE_MFPL PE4 setting for UART7_nCTS \hideinitializer */
N#define SYS_GPE_MFPL_PE4MFP_PWM0_CH3     (0x0CUL<<SYS_GPE_MFPL_PE4MFP_Pos) /*!< GPE_MFPL PE4 setting for PWM0_CH3   \hideinitializer */
N#define SYS_GPE_MFPL_PE4MFP_BPWM0_CH2    (0x0DUL<<SYS_GPE_MFPL_PE4MFP_Pos) /*!< GPE_MFPL PE4 setting for BPWM0_CH2  \hideinitializer */
N
N/* PE.5 MFP */
N#define SYS_GPE_MFPL_PE5MFP_GPIO         (0x00UL<<SYS_GPE_MFPL_PE5MFP_Pos) /*!< GPE_MFPL PE5 setting for GPIO       \hideinitializer */
N#define SYS_GPE_MFPL_PE5MFP_EBI_nRD      (0x02UL<<SYS_GPE_MFPL_PE5MFP_Pos) /*!< GPE_MFPL PE5 setting for EBI_nRD    \hideinitializer */
N#define SYS_GPE_MFPL_PE5MFP_USCI0_CTL1   (0x07UL<<SYS_GPE_MFPL_PE5MFP_Pos) /*!< GPE_MFPL PE5 setting for USCI0_CTL1 \hideinitializer */
N#define SYS_GPE_MFPL_PE5MFP_UART6_TXD    (0x08UL<<SYS_GPE_MFPL_PE5MFP_Pos) /*!< GPE_MFPL PE5 setting for UART6_TXD  \hideinitializer */
N#define SYS_GPE_MFPL_PE5MFP_UART7_nRTS   (0x09UL<<SYS_GPE_MFPL_PE5MFP_Pos) /*!< GPE_MFPL PE5 setting for UART7_nRTS \hideinitializer */
N#define SYS_GPE_MFPL_PE5MFP_PWM0_CH2     (0x0CUL<<SYS_GPE_MFPL_PE5MFP_Pos) /*!< GPE_MFPL PE5 setting for PWM0_CH2   \hideinitializer */
N#define SYS_GPE_MFPL_PE5MFP_BPWM0_CH3    (0x0DUL<<SYS_GPE_MFPL_PE5MFP_Pos) /*!< GPE_MFPL PE5 setting for BPWM0_CH3  \hideinitializer */
N
N/* PE.6 MFP */
N#define SYS_GPE_MFPL_PE6MFP_GPIO         (0x00UL<<SYS_GPE_MFPL_PE6MFP_Pos) /*!< GPE_MFPL PE6 setting for GPIO       \hideinitializer */
N#define SYS_GPE_MFPL_PE6MFP_USCI0_CTL0   (0x07UL<<SYS_GPE_MFPL_PE6MFP_Pos) /*!< GPE_MFPL PE6 setting for USCI0_CTL0 \hideinitializer */
N#define SYS_GPE_MFPL_PE6MFP_UART5_RXD    (0x08UL<<SYS_GPE_MFPL_PE6MFP_Pos) /*!< GPE_MFPL PE6 setting for UART5_RXD  \hideinitializer */
N#define SYS_GPE_MFPL_PE6MFP_PWM0_CH1     (0x0CUL<<SYS_GPE_MFPL_PE6MFP_Pos) /*!< GPE_MFPL PE6 setting for PWM0_CH1   \hideinitializer */
N#define SYS_GPE_MFPL_PE6MFP_BPWM0_CH4    (0x0DUL<<SYS_GPE_MFPL_PE6MFP_Pos) /*!< GPE_MFPL PE6 setting for BPWM0_CH4  \hideinitializer */
N
N/* PE.7 MFP */
N#define SYS_GPE_MFPL_PE7MFP_GPIO         (0x00UL<<SYS_GPE_MFPL_PE7MFP_Pos) /*!< GPE_MFPL PE7 setting for GPIO       \hideinitializer */
N#define SYS_GPE_MFPL_PE7MFP_UART5_TXD    (0x08UL<<SYS_GPE_MFPL_PE7MFP_Pos) /*!< GPE_MFPL PE7 setting for UART5_TXD  \hideinitializer */
N#define SYS_GPE_MFPL_PE7MFP_PWM0_CH0     (0x0CUL<<SYS_GPE_MFPL_PE7MFP_Pos) /*!< GPE_MFPL PE7 setting for PWM0_CH0   \hideinitializer */
N#define SYS_GPE_MFPL_PE7MFP_BPWM0_CH5    (0x0DUL<<SYS_GPE_MFPL_PE7MFP_Pos) /*!< GPE_MFPL PE7 setting for BPWM0_CH5  \hideinitializer */
N
N/* PE.8 MFP */
N#define SYS_GPE_MFPH_PE8MFP_GPIO         (0x00UL<<SYS_GPE_MFPH_PE8MFP_Pos) /*!< GPE_MFPH PE8 setting for GPIO           \hideinitializer */
N#define SYS_GPE_MFPH_PE8MFP_EBI_ADR10    (0x02UL<<SYS_GPE_MFPH_PE8MFP_Pos) /*!< GPE_MFPH PE8 setting for EBI_ADR10      \hideinitializer */
N#define SYS_GPE_MFPH_PE8MFP_USCI1_CTL1   (0x06UL<<SYS_GPE_MFPH_PE8MFP_Pos) /*!< GPE_MFPH PE8 setting for USCI1_CTL1     \hideinitializer */
N#define SYS_GPE_MFPH_PE8MFP_UART2_TXD    (0x07UL<<SYS_GPE_MFPH_PE8MFP_Pos) /*!< GPE_MFPH PE8 setting for UART2_TXD      \hideinitializer */
N#define SYS_GPE_MFPH_PE8MFP_PWM0_CH0     (0x0AUL<<SYS_GPE_MFPH_PE8MFP_Pos) /*!< GPE_MFPH PE8 setting for PWM0_CH0       \hideinitializer */
N#define SYS_GPE_MFPH_PE8MFP_PWM0_BRAKE0  (0x0BUL<<SYS_GPE_MFPH_PE8MFP_Pos) /*!< GPE_MFPH PE8 setting for PWM0_BRAKE0    \hideinitializer */
N
N/* PE.9 MFP */
N#define SYS_GPE_MFPH_PE9MFP_GPIO         (0x00UL<<SYS_GPE_MFPH_PE9MFP_Pos) /*!< GPE_MFPH PE9 setting for GPIO           \hideinitializer */
N#define SYS_GPE_MFPH_PE9MFP_EBI_ADR11    (0x02UL<<SYS_GPE_MFPH_PE9MFP_Pos) /*!< GPE_MFPH PE9 setting for EBI_ADR11      \hideinitializer */
N#define SYS_GPE_MFPH_PE9MFP_USCI1_CTL0   (0x06UL<<SYS_GPE_MFPH_PE9MFP_Pos) /*!< GPE_MFPH PE9 setting for USCI1_CTL0     \hideinitializer */
N#define SYS_GPE_MFPH_PE9MFP_UART2_RXD    (0x07UL<<SYS_GPE_MFPH_PE9MFP_Pos) /*!< GPE_MFPH PE9 setting for UART2_RXD      \hideinitializer */
N#define SYS_GPE_MFPH_PE9MFP_PWM0_CH1     (0x0AUL<<SYS_GPE_MFPH_PE9MFP_Pos) /*!< GPE_MFPH PE9 setting for PWM0_CH1       \hideinitializer */
N#define SYS_GPE_MFPH_PE9MFP_PWM0_BRAKE1  (0x0BUL<<SYS_GPE_MFPH_PE9MFP_Pos) /*!< GPE_MFPH PE9 setting for PWM0_BRAKE1    \hideinitializer */
N
N/* PE.10 MFP */
N#define SYS_GPE_MFPH_PE10MFP_GPIO        (0x00UL<<SYS_GPE_MFPH_PE10MFP_Pos)/*!< GPE_MFPH PE10 setting for GPIO          \hideinitializer */
N#define SYS_GPE_MFPH_PE10MFP_EBI_ADR12   (0x02UL<<SYS_GPE_MFPH_PE10MFP_Pos)/*!< GPE_MFPH PE10 setting for EBI_ADR12     \hideinitializer */
N#define SYS_GPE_MFPH_PE10MFP_USCI1_DAT0  (0x06UL<<SYS_GPE_MFPH_PE10MFP_Pos)/*!< GPE_MFPH PE10 setting for USCI1_DAT0    \hideinitializer */
N#define SYS_GPE_MFPH_PE10MFP_UART3_TXD   (0x07UL<<SYS_GPE_MFPH_PE10MFP_Pos)/*!< GPE_MFPH PE10 setting for UART3_TXD     \hideinitializer */
N#define SYS_GPE_MFPH_PE10MFP_PWM0_CH2    (0x0AUL<<SYS_GPE_MFPH_PE10MFP_Pos)/*!< GPE_MFPH PE10 setting for PWM0_CH2      \hideinitializer */
N#define SYS_GPE_MFPH_PE10MFP_PWM1_BRAKE0 (0x0BUL<<SYS_GPE_MFPH_PE10MFP_Pos)/*!< GPE_MFPH PE10 setting for PWM1_BRAKE0    \hideinitializer */
N
N/* PE.11 MFP */
N#define SYS_GPE_MFPH_PE11MFP_GPIO        (0x00UL<<SYS_GPE_MFPH_PE11MFP_Pos)/*!< GPE_MFPH PE11 setting for GPIO          \hideinitializer */
N#define SYS_GPE_MFPH_PE11MFP_EBI_ADR13   (0x02UL<<SYS_GPE_MFPH_PE11MFP_Pos)/*!< GPE_MFPH PE11 setting for EBI_ADR13     \hideinitializer */
N#define SYS_GPE_MFPH_PE11MFP_USCI1_DAT1  (0x06UL<<SYS_GPE_MFPH_PE11MFP_Pos)/*!< GPE_MFPH PE11 setting for USCI1_DAT1    \hideinitializer */
N#define SYS_GPE_MFPH_PE11MFP_UART3_RXD   (0x07UL<<SYS_GPE_MFPH_PE11MFP_Pos)/*!< GPE_MFPH PE11 setting for UART3_RXD     \hideinitializer */
N#define SYS_GPE_MFPH_PE11MFP_UART1_nCTS  (0x08UL<<SYS_GPE_MFPH_PE11MFP_Pos)/*!< GPE_MFPH PE11 setting for UART1_nCTS    \hideinitializer */
N#define SYS_GPE_MFPH_PE11MFP_PWM0_CH3    (0x0AUL<<SYS_GPE_MFPH_PE11MFP_Pos)/*!< GPE_MFPH PE11 setting for PWM0_CH3      \hideinitializer */
N#define SYS_GPE_MFPH_PE11MFP_PWM1_BRAKE1 (0x0BUL<<SYS_GPE_MFPH_PE11MFP_Pos)/*!< GPE_MFPH PE11 setting for PWM1_BRAKE1   \hideinitializer */
N
N/* PE.12 MFP */
N#define SYS_GPE_MFPH_PE12MFP_GPIO        (0x00UL<<SYS_GPE_MFPH_PE12MFP_Pos)/*!< GPE_MFPH PE12 setting for GPIO          \hideinitializer */
N#define SYS_GPE_MFPH_PE12MFP_EBI_ADR14   (0x02UL<<SYS_GPE_MFPH_PE12MFP_Pos)/*!< GPE_MFPH PE12 setting for EBI_ADR14     \hideinitializer */
N#define SYS_GPE_MFPH_PE12MFP_USCI1_CLK   (0x06UL<<SYS_GPE_MFPH_PE12MFP_Pos)/*!< GPE_MFPH PE12 setting for USCI1_CLK     \hideinitializer */
N#define SYS_GPE_MFPH_PE12MFP_UART1_nRTS  (0x08UL<<SYS_GPE_MFPH_PE12MFP_Pos)/*!< GPE_MFPH PE12 setting for UART1_nRTS    \hideinitializer */
N#define SYS_GPE_MFPH_PE12MFP_PWM0_CH4    (0x0AUL<<SYS_GPE_MFPH_PE12MFP_Pos)/*!< GPE_MFPH PE12 setting for PWM0_CH4      \hideinitializer */
N
N/* PE.13 MFP */
N#define SYS_GPE_MFPH_PE13MFP_GPIO        (0x00UL<<SYS_GPE_MFPH_PE13MFP_Pos)/*!< GPE_MFPH PE13 setting for GPIO          \hideinitializer */
N#define SYS_GPE_MFPH_PE13MFP_EBI_ADR15   (0x02UL<<SYS_GPE_MFPH_PE13MFP_Pos)/*!< GPE_MFPH PE13 setting for EBI_ADR15     \hideinitializer */
N#define SYS_GPE_MFPH_PE13MFP_I2C0_SCL    (0x04UL<<SYS_GPE_MFPH_PE13MFP_Pos)/*!< GPE_MFPH PE13 setting for I2C0_SCL      \hideinitializer */
N#define SYS_GPE_MFPH_PE13MFP_UART4_nRTS  (0x05UL<<SYS_GPE_MFPH_PE13MFP_Pos)/*!< GPE_MFPH PE13 setting for UART4_nRTS    \hideinitializer */
N#define SYS_GPE_MFPH_PE13MFP_UART1_TXD   (0x08UL<<SYS_GPE_MFPH_PE13MFP_Pos)/*!< GPE_MFPH PE13 setting for UART1_TXD     \hideinitializer */
N#define SYS_GPE_MFPH_PE13MFP_PWM0_CH5    (0x0AUL<<SYS_GPE_MFPH_PE13MFP_Pos)/*!< GPE_MFPH PE13 setting for PWM0_CH5      \hideinitializer */
N#define SYS_GPE_MFPH_PE13MFP_PWM1_CH0    (0x0BUL<<SYS_GPE_MFPH_PE13MFP_Pos)/*!< GPE_MFPH PE13 setting for PWM1_CH0      \hideinitializer */
N#define SYS_GPE_MFPH_PE13MFP_BPWM1_CH5   (0x0CUL<<SYS_GPE_MFPH_PE13MFP_Pos)/*!< GPE_MFPH PE13 setting for BPWM1_CH5     \hideinitializer */
N
N/* PE.14 MFP */
N#define SYS_GPE_MFPH_PE14MFP_GPIO        (0x00UL<<SYS_GPE_MFPH_PE14MFP_Pos)/*!< GPE_MFPH PE14 setting for GPIO      \hideinitializer */
N#define SYS_GPE_MFPH_PE14MFP_EBI_AD8     (0x02UL<<SYS_GPE_MFPH_PE14MFP_Pos)/*!< GPE_MFPH PE14 setting for EBI_AD8   \hideinitializer */
N#define SYS_GPE_MFPH_PE14MFP_UART2_TXD   (0x03UL<<SYS_GPE_MFPH_PE14MFP_Pos)/*!< GPE_MFPH PE14 setting for UART2_TXD \hideinitializer */
N#define SYS_GPE_MFPH_PE14MFP_UART6_TXD   (0x06UL<<SYS_GPE_MFPH_PE14MFP_Pos)/*!< GPE_MFPH PE14 setting for UART6_TXD \hideinitializer */
N
N/* PE.15 MFP */
N#define SYS_GPE_MFPH_PE15MFP_GPIO        (0x00UL<<SYS_GPE_MFPH_PE15MFP_Pos)/*!< GPE_MFPH PE15 setting for GPIO      \hideinitializer */
N#define SYS_GPE_MFPH_PE15MFP_EBI_AD9     (0x02UL<<SYS_GPE_MFPH_PE15MFP_Pos)/*!< GPE_MFPH PE15 setting for EBI_AD9   \hideinitializer */
N#define SYS_GPE_MFPH_PE15MFP_UART2_RXD   (0x03UL<<SYS_GPE_MFPH_PE15MFP_Pos)/*!< GPE_MFPH PE15 setting for UART2_RXD \hideinitializer */
N#define SYS_GPE_MFPH_PE15MFP_UART6_RXD   (0x06UL<<SYS_GPE_MFPH_PE15MFP_Pos)/*!< GPE_MFPH PE15 setting for UART6_RXD \hideinitializer */
N
N/* PF.0 MFP */
N#define SYS_GPF_MFPL_PF0MFP_GPIO         (0x00UL<<SYS_GPF_MFPL_PF0MFP_Pos) /*!< GPF_MFPL PF0 setting for GPIO        \hideinitializer */
N#define SYS_GPF_MFPL_PF0MFP_UART1_TXD    (0x02UL<<SYS_GPF_MFPL_PF0MFP_Pos) /*!< GPF_MFPL PF0 setting for UART1_TXD   \hideinitializer */
N#define SYS_GPF_MFPL_PF0MFP_I2C1_SCL     (0x03UL<<SYS_GPF_MFPL_PF0MFP_Pos) /*!< GPF_MFPL PF0 setting for I2C1_SCL    \hideinitializer */
N#define SYS_GPF_MFPL_PF0MFP_UART0_TXD    (0x04UL<<SYS_GPF_MFPL_PF0MFP_Pos) /*!< GPF_MFPL PF0 setting for UART0_TXD   \hideinitializer */
N#define SYS_GPF_MFPL_PF0MFP_BPWM1_CH0    (0x0CUL<<SYS_GPF_MFPL_PF0MFP_Pos) /*!< GPF_MFPL PF0 setting for BPWM1_CH0   \hideinitializer */
N#define SYS_GPF_MFPL_PF0MFP_BPWM0_CH5    (0x0DUL<<SYS_GPF_MFPL_PF0MFP_Pos) /*!< GPF_MFPL PF0 setting for BPWM0_CH5   \hideinitializer */
N#define SYS_GPF_MFPL_PF0MFP_ICE_DAT      (0x0EUL<<SYS_GPF_MFPL_PF0MFP_Pos) /*!< GPF_MFPL PF0 setting for ICE_DAT     \hideinitializer */
N
N/* PF.1 MFP */
N#define SYS_GPF_MFPL_PF1MFP_GPIO         (0x00UL<<SYS_GPF_MFPL_PF1MFP_Pos) /*!< GPF_MFPL PF1 setting for GPIO        \hideinitializer */
N#define SYS_GPF_MFPL_PF1MFP_UART1_RXD    (0x02UL<<SYS_GPF_MFPL_PF1MFP_Pos) /*!< GPF_MFPL PF1 setting for UART1_RXD   \hideinitializer */
N#define SYS_GPF_MFPL_PF1MFP_I2C1_SDA     (0x03UL<<SYS_GPF_MFPL_PF1MFP_Pos) /*!< GPF_MFPL PF1 setting for I2C1_SDA    \hideinitializer */
N#define SYS_GPF_MFPL_PF1MFP_UART0_RXD    (0x04UL<<SYS_GPF_MFPL_PF1MFP_Pos) /*!< GPF_MFPL PF1 setting for UART0_RXD   \hideinitializer */
N#define SYS_GPF_MFPL_PF1MFP_BPWM1_CH1    (0x0CUL<<SYS_GPF_MFPL_PF1MFP_Pos) /*!< GPF_MFPL PF1 setting for BPWM1_CH1   \hideinitializer */
N#define SYS_GPF_MFPL_PF1MFP_BPWM0_CH4    (0x0DUL<<SYS_GPF_MFPL_PF1MFP_Pos) /*!< GPF_MFPL PF1 setting for BPWM0_CH4   \hideinitializer */
N#define SYS_GPF_MFPL_PF1MFP_ICE_CLK      (0x0EUL<<SYS_GPF_MFPL_PF1MFP_Pos) /*!< GPF_MFPL PF1 setting for ICE_CLK     \hideinitializer */
N
N/* PF.2 MFP */
N#define SYS_GPF_MFPL_PF2MFP_GPIO         (0x00UL<<SYS_GPF_MFPL_PF2MFP_Pos) /*!< GPF_MFPL PF2 setting for GPIO        \hideinitializer */
N#define SYS_GPF_MFPL_PF2MFP_EBI_nCS1     (0x02UL<<SYS_GPF_MFPL_PF2MFP_Pos) /*!< GPF_MFPL PF2 setting for EBI_nCS1    \hideinitializer */
N#define SYS_GPF_MFPL_PF2MFP_UART0_RXD    (0x03UL<<SYS_GPF_MFPL_PF2MFP_Pos) /*!< GPF_MFPL PF2 setting for UART0_RXD   \hideinitializer */
N#define SYS_GPF_MFPL_PF2MFP_I2C0_SDA     (0x04UL<<SYS_GPF_MFPL_PF2MFP_Pos) /*!< GPF_MFPL PF2 setting for I2C0_SDA    \hideinitializer */
N#define SYS_GPF_MFPL_PF2MFP_QSPI0_CLK    (0x05UL<<SYS_GPF_MFPL_PF2MFP_Pos) /*!< GPF_MFPL PF2 setting for QSPI0_CLK   \hideinitializer */
N#define SYS_GPF_MFPL_PF2MFP_XT1_OUT      (0x0AUL<<SYS_GPF_MFPL_PF2MFP_Pos) /*!< GPF_MFPL PF2 setting for XT1_OUT     \hideinitializer */
N#define SYS_GPF_MFPL_PF2MFP_BPWM1_CH1    (0x0BUL<<SYS_GPF_MFPL_PF2MFP_Pos) /*!< GPF_MFPL PF2 setting for BPWM1_CH1   \hideinitializer */
N#define SYS_GPF_MFPL_PF2MFP_USCI1_CTL1   (0x0CUL<<SYS_GPF_MFPL_PF2MFP_Pos) /*!< GPF_MFPL PF2 setting for USCI1_CTL1  \hideinitializer */
N
N/* PF.3 MFP */
N#define SYS_GPF_MFPL_PF3MFP_GPIO         (0x00UL<<SYS_GPF_MFPL_PF3MFP_Pos) /*!< GPF_MFPL PF3 setting for GPIO        \hideinitializer */
N#define SYS_GPF_MFPL_PF3MFP_EBI_nCS0     (0x02UL<<SYS_GPF_MFPL_PF3MFP_Pos) /*!< GPF_MFPL PF3 setting for EBI_nCS0    \hideinitializer */
N#define SYS_GPF_MFPL_PF3MFP_UART0_TXD    (0x03UL<<SYS_GPF_MFPL_PF3MFP_Pos) /*!< GPF_MFPL PF3 setting for UART0_TXD   \hideinitializer */
N#define SYS_GPF_MFPL_PF3MFP_I2C0_SCL     (0x04UL<<SYS_GPF_MFPL_PF3MFP_Pos) /*!< GPF_MFPL PF3 setting for I2C0_SCL    \hideinitializer */
N#define SYS_GPF_MFPL_PF3MFP_XT1_IN       (0x0AUL<<SYS_GPF_MFPL_PF3MFP_Pos) /*!< GPF_MFPL PF3 setting for XT1_IN      \hideinitializer */
N#define SYS_GPF_MFPL_PF3MFP_BPWM1_CH0    (0x0BUL<<SYS_GPF_MFPL_PF3MFP_Pos) /*!< GPF_MFPL PF3 setting for BPWM1_CH0   \hideinitializer */
N#define SYS_GPF_MFPL_PF3MFP_USCI1_CTL0   (0x0CUL<<SYS_GPF_MFPL_PF3MFP_Pos) /*!< GPF_MFPL PF3 setting for USCI1_CTL0  \hideinitializer */
N
N/* PF.4 MFP */
N#define SYS_GPF_MFPL_PF4MFP_GPIO         (0x00UL<<SYS_GPF_MFPL_PF4MFP_Pos) /*!< GPF_MFPL PF4 setting for GPIO        \hideinitializer */
N#define SYS_GPF_MFPL_PF4MFP_UART2_TXD    (0x02UL<<SYS_GPF_MFPL_PF4MFP_Pos) /*!< GPF_MFPL PF4 setting for UART2_TXD   \hideinitializer */
N#define SYS_GPF_MFPL_PF4MFP_QSPI0_MOSI1  (0x03UL<<SYS_GPF_MFPL_PF4MFP_Pos) /*!< GPF_MFPL PF4 setting for QSPI0_MOSI1 \hideinitializer */
N#define SYS_GPF_MFPL_PF4MFP_UART2_nRTS   (0x04UL<<SYS_GPF_MFPL_PF4MFP_Pos) /*!< GPF_MFPL PF4 setting for UART2_nRTS  \hideinitializer */
N#define SYS_GPF_MFPL_PF4MFP_PWM0_CH1     (0x07UL<<SYS_GPF_MFPL_PF4MFP_Pos) /*!< GPF_MFPL PF4 setting for PWM0_CH1    \hideinitializer */
N#define SYS_GPF_MFPL_PF4MFP_BPWM0_CH5    (0x08UL<<SYS_GPF_MFPL_PF4MFP_Pos) /*!< GPF_MFPL PF4 setting for BPWM0_CH5   \hideinitializer */
N#define SYS_GPF_MFPL_PF4MFP_X32_OUT      (0x0AUL<<SYS_GPF_MFPL_PF4MFP_Pos) /*!< GPF_MFPL PF4 setting for X32_OUT     \hideinitializer */
N
N/* PF.5 MFP */
N#define SYS_GPF_MFPL_PF5MFP_GPIO         (0x00UL<<SYS_GPF_MFPL_PF5MFP_Pos) /*!< GPF_MFPL PF5 setting for GPIO        \hideinitializer */
N#define SYS_GPF_MFPL_PF5MFP_UART2_RXD    (0x02UL<<SYS_GPF_MFPL_PF5MFP_Pos) /*!< GPF_MFPL PF5 setting for UART2_RXD   \hideinitializer */
N#define SYS_GPF_MFPL_PF5MFP_QSPI0_MISO1  (0x03UL<<SYS_GPF_MFPL_PF5MFP_Pos) /*!< GPF_MFPL PF5 setting for QSPI0_MISO1 \hideinitializer */
N#define SYS_GPF_MFPL_PF5MFP_UART2_nCTS   (0x04UL<<SYS_GPF_MFPL_PF5MFP_Pos) /*!< GPF_MFPL PF5 setting for UART2_nCTS  \hideinitializer */
N#define SYS_GPF_MFPL_PF5MFP_PWM0_CH0     (0x07UL<<SYS_GPF_MFPL_PF5MFP_Pos) /*!< GPF_MFPL PF5 setting for PWM0_CH0    \hideinitializer */
N#define SYS_GPF_MFPL_PF5MFP_BPWM0_CH4    (0x08UL<<SYS_GPF_MFPL_PF5MFP_Pos) /*!< GPF_MFPL PF5 setting for BPWM0_CH4   \hideinitializer */
N#define SYS_GPF_MFPL_PF5MFP_X32_IN       (0x0AUL<<SYS_GPF_MFPL_PF5MFP_Pos) /*!< GPF_MFPL PF5 setting for X32_IN      \hideinitializer */
N#define SYS_GPF_MFPL_PF5MFP_ADC_ST       (0x0BUL<<SYS_GPF_MFPL_PF5MFP_Pos) /*!< GPF_MFPL PF5 setting for ADC_ST      \hideinitializer */
N#define SYS_GPF_MFPL_PF5MFP_ADC0_ST      (0x0BUL<<SYS_GPF_MFPL_PF5MFP_Pos) /*!< GPF_MFPL PF5 setting for ADC0_ST     \hideinitializer */
N
N/* PF.6 MFP */
N#define SYS_GPF_MFPL_PF6MFP_GPIO         (0x00UL<<SYS_GPF_MFPL_PF6MFP_Pos) /*!< GPF_MFPL PF6 setting for GPIO        \hideinitializer */
N#define SYS_GPF_MFPL_PF6MFP_EBI_ADR19    (0x02UL<<SYS_GPF_MFPL_PF6MFP_Pos) /*!< GPF_MFPL PF6 setting for EBI_ADR19   \hideinitializer */
N#define SYS_GPF_MFPL_PF6MFP_SPI0_MOSI    (0x05UL<<SYS_GPF_MFPL_PF6MFP_Pos) /*!< GPF_MFPL PF6 setting for SPI0_MOSI   \hideinitializer */
N#define SYS_GPF_MFPL_PF6MFP_UART4_RXD    (0x06UL<<SYS_GPF_MFPL_PF6MFP_Pos) /*!< GPF_MFPL PF6 setting for UART4_RXD   \hideinitializer */
N#define SYS_GPF_MFPL_PF6MFP_EBI_nCS0     (0x07UL<<SYS_GPF_MFPL_PF6MFP_Pos) /*!< GPF_MFPL PF6 setting for EBI_nCS0    \hideinitializer */
N
N/* PF.7 MFP */
N#define SYS_GPF_MFPL_PF7MFP_GPIO         (0x00UL<<SYS_GPF_MFPL_PF7MFP_Pos) /*!< GPF_MFPL PF7 setting for GPIO       \hideinitializer */
N#define SYS_GPF_MFPL_PF7MFP_EBI_ADR18    (0x02UL<<SYS_GPF_MFPL_PF7MFP_Pos) /*!< GPF_MFPL PF7 setting for EBI_ADR18  \hideinitializer */
N#define SYS_GPF_MFPL_PF7MFP_SPI0_MISO    (0x05UL<<SYS_GPF_MFPL_PF7MFP_Pos) /*!< GPF_MFPL PF7 setting for SPI0_MISO  \hideinitializer */
N#define SYS_GPF_MFPL_PF7MFP_UART4_TXD    (0x06UL<<SYS_GPF_MFPL_PF7MFP_Pos) /*!< GPF_MFPL PF7 setting for UART4_TXD  \hideinitializer */
N
N/* PF.8 MFP */
N#define SYS_GPF_MFPH_PF8MFP_GPIO         (0x00UL<<SYS_GPF_MFPH_PF8MFP_Pos) /*!< GPF_MFPH PF8 setting for GPIO       \hideinitializer */
N#define SYS_GPF_MFPH_PF8MFP_EBI_ADR17    (0x02UL<<SYS_GPF_MFPH_PF8MFP_Pos) /*!< GPF_MFPH PF8 setting for EBI_ADR17  \hideinitializer */
N#define SYS_GPF_MFPH_PF8MFP_SPI0_CLK     (0x05UL<<SYS_GPF_MFPH_PF8MFP_Pos) /*!< GPF_MFPH PF8 setting for SPI0_CLK   \hideinitializer */
N#define SYS_GPF_MFPH_PF8MFP_UART5_nCTS   (0x06UL<<SYS_GPF_MFPH_PF8MFP_Pos) /*!< GPF_MFPH PF8 setting for UART5_nCTS \hideinitializer */
N
N/* PF.9 MFP */
N#define SYS_GPF_MFPH_PF9MFP_GPIO         (0x00UL<<SYS_GPF_MFPH_PF9MFP_Pos) /*!< GPF_MFPH PF9 setting for GPIO       \hideinitializer */
N#define SYS_GPF_MFPH_PF9MFP_EBI_ADR16    (0x02UL<<SYS_GPF_MFPH_PF9MFP_Pos) /*!< GPF_MFPH PF9 setting for EBI_ADR16  \hideinitializer */
N#define SYS_GPF_MFPH_PF9MFP_SPI0_SS      (0x05UL<<SYS_GPF_MFPH_PF9MFP_Pos) /*!< GPF_MFPH PF9 setting for SPI0_SS    \hideinitializer */
N#define SYS_GPF_MFPH_PF9MFP_UART5_nRTS   (0x06UL<<SYS_GPF_MFPH_PF9MFP_Pos) /*!< GPF_MFPH PF9 setting for UART5_nRTS \hideinitializer */
N
N/* PF.10 MFP */
N#define SYS_GPF_MFPH_PF10MFP_GPIO         (0x00UL<<SYS_GPF_MFPH_PF10MFP_Pos)/*!< GPF_MFPH PF10 setting for GPIO         \hideinitializer */
N#define SYS_GPF_MFPH_PF10MFP_EBI_ADR15    (0x02UL<<SYS_GPF_MFPH_PF10MFP_Pos)/*!< GPF_MFPH PF10 setting for EBI_ADR15    \hideinitializer */
N#define SYS_GPF_MFPH_PF10MFP_SPI0_I2SMCLK (0x05UL<<SYS_GPF_MFPH_PF10MFP_Pos)/*!< GPF_MFPH PF10 setting for SPI0_I2SMCLK \hideinitializer */
N#define SYS_GPF_MFPH_PF10MFP_UART5_RXD    (0x06UL<<SYS_GPF_MFPH_PF10MFP_Pos)/*!< GPF_MFPH PF10 setting for UART5_RXD    \hideinitializer */
N
N/* PF.11 MFP */
N#define SYS_GPF_MFPH_PF11MFP_GPIO        (0x00UL<<SYS_GPF_MFPH_PF11MFP_Pos)/*!< GPF_MFPH PF11 setting for GPIO      \hideinitializer */
N#define SYS_GPF_MFPH_PF11MFP_EBI_ADR14   (0x02UL<<SYS_GPF_MFPH_PF11MFP_Pos)/*!< GPF_MFPH PF11 setting for EBI_ADR14 \hideinitializer */
N#define SYS_GPF_MFPH_PF11MFP_UART5_TXD   (0x06UL<<SYS_GPF_MFPH_PF11MFP_Pos)/*!< GPF_MFPH PF11 setting for UART5_TXD \hideinitializer */
N#define SYS_GPF_MFPH_PF11MFP_TM3         (0x0DUL<<SYS_GPF_MFPH_PF11MFP_Pos)/*!< GPF_MFPH PF11 setting for TM3       \hideinitializer */
N
N/* PF.12 MFP */
N
N/* PF.13 MFP */
N
N/* PF.14 MFP \hideinitializer */
N#define SYS_GPF_MFPH_PF14MFP_GPIO        (0x00UL<<SYS_GPF_MFPH_PF14MFP_Pos) /*!< GPF_MFPH PF14 setting for GPIO        \hideinitializer */
N#define SYS_GPF_MFPH_PF14MFP_PWM1_BRAKE0 (0x09UL<<SYS_GPF_MFPH_PF14MFP_Pos) /*!< GPF_MFPH PF14 setting for PWM1_BRAKE0 \hideinitializer */
N#define SYS_GPF_MFPH_PF14MFP_PWM0_BRAKE0 (0x0AUL<<SYS_GPF_MFPH_PF14MFP_Pos) /*!< GPF_MFPH PF14 setting for PWM0_BRAKE0 \hideinitializer */
N#define SYS_GPF_MFPH_PF14MFP_PWM0_CH4    (0x0CUL<<SYS_GPF_MFPH_PF14MFP_Pos) /*!< GPF_MFPH PF14 setting for PWM0_CH4    \hideinitializer */
N#define SYS_GPF_MFPH_PF14MFP_CLKO        (0x0DUL<<SYS_GPF_MFPH_PF14MFP_Pos) /*!< GPF_MFPH PF14 setting for CLKO        \hideinitializer */
N#define SYS_GPF_MFPH_PF14MFP_TM3         (0x0EUL<<SYS_GPF_MFPH_PF14MFP_Pos) /*!< GPF_MFPH PF14 setting for TM3         \hideinitializer */
N#define SYS_GPF_MFPH_PF14MFP_INT5        (0x0FUL<<SYS_GPF_MFPH_PF14MFP_Pos) /*!< GPF_MFPH PF14 setting for INT5        \hideinitializer */
N
N/* PF.15 MFP */
N#define SYS_GPF_MFPH_PF15MFP_GPIO        (0x00UL<<SYS_GPF_MFPH_PF15MFP_Pos) /*!< GPF_MFPH PF15 setting for GPIO        \hideinitializer */
N#define SYS_GPF_MFPH_PF15MFP_PWM0_BRAKE0 (0x0BUL<<SYS_GPF_MFPH_PF15MFP_Pos) /*!< GPF_MFPH PF15 setting for PWM0_BRAKE0 \hideinitializer */
N#define SYS_GPF_MFPH_PF15MFP_PWM0_CH1    (0x0CUL<<SYS_GPF_MFPH_PF15MFP_Pos) /*!< GPF_MFPH PF15 setting for PWM0_CH1    \hideinitializer */
N#define SYS_GPF_MFPH_PF15MFP_TM2         (0x0DUL<<SYS_GPF_MFPH_PF15MFP_Pos) /*!< GPF_MFPH PF15 setting for TM2         \hideinitializer */
N#define SYS_GPF_MFPH_PF15MFP_CLKO        (0x0EUL<<SYS_GPF_MFPH_PF15MFP_Pos) /*!< GPF_MFPH PF15 setting for CLKO        \hideinitializer */
N#define SYS_GPF_MFPH_PF15MFP_INT4        (0x0FUL<<SYS_GPF_MFPH_PF15MFP_Pos) /*!< GPF_MFPH PF15 setting for INT4        \hideinitializer */
N
N/* PG.0 MFP */
N
N/* PG.1 MFP */
N
N/* PG.2 MFP */
N#define SYS_GPG_MFPL_PG2MFP_GPIO         (0x00UL<<SYS_GPG_MFPL_PG2MFP_Pos) /*!< GPG_MFPL PG2 setting for GPIO       \hideinitializer */
N#define SYS_GPG_MFPL_PG2MFP_EBI_ADR11    (0x02UL<<SYS_GPG_MFPL_PG2MFP_Pos) /*!< GPG_MFPL PG2 setting for EBI_ADR11  \hideinitializer */
N#define SYS_GPG_MFPL_PG2MFP_I2C0_SMBAL   (0x04UL<<SYS_GPG_MFPL_PG2MFP_Pos) /*!< GPG_MFPL PG2 setting for I2C0_SMBAL \hideinitializer */
N#define SYS_GPG_MFPL_PG2MFP_I2C1_SCL     (0x05UL<<SYS_GPG_MFPL_PG2MFP_Pos) /*!< GPG_MFPL PG2 setting for I2C1_SCL   \hideinitializer */
N#define SYS_GPG_MFPL_PG2MFP_TM0          (0x0DUL<<SYS_GPG_MFPL_PG2MFP_Pos) /*!< GPG_MFPL PG2 setting for TM0        \hideinitializer */
N
N/* PG.3 MFP */
N#define SYS_GPG_MFPL_PG3MFP_GPIO         (0x00UL<<SYS_GPG_MFPL_PG3MFP_Pos) /*!< GPG_MFPL PG3 setting for GPIO       \hideinitializer */
N#define SYS_GPG_MFPL_PG3MFP_EBI_ADR12    (0x02UL<<SYS_GPG_MFPL_PG3MFP_Pos) /*!< GPG_MFPL PG3 setting for EBI_ADR12  \hideinitializer */
N#define SYS_GPG_MFPL_PG3MFP_I2C0_SMBSUS  (0x04UL<<SYS_GPG_MFPL_PG3MFP_Pos) /*!< GPG_MFPL PG3 setting for I2C0_SMBSUS \hideinitializer */
N#define SYS_GPG_MFPL_PG3MFP_I2C1_SDA     (0x05UL<<SYS_GPG_MFPL_PG3MFP_Pos) /*!< GPG_MFPL PG3 setting for I2C1_SDA   \hideinitializer */
N#define SYS_GPG_MFPL_PG3MFP_TM1          (0x0DUL<<SYS_GPG_MFPL_PG3MFP_Pos) /*!< GPG_MFPL PG3 setting for TM1        \hideinitializer */
N
N/* PG.4 MFP */
N#define SYS_GPG_MFPL_PG4MFP_GPIO         (0x00UL<<SYS_GPG_MFPL_PG4MFP_Pos) /*!< GPG_MFPL PG4 setting for GPIO       \hideinitializer */
N#define SYS_GPG_MFPL_PG4MFP_EBI_ADR13    (0x02UL<<SYS_GPG_MFPL_PG4MFP_Pos) /*!< GPG_MFPL PG4 setting for EBI_ADR13  \hideinitializer */
N#define SYS_GPG_MFPL_PG4MFP_TM2          (0x0DUL<<SYS_GPG_MFPL_PG4MFP_Pos) /*!< GPG_MFPL PG4 setting for TM2        \hideinitializer */
N
N/* PG.5 MFP */
N
N/* PG.6 MFP */
N
N/* PG.7 MFP */
N
N/* PG.8 MFP */
N
N/* PG.9 MFP */
N#define SYS_GPG_MFPH_PG9MFP_GPIO         (0x00UL<<SYS_GPG_MFPH_PG9MFP_Pos) /*!< GPG_MFPH PG9 setting for GPIO       \hideinitializer */
N#define SYS_GPG_MFPH_PG9MFP_EBI_AD0      (0x02UL<<SYS_GPG_MFPH_PG9MFP_Pos) /*!< GPG_MFPH PG9 setting for EBI_AD0    \hideinitializer */
N#define SYS_GPG_MFPH_PG9MFP_BPWM0_CH5    (0x0CUL<<SYS_GPG_MFPH_PG9MFP_Pos) /*!< GPG_MFPH PG9 setting for BPWM0_CH5  \hideinitializer */
N
N/* PG.10 MFP */
N#define SYS_GPG_MFPH_PG10MFP_GPIO        (0x00UL<<SYS_GPG_MFPH_PG10MFP_Pos)/*!< GPG_MFPH PG10 setting for GPIO      \hideinitializer */
N#define SYS_GPG_MFPH_PG10MFP_EBI_AD1     (0x02UL<<SYS_GPG_MFPH_PG10MFP_Pos)/*!< GPG_MFPH PG10 setting for EBI_AD1   \hideinitializer */
N#define SYS_GPG_MFPH_PG10MFP_BPWM0_CH4   (0x0CUL<<SYS_GPG_MFPH_PG10MFP_Pos)/*!< GPG_MFPH PG10 setting for BPWM0_CH4 \hideinitializer */
N
N/* PG.11 MFP */
N#define SYS_GPG_MFPH_PG11MFP_GPIO        (0x00UL<<SYS_GPG_MFPH_PG11MFP_Pos)/*!< GPG_MFPH PG11 setting for GPIO      \hideinitializer */
N#define SYS_GPG_MFPH_PG11MFP_EBI_AD2     (0x02UL<<SYS_GPG_MFPH_PG11MFP_Pos)/*!< GPG_MFPH PG11 setting for EBI_AD2   \hideinitializer */
N#define SYS_GPG_MFPH_PG11MFP_UART7_TXD   (0x06UL<<SYS_GPG_MFPH_PG11MFP_Pos)/*!< GPG_MFPH PG11 setting for UART7_TXD \hideinitializer */
N#define SYS_GPG_MFPH_PG11MFP_BPWM0_CH3   (0x0CUL<<SYS_GPG_MFPH_PG11MFP_Pos)/*!< GPG_MFPH PG11 setting for BPWM0_CH3 \hideinitializer */
N
N/* PG.12 MFP */
N#define SYS_GPG_MFPH_PG12MFP_GPIO        (0x00UL<<SYS_GPG_MFPH_PG12MFP_Pos)/*!< GPG_MFPH PG12 setting for GPIO      \hideinitializer */
N#define SYS_GPG_MFPH_PG12MFP_EBI_AD3     (0x02UL<<SYS_GPG_MFPH_PG12MFP_Pos)/*!< GPG_MFPH PG12 setting for EBI_AD3   \hideinitializer */
N#define SYS_GPG_MFPH_PG12MFP_UART7_RXD   (0x06UL<<SYS_GPG_MFPH_PG12MFP_Pos)/*!< GPG_MFPH PG12 setting for UART7_RXD \hideinitializer */
N#define SYS_GPG_MFPH_PG12MFP_BPWM0_CH2   (0x0CUL<<SYS_GPG_MFPH_PG12MFP_Pos)/*!< GPG_MFPH PG12 setting for BPWM0_CH2 \hideinitializer */
N
N/* PG.13 MFP */
N#define SYS_GPG_MFPH_PG13MFP_GPIO        (0x00UL<<SYS_GPG_MFPH_PG13MFP_Pos)/*!< GPG_MFPH PG13 setting for GPIO      \hideinitializer */
N#define SYS_GPG_MFPH_PG13MFP_EBI_AD4     (0x02UL<<SYS_GPG_MFPH_PG13MFP_Pos)/*!< GPG_MFPH PG13 setting for EBI_AD4   \hideinitializer */
N#define SYS_GPG_MFPH_PG13MFP_UART6_TXD   (0x06UL<<SYS_GPG_MFPH_PG13MFP_Pos)/*!< GPG_MFPH PG13 setting for UART6_TXD \hideinitializer */
N#define SYS_GPG_MFPH_PG13MFP_BPWM0_CH1   (0x0CUL<<SYS_GPG_MFPH_PG13MFP_Pos)/*!< GPG_MFPH PG13 setting for BPWM0_CH1 \hideinitializer */
N
N/* PG.14 MFP */
N#define SYS_GPG_MFPH_PG14MFP_GPIO        (0x00UL<<SYS_GPG_MFPH_PG14MFP_Pos)/*!< GPG_MFPH PG14 setting for GPIO      \hideinitializer */
N#define SYS_GPG_MFPH_PG14MFP_EBI_AD5     (0x02UL<<SYS_GPG_MFPH_PG14MFP_Pos)/*!< GPG_MFPH PG14 setting for EBI_AD5   \hideinitializer */
N#define SYS_GPG_MFPH_PG14MFP_UART6_RXD   (0x06UL<<SYS_GPG_MFPH_PG14MFP_Pos)/*!< GPG_MFPH PG14 setting for UART6_RXD \hideinitializer */
N#define SYS_GPG_MFPH_PG14MFP_BPWM0_CH0   (0x0CUL<<SYS_GPG_MFPH_PG14MFP_Pos)/*!< GPG_MFPH PG14 setting for BPWM0_CH0 \hideinitializer */
N
N/* PG.15 MFP */
N#define SYS_GPG_MFPH_PG15MFP_GPIO        (0x00UL<<SYS_GPG_MFPH_PG15MFP_Pos)/*!< GPG_MFPH PG15 setting for GPIO      \hideinitializer */
N#define SYS_GPG_MFPH_PG15MFP_CLKO        (0x0EUL<<SYS_GPG_MFPH_PG15MFP_Pos)/*!< GPG_MFPH PG15 setting for CLKO      \hideinitializer */
N#define SYS_GPG_MFPH_PG15MFP_ADC_ST      (0x0FUL<<SYS_GPG_MFPH_PG15MFP_Pos)/*!< GPG_MFPH PG15 setting for ADC_ST    \hideinitializer */
N#define SYS_GPG_MFPH_PG15MFP_ADC0_ST     (0x0FUL<<SYS_GPG_MFPH_PG15MFP_Pos)/*!< GPG_MFPH PG15 setting for ADC0_ST   \hideinitializer */
N
N/* PH.0 MFP */
N
N/* PH.1 MFP */
N
N/* PH.2 MFP */
N
N/* PH.3 MFP */
N
N/* PH.4 MFP */
N#define SYS_GPH_MFPL_PH4MFP_GPIO         (0x00UL<<SYS_GPH_MFPL_PH4MFP_Pos) /*!< GPH_MFPL PH4 setting for GPIO       \hideinitializer */
N#define SYS_GPH_MFPL_PH4MFP_EBI_ADR3     (0x02UL<<SYS_GPH_MFPL_PH4MFP_Pos) /*!< GPH_MFPL PH4 setting for EBI_ADR3   \hideinitializer */
N#define SYS_GPH_MFPL_PH4MFP_UART7_nRTS   (0x04UL<<SYS_GPH_MFPL_PH4MFP_Pos) /*!< GPH_MFPL PH4 setting for UART7_nRTS \hideinitializer */
N#define SYS_GPH_MFPL_PH4MFP_UART6_TXD    (0x05UL<<SYS_GPH_MFPL_PH4MFP_Pos) /*!< GPH_MFPL PH4 setting for UART6_TXD  \hideinitializer */
N
N/* PH.5 MFP */
N#define SYS_GPH_MFPL_PH5MFP_GPIO         (0x00UL<<SYS_GPH_MFPL_PH5MFP_Pos) /*!< GPH_MFPL PH5 setting for GPIO       \hideinitializer */
N#define SYS_GPH_MFPL_PH5MFP_EBI_ADR2     (0x02UL<<SYS_GPH_MFPL_PH5MFP_Pos) /*!< GPH_MFPL PH5 setting for EBI_ADR2   \hideinitializer */
N#define SYS_GPH_MFPL_PH5MFP_UART7_nCTS   (0x04UL<<SYS_GPH_MFPL_PH5MFP_Pos) /*!< GPH_MFPL PH5 setting for UART7_nCTS \hideinitializer */
N#define SYS_GPH_MFPL_PH5MFP_UART6_RXD    (0x05UL<<SYS_GPH_MFPL_PH5MFP_Pos) /*!< GPH_MFPL PH5 setting for UART6_RXD  \hideinitializer */
N
N/* PH.6 MFP */
N#define SYS_GPH_MFPL_PH6MFP_GPIO         (0x00UL<<SYS_GPH_MFPL_PH6MFP_Pos) /*!< GPH_MFPL PH6 setting for GPIO       \hideinitializer */
N#define SYS_GPH_MFPL_PH6MFP_EBI_ADR1     (0x02UL<<SYS_GPH_MFPL_PH6MFP_Pos) /*!< GPH_MFPL PH6 setting for EBI_ADR1   \hideinitializer */
N#define SYS_GPH_MFPL_PH6MFP_UART7_TXD    (0x04UL<<SYS_GPH_MFPL_PH6MFP_Pos) /*!< GPH_MFPL PH6 setting for UART7_TXD  \hideinitializer */
N
N/* PH.7 MFP */
N#define SYS_GPH_MFPL_PH7MFP_GPIO         (0x00UL<<SYS_GPH_MFPL_PH7MFP_Pos) /*!< GPH_MFPL PH7 setting for GPIO       \hideinitializer */
N#define SYS_GPH_MFPL_PH7MFP_EBI_ADR0     (0x02UL<<SYS_GPH_MFPL_PH7MFP_Pos) /*!< GPH_MFPL PH7 setting for EBI_ADR0   \hideinitializer */
N#define SYS_GPH_MFPL_PH7MFP_UART7_RXD    (0x04UL<<SYS_GPH_MFPL_PH7MFP_Pos) /*!< GPH_MFPL PH7 setting for UART7_RXD  \hideinitializer */
N
N/* PH.8 MFP */
N#define SYS_GPH_MFPH_PH8MFP_GPIO         (0x00UL<<SYS_GPH_MFPH_PH8MFP_Pos) /*!< GPH_MFPH PH8 setting for GPIO       \hideinitializer */
N#define SYS_GPH_MFPH_PH8MFP_EBI_AD12     (0x02UL<<SYS_GPH_MFPH_PH8MFP_Pos) /*!< GPH_MFPH PH8 setting for EBI_AD12   \hideinitializer */
N#define SYS_GPH_MFPH_PH8MFP_QSPI0_CLK    (0x03UL<<SYS_GPH_MFPH_PH8MFP_Pos) /*!< GPH_MFPH PH8 setting for QSPI0_CLK  \hideinitializer */
N#define SYS_GPH_MFPH_PH8MFP_UART3_nRTS   (0x07UL<<SYS_GPH_MFPH_PH8MFP_Pos) /*!< GPH_MFPH PH8 setting for UART3_nRTS \hideinitializer */
N#define SYS_GPH_MFPH_PH8MFP_UART1_TXD    (0x0AUL<<SYS_GPH_MFPH_PH8MFP_Pos) /*!< GPH_MFPH PH8 setting for UART1_TXD  \hideinitializer */
N
N/* PH.9 MFP */
N#define SYS_GPH_MFPH_PH9MFP_GPIO         (0x00UL<<SYS_GPH_MFPH_PH9MFP_Pos) /*!< GPH_MFPH PH9 setting for GPIO       \hideinitializer */
N#define SYS_GPH_MFPH_PH9MFP_EBI_AD13     (0x02UL<<SYS_GPH_MFPH_PH9MFP_Pos) /*!< GPH_MFPH PH9 setting for EBI_AD13   \hideinitializer */
N#define SYS_GPH_MFPH_PH9MFP_QSPI0_SS     (0x03UL<<SYS_GPH_MFPH_PH9MFP_Pos) /*!< GPH_MFPH PH9 setting for QSPI0_SS   \hideinitializer */
N#define SYS_GPH_MFPH_PH9MFP_UART3_nCTS   (0x07UL<<SYS_GPH_MFPH_PH9MFP_Pos) /*!< GPH_MFPH PH9 setting for UART3_nCTS \hideinitializer */
N#define SYS_GPH_MFPH_PH9MFP_UART1_RXD    (0x0AUL<<SYS_GPH_MFPH_PH9MFP_Pos) /*!< GPH_MFPH PH9 setting for UART1_RXD  \hideinitializer */
N
N/* PH.10 MFP */
N#define SYS_GPH_MFPH_PH10MFP_GPIO        (0x00UL<<SYS_GPH_MFPH_PH10MFP_Pos)/*!< GPH_MFPH PH10 setting for GPIO          \hideinitializer */
N#define SYS_GPH_MFPH_PH10MFP_EBI_AD14    (0x02UL<<SYS_GPH_MFPH_PH10MFP_Pos)/*!< GPH_MFPH PH10 setting for EBI_AD14      \hideinitializer */
N#define SYS_GPH_MFPH_PH10MFP_QSPI0_MISO1 (0x03UL<<SYS_GPH_MFPH_PH10MFP_Pos)/*!< GPH_MFPH PH10 setting for QSPI0_MISO1   \hideinitializer */
N#define SYS_GPH_MFPH_PH10MFP_UART4_TXD   (0x07UL<<SYS_GPH_MFPH_PH10MFP_Pos)/*!< GPH_MFPH PH10 setting for UART4_TXD     \hideinitializer */
N#define SYS_GPH_MFPH_PH10MFP_UART0_TXD   (0x08UL<<SYS_GPH_MFPH_PH10MFP_Pos)/*!< GPH_MFPH PH10 setting for UART0_TXD     \hideinitializer */
N
N/* PH.11 MFP */
N#define SYS_GPH_MFPH_PH11MFP_GPIO        (0x00UL<<SYS_GPH_MFPH_PH11MFP_Pos)/*!< GPH_MFPH PH11 setting for GPIO          \hideinitializer */
N#define SYS_GPH_MFPH_PH11MFP_EBI_AD15    (0x02UL<<SYS_GPH_MFPH_PH11MFP_Pos)/*!< GPH_MFPH PH11 setting for EBI_AD15      \hideinitializer */
N#define SYS_GPH_MFPH_PH11MFP_QSPI0_MOSI1 (0x03UL<<SYS_GPH_MFPH_PH11MFP_Pos)/*!< GPH_MFPH PH11 setting for QSPI0_MOSI1   \hideinitializer */
N#define SYS_GPH_MFPH_PH11MFP_UART4_RXD   (0x07UL<<SYS_GPH_MFPH_PH11MFP_Pos)/*!< GPH_MFPH PH11 setting for UART4_RXD     \hideinitializer */
N#define SYS_GPH_MFPH_PH11MFP_UART0_RXD   (0x08UL<<SYS_GPH_MFPH_PH11MFP_Pos)/*!< GPH_MFPH PH11 setting for UART0_RXD     \hideinitializer */
N#define SYS_GPH_MFPH_PH11MFP_PWM0_CH5    (0x0BUL<<SYS_GPH_MFPH_PH11MFP_Pos)/*!< GPH_MFPH PH11 setting for PWM0_CH5      \hideinitializer */
N
N/* PH.12 MFP */
N
N/* PH.13 MFP */
N
N/* PH.14 MFP */
N
N/* PH.15 MFP */
N
N
N/*@}*/ /* end of group SYS_EXPORTED_CONSTANTS */
N
N/** @addtogroup SYS_EXPORTED_FUNCTIONS SYS Exported Functions
N  @{
N*/
N
N
N/**
N  * @brief      Clear Brown-out detector interrupt flag
N  * @param      None
N  * @return     None
N  * @details    This macro clear Brown-out detector interrupt flag.
N  * \hideinitializer
N  */
N#define SYS_CLEAR_BOD_INT_FLAG()        (SYS->BODCTL |= SYS_BODCTL_BODIF_Msk)
N
N/**
N  * @brief      Set Brown-out detector function to normal mode
N  * @param      None
N  * @return     None
N  * @details    This macro set Brown-out detector to normal mode.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_CLEAR_BOD_LPM()             (SYS->BODCTL &= ~SYS_BODCTL_BODLPM_Msk)
N
N/**
N  * @brief      Disable Brown-out detector function
N  * @param      None
N  * @return     None
N  * @details    This macro disable Brown-out detector function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_DISABLE_BOD()               (SYS->BODCTL &= ~SYS_BODCTL_BODEN_Msk)
N
N/**
N  * @brief      Enable Brown-out detector function
N  * @param      None
N  * @return     None
N  * @details    This macro enable Brown-out detector function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_ENABLE_BOD()                (SYS->BODCTL |= SYS_BODCTL_BODEN_Msk)
N
N/**
N  * @brief      Get Brown-out detector interrupt flag
N  * @param      None
N  * @retval     0   Brown-out detect interrupt flag is not set.
N  * @retval     >=1 Brown-out detect interrupt flag is set.
N  * @details    This macro get Brown-out detector interrupt flag.
N  * \hideinitializer
N  */
N#define SYS_GET_BOD_INT_FLAG()          (SYS->BODCTL & SYS_BODCTL_BODIF_Msk)
N
N/**
N  * @brief      Get Brown-out detector status
N  * @param      None
N  * @retval     0   System voltage is higher than BOD threshold voltage setting or BOD function is disabled.
N  * @retval     >=1 System voltage is lower than BOD threshold voltage setting.
N  * @details    This macro get Brown-out detector output status.
N  *             If the BOD function is disabled, this function always return 0.
N  * \hideinitializer
N  */
N#define SYS_GET_BOD_OUTPUT()            (SYS->BODCTL & SYS_BODCTL_BODOUT_Msk)
N
N/**
N  * @brief      Disable Brown-out detector reset function
N  * @param      None
N  * @return     None
N  * @details    This macro disable Brown-out detector reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_DISABLE_BOD_RST()           (SYS->BODCTL &= ~SYS_BODCTL_BODRSTEN_Msk)
N
N/**
N  * @brief      Enable Brown-out detector reset function
N  * @param      None
N  * @return     None
N  * @details    This macro enable Brown-out detect reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_ENABLE_BOD_RST()            (SYS->BODCTL |= SYS_BODCTL_BODRSTEN_Msk)
N
N/**
N  * @brief      Set Brown-out detector function low power mode
N  * @param      None
N  * @return     None
N  * @details    This macro set Brown-out detector to low power mode.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_SET_BOD_LPM()               (SYS->BODCTL |= SYS_BODCTL_BODLPM_Msk)
N
N/**
N  * @brief      Set Brown-out detector voltage level
N  * @param[in]  u32Level is Brown-out voltage level. Including :
N  *             - \ref SYS_BODCTL_BODVL_2_5V
N  *             - \ref SYS_BODCTL_BODVL_2_0V
N  * @return     None
N  * @details    This macro set Brown-out detector voltage level.
N  *             The write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_SET_BOD_LEVEL(u32Level)     (SYS->BODCTL = (SYS->BODCTL & ~SYS_BODCTL_BODVL_Msk) | (u32Level))
N
N/**
N  * @brief      Get reset source is from Brown-out detector reset
N  * @param      None
N  * @retval     0   Previous reset source is not from Brown-out detector reset
N  * @retval     >=1 Previous reset source is from Brown-out detector reset
N  * @details    This macro get previous reset source is from Brown-out detect reset or not.
N  * \hideinitializer
N  */
N#define SYS_IS_BOD_RST()                (SYS->RSTSTS & SYS_RSTSTS_BODRF_Msk)
N
N/**
N  * @brief      Get reset source is from CPU reset
N  * @param      None
N  * @retval     0   Previous reset source is not from CPU reset
N  * @retval     >=1 Previous reset source is from CPU reset
N  * @details    This macro get previous reset source is from CPU reset.
N  * \hideinitializer
N  */
N#define SYS_IS_CPU_RST()                (SYS->RSTSTS & SYS_RSTSTS_CPURF_Msk)
N
N/**
N  * @brief      Get reset source is from LVR Reset
N  * @param      None
N  * @retval     0   Previous reset source is not from Low-Voltage-Reset
N  * @retval     >=1 Previous reset source is from Low-Voltage-Reset
N  * @details    This macro get previous reset source is from Low-Voltage-Reset.
N  * \hideinitializer
N  */
N#define SYS_IS_LVR_RST()                (SYS->RSTSTS & SYS_RSTSTS_LVRF_Msk)
N
N/**
N  * @brief      Get reset source is from Power-on Reset
N  * @param      None
N  * @retval     0   Previous reset source is not from Power-on Reset
N  * @retval     >=1 Previous reset source is from Power-on Reset
N  * @details    This macro get previous reset source is from Power-on Reset.
N  * \hideinitializer
N  */
N#define SYS_IS_POR_RST()                (SYS->RSTSTS & SYS_RSTSTS_PORF_Msk)
N
N/**
N  * @brief      Get reset source is from reset pin reset
N  * @param      None
N  * @retval     0   Previous reset source is not from reset pin reset
N  * @retval     >=1 Previous reset source is from reset pin reset
N  * @details    This macro get previous reset source is from reset pin reset.
N  * \hideinitializer
N  */
N#define SYS_IS_RSTPIN_RST()             (SYS->RSTSTS & SYS_RSTSTS_PINRF_Msk)
N
N/**
N  * @brief      Get reset source is from system reset
N  * @param      None
N  * @retval     0   Previous reset source is not from system reset
N  * @retval     >=1 Previous reset source is from system reset
N  * @details    This macro get previous reset source is from system reset.
N  * \hideinitializer
N  */
N#define SYS_IS_SYSTEM_RST()             (SYS->RSTSTS & SYS_RSTSTS_SYSRF_Msk)
N
N/**
N  * @brief      Get reset source is from watchdog timer or window watchdog timer reset
N  * @param      None
N  * @retval     0   Previous reset source is not from watchdog timer or window watchdog timer reset
N  * @retval     >=1 Previous reset source is from watchdog timer or window watchdog timer reset
N  * @details    This macro get previous reset source is from watchdog timer or window watchdog timer reset.
N  * \hideinitializer
N  */
N#define SYS_IS_WDT_RST()                (SYS->RSTSTS & SYS_RSTSTS_WDTRF_Msk)
N
N/**
N  * @brief      Disable Low-Voltage-Reset function
N  * @param      None
N  * @return     None
N  * @details    This macro disable Low-Voltage-Reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_DISABLE_LVR()               (SYS->BODCTL &= ~SYS_BODCTL_LVREN_Msk)
N
N/**
N  * @brief      Enable Low-Voltage-Reset function
N  * @param      None
N  * @return     None
N  * @details    This macro enable Low-Voltage-Reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_ENABLE_LVR()                (SYS->BODCTL |= SYS_BODCTL_LVREN_Msk)
N
N/**
N  * @brief      Disable Power-on Reset function
N  * @param      None
N  * @return     None
N  * @details    This macro disable Power-on Reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_DISABLE_POR()               (SYS->PORCTL = 0x5AA5)
N
N/**
N  * @brief      Enable Power-on Reset function
N  * @param      None
N  * @return     None
N  * @details    This macro enable Power-on Reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_ENABLE_POR()                (SYS->PORCTL = 0)
N
N/**
N  * @brief      Clear reset source flag
N  * @param[in]  u32RstSrc is reset source. Including :
N  *             - \ref SYS_RSTSTS_PORF_Msk
N  *             - \ref SYS_RSTSTS_PINRF_Msk
N  *             - \ref SYS_RSTSTS_WDTRF_Msk
N  *             - \ref SYS_RSTSTS_LVRF_Msk
N  *             - \ref SYS_RSTSTS_BODRF_Msk
N  *             - \ref SYS_RSTSTS_SYSRF_Msk
N  *             - \ref SYS_RSTSTS_CPURF_Msk
N  *             - \ref SYS_RSTSTS_CPULKRF_Msk
N  * @return     None
N  * @details    This macro clear reset source flag.
N  * \hideinitializer
N  */
N#define SYS_CLEAR_RST_SOURCE(u32RstSrc) ((SYS->RSTSTS) = (u32RstSrc) )
N
N
N/**
N  * @brief      Disable register write-protection function
N  * @param      None
N  * @return     None
N  * @details    This function disable register write-protection function.
N  *             To unlock the protected register to allow write access.
N  * \hideinitializer
N  */
N__STATIC_INLINE void SYS_UnlockReg(void)
Xstatic __inline void SYS_UnlockReg(void)
N{
N    do {
N        SYS->REGLCTL = 0x59;
X        ((SYS_T *) ((( uint32_t)0x40000000) + 0x00000))->REGLCTL = 0x59;
N        SYS->REGLCTL = 0x16;
X        ((SYS_T *) ((( uint32_t)0x40000000) + 0x00000))->REGLCTL = 0x16;
N        SYS->REGLCTL = 0x88;
X        ((SYS_T *) ((( uint32_t)0x40000000) + 0x00000))->REGLCTL = 0x88;
N    } while (SYS->REGLCTL == 0);
X    } while (((SYS_T *) ((( uint32_t)0x40000000) + 0x00000))->REGLCTL == 0);
N}
N
N/**
N  * @brief      Enable register write-protection function
N  * @param      None
N  * @return     None
N  * @details    This function is used to enable register write-protection function.
N  *             To lock the protected register to forbid write access.
N  * \hideinitializer
N  */
N__STATIC_INLINE void SYS_LockReg(void)
Xstatic __inline void SYS_LockReg(void)
N{
N    SYS->REGLCTL = 0;
X    ((SYS_T *) ((( uint32_t)0x40000000) + 0x00000))->REGLCTL = 0;
N}
N
N
Nvoid SYS_ClearResetSrc(uint32_t u32Src);
Nuint32_t SYS_GetBODStatus(void);
Nuint32_t SYS_GetResetSrc(void);
Nuint32_t SYS_IsRegLocked(void);
Nuint32_t SYS_ReadPDID(void);
Nvoid SYS_ResetChip(void);
Nvoid SYS_ResetCPU(void);
Nvoid SYS_ResetModule(uint32_t u32ModuleIndex);
Nvoid SYS_EnableBOD(int32_t i32Mode, uint32_t u32BODLevel);
Nvoid SYS_DisableBOD(void);
N
N
N/*@}*/ /* end of group SYS_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group SYS_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __SYS_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 564 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "clk.h"
L 1 "..\..\..\Library\StdDriver\inc\clk.h" 1
N/**************************************************************************//**
N * @file     clk.h
N * @version  V0.10
N * $Revision: 12 $
N * $Date: 18/07/05 4:42p $
N * @brief    M031 Series Clock Controller (CLK) Driver Header File
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __CLK_H__
N#define __CLK_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup CLK_Driver CLK Driver
N  @{
N*/
N
N/** @addtogroup CLK_EXPORTED_CONSTANTS CLK Exported Constants
N  @{
N*/
N
N
N#define FREQ_4MHZ           4000000     /*!< Define frequency macro   4MHz  \hideinitializer */
N#define FREQ_8MHZ           8000000     /*!< Define frequency macro   8MHz  \hideinitializer */
N#define FREQ_12MHZ         12000000     /*!< Define frequency macro  12MHz  \hideinitializer */
N#define FREQ_16MHZ         16000000     /*!< Define frequency macro  16MHz  \hideinitializer */
N#define FREQ_24MHZ         24000000     /*!< Define frequency macro  24MHz  \hideinitializer */
N#define FREQ_25MHZ         25000000     /*!< Define frequency macro  25MHz  \hideinitializer */
N#define FREQ_32MHZ         32000000     /*!< Define frequency macro  32MHz  \hideinitializer */
N#define FREQ_48MHZ         48000000     /*!< Define frequency macro  48MHz  \hideinitializer */
N#define FREQ_50MHZ         50000000     /*!< Define frequency macro  50MHz  \hideinitializer */
N#define FREQ_51MHZ         51000000     /*!< Define frequency macro  51MHz  \hideinitializer */
N#define FREQ_64MHZ         64000000     /*!< Define frequency macro  64MHz  \hideinitializer */
N#define FREQ_68MHZ         68000000     /*!< Define frequency macro  68MHz  \hideinitializer */
N#define FREQ_72MHZ         72000000     /*!< Define frequency macro  72MHz  \hideinitializer */
N#define FREQ_96MHZ         96000000     /*!< Define frequency macro  96MHz  \hideinitializer */
N#define FREQ_100MHZ       100000000     /*!< Define frequency macro 100MHz  \hideinitializer */
N#define FREQ_144MHZ       144000000     /*!< Define frequency macro 144MHz  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  PWRCTL constant definitions.  (Write-protection)                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_PWRCTL_HXTGAIN_L0   (0)     /*!< Setting HXT Gain Control to level 0 for lower than 4MHz external crystal   \hideinitializer */
N#define CLK_PWRCTL_HXTGAIN_L1   (1)     /*!< Setting HXT Gain Control to level 1 for  4MHz ~  8MHz external crystal \hideinitializer */
N#define CLK_PWRCTL_HXTGAIN_L2   (2)     /*!< Setting HXT Gain Control to level 2 for  8MHz ~ 12MHz external crystal \hideinitializer */
N#define CLK_PWRCTL_HXTGAIN_L3   (3)     /*!< Setting HXT Gain Control to level 3 for 12MHz ~ 16MHz external crystal \hideinitializer */
N#define CLK_PWRCTL_HXTGAIN_L4   (4)     /*!< Setting HXT Gain Control to level 4 for 16MHz ~ 24MHz external crystal \hideinitializer */
N#define CLK_PWRCTL_HXTGAIN_L5   (5)     /*!< Setting HXT Gain Control to level 5                                    \hideinitializer */
N#define CLK_PWRCTL_HXTGAIN_L6   (6)     /*!< Setting HXT Gain Control to level 6                                    \hideinitializer */
N#define CLK_PWRCTL_HXTGAIN_L7   (7)     /*!< Setting HXT Gain Control to level 7 for 24MHz ~ 32MHz external crystal \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKSEL0 constant definitions.  (Write-protection)                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKSEL0_HCLKSEL_HXT           (0x00UL<<CLK_CLKSEL0_HCLKSEL_Pos)     /*!< Setting clock source as external X'tal                 \hideinitializer */
N#define CLK_CLKSEL0_HCLKSEL_LXT           (0x01UL<<CLK_CLKSEL0_HCLKSEL_Pos)     /*!< Setting clock source as external X'tal 32.768KHz       \hideinitializer */
N#define CLK_CLKSEL0_HCLKSEL_PLL           (0x02UL<<CLK_CLKSEL0_HCLKSEL_Pos)     /*!< Setting clock source as PLL output                     \hideinitializer */
N#define CLK_CLKSEL0_HCLKSEL_LIRC          (0x03UL<<CLK_CLKSEL0_HCLKSEL_Pos)     /*!< Setting clock source as internal low speed RC clock    \hideinitializer */
N#define CLK_CLKSEL0_HCLKSEL_HIRC          (0x07UL<<CLK_CLKSEL0_HCLKSEL_Pos)     /*!< Setting clock source as internal high speed RC clock   \hideinitializer */
N
N#define CLK_CLKSEL0_STCLKSEL_HXT          (0x00UL<<CLK_CLKSEL0_STCLKSEL_Pos)    /*!< Setting SysTick clock source as external X'tal             \hideinitializer */
N#define CLK_CLKSEL0_STCLKSEL_LXT          (0x01UL<<CLK_CLKSEL0_STCLKSEL_Pos)    /*!< Setting SysTick clock source as external X'tal 32.768KHz   \hideinitializer */
N#define CLK_CLKSEL0_STCLKSEL_HXT_DIV2     (0x02UL<<CLK_CLKSEL0_STCLKSEL_Pos)    /*!< Setting SysTick clock source as external X'tal/2           \hideinitializer */
N#define CLK_CLKSEL0_STCLKSEL_HCLK_DIV2    (0x03UL<<CLK_CLKSEL0_STCLKSEL_Pos)    /*!< Setting SysTick clock source as HCLK/2                     \hideinitializer */
N#define CLK_CLKSEL0_STCLKSEL_HIRC_DIV2    (0x07UL<<CLK_CLKSEL0_STCLKSEL_Pos)    /*!< Setting SysTick clock source as internal high speed RC clock/2     \hideinitializer */
N#define CLK_CLKSEL0_STCLKSEL_HCLK         (0x01UL<<SysTick_CTRL_CLKSOURCE_Pos)  /*!< Setting SysTick clock source as HCLK                       \hideinitializer */
N
N#define CLK_CLKSEL0_USBDSEL_HIRC          (0x00UL<<CLK_CLKSEL0_USBDSEL_Pos)     /*!< Setting USBD clock source as external X'tal    \hideinitializer */
N#define CLK_CLKSEL0_USBDSEL_PLL           (0x01UL<<CLK_CLKSEL0_USBDSEL_Pos)     /*!< Setting USBD clock source as PLL output        \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKSEL1 constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKSEL1_WDTSEL_LXT           (0x1UL<<CLK_CLKSEL1_WDTSEL_Pos)        /*!< Setting WDT clock source as external X'tal 32.768KHz       \hideinitializer */
N#define CLK_CLKSEL1_WDTSEL_HCLK_DIV2048  (0x2UL<<CLK_CLKSEL1_WDTSEL_Pos)        /*!< Setting WDT clock source as HCLK/2048                      \hideinitializer */
N#define CLK_CLKSEL1_WDTSEL_LIRC          (0x3UL<<CLK_CLKSEL1_WDTSEL_Pos)        /*!< Setting WDT clock source as internal low speed RC clock    \hideinitializer */
N
N#define CLK_CLKSEL1_WWDTSEL_HCLK_DIV2048 (0x2UL<<CLK_CLKSEL1_WWDTSEL_Pos)       /*!< Setting WWDT clock source as HCLK/2048                     \hideinitializer */
N#define CLK_CLKSEL1_WWDTSEL_LIRC         (0x3UL<<CLK_CLKSEL1_WWDTSEL_Pos)       /*!< Setting WWDT clock source as internal low speed RC clock   \hideinitializer */
N
N#define CLK_CLKSEL1_CLKOSEL_HXT          (0x0UL<<CLK_CLKSEL1_CLKOSEL_Pos)       /*!< Setting CLKO clock source as external X'tal            \hideinitializer */
N#define CLK_CLKSEL1_CLKOSEL_LXT          (0x1UL<<CLK_CLKSEL1_CLKOSEL_Pos)       /*!< Setting CLKO clock source as external X'tal 32.768KHz  \hideinitializer */
N#define CLK_CLKSEL1_CLKOSEL_HCLK         (0x2UL<<CLK_CLKSEL1_CLKOSEL_Pos)       /*!< Setting CLKO clock source as HCLK                      \hideinitializer */
N#define CLK_CLKSEL1_CLKOSEL_HIRC         (0x3UL<<CLK_CLKSEL1_CLKOSEL_Pos)       /*!< Setting CLKO clock source as external internal high speed RC clock \hideinitializer */
N#define CLK_CLKSEL1_CLKOSEL_LIRC         (0x4UL<<CLK_CLKSEL1_CLKOSEL_Pos)       /*!< Setting CLKO clock source as external internal low speed RC clock  \hideinitializer */
N#define CLK_CLKSEL1_CLKOSEL_PLL          (0x6UL<<CLK_CLKSEL1_CLKOSEL_Pos)       /*!< Setting CLKO clock source as PLL                       \hideinitializer */
N#define CLK_CLKSEL1_CLKOSEL_SOF          (0x7UL<<CLK_CLKSEL1_CLKOSEL_Pos)       /*!< Setting CLKO clock source as USB SOF                   \hideinitializer */
N
N#define CLK_CLKSEL1_TMR0SEL_HXT          (0x0UL<<CLK_CLKSEL1_TMR0SEL_Pos)       /*!< Setting Timer 0 clock source as external X'tal             \hideinitializer */
N#define CLK_CLKSEL1_TMR0SEL_LXT          (0x1UL<<CLK_CLKSEL1_TMR0SEL_Pos)       /*!< Setting Timer 0 clock source as external X'tal 32.768KHz   \hideinitializer */
N#define CLK_CLKSEL1_TMR0SEL_PCLK0        (0x2UL<<CLK_CLKSEL1_TMR0SEL_Pos)       /*!< Setting Timer 0 clock source as PCLK0                      \hideinitializer */
N#define CLK_CLKSEL1_TMR0SEL_EXT_TRG      (0x3UL<<CLK_CLKSEL1_TMR0SEL_Pos)       /*!< Setting Timer 0 clock source as external trigger           \hideinitializer */
N#define CLK_CLKSEL1_TMR0SEL_LIRC         (0x5UL<<CLK_CLKSEL1_TMR0SEL_Pos)       /*!< Setting Timer 0 clock source as internal low speed RC clock    \hideinitializer */
N#define CLK_CLKSEL1_TMR0SEL_HIRC         (0x7UL<<CLK_CLKSEL1_TMR0SEL_Pos)       /*!< Setting Timer 0 clock source as internal high speed RC clock   \hideinitializer */
N
N#define CLK_CLKSEL1_TMR1SEL_HXT          (0x0UL<<CLK_CLKSEL1_TMR1SEL_Pos)       /*!< Setting Timer 1 clock source as external X'tal             \hideinitializer */
N#define CLK_CLKSEL1_TMR1SEL_LXT          (0x1UL<<CLK_CLKSEL1_TMR1SEL_Pos)       /*!< Setting Timer 1 clock source as external X'tal 32.768KHz   \hideinitializer */
N#define CLK_CLKSEL1_TMR1SEL_PCLK0        (0x2UL<<CLK_CLKSEL1_TMR1SEL_Pos)       /*!< Setting Timer 1 clock source as PCLK0                      \hideinitializer */
N#define CLK_CLKSEL1_TMR1SEL_EXT_TRG      (0x3UL<<CLK_CLKSEL1_TMR1SEL_Pos)       /*!< Setting Timer 1 clock source as external trigger           \hideinitializer */
N#define CLK_CLKSEL1_TMR1SEL_LIRC         (0x5UL<<CLK_CLKSEL1_TMR1SEL_Pos)       /*!< Setting Timer 1 clock source as internal low speed RC clock    \hideinitializer */
N#define CLK_CLKSEL1_TMR1SEL_HIRC         (0x7UL<<CLK_CLKSEL1_TMR1SEL_Pos)       /*!< Setting Timer 1 clock source as internal high speed RC clock   \hideinitializer */
N
N#define CLK_CLKSEL1_TMR2SEL_HXT          (0x0UL<<CLK_CLKSEL1_TMR2SEL_Pos)       /*!< Setting Timer 2 clock source as external X'tal             \hideinitializer */
N#define CLK_CLKSEL1_TMR2SEL_LXT          (0x1UL<<CLK_CLKSEL1_TMR2SEL_Pos)       /*!< Setting Timer 2 clock source as external X'tal 32.768KHz   \hideinitializer */
N#define CLK_CLKSEL1_TMR2SEL_PCLK1        (0x2UL<<CLK_CLKSEL1_TMR2SEL_Pos)       /*!< Setting Timer 2 clock source as PCLK1                      \hideinitializer */
N#define CLK_CLKSEL1_TMR2SEL_EXT_TRG      (0x3UL<<CLK_CLKSEL1_TMR2SEL_Pos)       /*!< Setting Timer 2 clock source as external trigger           \hideinitializer */
N#define CLK_CLKSEL1_TMR2SEL_LIRC         (0x5UL<<CLK_CLKSEL1_TMR2SEL_Pos)       /*!< Setting Timer 2 clock source as internal low speed RC clock    \hideinitializer */
N#define CLK_CLKSEL1_TMR2SEL_HIRC         (0x7UL<<CLK_CLKSEL1_TMR2SEL_Pos)       /*!< Setting Timer 2 clock source as internal high speed RC clock   \hideinitializer */
N
N#define CLK_CLKSEL1_TMR3SEL_HXT          (0x0UL<<CLK_CLKSEL1_TMR3SEL_Pos)       /*!< Setting Timer 3 clock source as external X'tal             \hideinitializer */
N#define CLK_CLKSEL1_TMR3SEL_LXT          (0x1UL<<CLK_CLKSEL1_TMR3SEL_Pos)       /*!< Setting Timer 3 clock source as external X'tal 32.768KHz   \hideinitializer */
N#define CLK_CLKSEL1_TMR3SEL_PCLK1        (0x2UL<<CLK_CLKSEL1_TMR3SEL_Pos)       /*!< Setting Timer 3 clock source as PCLK1                      \hideinitializer */
N#define CLK_CLKSEL1_TMR3SEL_EXT_TRG      (0x3UL<<CLK_CLKSEL1_TMR3SEL_Pos)       /*!< Setting Timer 3 clock source as external trigger           \hideinitializer */
N#define CLK_CLKSEL1_TMR3SEL_LIRC         (0x5UL<<CLK_CLKSEL1_TMR3SEL_Pos)       /*!< Setting Timer 3 clock source as internal low speed RC clock    \hideinitializer */
N#define CLK_CLKSEL1_TMR3SEL_HIRC         (0x7UL<<CLK_CLKSEL1_TMR3SEL_Pos)       /*!< Setting Timer 3 clock source as internal high speed RC clock   \hideinitializer */
N
N#define CLK_CLKSEL1_UART0SEL_HXT         (0x0UL<<CLK_CLKSEL1_UART0SEL_Pos)      /*!< Setting UART0 clock source as external X'tal   \hideinitializer */
N#define CLK_CLKSEL1_UART0SEL_PLL         (0x1UL<<CLK_CLKSEL1_UART0SEL_Pos)      /*!< Setting UART0 clock source as external PLL     \hideinitializer */
N#define CLK_CLKSEL1_UART0SEL_LXT         (0x2UL<<CLK_CLKSEL1_UART0SEL_Pos)      /*!< Setting UART0 clock source as external X'tal 32.768KHz     \hideinitializer */
N#define CLK_CLKSEL1_UART0SEL_HIRC        (0x3UL<<CLK_CLKSEL1_UART0SEL_Pos)      /*!< Setting UART0 clock source as external internal high speed RC clock    \hideinitializer */
N#define CLK_CLKSEL1_UART0SEL_PCLK0       (0x4UL<<CLK_CLKSEL1_UART0SEL_Pos)      /*!< Setting UART0 clock source as external PCLK0   \hideinitializer */
N#define CLK_CLKSEL1_UART0SEL_LIRC        (0x5UL<<CLK_CLKSEL1_UART0SEL_Pos)      /*!< Setting UART0 clock source as external LIRC    \hideinitializer */
N
N#define CLK_CLKSEL1_UART1SEL_HXT         (0x0UL<<CLK_CLKSEL1_UART1SEL_Pos)      /*!< Setting UART1 clock source as external X'tal   \hideinitializer */
N#define CLK_CLKSEL1_UART1SEL_PLL         (0x1UL<<CLK_CLKSEL1_UART1SEL_Pos)      /*!< Setting UART1 clock source as external PLL     \hideinitializer */
N#define CLK_CLKSEL1_UART1SEL_LXT         (0x2UL<<CLK_CLKSEL1_UART1SEL_Pos)      /*!< Setting UART1 clock source as external X'tal 32.768KHz     \hideinitializer */
N#define CLK_CLKSEL1_UART1SEL_HIRC        (0x3UL<<CLK_CLKSEL1_UART1SEL_Pos)      /*!< Setting UART1 clock source as external internal high speed RC clock    \hideinitializer */
N#define CLK_CLKSEL1_UART1SEL_PCLK1       (0x4UL<<CLK_CLKSEL1_UART1SEL_Pos)      /*!< Setting UART1 clock source as external PCLK1   \hideinitializer */
N#define CLK_CLKSEL1_UART1SEL_LIRC        (0x5UL<<CLK_CLKSEL1_UART1SEL_Pos)      /*!< Setting UART1 clock source as external LIRC    \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKSEL2 constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKSEL2_PWM0SEL_PLL          (0x0UL<<CLK_CLKSEL2_PWM0SEL_Pos)       /*!< Setting PWM0 clock source as PLL   \hideinitializer */
N#define CLK_CLKSEL2_PWM0SEL_PCLK0        (0x1UL<<CLK_CLKSEL2_PWM0SEL_Pos)       /*!< Setting PWM0 clock source as PCLK0 \hideinitializer */
N
N#define CLK_CLKSEL2_PWM1SEL_PLL          (0x0UL<<CLK_CLKSEL2_PWM1SEL_Pos)       /*!< Setting PWM1 clock source as PLL   \hideinitializer */
N#define CLK_CLKSEL2_PWM1SEL_PCLK1        (0x1UL<<CLK_CLKSEL2_PWM1SEL_Pos)       /*!< Setting PWM1 clock source as PCLK1 \hideinitializer */
N
N#define CLK_CLKSEL2_QSPI0SEL_HXT         (0x0UL<<CLK_CLKSEL2_QSPI0SEL_Pos)      /*!< Setting QSPI clock source as HXT   \hideinitializer */
N#define CLK_CLKSEL2_QSPI0SEL_PLL         (0x1UL<<CLK_CLKSEL2_QSPI0SEL_Pos)      /*!< Setting QSPI clock source as PLL   \hideinitializer */
N#define CLK_CLKSEL2_QSPI0SEL_PCLK0       (0x2UL<<CLK_CLKSEL2_QSPI0SEL_Pos)      /*!< Setting QSPI clock source as PCLK0 \hideinitializer */
N#define CLK_CLKSEL2_QSPI0SEL_HIRC        (0x3UL<<CLK_CLKSEL2_QSPI0SEL_Pos)      /*!< Setting QSPI clock source as HIRC  \hideinitializer */
N
N#define CLK_CLKSEL2_SPI0SEL_HXT          (0x0UL<<CLK_CLKSEL2_SPI0SEL_Pos)       /*!< Setting SPI clock source as HXT    \hideinitializer */
N#define CLK_CLKSEL2_SPI0SEL_PLL          (0x1UL<<CLK_CLKSEL2_SPI0SEL_Pos)       /*!< Setting SPI clock source as PLL    \hideinitializer */
N#define CLK_CLKSEL2_SPI0SEL_PCLK1        (0x2UL<<CLK_CLKSEL2_SPI0SEL_Pos)       /*!< Setting SPI clock source as PCLK1  \hideinitializer */
N#define CLK_CLKSEL2_SPI0SEL_HIRC         (0x3UL<<CLK_CLKSEL2_SPI0SEL_Pos)       /*!< Setting SPI clock source as HIRC   \hideinitializer */
N
N#define CLK_CLKSEL2_BPWM0SEL_PLL         (0x0UL<<CLK_CLKSEL2_BPWM0SEL_Pos)      /*!< Setting BPWM0 clock source as PLL   \hideinitializer */
N#define CLK_CLKSEL2_BPWM0SEL_PCLK0       (0x1UL<<CLK_CLKSEL2_BPWM0SEL_Pos)      /*!< Setting BPWM0 clock source as PCLK0 \hideinitializer */
N
N#define CLK_CLKSEL2_BPWM1SEL_PLL         (0x0UL<<CLK_CLKSEL2_BPWM1SEL_Pos)      /*!< Setting BPWM1 clock source as PLL   \hideinitializer */
N#define CLK_CLKSEL2_BPWM1SEL_PCLK1       (0x1UL<<CLK_CLKSEL2_BPWM1SEL_Pos)      /*!< Setting BPWM1 clock source as PCLK1 \hideinitializer */
N
N#define CLK_CLKSEL2_ADCSEL_HXT           (0x0UL<<CLK_CLKSEL2_ADCSEL_Pos)        /*!< Setting ADC clock source as HXT    \hideinitializer */
N#define CLK_CLKSEL2_ADCSEL_PLL           (0x1UL<<CLK_CLKSEL2_ADCSEL_Pos)        /*!< Setting ADC clock source as PLL    \hideinitializer */
N#define CLK_CLKSEL2_ADCSEL_PCLK1         (0x2UL<<CLK_CLKSEL2_ADCSEL_Pos)        /*!< Setting ADC clock source as PCLK1  \hideinitializer */
N#define CLK_CLKSEL2_ADCSEL_HIRC          (0x3UL<<CLK_CLKSEL2_ADCSEL_Pos)        /*!< Setting ADC clock source as HIRC   \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKSEL3 constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKSEL3_UART3SEL_HXT         (0x0UL<<CLK_CLKSEL3_UART3SEL_Pos)      /*!< Setting UART3 clock source as external X'tal   \hideinitializer */
N#define CLK_CLKSEL3_UART3SEL_PLL         (0x1UL<<CLK_CLKSEL3_UART3SEL_Pos)      /*!< Setting UART3 clock source as external PLL     \hideinitializer */
N#define CLK_CLKSEL3_UART3SEL_LXT         (0x2UL<<CLK_CLKSEL3_UART3SEL_Pos)      /*!< Setting UART3 clock source as external X'tal 32.768KHz \hideinitializer */
N#define CLK_CLKSEL3_UART3SEL_HIRC        (0x3UL<<CLK_CLKSEL3_UART3SEL_Pos)      /*!< Setting UART3 clock source as external internal high speed RC clock    \hideinitializer */
N#define CLK_CLKSEL3_UART3SEL_PCLK1       (0x4UL<<CLK_CLKSEL3_UART3SEL_Pos)      /*!< Setting UART3 clock source as external PCLK1   \hideinitializer */
N#define CLK_CLKSEL3_UART3SEL_LIRC        (0x5UL<<CLK_CLKSEL3_UART3SEL_Pos)      /*!< Setting UART3 clock source as external LIRC    \hideinitializer */
N
N#define CLK_CLKSEL3_UART2SEL_HXT         (0x0UL<<CLK_CLKSEL3_UART2SEL_Pos)      /*!< Setting UART2 clock source as external X'tal   \hideinitializer */
N#define CLK_CLKSEL3_UART2SEL_PLL         (0x1UL<<CLK_CLKSEL3_UART2SEL_Pos)      /*!< Setting UART2 clock source as external PLL     \hideinitializer */
N#define CLK_CLKSEL3_UART2SEL_LXT         (0x2UL<<CLK_CLKSEL3_UART2SEL_Pos)      /*!< Setting UART2 clock source as external X'tal 32.768KHz \hideinitializer */
N#define CLK_CLKSEL3_UART2SEL_HIRC        (0x3UL<<CLK_CLKSEL3_UART2SEL_Pos)      /*!< Setting UART2 clock source as external internal high speed RC clock    \hideinitializer */
N#define CLK_CLKSEL3_UART2SEL_PCLK0       (0x4UL<<CLK_CLKSEL3_UART2SEL_Pos)      /*!< Setting UART2 clock source as external PCLK0   \hideinitializer */
N#define CLK_CLKSEL3_UART2SEL_LIRC        (0x5UL<<CLK_CLKSEL3_UART2SEL_Pos)      /*!< Setting UART2 clock source as external LIRC    \hideinitializer */
N
N#define CLK_CLKSEL3_UART5SEL_HXT         (0x0UL<<CLK_CLKSEL3_UART5SEL_Pos)      /*!< Setting UART5 clock source as external X'tal   \hideinitializer */
N#define CLK_CLKSEL3_UART5SEL_PLL         (0x1UL<<CLK_CLKSEL3_UART5SEL_Pos)      /*!< Setting UART5 clock source as external PLL     \hideinitializer */
N#define CLK_CLKSEL3_UART5SEL_LXT         (0x2UL<<CLK_CLKSEL3_UART5SEL_Pos)      /*!< Setting UART5 clock source as external X'tal 32.768KHz \hideinitializer */
N#define CLK_CLKSEL3_UART5SEL_HIRC        (0x3UL<<CLK_CLKSEL3_UART5SEL_Pos)      /*!< Setting UART5 clock source as external internal high speed RC clock    \hideinitializer */
N#define CLK_CLKSEL3_UART5SEL_PCLK1       (0x4UL<<CLK_CLKSEL3_UART5SEL_Pos)      /*!< Setting UART5 clock source as external PCLK1   \hideinitializer */
N#define CLK_CLKSEL3_UART5SEL_LIRC        (0x5UL<<CLK_CLKSEL3_UART5SEL_Pos)      /*!< Setting UART5 clock source as external LIRC    \hideinitializer */
N
N#define CLK_CLKSEL3_UART4SEL_HXT         (0x0UL<<CLK_CLKSEL3_UART4SEL_Pos)      /*!< Setting UART4 clock source as external X'tal   \hideinitializer */
N#define CLK_CLKSEL3_UART4SEL_PLL         (0x1UL<<CLK_CLKSEL3_UART4SEL_Pos)      /*!< Setting UART4 clock source as external PLL     \hideinitializer */
N#define CLK_CLKSEL3_UART4SEL_LXT         (0x2UL<<CLK_CLKSEL3_UART4SEL_Pos)      /*!< Setting UART4 clock source as external X'tal 32.768KHz \hideinitializer */
N#define CLK_CLKSEL3_UART4SEL_HIRC        (0x3UL<<CLK_CLKSEL3_UART4SEL_Pos)      /*!< Setting UART4 clock source as external internal high speed RC clock    \hideinitializer */
N#define CLK_CLKSEL3_UART4SEL_PCLK0       (0x4UL<<CLK_CLKSEL3_UART4SEL_Pos)      /*!< Setting UART4 clock source as external PCLK0   \hideinitializer */
N#define CLK_CLKSEL3_UART4SEL_LIRC        (0x5UL<<CLK_CLKSEL3_UART4SEL_Pos)      /*!< Setting UART4 clock source as external LIRC    \hideinitializer */
N
N#define CLK_CLKSEL3_UART7SEL_HXT         (0x0UL<<CLK_CLKSEL3_UART7SEL_Pos)      /*!< Setting UART7 clock source as external X'tal   \hideinitializer */
N#define CLK_CLKSEL3_UART7SEL_PLL         (0x1UL<<CLK_CLKSEL3_UART7SEL_Pos)      /*!< Setting UART7 clock source as external PLL     \hideinitializer */
N#define CLK_CLKSEL3_UART7SEL_LXT         (0x2UL<<CLK_CLKSEL3_UART7SEL_Pos)      /*!< Setting UART7 clock source as external X'tal 32.768KHz \hideinitializer */
N#define CLK_CLKSEL3_UART7SEL_HIRC        (0x3UL<<CLK_CLKSEL3_UART7SEL_Pos)      /*!< Setting UART7 clock source as external internal high speed RC clock    \hideinitializer */
N#define CLK_CLKSEL3_UART7SEL_PCLK1       (0x4UL<<CLK_CLKSEL3_UART7SEL_Pos)      /*!< Setting UART7 clock source as external PCLK1   \hideinitializer */
N#define CLK_CLKSEL3_UART7SEL_LIRC        (0x5UL<<CLK_CLKSEL3_UART7SEL_Pos)      /*!< Setting UART7 clock source as external LIRC    \hideinitializer */
N
N#define CLK_CLKSEL3_UART6SEL_HXT         (0x0UL<<CLK_CLKSEL3_UART6SEL_Pos)      /*!< Setting UART6 clock source as external X'tal   \hideinitializer */
N#define CLK_CLKSEL3_UART6SEL_PLL         (0x1UL<<CLK_CLKSEL3_UART6SEL_Pos)      /*!< Setting UART6 clock source as external PLL     \hideinitializer */
N#define CLK_CLKSEL3_UART6SEL_LXT         (0x2UL<<CLK_CLKSEL3_UART6SEL_Pos)      /*!< Setting UART6 clock source as external X'tal 32.768KHz \hideinitializer */
N#define CLK_CLKSEL3_UART6SEL_HIRC        (0x3UL<<CLK_CLKSEL3_UART6SEL_Pos)      /*!< Setting UART6 clock source as external internal high speed RC clock    \hideinitializer */
N#define CLK_CLKSEL3_UART6SEL_PCLK0       (0x4UL<<CLK_CLKSEL3_UART6SEL_Pos)      /*!< Setting UART6 clock source as external PCLK0   \hideinitializer */
N#define CLK_CLKSEL3_UART6SEL_LIRC        (0x5UL<<CLK_CLKSEL3_UART6SEL_Pos)      /*!< Setting UART6 clock source as external LIRC    \hideinitializer */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKDIV0 constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKDIV0_HCLK(x)  (((x)-1) << CLK_CLKDIV0_HCLKDIV_Pos)   /*!< CLKDIV Setting for HCLK clock divider.  It could be 1~16   \hideinitializer */
N#define CLK_CLKDIV0_USB(x)   (((x)-1) << CLK_CLKDIV0_USBDIV_Pos)    /*!< CLKDIV Setting for USB clock divider.   It could be 1~16   \hideinitializer */
N#define CLK_CLKDIV0_UART0(x) (((x)-1) << CLK_CLKDIV0_UART0DIV_Pos)  /*!< CLKDIV Setting for UART0 clock divider. It could be 1~16   \hideinitializer */
N#define CLK_CLKDIV0_UART1(x) (((x)-1) << CLK_CLKDIV0_UART1DIV_Pos)  /*!< CLKDIV Setting for UART1 clock divider. It could be 1~16   \hideinitializer */
N#define CLK_CLKDIV0_ADC(x)   (((x)-1) << CLK_CLKDIV0_ADCDIV_Pos)    /*!< CLKDIV Setting for ADC clock divider.   It could be 1~256  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKDIV4 constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKDIV4_UART2(x) (((x)-1) << CLK_CLKDIV4_UART2DIV_Pos)  /*!< CLKDIV Setting for UART2 clock divider. It could be 1~16   \hideinitializer */
N#define CLK_CLKDIV4_UART3(x) (((x)-1) << CLK_CLKDIV4_UART3DIV_Pos)  /*!< CLKDIV Setting for UART3 clock divider. It could be 1~16   \hideinitializer */
N#define CLK_CLKDIV4_UART4(x) (((x)-1) << CLK_CLKDIV4_UART4DIV_Pos)  /*!< CLKDIV Setting for UART4 clock divider. It could be 1~16   \hideinitializer */
N#define CLK_CLKDIV4_UART5(x) (((x)-1) << CLK_CLKDIV4_UART5DIV_Pos)  /*!< CLKDIV Setting for UART5 clock divider. It could be 1~16   \hideinitializer */
N#define CLK_CLKDIV4_UART6(x) (((x)-1) << CLK_CLKDIV4_UART6DIV_Pos)  /*!< CLKDIV Setting for UART6 clock divider. It could be 1~16   \hideinitializer */
N#define CLK_CLKDIV4_UART7(x) (((x)-1) << CLK_CLKDIV4_UART7DIV_Pos)  /*!< CLKDIV Setting for UART7 clock divider. It could be 1~16   \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  PCLKDIV constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_PCLKDIV_APB0DIV_DIV1       (0x0UL<<CLK_PCLKDIV_APB0DIV_Pos)     /*!< PCLKDIV Setting for APB0 clock divider  1. \hideinitializer */
N#define CLK_PCLKDIV_APB0DIV_DIV2       (0x1UL<<CLK_PCLKDIV_APB0DIV_Pos)     /*!< PCLKDIV Setting for APB0 clock divider  2. \hideinitializer */
N#define CLK_PCLKDIV_APB0DIV_DIV4       (0x2UL<<CLK_PCLKDIV_APB0DIV_Pos)     /*!< PCLKDIV Setting for APB0 clock divider  4. \hideinitializer */
N#define CLK_PCLKDIV_APB0DIV_DIV8       (0x3UL<<CLK_PCLKDIV_APB0DIV_Pos)     /*!< PCLKDIV Setting for APB0 clock divider  8. \hideinitializer */
N#define CLK_PCLKDIV_APB0DIV_DIV16      (0x4UL<<CLK_PCLKDIV_APB0DIV_Pos)     /*!< PCLKDIV Setting for APB0 clock divider 16. \hideinitializer */
N
N#define CLK_PCLKDIV_APB1DIV_DIV1       (0x0UL<<CLK_PCLKDIV_APB1DIV_Pos)     /*!< PCLKDIV Setting for APB1 clock divider  1. \hideinitializer */
N#define CLK_PCLKDIV_APB1DIV_DIV2       (0x1UL<<CLK_PCLKDIV_APB1DIV_Pos)     /*!< PCLKDIV Setting for APB1 clock divider  2. \hideinitializer */
N#define CLK_PCLKDIV_APB1DIV_DIV4       (0x2UL<<CLK_PCLKDIV_APB1DIV_Pos)     /*!< PCLKDIV Setting for APB1 clock divider  4. \hideinitializer */
N#define CLK_PCLKDIV_APB1DIV_DIV8       (0x3UL<<CLK_PCLKDIV_APB1DIV_Pos)     /*!< PCLKDIV Setting for APB1 clock divider  8. \hideinitializer */
N#define CLK_PCLKDIV_APB1DIV_DIV16      (0x4UL<<CLK_PCLKDIV_APB1DIV_Pos)     /*!< PCLKDIV Setting for APB1 clock divider 16. \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  PLLCTL constant definitions. PLL = FIN * NF / NR / NO                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_PLLCTL_PLLSRC_HXT       (0x0UL << CLK_PLLCTL_PLLSRC_Pos)    /*!< For PLL clock source is HXT.  4~12MHz < FIN < 24MHz    \hideinitializer */
N#define CLK_PLLCTL_PLLSRC_HIRC_DIV4 (0x1UL << CLK_PLLCTL_PLLSRC_Pos)    /*!< For PLL clock source is HIRC/4. 12 MHz< FIN < 12MHz    \hideinitializer */
N
N#define CLK_PLLCTL_NR(x)        ((x-2)<<CLK_PLLCTL_INDIV_Pos)   /*!< For PLL input divider. x must be constant and 2 <= x <= 7 since constraint 1.6MHz < FIN/NR < 16MHz and NR = INDIV+2 >= 2   \hideinitializer */
N#define CLK_PLLCTL_NF(x)        ((x-2)<<CLK_PLLCTL_FBDIV_Pos)   /*!< For PLL feedback divider. x must be constant and 17 <= x/NR <= 41 since constraint 200MHz < FIN*NF/NR < 500MHz.            \hideinitializer */
N
N#define CLK_PLLCTL_NO_1         (0x0UL << CLK_PLLCTL_OUTDIV_Pos)    /*!< For PLL output divider is 1    \hideinitializer */
N#define CLK_PLLCTL_NO_2         (0x1UL << CLK_PLLCTL_OUTDIV_Pos)    /*!< For PLL output divider is 2    \hideinitializer */
N#define CLK_PLLCTL_NO_4         (0x3UL << CLK_PLLCTL_OUTDIV_Pos)    /*!< For PLL output divider is 4    \hideinitializer */
N
N#define CLK_PLLCTL_64MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(8)  | CLK_PLLCTL_NF(64)     | CLK_PLLCTL_NO_4)          /*!< Predefined PLLCTL setting for 64MHz PLL output with HXT(12MHz X'tal)       \hideinitializer */
N#define CLK_PLLCTL_68MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(8)  | CLK_PLLCTL_NF(68)     | CLK_PLLCTL_NO_4)          /*!< Predefined PLLCTL setting for 68MHz PLL output with HXT(12MHz X'tal)       \hideinitializer */
N#define CLK_PLLCTL_72MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(8)  | CLK_PLLCTL_NF(72)     | CLK_PLLCTL_NO_4)          /*!< Predefined PLLCTL setting for 72MHz PLL output with HXT(12MHz X'tal)       \hideinitializer */
N#define CLK_PLLCTL_96MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(8)  | CLK_PLLCTL_NF(96)     | CLK_PLLCTL_NO_4)          /*!< Predefined PLLCTL setting for 96MHz PLL output with HXT(12MHz X'tal)       \hideinitializer */
N#define CLK_PLLCTL_144MHz_HXT       (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(8)  | CLK_PLLCTL_NF(72)     | CLK_PLLCTL_NO_2)          /*!< Predefined PLLCTL setting for 144MHz PLL output with HXT(12MHz X'tal)      \hideinitializer */
N#define CLK_PLLCTL_64MHz_HIRC_DIV4  (CLK_PLLCTL_PLLSRC_HIRC_DIV4  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(64)     | CLK_PLLCTL_NO_4)    /*!< Predefined PLLCTL setting for 64MHz PLL output with HIRC_DIV4(12MHz IRC)   \hideinitializer */
N#define CLK_PLLCTL_68MHz_HIRC_DIV4  (CLK_PLLCTL_PLLSRC_HIRC_DIV4  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(68)     | CLK_PLLCTL_NO_4)    /*!< Predefined PLLCTL setting for 68MHz PLL output with HIRC_DIV4(12MHz IRC)   \hideinitializer */
N#define CLK_PLLCTL_72MHz_HIRC_DIV4  (CLK_PLLCTL_PLLSRC_HIRC_DIV4  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(72)     | CLK_PLLCTL_NO_4)    /*!< Predefined PLLCTL setting for 72MHz PLL output with HIRC_DIV4(12MHz IRC)   \hideinitializer */
N#define CLK_PLLCTL_96MHz_HIRC_DIV4  (CLK_PLLCTL_PLLSRC_HIRC_DIV4  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(96)     | CLK_PLLCTL_NO_4)    /*!< Predefined PLLCTL setting for 96MHz PLL output with HIRC_DIV4(12MHz IRC)   \hideinitializer */
N#define CLK_PLLCTL_144MHz_HIRC_DIV4 (CLK_PLLCTL_PLLSRC_HIRC_DIV4  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(72)     | CLK_PLLCTL_NO_2)    /*!< Predefined PLLCTL setting for 144MHz PLL output with HIRC_DIV4(12MHz IRC)  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  MODULE constant definitions.                                                                           */
N/*---------------------------------------------------------------------------------------------------------*/
N/* APBCLK(31:30)|CLKSEL(29:28)|CLKSEL_Msk(27:25) |CLKSEL_Pos(24:20)|CLKDIV(19:18)|CLKDIV_Msk(17:10)|CLKDIV_Pos(9:5)|IP_EN_Pos(4:0) */
N
N#define MODULE_APBCLK(x)        (((x) >>30) & 0x3UL)    /*!< Calculate AHBCLK/APBCLK offset on MODULE index, 0x0:AHBCLK, 0x1:APBCLK0, 0x2:APBCLK1           \hideinitializer */
N#define MODULE_CLKSEL(x)        (((x) >>28) & 0x3UL)    /*!< Calculate CLKSEL offset on MODULE index, 0x0:CLKSEL0, 0x1:CLKSEL1, 0x2:CLKSEL2, 0x3:CLKSEL3    \hideinitializer */
N#define MODULE_CLKSEL_Msk(x)    (((x) >>25) & 0x7UL)    /*!< Calculate CLKSEL mask offset on MODULE index       \hideinitializer */
N#define MODULE_CLKSEL_Pos(x)    (((x) >>20) & 0x1fUL)   /*!< Calculate CLKSEL position offset on MODULE index   \hideinitializer */
N#define MODULE_CLKDIV(x)        (((x) >>18) & 0x3UL)    /*!< Calculate CLKDIV offset on MODULE index, 0x0:CLKDIV0, 0x1:CLKDIV1, 0x2:CLKDIV3, 0x3:CLKDIV4    \hideinitializer */
N#define MODULE_CLKDIV_Msk(x)    (((x) >>10) & 0xffUL)   /*!< Calculate CLKDIV mask offset on MODULE index       \hideinitializer */
N#define MODULE_CLKDIV_Pos(x)    (((x) >>5 ) & 0x1fUL)   /*!< Calculate CLKDIV position offset on MODULE index   \hideinitializer */
N#define MODULE_IP_EN_Pos(x)     (((x) >>0 ) & 0x1fUL)   /*!< Calculate APBCLK offset on MODULE index            \hideinitializer */
N#define MODULE_NoMsk            0x0                     /*!< Not mask on MODULE index                           \hideinitializer */
N#define NA                      MODULE_NoMsk            /*!< Not Available                                      \hideinitializer */
N
N#define MODULE_APBCLK_ENC(x)        (((x) & 0x03UL) << 30)   /*!< MODULE index, 0x0:AHBCLK, 0x1:APBCLK0, 0x2:APBCLK1    \hideinitializer */
N#define MODULE_CLKSEL_ENC(x)        (((x) & 0x03UL) << 28)   /*!< CLKSEL offset on MODULE index, 0x0:CLKSEL0, 0x1:CLKSEL1, 0x2:CLKSEL2, 0x3:CLKSEL3     \hideinitializer */
N#define MODULE_CLKSEL_Msk_ENC(x)    (((x) & 0x07UL) << 25)   /*!< CLKSEL mask offset on MODULE index                    \hideinitializer */
N#define MODULE_CLKSEL_Pos_ENC(x)    (((x) & 0x1fUL) << 20)   /*!< CLKSEL position offset on MODULE index                \hideinitializer */
N#define MODULE_CLKDIV_ENC(x)        (((x) & 0x03UL) << 18)   /*!< APBCLK CLKDIV on MODULE index, 0x0:CLKDIV, 0x1:CLKDIV1, 0x2:CLKDIV3, 0x3:CLKDIV4      \hideinitializer */
N#define MODULE_CLKDIV_Msk_ENC(x)    (((x) & 0xffUL) << 10)   /*!< CLKDIV mask offset on MODULE index                    \hideinitializer */
N#define MODULE_CLKDIV_Pos_ENC(x)    (((x) & 0x1fUL) <<  5)   /*!< CLKDIV position offset on MODULE index                \hideinitializer */
N#define MODULE_IP_EN_Pos_ENC(x)     (((x) & 0x1fUL) <<  0)   /*!< AHBCLK/APBCLK offset on MODULE index                  \hideinitializer */
N
N
N//AHBCLK
N#define PDMA_MODULE      (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_PDMACKEN_Pos)|\
N                          MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                          MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))     /*!< PDMA Module   \hideinitializer */
X#define PDMA_MODULE      (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_PDMACKEN_Pos)|                          MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                          MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      
N
N#define ISP_MODULE       (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_ISPCKEN_Pos)|\
N                          MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                          MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))     /*!< ISP Module    \hideinitializer */
X#define ISP_MODULE       (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_ISPCKEN_Pos)|                          MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                          MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      
N
N#define EBI_MODULE       (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_EBICKEN_Pos)|\
N                          MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                          MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))     /*!< EBI Module    \hideinitializer */
X#define EBI_MODULE       (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_EBICKEN_Pos)|                          MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                          MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      
N
N#define HDIV_MODULE      (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_HDIVCKEN_Pos)|\
N                          MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                          MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))     /*!< HDIV Module   \hideinitializer */
X#define HDIV_MODULE      (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_HDIVCKEN_Pos)|                          MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                          MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      
N
N#define CRC_MODULE       (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_CRCCKEN_Pos)|\
N                          MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                          MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))     /*!< CRC Module    \hideinitializer */
X#define CRC_MODULE       (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_CRCCKEN_Pos)|                          MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                          MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      
N
N//APBCLK0
N#define WDT_MODULE     (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_WDTCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_WDTSEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< WDT Module     \hideinitializer */
X#define WDT_MODULE     (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_WDTCKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_WDTSEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define WWDT_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_WDTCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_WWDTSEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< WWDT Module    \hideinitializer */
X#define WWDT_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_WDTCKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_WWDTSEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define RTC_MODULE     (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_RTCCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< RTC Module     \hideinitializer */
X#define RTC_MODULE     (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_RTCCKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define TMR0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR0CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_TMR0SEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< TMR0 Module    \hideinitializer */
X#define TMR0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR0CKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_TMR0SEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define TMR1_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR1CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_TMR1SEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< TMR1 Module    \hideinitializer */
X#define TMR1_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR1CKEN_Pos) |                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_TMR1SEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define TMR2_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR2CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_TMR2SEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< TMR2 Module    \hideinitializer */
X#define TMR2_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR2CKEN_Pos) |                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_TMR2SEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define TMR3_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR3CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_TMR3SEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< TMR3 Module    \hideinitializer */
X#define TMR3_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR3CKEN_Pos) |                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_TMR3SEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define CLKO_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_CLKOCKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_CLKOSEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< CLKO Module    \hideinitializer */
X#define CLKO_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_CLKOCKEN_Pos) |                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_CLKOSEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define UART0_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART0CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_UART0SEL_Pos)|\
N                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV0_UART0DIV_Pos))   /*!< UART0 Module   \hideinitializer */
X#define UART0_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART0CKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_UART0SEL_Pos)|                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV0_UART0DIV_Pos))    
N
N#define UART1_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART1CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_UART1SEL_Pos)|\
N                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV0_UART1DIV_Pos))   /*!< UART1 Module   \hideinitializer */
X#define UART1_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART1CKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL1_UART1SEL_Pos)|                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV0_UART1DIV_Pos))    
N
N#define UART2_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART2CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART2SEL_Pos)|\
N                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART2DIV_Pos))   /*!< UART2 Module   \hideinitializer */
X#define UART2_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART2CKEN_Pos)|                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART2SEL_Pos)|                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART2DIV_Pos))    
N
N#define UART3_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART3CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART3SEL_Pos)|\
N                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART3DIV_Pos))   /*!< UART3 Module   \hideinitializer */
X#define UART3_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART3CKEN_Pos)|                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART3SEL_Pos)|                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART3DIV_Pos))    
N
N#define UART4_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART4CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART4SEL_Pos)|\
N                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART4DIV_Pos))   /*!< UART4 Module   \hideinitializer */
X#define UART4_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART4CKEN_Pos)|                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART4SEL_Pos)|                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART4DIV_Pos))    
N
N#define UART5_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART5CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART5SEL_Pos)|\
N                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART5DIV_Pos))   /*!< UART5 Module   \hideinitializer */
X#define UART5_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART5CKEN_Pos)|                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART5SEL_Pos)|                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART5DIV_Pos))    
N
N#define UART6_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART6CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART6SEL_Pos)|\
N                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART6DIV_Pos))   /*!< UART6 Module   \hideinitializer */
X#define UART6_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART6CKEN_Pos)|                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART6SEL_Pos)|                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART6DIV_Pos))    
N
N#define UART7_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART7CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART7SEL_Pos)|\
N                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART7DIV_Pos))   /*!< UART7 Module   \hideinitializer */
X#define UART7_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART7CKEN_Pos)|                        MODULE_CLKSEL_ENC( 3)|MODULE_CLKSEL_Msk_ENC(  7)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL3_UART7SEL_Pos)|                        MODULE_CLKDIV_ENC( 3)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV4_UART7DIV_Pos))    
N
N#define I2C0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_I2C0CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< I2C0 Module    \hideinitializer */
X#define I2C0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_I2C0CKEN_Pos) |                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define I2C1_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_I2C1CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< I2C1 Module    \hideinitializer */
X#define I2C1_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_I2C1CKEN_Pos) |                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define QSPI0_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_QSPI0CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_QSPI0SEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< QSPI0 Module   \hideinitializer */
X#define QSPI0_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_QSPI0CKEN_Pos) |                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_QSPI0SEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define SPI0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_SPI0CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_SPI0SEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< SPI0 Module    \hideinitializer */
X#define SPI0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_SPI0CKEN_Pos) |                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_SPI0SEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define ADC_MODULE     (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_ADCCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC(   3)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_ADCSEL_Pos)|\
N                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0xFF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV0_ADCDIV_Pos))    /*!< ADC Module     \hideinitializer */
X#define ADC_MODULE     (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_ADCCKEN_Pos)|                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC(   3)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_ADCSEL_Pos)|                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0xFF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV0_ADCDIV_Pos))     
N
N#define ACMP01_MODULE  (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_ACMP01CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< ACMP Module    \hideinitializer */
X#define ACMP01_MODULE  (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_ACMP01CKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define USBD_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_USBDCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 0)|MODULE_CLKSEL_Msk_ENC(  1)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL0_USBDSEL_Pos)|\
N                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV0_USBDIV_Pos))     /*!< USBD Module    \hideinitializer */
X#define USBD_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_USBDCKEN_Pos)|                        MODULE_CLKSEL_ENC( 0)|MODULE_CLKSEL_Msk_ENC(  1)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL0_USBDSEL_Pos)|                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0xF)|MODULE_CLKDIV_Pos_ENC(CLK_CLKDIV0_USBDIV_Pos))      
N
N//APBCLK1
N#define PWM0_MODULE    (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_PWM0CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_PWM0SEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< PWM0 Module    \hideinitializer */
X#define PWM0_MODULE    (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_PWM0CKEN_Pos)|                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_PWM0SEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define PWM1_MODULE    (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_PWM1CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_PWM1SEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< PWM1 Module    \hideinitializer */
X#define PWM1_MODULE    (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_PWM1CKEN_Pos)|                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_PWM1SEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define BPWM0_MODULE   (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_BPWM0CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_BPWM0SEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< BPWM0 Module    \hideinitializer */
X#define BPWM0_MODULE   (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_BPWM0CKEN_Pos)|                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_BPWM0SEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define BPWM1_MODULE   (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_BPWM1CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_BPWM1SEL_Pos)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< BPWM1 Module    \hideinitializer */
X#define BPWM1_MODULE   (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_BPWM1CKEN_Pos)|                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(CLK_CLKSEL2_BPWM1SEL_Pos)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define USCI0_MODULE   (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_USCI0CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< USCI0 Module   \hideinitializer */
X#define USCI0_MODULE   (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_USCI0CKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define USCI1_MODULE   (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_USCI1CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< USCI1 Module   \hideinitializer */
X#define USCI1_MODULE   (MODULE_APBCLK_ENC( 2)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_USCI1CKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define CLK_TIMEOUT_ERR             (-1)    /*!< Clock timeout error value \hideinitializer */
N
N/*@}*/ /* end of group CLK_EXPORTED_CONSTANTS */
N
Nextern int32_t g_CLK_i32ErrCode;
N
N/** @addtogroup CLK_EXPORTED_FUNCTIONS CLK Exported Functions
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* static inline functions                                                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N
N/**
N  * @brief    Get PLL Clock Output Frequency
N  * @param    None
N  * @return   PLL clock output frequency
N  * @details  To get actual PLL clock output frequency. The clock uint is in Hz.
N  * \hideinitializer
N  */
Nstatic __INLINE uint32_t CLK_GetPLLClockFreq(void)
Xstatic __inline uint32_t CLK_GetPLLClockFreq(void)
N{
N    uint32_t u32PllFreq;
N    uint32_t u32FIN, u32NF, u32NR, u32NO;
N    uint8_t au8NoTbl[4] = {1, 2, 2, 4}; /* OUTDIV :DEF: {1, 2, 2, 4} */
N    uint32_t u32Reg;
N
N    u32PllFreq = 0;
N    u32Reg = CLK->PLLCTL;
X    u32Reg = ((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->PLLCTL;
N
N    if ((u32Reg & (CLK_PLLCTL_PD_Msk | CLK_PLLCTL_OE_Msk)) == 0)
X    if ((u32Reg & ((0x1ul << (16)) | (0x1ul << (18)))) == 0)
N    {
N        /* PLL is enabled and output enabled */
N        if (u32Reg & CLK_PLLCTL_PLLSRC_Msk)
X        if (u32Reg & (0x1ul << (19)))
N        {
N            u32FIN = (__HIRC >> 2);
X            u32FIN = ((48000000UL) >> 2);
N        } else
N            u32FIN = __HXT;
X            u32FIN = (32000000UL);
N
N        if (u32Reg & CLK_PLLCTL_BP_Msk)
X        if (u32Reg & (0x1ul << (17)))
N        {
N            /* PLL is in bypass mode */
N            u32PllFreq = u32FIN;
N        }
N        else
N        {
N            /* PLL is in normal work mode */
N            u32NO = au8NoTbl[((u32Reg & CLK_PLLCTL_OUTDIV_Msk) >> CLK_PLLCTL_OUTDIV_Pos)];
X            u32NO = au8NoTbl[((u32Reg & (0x3ul << (14))) >> (14))];
N            u32NF  = ((u32Reg & CLK_PLLCTL_FBDIV_Msk) >> CLK_PLLCTL_FBDIV_Pos) + 2;
X            u32NF  = ((u32Reg & (0x1fful << (0))) >> (0)) + 2;
N            u32NR  = ((u32Reg & CLK_PLLCTL_INDIV_Msk) >> CLK_PLLCTL_INDIV_Pos) + 2;
X            u32NR  = ((u32Reg & (0x1ful << (9))) >> (9)) + 2;
N            /* u32FIN is shifted 2 bits to avoid overflow */
N            u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);
N        }
N    }
N
N    return u32PllFreq;
N}
N
N/**
N  * @brief      This function execute delay function.
N  * @param[in]  us  Delay time. The Max value is 2^24 / CPU Clock(MHz). Ex:
N  *                             50MHz => 335544us, 48MHz => 349525us, 28MHz => 699050us ...
N  * @return     Delay success or not
N  * @retval     0 Success, target delay time reached
N  * @retval     CLK_TIMEOUT_ERR Delay function execute failed due to SysTick stop working
N  * @details    Use the SysTick to generate the delay time and the UNIT is in us.
N  *             The SysTick clock source is from HCLK, i.e. the same as system core clock.
N  *             User can use SystemCoreClockUpdate() to calculate CyclesPerUs automatically before using this function.
N  * \hideinitializer
N  */
N__STATIC_INLINE int32_t CLK_SysTickDelay(uint32_t us)
Xstatic __inline int32_t CLK_SysTickDelay(uint32_t us)
N{
N    /* The u32TimeOutCnt value must be greater than the max delay time of 1398ms if HCLK=12MHz */
N    uint32_t u32TimeOutCnt = SystemCoreClock * 2;
N
N    SysTick->LOAD = us * CyclesPerUs;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = us * CyclesPerUs;
N    SysTick->VAL  = (0x00);
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL  = (0x00);
N    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) | (1UL );
N
N    /* Waiting for down-count to zero */
N    while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0)
X    while ((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL & (1UL << 16U)) == 0)
N    {
N        if(--u32TimeOutCnt == 0)
N        {
N            break;
N        }
N    }
N
N    /* Disable SysTick counter */
N    SysTick->CTRL = 0;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = 0;
N
N    if(u32TimeOutCnt == 0)
N        return CLK_TIMEOUT_ERR;
X        return (-1);
N    else
N        return 0;
N}
N
N
N/**
N  * @brief  Get current UART0 clock frquency.
N  * @param  None.
N  * @return UART0 clock frquency. The clock UNIT is in Hz.
N  * \hideinitializer
N  */
Nstatic __INLINE uint32_t CLK_GetUARTFreq(void)
Xstatic __inline uint32_t CLK_GetUARTFreq(void)
N{
N    uint32_t u32Freqout, u32AHBDivider, u32ClkSel, PCLK0Div;
N
N    u32Freqout = 0;
N    u32ClkSel = CLK->CLKSEL1 & CLK_CLKSEL1_UART0SEL_Msk ;
X    u32ClkSel = ((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL1 & (0x7ul << (24)) ;
N
N    if (u32ClkSel == CLK_CLKSEL1_UART0SEL_HXT)  /* external HXT crystal clock */
X    if (u32ClkSel == (0x0UL<<(24)))   
N    {
N        u32Freqout = __HXT;
X        u32Freqout = (32000000UL);
N    }
N    else if(u32ClkSel == CLK_CLKSEL1_UART0SEL_PLL)      /* PLL clock */
X    else if(u32ClkSel == (0x1UL<<(24)))       
N    {
N        u32Freqout = CLK_GetPLLClockFreq();
N    }
N    else if(u32ClkSel == CLK_CLKSEL1_UART0SEL_LXT)      /* LXT clock */
X    else if(u32ClkSel == (0x2UL<<(24)))       
N    {
N        u32Freqout = __LXT;
X        u32Freqout = (32768UL);
N    }
N    else if(u32ClkSel == CLK_CLKSEL1_UART0SEL_HIRC)     /* HIRC clock */
X    else if(u32ClkSel == (0x3UL<<(24)))      
N    {
N        u32Freqout = __HIRC;
X        u32Freqout = (48000000UL);
N    }
N    else if(u32ClkSel == CLK_CLKSEL1_UART0SEL_PCLK0)    /* PCLK0 clock */
X    else if(u32ClkSel == (0x4UL<<(24)))     
N    {
N        PCLK0Div = (CLK->PCLKDIV & CLK_PCLKDIV_APB0DIV_Msk) >> CLK_PCLKDIV_APB0DIV_Pos;
X        PCLK0Div = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->PCLKDIV & (0x7ul << (0))) >> (0);
N        u32Freqout = (SystemCoreClock >> PCLK0Div);
N    }
N    else if(u32ClkSel == CLK_CLKSEL1_UART0SEL_LIRC)     /* LIRC clock */
X    else if(u32ClkSel == (0x5UL<<(24)))      
N    {
N        u32Freqout = __LIRC;
X        u32Freqout = (38400UL);
N    }
N
N    u32AHBDivider = (CLK->CLKDIV0 & CLK_CLKDIV0_UART0DIV_Msk) + 1 ;
X    u32AHBDivider = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV0 & (0xful << (8))) + 1 ;
N
N    return (u32Freqout/u32AHBDivider);
N}
N
N
Nuint32_t CLK_WaitClockReady(uint32_t);
Nvoid CLK_DisableCKO(void);
Nvoid CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En);
Nuint32_t CLK_GetHCLKFreq(void);
Nuint32_t CLK_GetCPUFreq(void);
Nuint32_t CLK_GetLXTFreq(void);
Nuint32_t CLK_GetHXTFreq(void);
Nvoid CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv);
Nuint32_t CLK_SetCoreClock(uint32_t u32Hclk);
Nuint32_t CLK_GetPCLK0Freq(void);
Nuint32_t CLK_GetPCLK1Freq(void);
Nvoid CLK_EnableXtalRC(uint32_t u32ClkMask);
Nvoid CLK_DisableXtalRC(uint32_t u32ClkMask);
Nvoid CLK_DisableModuleClock(uint32_t u32ModuleIdx);
Nvoid CLK_EnableModuleClock(uint32_t u32ModuleIdx);
Nvoid CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv);
Nvoid CLK_DisablePLL(void);
Nuint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq);
Nvoid CLK_SetSysTickClockSrc(uint32_t u32ClkSrc);
Nvoid CLK_DisableSysTick(void);
Nvoid CLK_EnableSysTick(uint32_t u32ClkSrc, uint32_t u32Count);
Nvoid CLK_PowerDown(void);
Nvoid CLK_Idle(void);
N
N/*@}*/ /* end of group CLK_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group CLK_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CLK_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 565 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "acmp.h"
L 1 "..\..\..\Library\StdDriver\inc\acmp.h" 1
N/**************************************************************************//**
N * @file     acmp.h
N * @version  V0.10
N * $Revision: 2 $
N * $Date: 18/12/21 10:53a $
N * @brief    M031 Series ACMP Driver Header File
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __ACMP_H__
N#define __ACMP_H__
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Include related headers                                                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N#include "M031Series.h"
L 1 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 1
N/**************************************************************************//**
N * @file     m031series.h
N * @version  V3.0
N * $Revision: 12 $
N * $Date: 18/08/16 4:06p $
N * @brief    M031 Series Peripheral Access Layer Header File
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N
N/**
N  \mainpage NuMicro M031 Driver Reference Guide
N  *
N  * <b>Introduction</b>
N  *
N  * This user manual describes the usage of M031 Series MCU device driver
N  *
N  * <b>Disclaimer</b>
N  *
N  * The Software is furnished "AS IS", without warranty as to performance or results, and
N  * the entire risk as to performance or results is assumed by YOU. Nuvoton disclaims all
N  * warranties, express, implied or otherwise, with regard to the Software, its use, or
N  * operation, including without limitation any and all warranties of merchantability, fitness
N  * for a particular purpose, and non-infringement of intellectual property rights.
N  *
N  * <b>Important Notice</b>
N  *
N  * Nuvoton Products are neither intended nor warranted for usage in systems or equipment,
N  * any malfunction or failure of which may cause loss of human life, bodily injury or severe
N  * property damage. Such applications are deemed, "Insecure Usage".
N  *
N  * Insecure usage includes, but is not limited to: equipment for surgical implementation,
N  * atomic energy control instruments, airplane or spaceship instruments, the control or
N  * operation of dynamic, brake or safety systems designed for vehicular use, traffic signal
N  * instruments, all types of safety devices, and other applications intended to support or
N  * sustain life.
N  *
N  * All Insecure Usage shall be made at customer's risk, and in the event that third parties
N  * lay claims to Nuvoton as a result of customer's Insecure Usage, customer shall indemnify
N  * the damages and liabilities thus incurred by Nuvoton.
N  *
N  * Please note that all data and specifications are subject to change without notice. All the
N  * trademarks of products and companies mentioned in this datasheet belong to their respective
N  * owners.
N  *
N  * <b>Copyright Notice</b>
N  *
N  * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N  */
N
N#ifndef __M031SERIES_H__
S#define __M031SERIES_H__
S
S/******************************************************************************/
S/*                Processor and Core Peripherals                              */
S/******************************************************************************/
S/** @addtogroup CMSIS_Device CMSIS Definitions
S  Configuration of the Cortex-M0 Processor and Core Peripherals
S  @{
S*/
S
S
S/*
S * ==========================================================================
S * ---------- Interrupt Number Definition -----------------------------------
S * ==========================================================================
S */
S
S/**
S * @details  Interrupt Number Definition. The maximum of 32 Specific Interrupts are possible.
S */
Stypedef enum IRQn
S{
S    /******  Cortex-M0 Processor Exceptions Numbers ***************************************************/
S    NonMaskableInt_IRQn       = -14,      /*!< 2 Non Maskable Interrupt                             */
S    HardFault_IRQn            = -13,      /*!< 3 Cortex-M0 Hard Fault Interrupt                     */
S    SVCall_IRQn               = -5,       /*!< 11 Cortex-M0 SV Call Interrupt                       */
S    PendSV_IRQn               = -2,       /*!< 14 Cortex-M0 Pend SV Interrupt                       */
S    SysTick_IRQn              = -1,       /*!< 15 Cortex-M0 System Tick Interrupt                   */
S
S    /******  ARMIKMCU Swift specific Interrupt Numbers ************************************************/
S    BOD_IRQn                  = 0,        /*!< Brown-Out Low Voltage Detected Interrupt             */
S    WDT_IRQn                  = 1,        /*!< Watch Dog Timer Interrupt                            */
S    EINT024_IRQn              = 2,        /*!< EINT0, EINT2 and EINT4 Interrupt                     */
S    EINT135_IRQn              = 3,        /*!< EINT1, EINT3 and EINT5 Interrupt                     */
S    GPIO_PAPB_IRQn            = 4,        /*!< GPIO_PAPBPGPH Interrupt                              */
S    GPIO_PAPBPGPH_IRQn        = 4,        /*!< GPIO_PAPBPGPH Interrupt                              */
S    GPIO_PCPDPEPF_IRQn        = 5,        /*!< GPIO_PCPDPEPF Interrupt                              */
S    PWM0_IRQn                 = 6,        /*!< PWM0 Interrupt                                       */
S    PWM1_IRQn                 = 7,        /*!< PWM1 Interrupt                                       */
S    TMR0_IRQn                 = 8,        /*!< TIMER0 Interrupt                                     */
S    TMR1_IRQn                 = 9,        /*!< TIMER1 Interrupt                                     */
S    TMR2_IRQn                 = 10,       /*!< TIMER2 Interrupt                                     */
S    TMR3_IRQn                 = 11,       /*!< TIMER3 Interrupt                                     */
S    UART02_IRQn               = 12,       /*!< UART0 and UART2 Interrupt                            */
S    UART1_IRQn                = 13,       /*!< UART1 and UART3 Interrupt                            */
S    UART13_IRQn               = 13,       /*!< UART1 and UART3 Interrupt                            */
S    SPI0_IRQn                 = 14,       /*!< SPI0 Interrupt                                       */
S    QSPI0_IRQn                = 15,       /*!< QSPI0 Interrupt                                      */
S    ISP_IRQn                  = 16,       /*!< ISP Interrupt	                                    */
S    UART57_IRQn               = 17,       /*!< UART5 and UART7 Interrupt                            */
S    I2C0_IRQn                 = 18,       /*!< I2C0 Interrupt                                       */
S    I2C1_IRQn                 = 19,       /*!< I2C1 Interrupt                                       */
S    BPWM0_IRQn                = 20,       /*!< BPWM0 Interrupt                                      */
S    BPWM1_IRQn                = 21,       /*!< BPWM1 Interrupt                                      */
S    USCI_IRQn                 = 22,       /*!< USCI0 and USCI1 interrupt                            */
S    USCI01_IRQn               = 22,       /*!< USCI0 and USCI1 interrupt                            */
S    USBD_IRQn                 = 23,       /*!< USB Device Interrupt                                 */
S    ACMP01_IRQn               = 25,       /*!< ACMP0/1 Interrupt                                    */
S    PDMA_IRQn                 = 26,       /*!< PDMA Interrupt                                       */
S    UART46_IRQn               = 27,       /*!< UART4 and UART6 Interrupt                            */
S    PWRWU_IRQn                = 28,       /*!< Power Down Wake Up Interrupt                         */
S    ADC_IRQn                  = 29,       /*!< ADC Interrupt                                        */
S    CKFAIL_IRQn               = 30,       /*!< Clock fail detect Interrupt                          */
S    RTC_IRQn                  = 31,       /*!< RTC Interrupt                                        */
S} IRQn_Type;
S
S
S/*
S * ==========================================================================
S * ----------- Processor and Core Peripheral Section ------------------------
S * ==========================================================================
S */
S
S/* Configuration of the Cortex-M0 Processor and Core Peripherals */
S#define __MPU_PRESENT           0       /*!< armikcmu does not provide a MPU present or not       */
S#define __NVIC_PRIO_BITS        2       /*!< armikcmu Supports 2 Bits for the Priority Levels     */
S#define __Vendor_SysTickConfig  0       /*!< Set to 1 if different SysTick Config is used         */
S
S/*@}*/ /* end of group CMSIS_Device */
S
S#include "core_cm0.h"                   /*!< Cortex-M0 processor and core peripherals             */
S#include "system_M031Series.h"          /*!< M031 System                                    */
S
S
S#if defined ( __CC_ARM   )
S#pragma anon_unions
S#endif
S
S
S/**
S * Initialize the system clock
S *
S * @param  None
S * @return None
S *
S * @brief  Setup the microcontroller system
S *         Initialize the PLL and update the SystemFrequency variable
S */
Sextern void SystemInit(void);
S
S
S
S/******************************************************************************/
S/*                Device Specific Peripheral registers structures             */
S/******************************************************************************/
S
S#include "acmp_reg.h"
S#include "adc_reg.h"
S#include "clk_reg.h"
S#include "crc_reg.h"
S#include "ebi_reg.h"
S#include "fmc_reg.h"
S#include "gpio_reg.h"
S#include "hdiv_reg.h"
S#include "i2c_reg.h"
S#include "pdma_reg.h"
S#include "pwm_reg.h"
S#include "bpwm_reg.h"
S#include "qspi_reg.h"
S#include "spi_reg.h"
S#include "sys_reg.h"
S#include "rtc_reg.h"
S#include "timer_reg.h"
S#include "uart_reg.h"
S#include "ui2c_reg.h"
S#include "usbd_reg.h"
S#include "uspi_reg.h"
S#include "uuart_reg.h"
S#include "wdt_reg.h"
S#include "wwdt_reg.h"
S
S
S/******************************************************************************/
S/*                         Peripheral memory map                              */
S/******************************************************************************/
S/** @addtogroup PERIPHERAL_BASE Peripheral Memory Base
S  Memory Mapped Structure for Series Peripheral
S  @{
S */
S/* Peripheral and SRAM base address */
S#define FLASH_BASE          ((     uint32_t)0x00000000)
S#define SRAM_BASE           ((     uint32_t)0x20000000)
S#define AHB_BASE            ((     uint32_t)0x40000000)
S#define APB1_BASE           ((     uint32_t)0x40000000)
S#define APB2_BASE           ((     uint32_t)0x40000000)
S
S/* Peripheral memory map */
S
S#define SYS_BASE            (AHB_BASE       + 0x00000)                  /*!< System Global Controller Base Address            */
S#define CLK_BASE            (AHB_BASE       + 0x00200)                  /*!< System Clock Controller Base Address             */
S#define INT_BASE            (AHB_BASE       + 0x00300)                  /*!< Interrupt Source Controller Base Address         */
S#define NMI_BASE            (AHB_BASE       + 0x00300)                  /*!< Interrupt Source Controller Base Address         */
S
S#define GPIO_BASE           (AHB_BASE       + 0x4000)                   /*!< GPIO Base Address                                */
S#define PA_BASE             (GPIO_BASE              )                   /*!< GPIO PA Base Address                             */
S#define PB_BASE             (GPIO_BASE      + 0x0040)                   /*!< GPIO PB Base Address                             */
S#define PC_BASE             (GPIO_BASE      + 0x0080)                   /*!< GPIO PC Base Address                             */
S#define PD_BASE             (GPIO_BASE      + 0x00C0)                   /*!< GPIO PD Base Address                             */
S#define PE_BASE             (GPIO_BASE      + 0x0100)                   /*!< GPIO PE Base Address                             */
S#define PF_BASE             (GPIO_BASE      + 0x0140)                   /*!< GPIO PF Base Address                             */
S#define PG_BASE             (GPIO_BASE      + 0x0180)                   /*!< GPIO PG Base Address                             */
S#define PH_BASE             (GPIO_BASE      + 0x01C0)                   /*!< GPIO PH Base Address                             */
S#define GPIO_DBCTL_BASE     (GPIO_BASE      + 0x0440)                   /*!< GPIO De-bounce Cycle Control Base Address        */
S#define GPIO_PIN_DATA_BASE  (GPIO_BASE      + 0x0800)                   /*!< GPIO Pin Data Input/Output Control Base Address  */
S
S#define PDMA_BASE           (AHB_BASE       + 0x08000)                  /*!< PDMA Base Address                                */
S#define FMC_BASE            (AHB_BASE       + 0x0C000)                  /*!< Flash Memory Controller Base Address             */
S#define EBI_BASE            (AHB_BASE       + 0x10000)                  /*!< EBI Base Address                                 */
S#define HDIV_BASE           (AHB_BASE       + 0x14000)                  /*!< HDIV Base Address                                */
S#define CRC_BASE            (AHB_BASE       + 0x31000)                  /*!< CRC Base Address                                 */
S
S#define WDT_BASE            (APB1_BASE      + 0x40000)                  /*!< Watch Dog Timer Base Address                     */
S#define WWDT_BASE           (APB1_BASE      + 0x40100)                  /*!< Window Watch Dog Timer Base Address              */
S#define RTC_BASE            (APB1_BASE      + 0x41000)                  /*!< RTC Base Address                                 */
S#define ADC_BASE            (APB1_BASE      + 0x43000)                  /*!< ADC Base Address                                 */
S#define ACMP01_BASE         (APB1_BASE      + 0x45000)                  /*!< ACMP01 Base Address                              */
S
S#define TIMER0_BASE         (APB1_BASE      + 0x50000)                  /*!< Timer0 Base Address                              */
S#define TIMER1_BASE         (APB1_BASE      + 0x50020)                  /*!< Timer1 Base Address                              */
S#define TIMER2_BASE         (APB2_BASE      + 0x51000)                  /*!< Timer2 Base Address                              */
S#define TIMER3_BASE         (APB2_BASE      + 0x51020)                  /*!< Timer3 Base Address                              */
S
S#define PWM0_BASE           (APB1_BASE      + 0x58000)                  /*!< PWM0 Base Address                                */
S#define PWM1_BASE           (APB2_BASE      + 0x59000)                  /*!< PWM1 Base Address                                */
S
S#define BPWM0_BASE          (APB1_BASE      + 0x5A000)                  /*!< BPWM0 Base Address                               */
S#define BPWM1_BASE          (APB2_BASE      + 0x5B000)                  /*!< BPWM1 Base Address                               */
S
S#define QSPI0_BASE          (APB1_BASE      + 0x60000)                  /*!< QSPI0 Base Address                               */
S#define SPI0_BASE           (APB1_BASE      + 0x61000)                  /*!< SPI0 Base Address                                */
S
S#define UART0_BASE          (APB1_BASE      + 0x70000)                  /*!< UART0 Base Address                               */
S#define UART1_BASE          (APB2_BASE      + 0x71000)                  /*!< UART1 Base Address                               */
S#define UART2_BASE          (APB2_BASE      + 0x72000)                  /*!< UART2 Base Address                               */
S#define UART3_BASE          (APB2_BASE      + 0x73000)                  /*!< UART3 Base Address                               */
S#define UART4_BASE          (APB2_BASE      + 0x74000)                  /*!< UART4 Base Address                               */
S#define UART5_BASE          (APB2_BASE      + 0x75000)                  /*!< UART5 Base Address                               */
S#define UART6_BASE          (APB2_BASE      + 0x76000)                  /*!< UART6 Base Address                               */
S#define UART7_BASE          (APB2_BASE      + 0x77000)                  /*!< UART7 Base Address                               */
S
S#define I2C0_BASE           (APB1_BASE      + 0x80000)                  /*!< I2C0 Base Address                                */
S#define I2C1_BASE           (APB2_BASE      + 0x81000)                  /*!< I2C1 Base Address                                */
S
S#define USBD_BASE           (AHB_BASE       + 0xC0000)                  /*!< USBD1.1 Base Address                             */
S#define USCI0_BASE          (APB1_BASE      + 0xD0000)                  /*!< USCI0 Base Address                               */
S#define USCI1_BASE          (APB2_BASE      + 0xD1000)                  /*!< USCI1 Base Address                               */
S
S
S/**@}*/ /* PERIPHERAL */
S
S/******************************************************************************/
S/*                         Peripheral declaration                             */
S/******************************************************************************/
S
S/** @addtogroup PMODULE Peripheral Pointer
S  The Declaration of Peripheral Pointer
S  @{
S */
S#define PA                  ((GPIO_T *) PA_BASE)                        /*!< GPIO PORTA Configuration Struct                        */
S#define PB                  ((GPIO_T *) PB_BASE)                        /*!< GPIO PORTB Configuration Struct                        */
S#define PC                  ((GPIO_T *) PC_BASE)                        /*!< GPIO PORTC Configuration Struct                        */
S#define PD                  ((GPIO_T *) PD_BASE)                        /*!< GPIO PORTD Configuration Struct                        */
S#define PE                  ((GPIO_T *) PE_BASE)                        /*!< GPIO PORTE Configuration Struct                        */
S#define PF                  ((GPIO_T *) PF_BASE)                        /*!< GPIO PORTF Configuration Struct                        */
S#define PG                  ((GPIO_T *) PG_BASE)                        /*!< GPIO PORTG Configuration Struct                        */
S#define PH                  ((GPIO_T *) PH_BASE)                        /*!< GPIO PORTH Configuration Struct                        */
S#define GPIO                ((GPIO_DBCTL_T *) GPIO_DBCTL_BASE)          /*!< Interrupt De-bounce Cycle Control Configuration Struct */
S
S#define UART0               ((UART_T *) UART0_BASE)                     /*!< UART0 Configuration Struct                       */
S#define UART1               ((UART_T *) UART1_BASE)                     /*!< UART1 Configuration Struct                       */
S#define UART2               ((UART_T *) UART2_BASE)                     /*!< UART2 Configuration Struct                       */
S#define UART3               ((UART_T *) UART3_BASE)                     /*!< UART3 Configuration Struct                       */
S#define UART4               ((UART_T *) UART4_BASE)                     /*!< UART4 Configuration Struct                       */
S#define UART5               ((UART_T *) UART5_BASE)                     /*!< UART5 Configuration Struct                       */
S#define UART6               ((UART_T *) UART6_BASE)                     /*!< UART6 Configuration Struct                       */
S#define UART7               ((UART_T *) UART7_BASE)                     /*!< UART7 Configuration Struct                       */
S
S#define TIMER0              ((TIMER_T *) TIMER0_BASE)                   /*!< TIMER0 Configuration Struct                      */
S#define TIMER1              ((TIMER_T *) TIMER1_BASE)                   /*!< TIMER1 Configuration Struct                      */
S#define TIMER2              ((TIMER_T *) TIMER2_BASE)                   /*!< TIMER2 Configuration Struct                      */
S#define TIMER3              ((TIMER_T *) TIMER3_BASE)                   /*!< TIMER3 Configuration Struct                      */
S
S#define WDT                 ((WDT_T *) WDT_BASE)                        /*!< Watch Dog Timer Configuration Struct             */
S
S#define WWDT                ((WWDT_T *) WWDT_BASE)                      /*!< Window Watch Dog Timer Configuration Struct      */
S
S#define SPI0                ((SPI_T *) SPI0_BASE)                       /*!< SPI0 Configuration Struct                        */
S#define QSPI0               ((QSPI_T *) QSPI0_BASE)                     /*!< QSPI0 Configuration Struct                       */
S
S#define I2C0                ((I2C_T *) I2C0_BASE)                       /*!< I2C0 Configuration Struct                        */
S#define I2C1                ((I2C_T *) I2C1_BASE)                       /*!< I2C1 Configuration Struct                        */
S
S#define ADC                 ((ADC_T *) ADC_BASE)                        /*!< ADC Configuration Struct                         */
S
S#define ACMP01              ((ACMP_T *) ACMP01_BASE)                    /*!< ACMP01 Configuration Struct                      */
S
S#define CLK                 ((CLK_T *) CLK_BASE)                        /*!< System Clock Controller Configuration Struct     */
S
S#define SYS                 ((SYS_T *) SYS_BASE)                        /*!< System Global Controller Configuration Struct    */
S
S#define SYSINT              ((NMI_T *) INT_BASE)                        /*!< Interrupt Source Controller Configuration Struct */
S#define NMI                 ((NMI_T *) NMI_BASE)                        /*!< Interrupt Source Controller Configuration Struct */
S
S#define FMC                 ((FMC_T *) FMC_BASE)                        /*!< Flash Memory Controller                          */
S
S#define PWM0                ((PWM_T *) PWM0_BASE)                       /*!< PWM0 Configuration Struct                        */
S#define PWM1                ((PWM_T *) PWM1_BASE)                       /*!< PWM1 Configuration Struct                        */
S#define BPWM0               ((BPWM_T *) BPWM0_BASE)                     /*!< BPWM0 Configuration Struct                       */
S#define BPWM1               ((BPWM_T *) BPWM1_BASE)                     /*!< BPWM1 Configuration Struct                       */
S
S#define EBI                 ((EBI_T *) EBI_BASE)                        /*!< EBI Configuration Struct                         */
S
S#define HDIV                ((HDIV_T *) HDIV_BASE)                      /*!< HDIV Configuration Struct                        */
S
S#define CRC                 ((CRC_T *) CRC_BASE)                        /*!< CRC Configuration Struct                         */
S
S#define USBD                ((USBD_T *) USBD_BASE)                      /*!< CRC Configuration Struct                         */
S
S#define PDMA                ((PDMA_T *) PDMA_BASE)                      /*!< PDMA Configuration Struct                        */
S
S#define UI2C0               ((UI2C_T *) USCI0_BASE)                     /*!< UI2C0 Configuration Struct                       */
S#define UI2C1               ((UI2C_T *) USCI1_BASE)                     /*!< UI2C1 Configuration Struct                       */
S
S#define USPI0               ((USPI_T *) USCI0_BASE)                     /*!< USPI0 Configuration Struct                       */
S#define USPI1               ((USPI_T *) USCI1_BASE)                     /*!< USPI1 Configuration Struct                       */
S
S#define UUART0              ((UUART_T *) USCI0_BASE)                    /*!< UUART0 Configuration Struct                      */
S#define UUART1              ((UUART_T *) USCI1_BASE)                    /*!< UUART1 Configuration Struct                      */
S
S#define RTC                 ((RTC_T *)   RTC_BASE)                      /*!< RTC Configuration Struct                         */
S
S/**@}*/ /* end of group PMODULE */
S
S
S//=============================================================================
S
S/** @addtogroup IO_ROUTINE I/O Routines
S  The Declaration of I/O Routines
S  @{
S */
S
Stypedef volatile unsigned char  vu8;
Stypedef volatile unsigned long  vu32;
Stypedef volatile unsigned short vu16;
S
S/**
S  * @brief Get a 8-bit unsigned value from specified address
S  * @param[in] addr Address to get 8-bit data from
S  * @return  8-bit unsigned value stored in specified address
S  */
S#define M8(addr)  (*((vu8  *) (addr)))
S
S/**
S  * @brief Get a 16-bit unsigned value from specified address
S  * @param[in] addr Address to get 16-bit data from
S  * @return  16-bit unsigned value stored in specified address
S  * @note The input address must be 16-bit aligned
S  */
S#define M16(addr) (*((vu16 *) (addr)))
S
S/**
S  * @brief Get a 32-bit unsigned value from specified address
S  * @param[in] addr Address to get 32-bit data from
S  * @return  32-bit unsigned value stored in specified address
S  * @note The input address must be 32-bit aligned
S  */
S#define M32(addr) (*((vu32 *) (addr)))
S
S/**
S  * @brief Set a 32-bit unsigned value to specified I/O port
S  * @param[in] port Port address to set 32-bit data
S  * @param[in] value Value to write to I/O port
S  * @return  None
S  * @note The output port must be 32-bit aligned
S  */
S#define outpw(port,value)   (*((volatile unsigned int *)(port))=(value))
S
S/**
S  * @brief Get a 32-bit unsigned value from specified I/O port
S  * @param[in] port Port address to get 32-bit data from
S  * @return  32-bit unsigned value stored in specified I/O port
S  * @note The input port must be 32-bit aligned
S  */
S#define inpw(port)          ((*((volatile unsigned int *)(port))))
S
S/**
S  * @brief Set a 16-bit unsigned value to specified I/O port
S  * @param[in] port Port address to set 16-bit data
S  * @param[in] value Value to write to I/O port
S  * @return  None
S  * @note The output port must be 16-bit aligned
S  */
S#define outps(port,value)   (*((volatile unsigned short *)(port))=(value))
S
S/**
S  * @brief Get a 16-bit unsigned value from specified I/O port
S  * @param[in] port Port address to get 16-bit data from
S  * @return  16-bit unsigned value stored in specified I/O port
S  * @note The input port must be 16-bit aligned
S  */
S#define inps(port)          ((*((volatile unsigned short *)(port))))
S
S/**
S  * @brief Set a 8-bit unsigned value to specified I/O port
S  * @param[in] port Port address to set 8-bit data
S  * @param[in] value Value to write to I/O port
S  * @return  None
S  */
S#define outpb(port,value)   (*((volatile unsigned char *)(port))=(value))
S
S/**
S  * @brief Get a 8-bit unsigned value from specified I/O port
S  * @param[in] port Port address to get 8-bit data from
S  * @return  8-bit unsigned value stored in specified I/O port
S  */
S#define inpb(port)          ((*((volatile unsigned char *)(port))))
S
S/**
S  * @brief Set a 32-bit unsigned value to specified I/O port
S  * @param[in] port Port address to set 32-bit data
S  * @param[in] value Value to write to I/O port
S  * @return  None
S  * @note The output port must be 32-bit aligned
S  */
S#define outp32(port,value)  (*((volatile unsigned int *)(port))=(value))
S
S/**
S  * @brief Get a 32-bit unsigned value from specified I/O port
S  * @param[in] port Port address to get 32-bit data from
S  * @return  32-bit unsigned value stored in specified I/O port
S  * @note The input port must be 32-bit aligned
S  */
S#define inp32(port)         ((*((volatile unsigned int *)(port))))
S
S/**
S  * @brief Set a 16-bit unsigned value to specified I/O port
S  * @param[in] port Port address to set 16-bit data
S  * @param[in] value Value to write to I/O port
S  * @return  None
S  * @note The output port must be 16-bit aligned
S  */
S#define outp16(port,value)  (*((volatile unsigned short *)(port))=(value))
S
S/**
S  * @brief Get a 16-bit unsigned value from specified I/O port
S  * @param[in] port Port address to get 16-bit data from
S  * @return  16-bit unsigned value stored in specified I/O port
S  * @note The input port must be 16-bit aligned
S  */
S#define inp16(port)         ((*((volatile unsigned short *)(port))))
S
S/**
S  * @brief Set a 8-bit unsigned value to specified I/O port
S  * @param[in] port Port address to set 8-bit data
S  * @param[in] value Value to write to I/O port
S  * @return  None
S  */
S#define outp8(port,value)   (*((volatile unsigned char *)(port))=(value))
S
S/**
S  * @brief Get a 8-bit unsigned value from specified I/O port
S  * @param[in] port Port address to get 8-bit data from
S  * @return  8-bit unsigned value stored in specified I/O port
S  */
S#define inp8(port)          ((*((volatile unsigned char *)(port))))
S
S/*@}*/ /* end of group IO_ROUTINE */
S
S/******************************************************************************/
S/*                Legacy Constants                                            */
S/******************************************************************************/
S
S/** @addtogroup Legacy_Constants Legacy Constants
S  Legacy Constants
S  @{
S*/
S
S#define E_SUCCESS (0)
S
S#ifndef NULL
S#define NULL      (0)                 ///< NULL pointer
S#endif
S
S#define TRUE      (1UL)               ///< Boolean true, define to use in API parameters or return value
S#define FALSE     (0UL)               ///< Boolean false, define to use in API parameters or return value
S
S#define ENABLE    (1UL)               ///< Enable, define to use in API parameters
S#define DISABLE   (0UL)               ///< Disable, define to use in API parameters
S
S/* Define one bit mask */
S#define BIT0     (0x00000001UL)       ///< Bit 0 mask of an 32 bit integer
S#define BIT1     (0x00000002UL)       ///< Bit 1 mask of an 32 bit integer
S#define BIT2     (0x00000004UL)       ///< Bit 2 mask of an 32 bit integer
S#define BIT3     (0x00000008UL)       ///< Bit 3 mask of an 32 bit integer
S#define BIT4     (0x00000010UL)       ///< Bit 4 mask of an 32 bit integer
S#define BIT5     (0x00000020UL)       ///< Bit 5 mask of an 32 bit integer
S#define BIT6     (0x00000040UL)       ///< Bit 6 mask of an 32 bit integer
S#define BIT7     (0x00000080UL)       ///< Bit 7 mask of an 32 bit integer
S#define BIT8     (0x00000100UL)       ///< Bit 8 mask of an 32 bit integer
S#define BIT9     (0x00000200UL)       ///< Bit 9 mask of an 32 bit integer
S#define BIT10    (0x00000400UL)       ///< Bit 10 mask of an 32 bit integer
S#define BIT11    (0x00000800UL)       ///< Bit 11 mask of an 32 bit integer
S#define BIT12    (0x00001000UL)       ///< Bit 12 mask of an 32 bit integer
S#define BIT13    (0x00002000UL)       ///< Bit 13 mask of an 32 bit integer
S#define BIT14    (0x00004000UL)       ///< Bit 14 mask of an 32 bit integer
S#define BIT15    (0x00008000UL)       ///< Bit 15 mask of an 32 bit integer
S#define BIT16    (0x00010000UL)       ///< Bit 16 mask of an 32 bit integer
S#define BIT17    (0x00020000UL)       ///< Bit 17 mask of an 32 bit integer
S#define BIT18    (0x00040000UL)       ///< Bit 18 mask of an 32 bit integer
S#define BIT19    (0x00080000UL)       ///< Bit 19 mask of an 32 bit integer
S#define BIT20    (0x00100000UL)       ///< Bit 20 mask of an 32 bit integer
S#define BIT21    (0x00200000UL)       ///< Bit 21 mask of an 32 bit integer
S#define BIT22    (0x00400000UL)       ///< Bit 22 mask of an 32 bit integer
S#define BIT23    (0x00800000UL)       ///< Bit 23 mask of an 32 bit integer
S#define BIT24    (0x01000000UL)       ///< Bit 24 mask of an 32 bit integer
S#define BIT25    (0x02000000UL)       ///< Bit 25 mask of an 32 bit integer
S#define BIT26    (0x04000000UL)       ///< Bit 26 mask of an 32 bit integer
S#define BIT27    (0x08000000UL)       ///< Bit 27 mask of an 32 bit integer
S#define BIT28    (0x10000000UL)       ///< Bit 28 mask of an 32 bit integer
S#define BIT29    (0x20000000UL)       ///< Bit 29 mask of an 32 bit integer
S#define BIT30    (0x40000000UL)       ///< Bit 30 mask of an 32 bit integer
S#define BIT31    (0x80000000UL)       ///< Bit 31 mask of an 32 bit integer
S
S
S/* Byte Mask Definitions */
S#define BYTE0_Msk              (0x000000FFUL)                   ///< Mask to get bit0~bit7 from a 32 bit integer
S#define BYTE1_Msk              (0x0000FF00UL)                   ///< Mask to get bit8~bit15 from a 32 bit integer
S#define BYTE2_Msk              (0x00FF0000UL)                   ///< Mask to get bit16~bit23 from a 32 bit integer
S#define BYTE3_Msk              (0xFF000000UL)                   ///< Mask to get bit24~bit31 from a 32 bit integer
S
S#define GET_BYTE0(u32Param)    (((u32Param) & BYTE0_Msk)      ) /*!< Extract Byte 0 (Bit  0~ 7) from parameter u32Param */
S#define GET_BYTE1(u32Param)    (((u32Param) & BYTE1_Msk) >>  8) /*!< Extract Byte 1 (Bit  8~15) from parameter u32Param */
S#define GET_BYTE2(u32Param)    (((u32Param) & BYTE2_Msk) >> 16) /*!< Extract Byte 2 (Bit 16~23) from parameter u32Param */
S#define GET_BYTE3(u32Param)    (((u32Param) & BYTE3_Msk) >> 24) /*!< Extract Byte 3 (Bit 24~31) from parameter u32Param */
S
S/* Chip Series number definitions */
S#define GET_CHIP_SERIES_NUM    ((SYS->PDID & 0xF00) >> 8)       /*!< Extract chip series number from PDID */
S#define CHIP_SERIES_NUM_B      (0xBUL)                          /*!< Chip series number for M031_B */
S#define CHIP_SERIES_NUM_C      (0xCUL)                          /*!< Chip series number for M031_C */
S#define CHIP_SERIES_NUM_D      (0xDUL)                          /*!< Chip series number for M031_D */
S#define CHIP_SERIES_NUM_E      (0xEUL)                          /*!< Chip series number for M031_E */
S#define CHIP_SERIES_NUM_G      (0x6UL)                          /*!< Chip series number for M031_G */
S#define CHIP_SERIES_NUM_I      (0x1UL)                          /*!< Chip series number for M031_I */
S
S/*@}*/ /* end of group Legacy_Constants */
S
S/******************************************************************************/
S/*                         Peripheral header files                            */
S/******************************************************************************/
S#include "sys.h"
S#include "clk.h"
S#include "acmp.h"
S#include "adc.h"
S#include "crc.h"
S#include "ebi.h"
S#include "fmc.h"
S#include "gpio.h"
S#include "i2c.h"
S#include "pdma.h"
S#include "pwm.h"
S#include "bpwm.h"
S#include "qspi.h"
S#include "spi.h"
S#include "rtc.h"
S#include "hdiv.h"
S#include "timer.h"
S#include "uart.h"
S#include "usbd.h"
S#include "usci_i2c.h"
S#include "usci_spi.h"
S#include "usci_uart.h"
S#include "wdt.h"
S#include "wwdt.h"
S
N#endif  // __M031SERIES_H__
N
N/* Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved. */
L 19 "..\..\..\Library\StdDriver\inc\acmp.h" 2
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup ACMP_Driver ACMP Driver
N  @{
N*/
N
N
N/** @addtogroup ACMP_EXPORTED_CONSTANTS ACMP Exported Constants
N  @{
N*/
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ACMP_CTL constant definitions                                                                           */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ACMP_CTL_FILTSEL_OFF         (0UL << ACMP_CTL_FILTSEL_Pos) /*!< ACMP_CTL setting for filter function disabled. \hideinitializer */
N#define ACMP_CTL_FILTSEL_1PCLK       (1UL << ACMP_CTL_FILTSEL_Pos) /*!< ACMP_CTL setting for 1 PCLK filter count. \hideinitializer */
N#define ACMP_CTL_FILTSEL_2PCLK       (2UL << ACMP_CTL_FILTSEL_Pos) /*!< ACMP_CTL setting for 2 PCLK filter count. \hideinitializer */
N#define ACMP_CTL_FILTSEL_4PCLK       (3UL << ACMP_CTL_FILTSEL_Pos) /*!< ACMP_CTL setting for 4 PCLK filter count. \hideinitializer */
N#define ACMP_CTL_FILTSEL_8PCLK       (4UL << ACMP_CTL_FILTSEL_Pos) /*!< ACMP_CTL setting for 8 PCLK filter count. \hideinitializer */
N#define ACMP_CTL_FILTSEL_16PCLK      (5UL << ACMP_CTL_FILTSEL_Pos) /*!< ACMP_CTL setting for 16 PCLK filter count. \hideinitializer */
N#define ACMP_CTL_FILTSEL_32PCLK      (6UL << ACMP_CTL_FILTSEL_Pos) /*!< ACMP_CTL setting for 32 PCLK filter count. \hideinitializer */
N#define ACMP_CTL_FILTSEL_64PCLK      (7UL << ACMP_CTL_FILTSEL_Pos) /*!< ACMP_CTL setting for 64 PCLK filter count. \hideinitializer */
N#define ACMP_CTL_INTPOL_RF           (0UL << ACMP_CTL_INTPOL_Pos)  /*!< ACMP_CTL setting for selecting rising edge and falling edge as interrupt condition. \hideinitializer */
N#define ACMP_CTL_INTPOL_R            (1UL << ACMP_CTL_INTPOL_Pos)  /*!< ACMP_CTL setting for selecting rising edge as interrupt condition. \hideinitializer */
N#define ACMP_CTL_INTPOL_F            (2UL << ACMP_CTL_INTPOL_Pos)  /*!< ACMP_CTL setting for selecting falling edge as interrupt condition. \hideinitializer */
N#define ACMP_CTL_POSSEL_P0           (0UL << ACMP_CTL_POSSEL_Pos)  /*!< ACMP_CTL setting for selecting ACMPx_P0 pin as the source of ACMP V+. \hideinitializer */
N#define ACMP_CTL_POSSEL_P1           (1UL << ACMP_CTL_POSSEL_Pos)  /*!< ACMP_CTL setting for selecting ACMPx_P1 pin as the source of ACMP V+. \hideinitializer */
N#define ACMP_CTL_POSSEL_P2           (2UL << ACMP_CTL_POSSEL_Pos)  /*!< ACMP_CTL setting for selecting ACMPx_P2 pin as the source of ACMP V+. \hideinitializer */
N#define ACMP_CTL_POSSEL_P3           (3UL << ACMP_CTL_POSSEL_Pos)  /*!< ACMP_CTL setting for selecting ACMPx_P3 pin as the source of ACMP V+. \hideinitializer */
N#define ACMP_CTL_NEGSEL_PIN          (0UL << ACMP_CTL_NEGSEL_Pos)  /*!< ACMP_CTL setting for selecting the voltage of ACMP negative input pin as the source of ACMP V-. \hideinitializer */
N#define ACMP_CTL_NEGSEL_CRV          (1UL << ACMP_CTL_NEGSEL_Pos)  /*!< ACMP_CTL setting for selecting internal comparator reference voltage as the source of ACMP V-. \hideinitializer */
N#define ACMP_CTL_NEGSEL_VBG          (2UL << ACMP_CTL_NEGSEL_Pos)  /*!< ACMP_CTL setting for selecting internal Band-gap voltage as the source of ACMP V-. \hideinitializer */
N#define ACMP_CTL_HYSTERESIS_ENABLE   (1UL << ACMP_CTL_HYSEN_Pos)   /*!< ACMP_CTL setting for enabling the hysteresis function. \hideinitializer */
N#define ACMP_CTL_HYSTERESIS_DISABLE  (0UL << ACMP_CTL_HYSEN_Pos)   /*!< ACMP_CTL setting for disabling the hysteresis function. \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ACMP_VREF constant definitions                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ACMP_VREF_CRVSSEL_VDDA       (0UL << ACMP_VREF_CRVSSEL_Pos)  /*!< ACMP_VREF setting for selecting analog supply voltage VDDA as the CRV source voltage \hideinitializer */
N#define ACMP_VREF_CRVSSEL_INTVREF    (1UL << ACMP_VREF_CRVSSEL_Pos)  /*!< ACMP_VREF setting for selecting internal reference voltage as the CRV source voltage \hideinitializer */
N
N
N/*@}*/ /* end of group ACMP_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup ACMP_EXPORTED_FUNCTIONS ACMP Exported Functions
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Define Macros and functions                                                                            */
N/*---------------------------------------------------------------------------------------------------------*/
N
N
N/**
N  * @brief This macro is used to enable output inverse function
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will set ACMPOINV bit of ACMP_CTL register to enable output inverse function.
N  * \hideinitializer
N  */
N#define ACMP_ENABLE_OUTPUT_INVERSE(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] |= ACMP_CTL_ACMPOINV_Msk)
N
N/**
N  * @brief This macro is used to disable output inverse function
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will clear ACMPOINV bit of ACMP_CTL register to disable output inverse function.
N  * \hideinitializer
N  */
N#define ACMP_DISABLE_OUTPUT_INVERSE(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] &= ~ACMP_CTL_ACMPOINV_Msk)
N
N/**
N  * @brief This macro is used to select ACMP negative input source
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @param[in] u32Src is comparator negative input selection. Including:
N  *                  - \ref ACMP_CTL_NEGSEL_PIN
N  *                  - \ref ACMP_CTL_NEGSEL_CRV
N  *                  - \ref ACMP_CTL_NEGSEL_VBG
N  * @return None
N  * @details This macro will set NEGSEL (ACMP_CTL[5:4]) to determine the source of negative input.
N  * \hideinitializer
N  */
N#define ACMP_SET_NEG_SRC(acmp, u32ChNum, u32Src) ((acmp)->CTL[(u32ChNum)] = ((acmp)->CTL[(u32ChNum)] & ~ACMP_CTL_NEGSEL_Msk) | (u32Src))
N
N/**
N  * @brief This macro is used to enable hysteresis function
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will set HYSEN bit of ACMP_CTL register to enable hysteresis function.
N  * \hideinitializer
N  */
N#define ACMP_ENABLE_HYSTERESIS(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] |= ACMP_CTL_HYSEN_Msk)
N
N/**
N  * @brief This macro is used to disable hysteresis function
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will clear HYSEN bit of ACMP_CTL register to disable hysteresis function.
N  * \hideinitializer
N  */
N#define ACMP_DISABLE_HYSTERESIS(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] &= ~ACMP_CTL_HYSEN_Msk)
N
N/**
N  * @brief This macro is used to enable interrupt
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will set ACMPIE bit of ACMP_CTL register to enable interrupt function.
N  *          If wake-up function is enabled, the wake-up interrupt will be enabled as well.
N  * \hideinitializer
N  */
N#define ACMP_ENABLE_INT(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] |= ACMP_CTL_ACMPIE_Msk)
N
N/**
N  * @brief This macro is used to disable interrupt
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will clear ACMPIE bit of ACMP_CTL register to disable interrupt function.
N  * \hideinitializer
N  */
N#define ACMP_DISABLE_INT(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] &= ~ACMP_CTL_ACMPIE_Msk)
N
N/**
N  * @brief This macro is used to enable ACMP
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will set ACMPEN bit of ACMP_CTL register to enable analog comparator.
N  * \hideinitializer
N  */
N#define ACMP_ENABLE(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] |= ACMP_CTL_ACMPEN_Msk)
N
N/**
N  * @brief This macro is used to disable ACMP
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will clear ACMPEN bit of ACMP_CTL register to disable analog comparator.
N  * \hideinitializer
N  */
N#define ACMP_DISABLE(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] &= ~ACMP_CTL_ACMPEN_Msk)
N
N/**
N  * @brief This macro is used to get ACMP output value
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return  ACMP output value
N  * @details This macro will return the ACMP output value.
N  * \hideinitializer
N  */
N#define ACMP_GET_OUTPUT(acmp, u32ChNum) (((acmp)->STATUS & (ACMP_STATUS_ACMPO0_Msk<<((u32ChNum))))?1:0)
N
N/**
N  * @brief This macro is used to get ACMP interrupt flag
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return   ACMP interrupt occurred (1) or not (0)
N  * @details This macro will return the ACMP interrupt flag.
N  * \hideinitializer
N  */
N#define ACMP_GET_INT_FLAG(acmp, u32ChNum) (((acmp)->STATUS & (ACMP_STATUS_ACMPIF0_Msk<<((u32ChNum))))?1:0)
N
N/**
N  * @brief This macro is used to clear ACMP interrupt flag
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return   None
N  * @details This macro will write 1 to ACMPIFn bit of ACMP_STATUS register to clear interrupt flag.
N  * \hideinitializer
N  */
N#define ACMP_CLR_INT_FLAG(acmp, u32ChNum) ((acmp)->STATUS = (ACMP_STATUS_ACMPIF0_Msk<<((u32ChNum))))
N
N/**
N  * @brief This macro is used to clear ACMP wake-up interrupt flag
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return   None
N  * @details This macro will write 1 to WKIFn bit of ACMP_STATUS register to clear interrupt flag.
N  * \hideinitializer
N  */
N#define ACMP_CLR_WAKEUP_INT_FLAG(acmp, u32ChNum) ((acmp)->STATUS = (ACMP_STATUS_WKIF0_Msk<<((u32ChNum))))
N
N/**
N  * @brief This macro is used to enable ACMP wake-up function
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will set WKEN (ACMP_CTL[16]) to enable ACMP wake-up function.
N  * \hideinitializer
N  */
N#define ACMP_ENABLE_WAKEUP(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] |= ACMP_CTL_WKEN_Msk)
N
N/**
N  * @brief This macro is used to disable ACMP wake-up function
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will clear WKEN (ACMP_CTL[16]) to disable ACMP wake-up function.
N  * \hideinitializer
N  */
N#define ACMP_DISABLE_WAKEUP(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] &= ~ACMP_CTL_WKEN_Msk)
N
N/**
N  * @brief This macro is used to select ACMP positive input pin
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @param[in] u32Pin Comparator positive pin selection. Including:
N  *                  - \ref ACMP_CTL_POSSEL_P0
N  *                  - \ref ACMP_CTL_POSSEL_P1
N  *                  - \ref ACMP_CTL_POSSEL_P2
N  *                  - \ref ACMP_CTL_POSSEL_P3
N  * @return None
N  * @details This macro will set POSSEL (ACMP_CTL[7:6]) to determine the comparator positive input pin.
N  * \hideinitializer
N  */
N#define ACMP_SELECT_P(acmp, u32ChNum, u32Pin) ((acmp)->CTL[(u32ChNum)] = ((acmp)->CTL[(u32ChNum)] & ~ACMP_CTL_POSSEL_Msk) | (u32Pin))
N
N/**
N  * @brief This macro is used to enable ACMP filter function
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will set OUTSEL (ACMP_CTL[12]) to enable output filter function.
N  * \hideinitializer
N  */
N#define ACMP_ENABLE_FILTER(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] |= ACMP_CTL_OUTSEL_Msk)
N
N/**
N  * @brief This macro is used to disable ACMP filter function
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will clear OUTSEL (ACMP_CTL[12]) to disable output filter function.
N  * \hideinitializer
N  */
N#define ACMP_DISABLE_FILTER(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] &= ~ACMP_CTL_OUTSEL_Msk)
N
N/**
N  * @brief This macro is used to set ACMP filter function
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @param[in] u32Cnt is comparator filter count setting.
N  *                  - \ref ACMP_CTL_FILTSEL_OFF
N  *                  - \ref ACMP_CTL_FILTSEL_1PCLK
N  *                  - \ref ACMP_CTL_FILTSEL_2PCLK
N  *                  - \ref ACMP_CTL_FILTSEL_4PCLK
N  *                  - \ref ACMP_CTL_FILTSEL_8PCLK
N  *                  - \ref ACMP_CTL_FILTSEL_16PCLK
N  *                  - \ref ACMP_CTL_FILTSEL_32PCLK
N  *                  - \ref ACMP_CTL_FILTSEL_64PCLK
N  * @return None
N  * @details When ACMP output filter function is enabled, the output sampling count is determined by FILTSEL (ACMP_CTL[15:13]).
N  * \hideinitializer
N  */
N#define ACMP_SET_FILTER(acmp, u32ChNum, u32Cnt) ((acmp)->CTL[(u32ChNum)] = ((acmp)->CTL[(u32ChNum)] & ~ACMP_CTL_FILTSEL_Msk) | (u32Cnt))
N
N/**
N  * @brief This macro is used to select comparator reference voltage
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32Level  The comparator reference voltage setting.
N  *             The formula is:
N  *                       comparator reference voltage = CRV source voltage x (1/6 + u32Level/24)
N  *             The range of u32Level is 0 ~ 15.
N  * @return   None
N  * @details  When CRV is selected as ACMP negative input source, the CRV level is determined by CRVCTL (ACMP_VREF[3:0]).
N  * \hideinitializer
N  */
N#define ACMP_CRV_SEL(acmp, u32Level) ((acmp)->VREF = ((acmp)->VREF & ~ACMP_VREF_CRVCTL_Msk) | ((u32Level)<<ACMP_VREF_CRVCTL_Pos))
N
N/**
N  * @brief This macro is used to select the source of CRV
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32Src is the source of CRV. Including:
N  *                  - \ref ACMP_VREF_CRVSSEL_VDDA
N  *                  - \ref ACMP_VREF_CRVSSEL_INTVREF
N  * @return None
N  * @details The source of CRV can be VDDA or internal reference voltage. The internal reference voltage level is determined by SYS_VREFCTL register.
N  * \hideinitializer
N  */
N#define ACMP_SELECT_CRV_SRC(acmp, u32Src) ((acmp)->VREF = ((acmp)->VREF & ~ACMP_VREF_CRVSSEL_Msk) | (u32Src))
N
N/**
N  * @brief This macro is used to select ACMP interrupt condition
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @param[in] u32Cond Comparator interrupt condition selection. Including:
N  *                  - \ref ACMP_CTL_INTPOL_RF
N  *                  - \ref ACMP_CTL_INTPOL_R
N  *                  - \ref ACMP_CTL_INTPOL_F
N  * @return None
N  * @details The ACMP output interrupt condition can be rising edge, falling edge or any edge.
N  * \hideinitializer
N  */
N#define ACMP_SELECT_INT_COND(acmp, u32ChNum, u32Cond) ((acmp)->CTL[(u32ChNum)] = ((acmp)->CTL[(u32ChNum)] & ~ACMP_CTL_INTPOL_Msk) | (u32Cond))
N
N/**
N  * @brief This macro is used to enable ACMP window latch mode
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will set WLATEN (ACMP_CTL[17]) to enable ACMP window latch mode.
N  *          When ACMP0/1_WLAT pin is at high level, ACMPO0/1 passes through window latch
N  *          block; when ACMP0/1_WLAT pin is at low level, the output of window latch block,
N  *          WLATOUT, is frozen.
N  * \hideinitializer
N  */
N#define ACMP_ENABLE_WINDOW_LATCH(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] |= ACMP_CTL_WLATEN_Msk)
N
N/**
N  * @brief This macro is used to disable ACMP window latch mode
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will clear WLATEN (ACMP_CTL[17]) to disable ACMP window latch mode.
N  * \hideinitializer
N  */
N#define ACMP_DISABLE_WINDOW_LATCH(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] &= ~ACMP_CTL_WLATEN_Msk)
N
N/**
N  * @brief This macro is used to enable ACMP window compare mode
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will set WCMPSEL (ACMP_CTL[18]) to enable ACMP window compare mode.
N  *          When window compare mode is enabled, user can connect the specific analog voltage
N  *          source to either the positive inputs of both comparators or the negative inputs of
N  *          both comparators. The upper bound and lower bound of the designated range are
N  *          determined by the voltages applied to the other inputs of both comparators. If the
N  *          output of a comparator is low and the other comparator outputs high, which means two
N  *          comparators implies the upper and lower bound. User can directly monitor a specific
N  *          analog voltage source via ACMPWO (ACMP_STATUS[16]).
N  * \hideinitializer
N  */
N#define ACMP_ENABLE_WINDOW_COMPARE(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] |= ACMP_CTL_WCMPSEL_Msk)
N
N/**
N  * @brief This macro is used to disable ACMP window compare mode
N  * @param[in] acmp The pointer of the specified ACMP module
N  * @param[in] u32ChNum The ACMP number
N  * @return None
N  * @details This macro will clear WCMPSEL (ACMP_CTL[18]) to disable ACMP window compare mode.
N  * \hideinitializer
N  */
N#define ACMP_DISABLE_WINDOW_COMPARE(acmp, u32ChNum) ((acmp)->CTL[(u32ChNum)] &= ~ACMP_CTL_WCMPSEL_Msk)
N
N
N/* Function prototype declaration */
Nvoid ACMP_Open(ACMP_T *, uint32_t u32ChNum, uint32_t u32NegSrc, uint32_t u32HysteresisEn);
Nvoid ACMP_Close(ACMP_T *, uint32_t u32ChNum);
N
N
N
N/*@}*/ /* end of group ACMP_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group ACMP_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N
N#endif //__ACMP_H__
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 566 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "adc.h"
L 1 "..\..\..\Library\StdDriver\inc\adc.h" 1
N/**************************************************************************//**
N * @file     adc.h
N * @version  V0.10
N * $Revision: 2 $
N * $Date: 19/01/11 11:23a $
N * @brief    M031 Series ADC Driver Header File
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __ADC_H__
N#define __ADC_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup ADC_Driver ADC Driver
N  @{
N*/
N
N/** @addtogroup ADC_EXPORTED_CONSTANTS ADC Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  ADCR Constant Definitions                                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_ADCR_ADEN_CONVERTER_DISABLE (0UL<<ADC_ADCR_ADEN_Pos)     /*!< ADC converter disable \hideinitializer */
N#define ADC_ADCR_ADEN_CONVERTER_ENABLE  (1UL<<ADC_ADCR_ADEN_Pos)     /*!< ADC converter enable  \hideinitializer */
N
N#define ADC_ADCR_ADMD_SINGLE            (0UL<<ADC_ADCR_ADMD_Pos)     /*!< Single mode           \hideinitializer */
N#define ADC_ADCR_ADMD_BURST             (1UL<<ADC_ADCR_ADMD_Pos)     /*!< Burst mode            \hideinitializer */
N#define ADC_ADCR_ADMD_SINGLE_CYCLE      (2UL<<ADC_ADCR_ADMD_Pos)     /*!< Single cycle scan mode    \hideinitializer */
N#define ADC_ADCR_ADMD_CONTINUOUS        (3UL<<ADC_ADCR_ADMD_Pos)     /*!< Continuous scan mode      \hideinitializer */
N
N#define ADC_ADCR_DIFFEN_SINGLE_END      (0UL<<ADC_ADCR_DIFFEN_Pos)   /*!< Single-end input mode     \hideinitializer */
N#define ADC_ADCR_DIFFEN_DIFFERENTIAL    (1UL<<ADC_ADCR_DIFFEN_Pos)   /*!< Differential input mode   \hideinitializer */
N
N#define ADC_ADCR_DMOF_UNSIGNED_OUTPUT   (0UL<<ADC_ADCR_DMOF_Pos)     /*!< Select the straight binary format as the output format of the conversion result   \hideinitializer */
N#define ADC_ADCR_DMOF_TWOS_COMPLEMENT   (1UL<<ADC_ADCR_DMOF_Pos)     /*!< Select the 2's complement format as the output format of the conversion result    \hideinitializer */
N
N#define ADC_ADCR_TRGEN_DISABLE          (0UL<<ADC_ADCR_TRGEN_Pos)    /*!< Disable triggering of A/D conversion by external STADC pin or PWM     \hideinitializer */
N#define ADC_ADCR_TRGEN_ENABLE           (1UL<<ADC_ADCR_TRGEN_Pos)    /*!< Enable triggering of A/D conversion by external STADC pin or PWM      \hideinitializer */
N
N#define ADC_ADCR_TRGS_STADC             (0UL<<ADC_ADCR_TRGS_Pos)     /*!< A/D conversion is started by external STADC pin   \hideinitializer */
N#define ADC_ADCR_TRGS_TIMER             (1UL<<ADC_ADCR_TRGS_Pos)     /*!< A/D conversion is started by Timer    \hideinitializer */
N#define ADC_ADCR_TRGS_BPWM              (2UL<<ADC_ADCR_TRGS_Pos)     /*!< A/D conversion is started by BPWM     \hideinitializer */
N#define ADC_ADCR_TRGS_PWM               (3UL<<ADC_ADCR_TRGS_Pos)     /*!< A/D conversion is started by PWM      \hideinitializer */
N
N#define ADC_ADCR_TRGCOND_LOW_LEVEL      (0UL<<ADC_ADCR_TRGCOND_Pos)  /*!< STADC Low level active    \hideinitializer */
N#define ADC_ADCR_TRGCOND_HIGH_LEVEL     (1UL<<ADC_ADCR_TRGCOND_Pos)  /*!< STADC High level active   \hideinitializer */
N#define ADC_ADCR_TRGCOND_FALLING_EDGE   (2UL<<ADC_ADCR_TRGCOND_Pos)  /*!< STADC Falling edge active \hideinitializer */
N#define ADC_ADCR_TRGCOND_RISING_EDGE    (3UL<<ADC_ADCR_TRGCOND_Pos)  /*!< STADC Rising edge active  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADCMPR Constant Definitions                                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_ADCMPR_CMPD(x)                    ((x) << ADC_ADCMPR_CMPD_Pos)          /*!< Compare value for compare function     \hideinitializer */
N#define ADC_ADCMPR_CMPMATCNT(x)               (((x)-1) << ADC_ADCMPR_CMPMATCNT_Pos) /*!< Match count for compare function       \hideinitializer */
N#define ADC_ADCMPR_CMPCH(x)                   ((x) << ADC_ADCMPR_CMPCH_Pos)         /*!< Compare channel for compare function   \hideinitializer */
N#define ADC_ADCMPR_CMPCOND_LESS_THAN          (0<<ADC_ADCMPR_CMPCOND_Pos)           /*!< The compare condition is "less than"   \hideinitializer */
N#define ADC_ADCMPR_CMPCOND_GREATER_OR_EQUAL   (1<<ADC_ADCMPR_CMPCOND_Pos)           /*!< The compare condition is "greater than or equal to"    \hideinitializer */
N#define ADC_ADCMPR_CMPIE_INTERRUPT_ENABLE     (ADC_ADCMPR_CMPIE_Msk)                /*!< The compare function interrupt enable  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADC Interrupt Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_ADF_INT         (ADC_ADSR0_ADF_Msk)          /*!< ADC convert complete interrupt    \hideinitializer */
N#define ADC_CMP0_INT        (ADC_ADSR0_CMPF0_Msk)        /*!< ADC comparator 0 interrupt        \hideinitializer */
N#define ADC_CMP1_INT        (ADC_ADSR0_CMPF1_Msk)        /*!< ADC comparator 1 interrupt        \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADC Operation Mode Constant Definitions                                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_SINGLE_MODE         0   /*!< ADC single mode            \hideinitializer */
N#define ADC_BURST_MODE          1   /*!< ADC burst mode             \hideinitializer */
N#define ADC_SINGLE_CYCLE_MODE   2   /*!< ADC single-cycle scan mode \hideinitializer */
N#define ADC_CONTINUOUS_MODE     3   /*!< ADC continuous scan mode   \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADC Trigger Condition Constant Definitions                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_LOW_LEVEL      0   /*!< ADC external trigger condition is low level trigger     \hideinitializer */
N#define ADC_HIGH_LEVEL     1   /*!< ADC external trigger condition is high level trigger    \hideinitializer */
N#define ADC_FALLING_EDGE   2   /*!< ADC external trigger condition is falling edge trigger  \hideinitializer */
N#define ADC_RISING_EDGE    3   /*!< ADC external trigger condition is rising edge trigger   \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADC Compare Condition Constant Definitions                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_LESS_THAN          0   /*!< ADC compare condition is "less than the compare value"                  \hideinitializer */
N#define ADC_GREATER_OR_EQUAL   1   /*!< ADC compare condition is "greater than or equal to the compare value"   \hideinitializer */
N
N/*--------------------------------------------------------------------------------------------------*/
N/* Define Error Code                                                                                */
N/*--------------------------------------------------------------------------------------------------*/
N#define ADC_TIMEOUT_ERR     (-1)    /*!< ADC operation abort due to timeout error \hideinitializer */
N
N/*@}*/ /* end of group ADC_EXPORTED_CONSTANTS */
N
Nextern int32_t g_ADC_i32ErrCode;
N
N/** @addtogroup ADC_EXPORTED_FUNCTIONS ADC Exported Functions
N  @{
N*/
N
N
N/**
N  * @brief Get conversion data of specified channel.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32ChNum ADC Channel, valid value are from 0 to 15 and 29.
N  * @return  16-bit data.
N  * @details Read RSLT bit field to get conversion data.
N  * \hideinitializer
N  */
N#define ADC_GET_CONVERSION_DATA(adc, u32ChNum) ((adc)->ADDR[(u32ChNum)] & ADC_ADDR_RSLT_Msk)
N
N/**
N  * @brief Return the user-specified interrupt flags.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32Mask The combination of following interrupt status bits. Each bit corresponds to a interrupt status.
N  *                    Valid values are:
N  *                     - \ref ADC_ADF_INT          :Convert complete interrupt flag.
N  *                     - \ref ADC_CMP0_INT         :Comparator 0 interrupt flag.
N  *                     - \ref ADC_CMP1_INT         :Comparator 1 interrupt flag.
N  * @return  User specified interrupt flags.
N  * @details Get the status of the ADC interrupt flag.
N  * \hideinitializer
N  */
N#define ADC_GET_INT_FLAG(adc, u32Mask) ((adc)->ADSR0 & (u32Mask))
N
N/**
N  * @brief This macro clear the selected interrupt status bits.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32Mask The combination of following interrupt status bits. Each bit corresponds to a interrupt status.
N  *                    Valid values are:
N  *                     - \ref ADC_ADF_INT          :Convert complete interrupt flag.
N  *                     - \ref ADC_CMP0_INT         :Comparator 0 interrupt flag.
N  *                     - \ref ADC_CMP1_INT         :Comparator 1 interrupt flag.
N  * @return  None
N  * @details ADF (ADSR0[0])/CMPF0 (ADSR0[1])/CMPF1 (ADSR0[2]) can be cleared by writing 1 to itself.
N  * \hideinitializer
N  */
N#define ADC_CLR_INT_FLAG(adc, u32Mask) ((adc)->ADSR0 = (u32Mask))
N
N/**
N  * @brief Get the busy state of ADC.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @retval 0 ADC is not busy.
N  * @retval 1 ADC is busy.
N  * @details ADSR0[7] (BUSY) is a mirror of ADCR[11] (ADST).
N  * \hideinitializer
N  */
N#define ADC_IS_BUSY(adc) ((adc)->ADSR0 & ADC_ADSR0_BUSY_Msk ? 1 : 0)
N
N/**
N  * @brief Check if the ADC conversion data is over written or not.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32ChNum ADC Channel, valid value are from 0 to 15 and 29.
N  * @retval 0 ADC data is not overrun.
N  * @retval 1 ADC data is overrun.
N  * @details ADSR2[31:0] (OVERRUN) is the mirror of ADDR0~31[16] OVERRUN bits.
N  * \hideinitializer
N  */
N#define ADC_IS_DATA_OVERRUN(adc, u32ChNum) (((adc)->ADSR2 & (1<<(u32ChNum))) ? 1 : 0)
N
N/**
N  * @brief Check if the ADC conversion data is valid or not.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32ChNum ADC Channel, valid value are from 0 to 15 and 29.
N  * @retval 0 ADC data is not valid.
N  * @retval 1 ADC data is valid.
N  * @details VALID (ADDR0~31[17]) is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read.
N  * \hideinitializer
N  */
N#define ADC_IS_DATA_VALID(adc, u32ChNum) ((adc)->ADSR1 & (0x1<<(u32ChNum)) ? 1 : 0)
N
N/**
N  * @brief Power down ADC module.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return None
N  * @details Disable A/D converter analog circuit for saving power consumption.
N  * \hideinitializer
N  */
N#define ADC_POWER_DOWN(adc) ((adc)->ADCR &= ~ADC_ADCR_ADEN_Msk)
N
N/**
N  * @brief Power on ADC module.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return None
N  * @details Before starting A/D conversion function, ADEN bit (ADCR[0]) should be set to 1.
N  * \hideinitializer
N  */
N#define ADC_POWER_ON(adc) ((adc)->ADCR |= ADC_ADCR_ADEN_Msk)
N
N/**
N  * @brief Configure the comparator 0 and enable it.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32ChNum  Specifies the source channel, valid value are from 0 to 15 and 29.
N  * @param[in] u32Condition Specifies the compare condition. Valid values are:
N  *                          - \ref ADC_ADCMPR_CMPCOND_LESS_THAN            :The compare condition is "less than the compare value".
N  *                          - \ref ADC_ADCMPR_CMPCOND_GREATER_OR_EQUAL     :The compare condition is "greater than or equal to the compare value".
N  * @param[in] u32Data Specifies the compare value, valid value are between 0 ~ 0xFFF.
N  * @param[in] u32MatchCount Specifies the match count setting, valid values are between 1~16.
N  * @return None
N  * @details For example, ADC_ENABLE_CMP0(ADC, 5, ADC_ADCMPR_CMPCOND_GREATER_OR_EQUAL, 0x800, 10);
N  *          means ADC will assert comparator 0 flag if channel 5 conversion result is greater than or
N  *          equal to 0x800 for 10 times continuously.
N  * \hideinitializer
N  */
N#define ADC_ENABLE_CMP0(adc, \
N                        u32ChNum, \
N                        u32Condition, \
N                        u32Data, \
N                        u32MatchCount) ((adc)->ADCMPR[0] = ((u32ChNum) << ADC_ADCMPR_CMPCH_Pos) | \
N                                                           (u32Condition) | \
N                                                           ((u32Data) << ADC_ADCMPR_CMPD_Pos) | \
N                                                           (((u32MatchCount) - 1) << ADC_ADCMPR_CMPMATCNT_Pos) |\
N                                                           ADC_ADCMPR_CMPEN_Msk)
X#define ADC_ENABLE_CMP0(adc,                         u32ChNum,                         u32Condition,                         u32Data,                         u32MatchCount) ((adc)->ADCMPR[0] = ((u32ChNum) << ADC_ADCMPR_CMPCH_Pos) |                                                            (u32Condition) |                                                            ((u32Data) << ADC_ADCMPR_CMPD_Pos) |                                                            (((u32MatchCount) - 1) << ADC_ADCMPR_CMPMATCNT_Pos) |                                                           ADC_ADCMPR_CMPEN_Msk)
N
N/**
N  * @brief Disable comparator 0
N  * @param[in] adc The pointer of the specified ADC module
N  * @return None
N  * @details Set CMPEN (ADCMPR0[0]) to 0 and reset comparator 0 configurations to disable ADC compare function.
N  * \hideinitializer
N  */
N#define ADC_DISABLE_CMP0(adc) ((adc)->ADCMPR[0] = 0)
N
N/**
N  * @brief Configure the comparator 1 and enable it.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32ChNum  Specifies the source channel, valid value are from 0 to 15 and 29.
N  * @param[in] u32Condition Specifies the compare condition. Valid values are:
N  *                          - \ref ADC_ADCMPR_CMPCOND_LESS_THAN            :The compare condition is "less than the compare value".
N  *                          - \ref ADC_ADCMPR_CMPCOND_GREATER_OR_EQUAL     :The compare condition is "greater than or equal to the compare value".
N  * @param[in] u32Data Specifies the compare value, valid value are between 0 ~ 0xFFF.
N  * @param[in] u32MatchCount Specifies the match count setting, valid values are between 1~16.
N  * @return None
N  * @details For example, ADC_ENABLE_CMP1(ADC, 5, ADC_ADCMPR_CMPCOND_GREATER_OR_EQUAL, 0x800, 10);
N  *          means ADC will assert comparator 1 flag if channel 5 conversion result is greater than or
N  *          equal to 0x800 for 10 times continuously.
N  * \hideinitializer
N  */
N#define ADC_ENABLE_CMP1(adc, \
N                        u32ChNum, \
N                        u32Condition, \
N                        u32Data, \
N                        u32MatchCount) ((adc)->ADCMPR[1] = ((u32ChNum) << ADC_ADCMPR_CMPCH_Pos) | \
N                                                           (u32Condition) | \
N                                                           ((u32Data) << ADC_ADCMPR_CMPD_Pos) | \
N                                                           (((u32MatchCount) - 1) << ADC_ADCMPR_CMPMATCNT_Pos) |\
N                                                           ADC_ADCMPR_CMPEN_Msk)
X#define ADC_ENABLE_CMP1(adc,                         u32ChNum,                         u32Condition,                         u32Data,                         u32MatchCount) ((adc)->ADCMPR[1] = ((u32ChNum) << ADC_ADCMPR_CMPCH_Pos) |                                                            (u32Condition) |                                                            ((u32Data) << ADC_ADCMPR_CMPD_Pos) |                                                            (((u32MatchCount) - 1) << ADC_ADCMPR_CMPMATCNT_Pos) |                                                           ADC_ADCMPR_CMPEN_Msk)
N
N/**
N  * @brief Disable comparator 1.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return None
N  * @details Set CMPEN (ADCMPR1[0]) to 0 and reset comparator 1 configurations to disable ADC compare function.
N  * \hideinitializer
N  */
N#define ADC_DISABLE_CMP1(adc) ((adc)->ADCMPR[1] = 0)
N
N/**
N  * @brief Enable the compare window mode.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32CMP Specifies the compare register, valid value are 0.
N  * @return None
N  * @details CMPF0 (ADSR0[1]) will be set when both ADC_CMP0 and ADC_CMP1 compared condition matched.
N  * \hideinitializer
N  */
N#define ADC_ENABLE_CMP_WINDOW_MODE(adc, u32CMP) ((adc)->ADCMPR[(u32CMP)] |= ADC_ADCMPR_CMPWEN_Msk)
N
N/**
N  * @brief Disable the compare window mode.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32CMP Specifies the compare register, valid value are 0.
N  * @return None
N  * @details Disable the compare window mode for specified ADC module.
N  * \hideinitializer
N  */
N#define ADC_DISABLE_CMP_WINDOW_MODE(adc, u32CMP) ((adc)->ADCMPR[(u32CMP)] &= ~ADC_ADCMPR_CMPWEN_Msk)
N
N/**
N  * @brief Set ADC input channel.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32Mask  Channel enable bit. Each bit corresponds to a input channel. Bit 0 is channel 0, bit 1 is channel 1..., bit 15 is channel 15.
N  * @return None
N  * @details Enabled channel will be converted while ADC starts.
N  * @note In single mode, ADC can only convert 1 channel. If more than 1 channel are enabled, only the channel with smallest number will be converted.
N  * \hideinitializer
N  */
N#define ADC_SET_INPUT_CHANNEL(adc, u32Mask) ((adc)->ADCHER = ((adc)->ADCHER & ~ADC_ADCHER_CHEN_Msk) | (u32Mask))
N
N/**
N  * @brief Set the output format mode.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32Format Decides the output format. Valid values are:
N  *                      - \ref ADC_ADCR_DMOF_UNSIGNED_OUTPUT      : Select the straight binary format as the output format of the conversion result.
N  *                      - \ref ADC_ADCR_DMOF_TWOS_COMPLEMENT      : Select the 2's complement format as the output format of the conversion result.
N  * @return None
N  * @details  The macro is used to set the output format of ADC differential input mode.
N  * @note ADC compare function can not support 2's complement output format, u32Format should be set to ADC_ADCR_DMOF_UNSIGNED_OUTPUT.
N  * \hideinitializer
N  */
N#define ADC_SET_DMOF(adc, u32Format) ((adc)->ADCR = ((adc)->ADCR & ~ADC_ADCR_DMOF_Msk) | (u32Format))
N
N/**
N  * @brief Start the A/D conversion.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return None
N  * @details Set ADST bit to 1 to start the A/D conversion.
N  * \hideinitializer
N  */
N#define ADC_START_CONV(adc) ((adc)->ADCR |= ADC_ADCR_ADST_Msk)
N
N/**
N  * @brief Stop the A/D conversion.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return None
N  * @details ADST (ADCR[11]) will be cleared to 0 by hardware automatically at the ends of single mode and single-cycle scan mode.
N  *          In continuous scan mode and burst mode, A/D conversion is continuously performed until software writes 0 to this bit.
N  * @note When the ADST bit is cleared to 0, the ADST bit must be kept at 0 at least one ADC peripheral clock period
N  *       before setting it to 1 again, otherwise the A/D converter may not work.
N  *       If ADST bit is cleared to 0 when ADC is in converting, the BUSY bit will be cleared to 0 immediately,
N  *       ADC will terminate the current conversion and enter idle state directly.
N  * \hideinitializer
N  */
N#define ADC_STOP_CONV(adc) ((adc)->ADCR &= ~ADC_ADCR_ADST_Msk)
N
N/**
N  * @brief Enable PDMA transfer.
N  * @param[in] adc The pointer of the specified ADC module
N  * @return None
N  * @details Enable PDMA to transfer the conversion data.
N  * @note While enable PDMA transfer, software must set ADIE = 0 to disable interrupt.
N  * \hideinitializer
N  */
N#define ADC_ENABLE_PDMA(adc) ((adc)->ADCR |= ADC_ADCR_PTEN_Msk)
N
N/**
N  * @brief Disable PDMA transfer.
N  * @param[in] adc The pointer of the specified ADC module
N  * @return None
N  * @details Disable PDMA to transfer the conversion data.
N  * \hideinitializer
N  */
N#define ADC_DISABLE_PDMA(adc) ((adc)->ADCR &= ~ADC_ADCR_PTEN_Msk)
N
N/**
N  * @brief Get PDMA current transfer data
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return  PDMA current transfer data
N  * \hideinitializer
N  */
N#define ADC_GET_PDMA_DATA(adc) ((adc)->ADPDMA & ADC_ADPDMA_CURDAT_Msk)
N
N/**
N  * @brief Enable the interrupt(s) selected by u32Mask parameter.
N  * @param[in] adc The pointer of the specified ADC module
N  * @param[in] u32Mask The combination of interrupt status bits listed below. Each bit
N  *                    corresponds to a interrupt status. This parameter decides which
N  *                    interrupts will be enabled.
N  *                     - \ref ADC_ADF_INT    :ADC convert complete interrupt
N  *                     - \ref ADC_CMP0_INT   :ADC comparator 0 interrupt
N  *                     - \ref ADC_CMP1_INT   :ADC comparator 1 interrupt
N  * @return None
N  * \hideinitializer
N  */
N#define ADC_ENABLE_INT  ADC_EnableInt
N
N/**
N  * @brief Disable the interrupt(s) selected by u32Mask parameter.
N  * @param[in] adc The pointer of the specified ADC module
N  * @param[in] u32Mask The combination of interrupt status bits listed below. Each bit
N  *                    corresponds to a interrupt status. This parameter decides which
N  *                    interrupts will be disabled.
N  *                     - \ref ADC_ADF_INT     :ADC convert complete interrupt
N  *                     - \ref ADC_CMP0_INT    :ADC comparator 0 interrupt
N  *                     - \ref ADC_CMP1_INT    :ADC comparator 1 interrupt
N  * @return None
N  * \hideinitializer
N  */
N#define ADC_DISABLE_INT ADC_DisableInt
N
N
Nvoid ADC_Open(ADC_T *adc,
N              uint32_t u32InputMode,
N              uint32_t u32OpMode,
N              uint32_t u32ChMask);
Nvoid ADC_Close(ADC_T *adc);
Nvoid ADC_EnableHWTrigger(ADC_T *adc,
N                         uint32_t u32Source,
N                         uint32_t u32Param);
Nvoid ADC_DisableHWTrigger(ADC_T *adc);
Nvoid ADC_EnableInt(ADC_T *adc, uint32_t u32Mask);
Nvoid ADC_DisableInt(ADC_T *adc, uint32_t u32Mask);
Nvoid ADC_SetExtendSampleTime(ADC_T *adc,
N                             uint32_t u32ModuleNum,
N                             uint32_t u32ExtendSampleTime);
N
N
N/*@}*/ /* end of group ADC_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group ADC_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__ADC_H__
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 567 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "crc.h"
L 1 "..\..\..\Library\StdDriver\inc\crc.h" 1
N/******************************************************************************
N * @file     crc.h
N * @version  V1.00
N * $Revision: 9 $
N * $Date: 18/07/09 4:18p $ 
N * @brief    M031 series CRC driver header file
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N****************************************************************************/
N 
N#ifndef __CRC_H__
N#define __CRC_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup CRC_Driver CRC Driver
N  @{
N*/
N
N/** @addtogroup CRC_EXPORTED_CONSTANTS CRC Exported Constants
N  @{
N*/
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CRC Polynomial Mode Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CRC_CCITT           (0UL << CRC_CTL_CRCMODE_Pos) /*!<CRC Polynomial Mode - CCITT \hideinitializer */
N#define CRC_8               (1UL << CRC_CTL_CRCMODE_Pos) /*!<CRC Polynomial Mode - CRC8 \hideinitializer */
N#define CRC_16              (2UL << CRC_CTL_CRCMODE_Pos) /*!<CRC Polynomial Mode - CRC16 \hideinitializer */
N#define CRC_32              (3UL << CRC_CTL_CRCMODE_Pos) /*!<CRC Polynomial Mode - CRC32 \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Checksum, Write data Constant Definitions                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CRC_CHECKSUM_COM    (CRC_CTL_CHKSFMT_Msk)       /*!<CRC Checksum Complement \hideinitializer */
N#define CRC_CHECKSUM_RVS    (CRC_CTL_CHKSREV_Msk)       /*!<CRC Checksum Reverse \hideinitializer */
N#define CRC_WDATA_COM       (CRC_CTL_DATFMT_Msk)        /*!<CRC Write Data Complement \hideinitializer */
N#define CRC_WDATA_RVS       (CRC_CTL_DATREV_Msk)        /*!<CRC Write Data Reverse \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Write Data Length Constant Definitions                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CRC_WDATA_8     (0UL << CRC_CTL_DATLEN_Pos) /*!<CRC Write Data length is 8-bit \hideinitializer */
N#define CRC_WDATA_16    (1UL << CRC_CTL_DATLEN_Pos) /*!<CRC Write Data length is 16-bit \hideinitializer */
N#define CRC_WDATA_32    (2UL << CRC_CTL_DATLEN_Pos) /*!<CRC Write Data length is 32-bit \hideinitializer */
N
N/*@}*/ /* end of group CRC_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup CRC_EXPORTED_FUNCTIONS CRC Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Set CRC Seed Value
N  *
N  * @param[in]  u32Seed     Seed value
N  *
N  * @return     None
N  *
N  * @details    This macro is used to set CRC seed value.
N  *
N  * @note       User must to perform CRC_CHKSINIT(CRC_CTL[1] CRC Engine Reset) to reload the new seed value
N  *             to CRC controller.
N  * \hideinitializer
N  */
N#define CRC_SET_SEED(u32Seed)   do{ CRC->SEED = (u32Seed); CRC->CTL |= CRC_CTL_CHKSINIT_Msk; }while(0)
N
N/**
N * @brief       Get CRC Seed Value
N *
N * @param       None
N *
N * @return      CRC seed value
N *
N * @details     This macro gets the current CRC seed value.
N * \hideinitializer
N */
N#define CRC_GET_SEED()          (CRC->SEED)
N
N/**
N * @brief       CRC Write Data
N *
N * @param[in]   u32Data     Write data
N *
N * @return      None
N *
N * @details    User can write data directly to CRC Write Data Register(CRC_DAT) by this macro to perform CRC operation.
N * \hideinitializer
N */
N#define CRC_WRITE_DATA(u32Data)   (CRC->DAT = (u32Data))
N
Nvoid CRC_Open(uint32_t u32Mode, uint32_t u32Attribute, uint32_t u32Seed, uint32_t u32DataLen);
Nuint32_t CRC_GetChecksum(void);
N
N/*@}*/ /* end of group CRC_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group CRC_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 568 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "ebi.h"
L 1 "..\..\..\Library\StdDriver\inc\ebi.h" 1
N/**************************************************************************//**
N * @file     ebi.h
N * @version  V1.00
N * $Revision: 3 $
N * $Date: 18/06/07 2:32p $
N * @brief    M031 series External Bus Interface(EBI) driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __EBI_H__
N#define __EBI_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup EBI_Driver EBI Driver
N  @{
N*/
N
N/** @addtogroup EBI_EXPORTED_CONSTANTS EBI Exported Constants
N  @{
N*/
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Miscellaneous Constant Definitions                                                                     */
N/*---------------------------------------------------------------------------------------------------------*/
N#define EBI_BANK0_BASE_ADDR     0x60000000UL /*!< EBI bank0 base address \hideinitializer */
N#define EBI_BANK1_BASE_ADDR     0x60100000UL /*!< EBI bank1 base address \hideinitializer */
N#define EBI_MAX_SIZE            0x00100000UL /*!< Maximum EBI size for each bank is 1 MB \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Constants for EBI bank number                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define EBI_BANK0               0UL   /*!< EBI bank 0 \hideinitializer */
N#define EBI_BANK1               1UL   /*!< EBI bank 1 \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Constants for EBI data bus width                                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
N#define EBI_BUSWIDTH_8BIT       8UL   /*!< EBI bus width is 8-bit \hideinitializer */
N#define EBI_BUSWIDTH_16BIT      16UL  /*!< EBI bus width is 16-bit \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Constants for EBI CS Active Level                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define EBI_CS_ACTIVE_LOW       0UL   /*!< EBI CS active level is low \hideinitializer */
N#define EBI_CS_ACTIVE_HIGH      1UL   /*!< EBI CS active level is high \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Constants for EBI MCLK divider and Timing                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#define EBI_MCLKDIV_1           0x0UL /*!< EBI output clock(MCLK) is HCLK/1 \hideinitializer */
N#define EBI_MCLKDIV_2           0x1UL /*!< EBI output clock(MCLK) is HCLK/2 \hideinitializer */
N#define EBI_MCLKDIV_4           0x2UL /*!< EBI output clock(MCLK) is HCLK/4 \hideinitializer */
N#define EBI_MCLKDIV_8           0x3UL /*!< EBI output clock(MCLK) is HCLK/8 \hideinitializer */
N#define EBI_MCLKDIV_16          0x4UL /*!< EBI output clock(MCLK) is HCLK/16 \hideinitializer */
N#define EBI_MCLKDIV_32          0x5UL /*!< EBI output clock(MCLK) is HCLK/32 \hideinitializer */
N
N#define EBI_TIMING_FASTEST      0x0UL /*!< EBI timing is the fastest \hideinitializer */
N#define EBI_TIMING_VERYFAST     0x1UL /*!< EBI timing is very fast \hideinitializer */
N#define EBI_TIMING_FAST         0x2UL /*!< EBI timing is fast \hideinitializer */
N#define EBI_TIMING_NORMAL       0x3UL /*!< EBI timing is normal \hideinitializer */
N#define EBI_TIMING_SLOW         0x4UL /*!< EBI timing is slow \hideinitializer */
N#define EBI_TIMING_VERYSLOW     0x5UL /*!< EBI timing is very slow \hideinitializer */
N#define EBI_TIMING_SLOWEST      0x6UL /*!< EBI timing is the slowest \hideinitializer */
N
N#define EBI_OPMODE_NORMAL       0x0UL                 /*!< EBI bus operate in normal mode \hideinitializer */
N#define EBI_OPMODE_CACCESS      (EBI_CTL_CACCESS_Msk) /*!< EBI bus operate in Continuous Data Access mode \hideinitializer */
N
N/*@}*/ /* end of group EBI_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup EBI_EXPORTED_FUNCTIONS EBI Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Read 8-bit data on EBI bank0
N  *
N  * @param[in]  u32Addr     The data address on EBI bank0.
N  *
N  * @return     8-bit Data
N  *
N  * @details    This macro is used to read 8-bit data from specify address on EBI bank0.
N  */
N#define EBI0_READ_DATA8(u32Addr)            (*((volatile unsigned char *)(EBI_BANK0_BASE_ADDR+(u32Addr))))
N
N/**
N  * @brief      Write 8-bit data to EBI bank0
N  *
N  * @param[in]  u32Addr     The data address on EBI bank0.
N  * @param[in]  u32Data     Specify data to be written.
N  *
N  * @return     None
N  *
N  * @details    This macro is used to write 8-bit data to specify address on EBI bank0.
N  */
N#define EBI0_WRITE_DATA8(u32Addr, u32Data)  (*((volatile unsigned char *)(EBI_BANK0_BASE_ADDR+(u32Addr))) = (u32Data))
N
N/**
N  * @brief      Read 16-bit data on EBI bank0
N  *
N  * @param[in]  u32Addr     The data address on EBI bank0.
N  *
N  * @return     16-bit Data
N  *
N  * @details    This macro is used to read 16-bit data from specify address on EBI bank0.
N  */
N#define EBI0_READ_DATA16(u32Addr)           (*((volatile unsigned short *)(EBI_BANK0_BASE_ADDR+(u32Addr))))
N
N/**
N  * @brief      Write 16-bit data to EBI bank0
N  *
N  * @param[in]  u32Addr     The data address on EBI bank0.
N  * @param[in]  u32Data     Specify data to be written.
N  *
N  * @return     None
N  *
N  * @details    This macro is used to write 16-bit data to specify address on EBI bank0.
N  */
N#define EBI0_WRITE_DATA16(u32Addr, u32Data) (*((volatile unsigned short *)(EBI_BANK0_BASE_ADDR+(u32Addr))) = (u32Data))
N
N/**
N  * @brief      Read 32-bit data on EBI bank0
N  *
N  * @param[in]  u32Addr     The data address on EBI bank0.
N  *
N  * @return     32-bit Data
N  *
N  * @details    This macro is used to read 32-bit data from specify address on EBI bank0.
N  */
N#define EBI0_READ_DATA32(u32Addr)           (*((volatile unsigned int *)(EBI_BANK0_BASE_ADDR+(u32Addr))))
N
N/**
N  * @brief      Write 32-bit data to EBI bank0
N  *
N  * @param[in]  u32Addr     The data address on EBI bank0.
N  * @param[in]  u32Data     Specify data to be written.
N  *
N  * @return     None
N  *
N  * @details    This macro is used to write 32-bit data to specify address on EBI bank0.
N  */
N#define EBI0_WRITE_DATA32(u32Addr, u32Data) (*((volatile unsigned int *)(EBI_BANK0_BASE_ADDR+(u32Addr))) = (u32Data))
N
N/**
N  * @brief      Read 8-bit data on EBI bank1
N  *
N  * @param[in]  u32Addr     The data address on EBI bank1.
N  *
N  * @return     8-bit Data
N  *
N  * @details    This macro is used to read 8-bit data from specify address on EBI bank1.
N  */
N#define EBI1_READ_DATA8(u32Addr)            (*((volatile unsigned char *)(EBI_BANK1_BASE_ADDR+(u32Addr))))
N
N/**
N  * @brief      Write 8-bit data to EBI bank1
N  *
N  * @param[in]  u32Addr     The data address on EBI bank1.
N  * @param[in]  u32Data     Specify data to be written.
N  *
N  * @return     None
N  *
N  * @details    This macro is used to write 8-bit data to specify address on EBI bank1.
N  */
N#define EBI1_WRITE_DATA8(u32Addr, u32Data)  (*((volatile unsigned char *)(EBI_BANK1_BASE_ADDR+(u32Addr))) = (u32Data))
N
N/**
N  * @brief      Read 16-bit data on EBI bank1
N  *
N  * @param[in]  u32Addr     The data address on EBI bank1.
N  *
N  * @return     16-bit Data
N  *
N  * @details    This macro is used to read 16-bit data from specify address on EBI bank1.
N  */
N#define EBI1_READ_DATA16(u32Addr)           (*((volatile unsigned short *)(EBI_BANK1_BASE_ADDR+(u32Addr))))
N
N/**
N  * @brief      Write 16-bit data to EBI bank1
N  *
N  * @param[in]  u32Addr     The data address on EBI bank1.
N  * @param[in]  u32Data     Specify data to be written.
N  *
N  * @return     None
N  *
N  * @details    This macro is used to write 16-bit data to specify address on EBI bank1.
N  */
N#define EBI1_WRITE_DATA16(u32Addr, u32Data) (*((volatile unsigned short *)(EBI_BANK1_BASE_ADDR+(u32Addr))) = (u32Data))
N
N/**
N  * @brief      Read 32-bit data on EBI bank1
N  *
N  * @param[in]  u32Addr     The data address on EBI bank1.
N  *
N  * @return     32-bit Data
N  *
N  * @details    This macro is used to read 32-bit data from specify address on EBI bank1.
N  */
N#define EBI1_READ_DATA32(u32Addr)           (*((volatile unsigned int *)(EBI_BANK1_BASE_ADDR+(u32Addr))))
N
N/**
N  * @brief      Write 32-bit data to EBI bank1
N  *
N  * @param[in]  u32Addr     The data address on EBI bank1.
N  * @param[in]  u32Data     Specify data to be written.
N  *
N  * @return     None
N  *
N  * @details    This macro is used to write 32-bit data to specify address on EBI bank1.
N  */
N#define EBI1_WRITE_DATA32(u32Addr, u32Data) (*((volatile unsigned int *)(EBI_BANK1_BASE_ADDR+(u32Addr))) = (u32Data))
N
N/**
N * @brief       Enable EBI Write Buffer
N *
N * @param       None
N *
N * @return      None
N *
N * @details     This macro is used to improve EBI write operation for EBI bank0 and bank1.
N */
N#define EBI_ENABLE_WRITE_BUFFER()           (EBI->CTL0 |= EBI_CTL_WBUFEN_Msk);
N
N/**
N * @brief       Disable EBI Write Buffer
N *
N * @param       None
N *
N * @return      None
N *
N * @details     This macro is used to disable EBI write buffer function.
N */
N#define EBI_DISABLE_WRITE_BUFFER()          (EBI->CTL0 &= ~EBI_CTL_WBUFEN_Msk);
N
Nvoid EBI_Open(uint32_t u32Bank, uint32_t u32DataWidth, uint32_t u32TimingClass, uint32_t u32BusMode, uint32_t u32CSActiveLevel);
Nvoid EBI_Close(uint32_t u32Bank);
Nvoid EBI_SetBusTiming(uint32_t u32Bank, uint32_t u32TimingConfig, uint32_t u32MclkDiv);
N
N/*@}*/ /* end of group EBI_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group EBI_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__EBI_H__
N
N/*** (C) COPYRIGHT 2017 Nuvoton Technology Corp. ***/
L 569 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "fmc.h"
L 1 "..\..\..\Library\StdDriver\inc\fmc.h" 1
N/**************************************************************************//**
N * @file     fmc.h
N * @version  V1.00
N * $Revision: 11 $
N * $Date: 18/06/20 3:38p $
N * @brief    M031 Series Flash Memory Controller Driver Header File
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __FMC_H__
N#define __FMC_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup FMC_Driver FMC Driver
N  @{
N*/
N
N
N/** @addtogroup FMC_EXPORTED_CONSTANTS FMC Exported Constants
N  @{
N*/
N
N//#define PAGE_SIZE_2048                        /*!< Please enable the compiler option for 2K page size     */
N	
N/*----------------------------------------------------------------------------------------------------------*/
N/* Define Base Address                                                                                      */
N/*----------------------------------------------------------------------------------------------------------*/
N#define FMC_APROM_BASE          0x00000000UL    /*!< APROM base address                    \hideinitializer */
N#define FMC_LDROM_BASE          0x00100000UL    /*!< LDROM  Base Address                   \hideinitializer */
N#define FMC_SPROM_BASE          0x00200000UL    /*!< SPROM  Base Address                   \hideinitializer */
N#define FMC_CONFIG_BASE         0x00300000UL    /*!< CONFIG Base Address                   \hideinitializer */
N#define FMC_USER_CONFIG_0       0x00300000UL    /*!< User Config 0 address                 \hideinitializer */
N#define FMC_USER_CONFIG_1       0x00300004UL    /*!< User Config 1 address                 \hideinitializer */
N#define FMC_USER_CONFIG_2       0x00300008UL    /*!< User Config 2 address                 \hideinitializer */
N
N#ifndef PAGE_SIZE_2048
N#define FMC_FLASH_PAGE_SIZE     (0x200)         /*!< Flash Page Size (512 bytes)           \hideinitializer */
N#define FMC_PAGE_ADDR_MASK      (0xFFFFFE00UL)  /*!< Flash page address mask               \hideinitializer */
N
N#define FMC_SPROM_SIZE          (0x200)         /*!< SPROM Size (512 bytes)                \hideinitializer */
N#else
S#define FMC_FLASH_PAGE_SIZE     (0x800)         /*!< Flash Page Size (2048 bytes)          \hideinitializer */
S#define FMC_PAGE_ADDR_MASK      (0xFFFFF800UL)  /*!< Flash page address mask               \hideinitializer */
S
S#define FMC_SPROM_SIZE          (0x800)         /*!< SPROM Size (2048 bytes)               \hideinitializer */
N#endif
N
N#define FMC_MULTI_WORD_PROG_LEN (256UL)         /*!< The length of a multi-word program.   \hideinitializer */
N
N/*----------------------------------------------------------------------------------------------------------*/
N/*  ISPCMD constant definitions                                                                             */
N/*----------------------------------------------------------------------------------------------------------*/
N#define FMC_ISPCMD_READ         0x00UL          /*!< ISP Command: Read flash word          \hideinitializer */
N#define FMC_ISPCMD_READ_UID     0x04UL          /*!< ISP Command: Read Unique ID           \hideinitializer */
N#define FMC_ISPCMD_READ_ALL1    0x08UL          /*!< ISP Command: Read all-one result      \hideinitializer */																			//  I version
N#define FMC_ISPCMD_READ_CID     0x0BUL          /*!< ISP Command: Read Company ID          \hideinitializer */
N#define FMC_ISPCMD_READ_DID     0x0CUL          /*!< ISP Command: Read Device ID           \hideinitializer */
N#define FMC_ISPCMD_READ_CKS     0x0DUL          /*!< ISP Command: Read checksum            \hideinitializer */
N#define FMC_ISPCMD_PROGRAM      0x21UL          /*!< ISP Command: Write flash word         \hideinitializer */
N#define FMC_ISPCMD_PROGRAM_64   0x61UL          /*!< ISP Command: 64-bit program Flash     \hideinitializer */
N#define FMC_ISPCMD_PAGE_ERASE   0x22UL          /*!< ISP Command: Page Erase Flash         \hideinitializer */
N#define FMC_ISPCMD_BANK_ERASE   0x23UL          /*!< ISP Command: Bank Erase Flash         \hideinitializer */
N#define FMC_ISPCMD_MULTI_PROG   0x27UL          /*!< ISP Command: Flash Multi-Word Program \hideinitializer */
N#define FMC_ISPCMD_RUN_ALL1     0x28UL          /*!< ISP Command: Run all-one verification \hideinitializer */																	// I version
N#define FMC_ISPCMD_RUN_CKS      0x2DUL          /*!< ISP Command: Run checksum calculation \hideinitializer */
N#define FMC_ISPCMD_BANK_REMAP   0x2CUL          /*!< ISP Command: Bank Remap               \hideinitializer */
N#define FMC_ISPCMD_VECMAP       0x2EUL          /*!< ISP Command: Vector Page Remap        \hideinitializer */
N
N#define IS_BOOT_FROM_APROM      0UL             /*!< Is booting from APROM                 \hideinitializer */
N#define IS_BOOT_FROM_LDROM      1UL             /*!< Is booting from LDROM                 \hideinitializer */
N
N#define READ_ALLONE_YES         0xA11FFFFFUL    /*!< Check-all-one result is all one.      \hideinitializer */
N#define READ_ALLONE_NOT         0xA1100000UL    /*!< Check-all-one result is not all one.  \hideinitializer */
N#define READ_ALLONE_CMD_FAIL    0xFFFFFFFFUL    /*!< Check-all-one command failed.         \hideinitializer */
N
N#define FMC_TIMEOUT_READ        ((SystemCoreClock/10)/4) /*!< Read command time-out 100 ms         \hideinitializer */
N#define FMC_TIMEOUT_WRITE       ((SystemCoreClock/10)/4) /*!< Write command time-out 100 ms        \hideinitializer */
N#define FMC_TIMEOUT_ERASE       ((SystemCoreClock/10)/2) /*!< Erase command time-out 200 ms        \hideinitializer */
N#define FMC_TIMEOUT_CHKSUM      (SystemCoreClock/2)      /*!< Get checksum command time-out 2 s    \hideinitializer */
N#define FMC_TIMEOUT_CHKALLONE   (SystemCoreClock/2)      /*!< Check-all-one command time-out 2 s   \hideinitializer */
N
N
N/*@}*/ /* end of group FMC_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup FMC_EXPORTED_MACROS FMC Exported Macros
N  @{
N*/
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Macros                                                                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N
N#define FMC_SET_APROM_BOOT()        (FMC->ISPCTL &= ~FMC_ISPCTL_BS_Msk)         /*!< Select booting from APROM  \hideinitializer */
N#define FMC_SET_LDROM_BOOT()        (FMC->ISPCTL |= FMC_ISPCTL_BS_Msk)          /*!< Select booting from LDROM  \hideinitializer */
N#define FMC_ENABLE_AP_UPDATE()      (FMC->ISPCTL |=  FMC_ISPCTL_APUEN_Msk)      /*!< Enable APROM update        \hideinitializer */
N#define FMC_DISABLE_AP_UPDATE()     (FMC->ISPCTL &= ~FMC_ISPCTL_APUEN_Msk)      /*!< Disable APROM update       \hideinitializer */
N#define FMC_ENABLE_CFG_UPDATE()     (FMC->ISPCTL |=  FMC_ISPCTL_CFGUEN_Msk)     /*!< Enable User Config update  \hideinitializer */
N#define FMC_DISABLE_CFG_UPDATE()    (FMC->ISPCTL &= ~FMC_ISPCTL_CFGUEN_Msk)     /*!< Disable User Config update \hideinitializer */
N#define FMC_ENABLE_LD_UPDATE()      (FMC->ISPCTL |=  FMC_ISPCTL_LDUEN_Msk)      /*!< Enable LDROM update        \hideinitializer */
N#define FMC_DISABLE_LD_UPDATE()     (FMC->ISPCTL &= ~FMC_ISPCTL_LDUEN_Msk)      /*!< Disable LDROM update       \hideinitializer */
N#define FMC_ENABLE_SP_UPDATE()      (FMC->ISPCTL |=  FMC_ISPCTL_SPUEN_Msk)      /*!< Enable SPROM update        \hideinitializer */
N#define FMC_DISABLE_SP_UPDATE()     (FMC->ISPCTL &= ~FMC_ISPCTL_SPUEN_Msk)      /*!< Disable SPROM update       \hideinitializer */
N#define FMC_DISABLE_ISP()           (FMC->ISPCTL &= ~FMC_ISPCTL_ISPEN_Msk)      /*!< Disable ISP function       \hideinitializer */
N#define FMC_ENABLE_ISP()            (FMC->ISPCTL |=  FMC_ISPCTL_ISPEN_Msk)      /*!< Enable ISP function        \hideinitializer */
N#define FMC_GET_FAIL_FLAG()         ((FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk) ? 1UL : 0UL)  /*!< Get ISP fail flag  \hideinitializer */
N#define FMC_CLR_FAIL_FLAG()         (FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk)       /*!< Clear ISP fail flag        \hideinitializer */
N#define FMC_ENABLE_ISP_INT()        (FMC->ISPCTL |=  FMC_ISPCTL_INTEN_Msk) /*!< Enable ISP interrupt */
N#define FMC_DISABLE_ISP_INT()       (FMC->ISPCTL &= ~FMC_ISPCTL_INTEN_Msk) /*!< Disable ISP interrupt */
N#define FMC_GET_ISP_INT_FLAG()      ((FMC->ISPSTS & FMC_ISPSTS_INTFLAG_Msk) ? 1UL : 0UL) /*!< Get ISP interrupt flag Status */
N#define FMC_CLEAR_ISP_INT_FLAG()    (FMC->ISPSTS = FMC_ISPSTS_INTFLAG_Msk) /*!< Clear ISP interrupt flag*/
N
N/*@}*/ /* end of group FMC_EXPORTED_MACROS */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Global variables                                                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
Nextern int32_t  g_FMC_i32ErrCode;
N
N/** @addtogroup FMC_EXPORTED_FUNCTIONS FMC Exported Functions
N  @{
N*/
N/*---------------------------------------------------------------------------------------------------------*/
N/* inline functions                                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N__STATIC_INLINE uint32_t FMC_ReadCID(void);
Xstatic __inline uint32_t FMC_ReadCID(void);
N__STATIC_INLINE uint32_t FMC_ReadPID(void);
Xstatic __inline uint32_t FMC_ReadPID(void);
N__STATIC_INLINE uint32_t FMC_ReadUID(uint8_t u8Index);
Xstatic __inline uint32_t FMC_ReadUID(uint8_t u8Index);
N__STATIC_INLINE uint32_t FMC_ReadUCID(uint32_t u32Index);
Xstatic __inline uint32_t FMC_ReadUCID(uint32_t u32Index);
N__STATIC_INLINE int32_t  FMC_SetVectorPageAddr(uint32_t u32PageAddr);
Xstatic __inline int32_t  FMC_SetVectorPageAddr(uint32_t u32PageAddr);
N__STATIC_INLINE uint32_t FMC_GetVECMAP(void);
Xstatic __inline uint32_t FMC_GetVECMAP(void);
N
N/**
N * @brief       Get current vector mapping address.
N * @param       None
N * @return      The current vector mapping address.
N * @details     To get VECMAP value which is the page address for remapping to vector page (0x0).
N * @note
N *              VECMAP only valid when new IAP function is enabled. (CBS = 10'b or 00'b)
N */
N__STATIC_INLINE uint32_t FMC_GetVECMAP(void)
Xstatic __inline uint32_t FMC_GetVECMAP(void)
N{
N    return (FMC->ISPSTS & FMC_ISPSTS_VECMAP_Msk);
X    return (((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPSTS & (0x1ffffful << (9)));
N}
N
N/**
N  * @brief    Read company ID
N  * @param    None
N  * @return   The company ID (32-bit). 0xFFFFFFFF means read failed.
N  * @details  The company ID of Nuvoton is fixed to be 0xDA
N  *
N  * @note     Global error code g_FMC_i32ErrCode
N  *           -1  Read time-out 
N  */
N__STATIC_INLINE uint32_t FMC_ReadCID(void)
Xstatic __inline uint32_t FMC_ReadCID(void)
N{
N    uint32_t  tout = FMC_TIMEOUT_READ;
X    uint32_t  tout = ((SystemCoreClock/10)/4);
N
N    g_FMC_i32ErrCode = 0;
N
N    FMC->ISPCMD = FMC_ISPCMD_READ_CID;           /* Set ISP Command Code */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPCMD = 0x0BUL;            
N    FMC->ISPADDR = 0x0u;                         /* Must keep 0x0 when read CID */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPADDR = 0x0u;                          
N    FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;          /* Trigger to start ISP procedure */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPTRG = (0x1ul << (0));           
N#if ISBEN
S    __ISB();
N#endif                                           /* To make sure ISP/CPU be Synchronized */
N    while (tout-- > 0)
N    {
N        if (!(FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk))  /* Waiting for ISP Done */
X        if (!(((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPTRG & (0x1ul << (0))))   
N        {
N            if (FMC->ISPDAT != 0xDA)
X            if (((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPDAT != 0xDA)
N                g_FMC_i32ErrCode = -1;
N            return FMC->ISPDAT;
X            return ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPDAT;
N        }
N    }
N    g_FMC_i32ErrCode = -1;
N    return 0xFFFFFFFF;
N
N}
N
N/**
N  * @brief    Read product ID
N  * @param    None
N  * @return   The product ID (32-bit). 0xFFFFFFFF means read failed.
N  * @details  This function is used to read product ID.
N  *
N  * @note     Global error code g_FMC_i32ErrCode
N  *           -1  Read time-out 
N  */
N__STATIC_INLINE uint32_t FMC_ReadPID(void)
Xstatic __inline uint32_t FMC_ReadPID(void)
N{
N    uint32_t  tout = FMC_TIMEOUT_READ;
X    uint32_t  tout = ((SystemCoreClock/10)/4);
N
N    g_FMC_i32ErrCode = 0;
N
N    FMC->ISPCMD = FMC_ISPCMD_READ_DID;          /* Set ISP Command Code */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPCMD = 0x0CUL;           
N    FMC->ISPADDR = 0x04u;                       /* Must keep 0x4 when read PID */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPADDR = 0x04u;                        
N    FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;         /* Trigger to start ISP procedure */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPTRG = (0x1ul << (0));          
N#if ISBEN
S    __ISB();
N#endif                                          /* To make sure ISP/CPU be Synchronized */
N    while (tout-- > 0)
N    {
N        if (!(FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk))  /* Waiting for ISP Done */
X        if (!(((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPTRG & (0x1ul << (0))))   
N            return FMC->ISPDAT;
X            return ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPDAT;
N    }
N    g_FMC_i32ErrCode = -1;
N    return 0xFFFFFFFF;
N}
N
N/**
N * @brief       Read Unique ID
N * @param[in]   u8Index  UID index. 0 = UID[31:0], 1 = UID[63:32], 2 = UID[95:64]
N * @return      The 32-bit unique ID data of specified UID index. 0xFFFFFFFF means read failed.
N * @details     To read out 96-bit Unique ID.
N *
N * @note     Global error code g_FMC_i32ErrCode
N *           -1  Read time-out
N */
N__STATIC_INLINE uint32_t FMC_ReadUID(uint8_t u8Index)
Xstatic __inline uint32_t FMC_ReadUID(uint8_t u8Index)
N{
N    uint32_t  tout = FMC_TIMEOUT_READ;
X    uint32_t  tout = ((SystemCoreClock/10)/4);
N
N    g_FMC_i32ErrCode = 0;
N
N    FMC->ISPCMD = FMC_ISPCMD_READ_UID;
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPCMD = 0x04UL;
N    FMC->ISPADDR = ((uint32_t)u8Index << 2u);
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPADDR = ((uint32_t)u8Index << 2u);
N    FMC->ISPDAT = 0u;
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPDAT = 0u;
N    FMC->ISPTRG = 0x1u;
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPTRG = 0x1u;
N#if ISBEN
S    __ISB();
N#endif
N    while (tout-- > 0)
N    {
N        if (!(FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk))  /* Waiting for ISP Done */
X        if (!(((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPTRG & (0x1ul << (0))))   
N            return FMC->ISPDAT;
X            return ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPDAT;
N    }
N    g_FMC_i32ErrCode = -1;
N    return 0xFFFFFFFF;
N}
N
N/**
N  * @brief      To read UCID
N  * @param[in]  u32Index    Index of the UCID to read. u32Index must be 0, 1, 2, or 3.
N  * @return     The UCID of specified index. 0xFFFFFFFF means read failed.
N  * @details    This function is used to read unique chip ID (UCID).
N  *
N  * @note     Global error code g_FMC_i32ErrCode
N  *           -1  Read time-out  
N  */
N__STATIC_INLINE uint32_t FMC_ReadUCID(uint32_t u32Index)
Xstatic __inline uint32_t FMC_ReadUCID(uint32_t u32Index)
N{
N    uint32_t  tout = FMC_TIMEOUT_READ;
X    uint32_t  tout = ((SystemCoreClock/10)/4);
N
N    g_FMC_i32ErrCode = 0;
N
N    FMC->ISPCMD = FMC_ISPCMD_READ_UID;            /* Set ISP Command Code */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPCMD = 0x04UL;             
N    FMC->ISPADDR = (0x04u * u32Index) + 0x10u;    /* The UCID is at offset 0x10 with word alignment. */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPADDR = (0x04u * u32Index) + 0x10u;     
N    FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;           /* Trigger to start ISP procedure */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPTRG = (0x1ul << (0));            
N#if ISBEN
S    __ISB();
N#endif                                            /* To make sure ISP/CPU be Synchronized */
N    while (tout-- > 0)
N    {
N        if (!(FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk))  /* Waiting for ISP Done */
X        if (!(((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPTRG & (0x1ul << (0))))   
N            return FMC->ISPDAT;
X            return ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPDAT;
N    }
N    g_FMC_i32ErrCode = -1;
N    return 0xFFFFFFFF;
N}
N
N/**
N * @brief       Set vector mapping address
N * @param[in]   u32PageAddr  The page address to remap to address 0x0. The address must be page alignment.
N * @return      To set VECMAP to remap specified page address to 0x0.
N * @details     This function is used to set VECMAP to map specified page to vector page (0x0).
N * @retval      0   Success
N * @retval      -1  Failed
N * @note
N *              VECMAP only valid when new IAP function is enabled. (CBS = 10'b or 00'b)
N *
N * @note        Global error code g_FMC_i32ErrCode
N *              -1  Command time-out
N 
N */
N__STATIC_INLINE int32_t FMC_SetVectorPageAddr(uint32_t u32PageAddr)
Xstatic __inline int32_t FMC_SetVectorPageAddr(uint32_t u32PageAddr)
N{
N    uint32_t  tout = FMC_TIMEOUT_WRITE;
X    uint32_t  tout = ((SystemCoreClock/10)/4);
N
N    g_FMC_i32ErrCode = 0;
N
N    FMC->ISPCMD = FMC_ISPCMD_VECMAP;  /* Set ISP Command Code */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPCMD = 0x2EUL;   
N    FMC->ISPADDR = u32PageAddr;       /* The address of specified page which will be map to address 0x0. It must be page alignment. */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPADDR = u32PageAddr;        
N    FMC->ISPTRG = 0x1u;               /* Trigger to start ISP procedure */
X    ((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPTRG = 0x1u;                
N#if ISBEN
S    __ISB();
N#endif                                /* To make sure ISP/CPU be Synchronized */
N    while (tout-- > 0)
N    {
N        if (!FMC->ISPTRG)             /* Waiting for ISP Done */
X        if (!((FMC_T *) ((( uint32_t)0x40000000) + 0x0C000))->ISPTRG)              
N            return 0;
N    }
N    g_FMC_i32ErrCode = -1;
N    return -1;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Functions                                                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N
Nextern void FMC_Close(void);
Nextern int32_t FMC_Erase(uint32_t u32PageAddr);
Nextern int32_t FMC_Erase_SPROM(void);
Nextern int32_t FMC_Erase_Bank(uint32_t u32BankAddr);
Nextern int32_t FMC_GetBootSource(void);
Nextern void FMC_Open(void);
Nextern uint32_t FMC_Read(uint32_t u32Addr);
Nextern uint32_t FMC_ReadDataFlashBaseAddr(void);
Nextern void FMC_SetBootSource(int32_t i32BootSrc);
Nextern int32_t  FMC_Write(uint32_t u32Addr, uint32_t u32Data);
Nextern int32_t  FMC_Write8Bytes(uint32_t u32addr, uint32_t u32data0, uint32_t u32data1);
Nextern int32_t  FMC_ReadConfig(uint32_t u32Config[], uint32_t u32Count);
Nextern int32_t  FMC_WriteConfig(uint32_t u32Config[], uint32_t u32Count);
Nextern uint32_t FMC_GetChkSum(uint32_t u32addr, uint32_t u32count);
Nextern uint32_t  FMC_CheckAllOne(uint32_t u32addr, uint32_t u32count);
Nextern int32_t FMC_WriteMultiple(uint32_t u32Addr, uint32_t pu32Buf[], uint32_t u32Len);
Nextern int32_t FMC_RemapBank(uint32_t u32BankIdx);
N
N/*@}*/ /* end of group FMC_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group FMC_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif   /* __FMC_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 570 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "gpio.h"
L 1 "..\..\..\Library\StdDriver\inc\gpio.h" 1
N/**************************************************************************//**
N * @file     gpio.h
N * @version  V0.10
N * $Revision: 2 $
N * $Date: 18/12/20 6:49p $
N * @brief    M031 Series General Purpose I/O (GPIO) Driver Header File
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __GPIO_H__
N#define __GPIO_H__
N
N#include "M031Series.h"
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup GPIO_Driver GPIO Driver
N  @{
N*/
N
N/** @addtogroup GPIO_EXPORTED_CONSTANTS GPIO Exported Constants
N  @{
N*/
N
N#define GPIO_PIN_MAX    16  /*!< Specify Maximum Pins of Each GPIO Port \hideinitializer */
N
N
N/* Define GPIO Pin Data Input/Output. It could be used to control each I/O pin by pin address mapping.
N   Example 1:
N
N       PA0 = 1;
N
N   It is used to set GPIO PA.0 to high;
N
N   Example 2:
N
N       if (PA0)
N           PA0 = 0;
N
N   If GPIO PA.0 pin status is high, then set GPIO PA.0 data output to low.
N */
N#define GPIO_PIN_DATA(port, pin)    (*((volatile uint32_t *)((GPIO_PIN_DATA_BASE+(0x40*(port))) + ((pin)<<2)))) /*!< Specify GPIO Pin Data Input/Output \hideinitializer */
N#define PA0             GPIO_PIN_DATA(0, 0 ) /*!< Specify PA.0  Pin Data Input/Output \hideinitializer */
N#define PA1             GPIO_PIN_DATA(0, 1 ) /*!< Specify PA.1  Pin Data Input/Output \hideinitializer */
N#define PA2             GPIO_PIN_DATA(0, 2 ) /*!< Specify PA.2  Pin Data Input/Output \hideinitializer */
N#define PA3             GPIO_PIN_DATA(0, 3 ) /*!< Specify PA.3  Pin Data Input/Output \hideinitializer */
N#define PA4             GPIO_PIN_DATA(0, 4 ) /*!< Specify PA.4  Pin Data Input/Output \hideinitializer */
N#define PA5             GPIO_PIN_DATA(0, 5 ) /*!< Specify PA.5  Pin Data Input/Output \hideinitializer */
N#define PA6             GPIO_PIN_DATA(0, 6 ) /*!< Specify PA.6  Pin Data Input/Output \hideinitializer */
N#define PA7             GPIO_PIN_DATA(0, 7 ) /*!< Specify PA.7  Pin Data Input/Output \hideinitializer */
N#define PA8             GPIO_PIN_DATA(0, 8 ) /*!< Specify PA.8  Pin Data Input/Output \hideinitializer */
N#define PA9             GPIO_PIN_DATA(0, 9 ) /*!< Specify PA.9  Pin Data Input/Output \hideinitializer */
N#define PA10            GPIO_PIN_DATA(0, 10) /*!< Specify PA.10 Pin Data Input/Output \hideinitializer */
N#define PA11            GPIO_PIN_DATA(0, 11) /*!< Specify PA.11 Pin Data Input/Output \hideinitializer */
N#define PA12            GPIO_PIN_DATA(0, 12) /*!< Specify PA.12 Pin Data Input/Output \hideinitializer */
N#define PA13            GPIO_PIN_DATA(0, 13) /*!< Specify PA.13 Pin Data Input/Output \hideinitializer */
N#define PA14            GPIO_PIN_DATA(0, 14) /*!< Specify PA.14 Pin Data Input/Output \hideinitializer */
N#define PA15            GPIO_PIN_DATA(0, 15) /*!< Specify PA.15 Pin Data Input/Output \hideinitializer */
N
N#define PB0             GPIO_PIN_DATA(1, 0 ) /*!< Specify PB.0  Pin Data Input/Output \hideinitializer */
N#define PB1             GPIO_PIN_DATA(1, 1 ) /*!< Specify PB.1  Pin Data Input/Output \hideinitializer */
N#define PB2             GPIO_PIN_DATA(1, 2 ) /*!< Specify PB.2  Pin Data Input/Output \hideinitializer */
N#define PB3             GPIO_PIN_DATA(1, 3 ) /*!< Specify PB.3  Pin Data Input/Output \hideinitializer */
N#define PB4             GPIO_PIN_DATA(1, 4 ) /*!< Specify PB.4  Pin Data Input/Output \hideinitializer */
N#define PB5             GPIO_PIN_DATA(1, 5 ) /*!< Specify PB.5  Pin Data Input/Output \hideinitializer */
N#define PB6             GPIO_PIN_DATA(1, 6 ) /*!< Specify PB.6  Pin Data Input/Output \hideinitializer */
N#define PB7             GPIO_PIN_DATA(1, 7 ) /*!< Specify PB.7  Pin Data Input/Output \hideinitializer */
N#define PB8             GPIO_PIN_DATA(1, 8 ) /*!< Specify PB.8  Pin Data Input/Output \hideinitializer */
N#define PB9             GPIO_PIN_DATA(1, 9 ) /*!< Specify PB.9  Pin Data Input/Output \hideinitializer */
N#define PB10            GPIO_PIN_DATA(1, 10) /*!< Specify PB.10 Pin Data Input/Output \hideinitializer */
N#define PB11            GPIO_PIN_DATA(1, 11) /*!< Specify PB.11 Pin Data Input/Output \hideinitializer */
N#define PB12            GPIO_PIN_DATA(1, 12) /*!< Specify PB.12 Pin Data Input/Output \hideinitializer */
N#define PB13            GPIO_PIN_DATA(1, 13) /*!< Specify PB.13 Pin Data Input/Output \hideinitializer */
N#define PB14            GPIO_PIN_DATA(1, 14) /*!< Specify PB.14 Pin Data Input/Output \hideinitializer */
N#define PB15            GPIO_PIN_DATA(1, 15) /*!< Specify PB.15 Pin Data Input/Output \hideinitializer */
N
N#define PC0             GPIO_PIN_DATA(2, 0 ) /*!< Specify PC.0  Pin Data Input/Output \hideinitializer */
N#define PC1             GPIO_PIN_DATA(2, 1 ) /*!< Specify PC.1  Pin Data Input/Output \hideinitializer */
N#define PC2             GPIO_PIN_DATA(2, 2 ) /*!< Specify PC.2  Pin Data Input/Output \hideinitializer */
N#define PC3             GPIO_PIN_DATA(2, 3 ) /*!< Specify PC.3  Pin Data Input/Output \hideinitializer */
N#define PC4             GPIO_PIN_DATA(2, 4 ) /*!< Specify PC.4  Pin Data Input/Output \hideinitializer */
N#define PC5             GPIO_PIN_DATA(2, 5 ) /*!< Specify PC.5  Pin Data Input/Output \hideinitializer */
N#define PC6             GPIO_PIN_DATA(2, 6 ) /*!< Specify PC.6  Pin Data Input/Output \hideinitializer */
N#define PC7             GPIO_PIN_DATA(2, 7 ) /*!< Specify PC.7  Pin Data Input/Output \hideinitializer */
N#define PC8             GPIO_PIN_DATA(2, 8 ) /*!< Specify PC.8  Pin Data Input/Output \hideinitializer */
N#define PC9             GPIO_PIN_DATA(2, 9 ) /*!< Specify PC.9  Pin Data Input/Output \hideinitializer */
N#define PC10            GPIO_PIN_DATA(2, 10) /*!< Specify PC.10 Pin Data Input/Output \hideinitializer */
N#define PC11            GPIO_PIN_DATA(2, 11) /*!< Specify PC.11 Pin Data Input/Output \hideinitializer */
N#define PC12            GPIO_PIN_DATA(2, 12) /*!< Specify PC.12 Pin Data Input/Output \hideinitializer */
N#define PC13            GPIO_PIN_DATA(2, 13) /*!< Specify PC.13 Pin Data Input/Output \hideinitializer */
N#define PC14            GPIO_PIN_DATA(2, 14) /*!< Specify PC.14 Pin Data Input/Output \hideinitializer */
N
N#define PD0             GPIO_PIN_DATA(3, 0 ) /*!< Specify PD.0  Pin Data Input/Output \hideinitializer */
N#define PD1             GPIO_PIN_DATA(3, 1 ) /*!< Specify PD.1  Pin Data Input/Output \hideinitializer */
N#define PD2             GPIO_PIN_DATA(3, 2 ) /*!< Specify PD.2  Pin Data Input/Output \hideinitializer */
N#define PD3             GPIO_PIN_DATA(3, 3 ) /*!< Specify PD.3  Pin Data Input/Output \hideinitializer */
N#define PD4             GPIO_PIN_DATA(3, 4 ) /*!< Specify PD.4  Pin Data Input/Output \hideinitializer */
N#define PD5             GPIO_PIN_DATA(3, 5 ) /*!< Specify PD.5  Pin Data Input/Output \hideinitializer */
N#define PD6             GPIO_PIN_DATA(3, 6 ) /*!< Specify PD.6  Pin Data Input/Output \hideinitializer */
N#define PD7             GPIO_PIN_DATA(3, 7 ) /*!< Specify PD.7  Pin Data Input/Output \hideinitializer */
N#define PD8             GPIO_PIN_DATA(3, 8 ) /*!< Specify PD.8  Pin Data Input/Output \hideinitializer */
N#define PD9             GPIO_PIN_DATA(3, 9 ) /*!< Specify PD.9  Pin Data Input/Output \hideinitializer */
N#define PD10            GPIO_PIN_DATA(3, 10) /*!< Specify PD.10 Pin Data Input/Output \hideinitializer */
N#define PD11            GPIO_PIN_DATA(3, 11) /*!< Specify PD.11 Pin Data Input/Output \hideinitializer */
N#define PD12            GPIO_PIN_DATA(3, 12) /*!< Specify PD.12 Pin Data Input/Output \hideinitializer */
N#define PD13            GPIO_PIN_DATA(3, 13) /*!< Specify PD.13 Pin Data Input/Output \hideinitializer */
N#define PD14            GPIO_PIN_DATA(3, 14) /*!< Specify PD.14 Pin Data Input/Output \hideinitializer */
N#define PD15            GPIO_PIN_DATA(3, 15) /*!< Specify PD.15 Pin Data Input/Output \hideinitializer */
N
N#define PE0             GPIO_PIN_DATA(4, 0 ) /*!< Specify PE.0  Pin Data Input/Output \hideinitializer */
N#define PE1             GPIO_PIN_DATA(4, 1 ) /*!< Specify PE.1  Pin Data Input/Output \hideinitializer */
N#define PE2             GPIO_PIN_DATA(4, 2 ) /*!< Specify PE.2  Pin Data Input/Output \hideinitializer */
N#define PE3             GPIO_PIN_DATA(4, 3 ) /*!< Specify PE.3  Pin Data Input/Output \hideinitializer */
N#define PE4             GPIO_PIN_DATA(4, 4 ) /*!< Specify PE.4  Pin Data Input/Output \hideinitializer */
N#define PE5             GPIO_PIN_DATA(4, 5 ) /*!< Specify PE.5  Pin Data Input/Output \hideinitializer */
N#define PE6             GPIO_PIN_DATA(4, 6 ) /*!< Specify PE.6  Pin Data Input/Output \hideinitializer */
N#define PE7             GPIO_PIN_DATA(4, 7 ) /*!< Specify PE.7  Pin Data Input/Output \hideinitializer */
N#define PE8             GPIO_PIN_DATA(4, 8 ) /*!< Specify PE.8  Pin Data Input/Output \hideinitializer */
N#define PE9             GPIO_PIN_DATA(4, 9 ) /*!< Specify PE.9  Pin Data Input/Output \hideinitializer */
N#define PE10            GPIO_PIN_DATA(4, 10) /*!< Specify PE.10 Pin Data Input/Output \hideinitializer */
N#define PE11            GPIO_PIN_DATA(4, 11) /*!< Specify PE.11 Pin Data Input/Output \hideinitializer */
N#define PE12            GPIO_PIN_DATA(4, 12) /*!< Specify PE.12 Pin Data Input/Output \hideinitializer */
N#define PE13            GPIO_PIN_DATA(4, 13) /*!< Specify PE.13 Pin Data Input/Output \hideinitializer */
N#define PE14            GPIO_PIN_DATA(4, 14) /*!< Specify PE.14 Pin Data Input/Output \hideinitializer */
N#define PE15            GPIO_PIN_DATA(4, 15) /*!< Specify PE.15 Pin Data Input/Output \hideinitializer */
N
N#define PF0             GPIO_PIN_DATA(5, 0 ) /*!< Specify PF.0  Pin Data Input/Output \hideinitializer */
N#define PF1             GPIO_PIN_DATA(5, 1 ) /*!< Specify PF.1  Pin Data Input/Output \hideinitializer */
N#define PF2             GPIO_PIN_DATA(5, 2 ) /*!< Specify PF.2  Pin Data Input/Output \hideinitializer */
N#define PF3             GPIO_PIN_DATA(5, 3 ) /*!< Specify PF.3  Pin Data Input/Output \hideinitializer */
N#define PF4             GPIO_PIN_DATA(5, 4 ) /*!< Specify PF.4  Pin Data Input/Output \hideinitializer */
N#define PF5             GPIO_PIN_DATA(5, 5 ) /*!< Specify PF.5  Pin Data Input/Output \hideinitializer */
N#define PF6             GPIO_PIN_DATA(5, 6 ) /*!< Specify PF.6  Pin Data Input/Output \hideinitializer */
N#define PF7             GPIO_PIN_DATA(5, 7 ) /*!< Specify PF.7  Pin Data Input/Output \hideinitializer */
N#define PF8             GPIO_PIN_DATA(5, 8 ) /*!< Specify PF.8  Pin Data Input/Output \hideinitializer */
N#define PF9             GPIO_PIN_DATA(5, 9 ) /*!< Specify PF.9  Pin Data Input/Output \hideinitializer */
N#define PF10            GPIO_PIN_DATA(5, 10) /*!< Specify PF.10 Pin Data Input/Output \hideinitializer */
N#define PF11            GPIO_PIN_DATA(5, 11) /*!< Specify PF.11 Pin Data Input/Output \hideinitializer */
N#define PF14            GPIO_PIN_DATA(5, 14) /*!< Specify PF.14 Pin Data Input/Output \hideinitializer */
N#define PF15            GPIO_PIN_DATA(5, 15) /*!< Specify PF.15 Pin Data Input/Output \hideinitializer */
N
N#define PG2             GPIO_PIN_DATA(6, 2 ) /*!< Specify PG.2  Pin Data Input/Output \hideinitializer */
N#define PG3             GPIO_PIN_DATA(6, 3 ) /*!< Specify PG.3  Pin Data Input/Output \hideinitializer */
N#define PG4             GPIO_PIN_DATA(6, 4 ) /*!< Specify PG.4  Pin Data Input/Output \hideinitializer */
N#define PG9             GPIO_PIN_DATA(6, 9 ) /*!< Specify PG.9  Pin Data Input/Output \hideinitializer */
N#define PG10            GPIO_PIN_DATA(6, 10) /*!< Specify PG.10 Pin Data Input/Output \hideinitializer */
N#define PG11            GPIO_PIN_DATA(6, 11) /*!< Specify PG.11 Pin Data Input/Output \hideinitializer */
N#define PG12            GPIO_PIN_DATA(6, 12) /*!< Specify PG.12 Pin Data Input/Output \hideinitializer */
N#define PG13            GPIO_PIN_DATA(6, 13) /*!< Specify PG.13 Pin Data Input/Output \hideinitializer */
N#define PG14            GPIO_PIN_DATA(6, 14) /*!< Specify PG.14 Pin Data Input/Output \hideinitializer */
N#define PG15            GPIO_PIN_DATA(6, 15) /*!< Specify PG.15 Pin Data Input/Output \hideinitializer */
N
N#define PH4             GPIO_PIN_DATA(7, 4 ) /*!< Specify PH.4  Pin Data Input/Output \hideinitializer */
N#define PH5             GPIO_PIN_DATA(7, 5 ) /*!< Specify PH.5  Pin Data Input/Output \hideinitializer */
N#define PH6             GPIO_PIN_DATA(7, 6 ) /*!< Specify PH.6  Pin Data Input/Output \hideinitializer */
N#define PH7             GPIO_PIN_DATA(7, 7 ) /*!< Specify PH.7  Pin Data Input/Output \hideinitializer */
N#define PH8             GPIO_PIN_DATA(7, 8 ) /*!< Specify PH.8  Pin Data Input/Output \hideinitializer */
N#define PH9             GPIO_PIN_DATA(7, 9 ) /*!< Specify PH.9  Pin Data Input/Output \hideinitializer */
N#define PH10            GPIO_PIN_DATA(7, 10) /*!< Specify PH.10 Pin Data Input/Output \hideinitializer */
N#define PH11            GPIO_PIN_DATA(7, 11) /*!< Specify PH.11 Pin Data Input/Output \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  GPIO_MODE Constant Definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define GPIO_MODE_INPUT         0x0UL                  /*!< Input Mode      \hideinitializer */
N#define GPIO_MODE_OUTPUT        0x1UL                  /*!< Output Mode     \hideinitializer */
N#define GPIO_MODE_OPEN_DRAIN    0x2UL                  /*!< Open-Drain Mode \hideinitializer */
N#define GPIO_MODE_QUASI         0x3UL                  /*!< Quasi-bidirectional Mode    \hideinitializer */
N#define GPIO_MODE(pin, mode)    ((mode) << ((pin)<<1)) /*!< Generate the PMD mode setting for each pin      \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  GPIO Interrupt Type Constant Definitions (Parameter of GPIO_EnableInt())                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define GPIO_INT_RISING         0x00010000UL /*!< Interrupt enable by Input Rising Edge     \hideinitializer */
N#define GPIO_INT_FALLING        0x00000001UL /*!< Interrupt enable by Input Falling Edge    \hideinitializer */
N#define GPIO_INT_BOTH_EDGE      0x00010001UL /*!< Interrupt enable by both Rising Edge and Falling Edge     \hideinitializer */
N#define GPIO_INT_HIGH           0x01010000UL /*!< Interrupt enable by Level-High            \hideinitializer */
N#define GPIO_INT_LOW            0x01000001UL /*!< Interrupt enable by Level-Low             \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  GPIO_INTTYPE Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define GPIO_INTTYPE_EDGE       0UL /*!< GPIO_INTTYPE Setting for Edge Trigger Mode \hideinitializer */
N#define GPIO_INTTYPE_LEVEL      1UL /*!< GPIO_INTTYPE Setting for Level Mode        \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  GPIO_DBCTL Constant Definitions                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N#define GPIO_DBCTL_ICLK_OFF           (0x0UL<<GPIO_DBCTL_ICLKON_Pos)    /*!< GPIO_DBCTL setting for edge detection circuit is active only if IO pin corresponding GPIOx_IEN bit is set to 1 \hideinitializer */
N#define GPIO_DBCTL_ICLK_ON            (0x1UL<<GPIO_DBCTL_ICLKON_Pos)    /*!< GPIO_DBCTL setting for all IO pins edge detection circuit is always active after reset     \hideinitializer */
N
N#define GPIO_DBCTL_DBCLKSRC_HCLK      (0x0UL<<GPIO_DBCTL_DBCLKSRC_Pos)  /*!< GPIO_DBCTL setting for de-bounce counter clock source is the HCLK  \hideinitializer */
N#define GPIO_DBCTL_DBCLKSRC_LIRC      (0x1UL<<GPIO_DBCTL_DBCLKSRC_Pos)  /*!< GPIO_DBCTL setting for de-bounce counter clock source is the LIRC  \hideinitializer */
N
N#define GPIO_DBCTL_DBCLKSEL_1         (0x0UL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 1 clocks   \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_2         (0x1UL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 2 clocks   \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_4         (0x2UL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 4 clocks   \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_8         (0x3UL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 8 clocks   \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_16        (0x4UL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 16 clocks  \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_32        (0x5UL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 32 clocks  \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_64        (0x6UL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 64 clocks  \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_128       (0x7UL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 128 clocks \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_256       (0x8UL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 256 clocks \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_512       (0x9UL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 512 clocks \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_1024      (0xAUL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 1024 clocks    \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_2048      (0xBUL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 2048 clocks    \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_4096      (0xCUL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 4096 clocks    \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_8192      (0xDUL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 8192 clocks    \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_16384     (0xEUL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 16384 clocks   \hideinitializer */
N#define GPIO_DBCTL_DBCLKSEL_32768     (0xFUL<<GPIO_DBCTL_DBCLKSEL_Pos)  /*!< GPIO_DBCTL setting for sampling cycle = 32768 clocks   \hideinitializer */
N
N
N/*@}*/ /* end of group GPIO_EXPORTED_CONSTANTS */
N
N/** @addtogroup GPIO_EXPORTED_FUNCTIONS GPIO Exported Functions
N  @{
N*/
N
N/**
N  * @brief       Clear GPIO Pin Interrupt Flag
N  * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE, PF, PG, or PH.
N  * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port.
N  *                          It could be BIT0 ~ BIT15 for PA, PB, PD, and PE.
N  *                          It could be BIT0 ~ BIT14 for PC.
N  *                          It could be BIT0 ~ BIT11, BIT14, and BIT15 for PF.
N  *                          It could be BIT2 ~ BIT4, and BIT9 ~ BIT15 for PG.
N  *                          It could be BIT4 ~ BIT11 for PH.
N  * @return      None
N  * @details     Clear the interrupt status of specified GPIO pin.
N  * \hideinitializer
N  */
N#define GPIO_CLR_INT_FLAG(port, u32PinMask)         ((port)->INTSRC = (u32PinMask))
N
N/**
N  * @brief       Disable Pin De-bounce Function
N  * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE, PF, PG, or PH.
N  * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port.
N  *                          It could be BIT0 ~ BIT15 for PA, PB, PD, and PE.
N  *                          It could be BIT0 ~ BIT14 for PC.
N  *                          It could be BIT0 ~ BIT11, BIT14, and BIT15 for PF.
N  *                          It could be BIT2 ~ BIT4, and BIT9 ~ BIT15 for PG.
N  *                          It could be BIT4 ~ BIT11 for PH.
N  * @return      None
N  * @details     Disable the interrupt de-bounce function of specified GPIO pin.
N  * \hideinitializer
N  */
N#define GPIO_DISABLE_DEBOUNCE(port, u32PinMask)     ((port)->DBEN &= ~(u32PinMask))
N
N/**
N  * @brief       Enable Pin De-bounce Function
N  * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE, PF, PG, or PH.
N  * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port.
N  *                          It could be BIT0 ~ BIT15 for PA, PB, PD, and PE.
N  *                          It could be BIT0 ~ BIT14 for PC.
N  *                          It could be BIT0 ~ BIT11, BIT14, and BIT15 for PF.
N  *                          It could be BIT2 ~ BIT4, and BIT9 ~ BIT15 for PG.
N  *                          It could be BIT4 ~ BIT11 for PH.
N  * @return      None
N  * @details     Enable the interrupt de-bounce function of specified GPIO pin.
N  * \hideinitializer
N  */
N#define GPIO_ENABLE_DEBOUNCE(port, u32PinMask)      ((port)->DBEN |= (u32PinMask))
N
N/**
N  * @brief       Disable I/O Digital Input Path
N  * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE, PF, PG, or PH.
N  * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port.
N  *                          It could be BIT0 ~ BIT15 for PA, PB, PD, and PE.
N  *                          It could be BIT0 ~ BIT14 for PC.
N  *                          It could be BIT0 ~ BIT11, BIT14, and BIT15 for PF.
N  *                          It could be BIT2 ~ BIT4, and BIT9 ~ BIT15 for PG.
N  *                          It could be BIT4 ~ BIT11 for PH.
N  * @return      None
N  * @details     Disable I/O digital input path of specified GPIO pin.
N  * \hideinitializer
N  */
N#define GPIO_DISABLE_DIGITAL_PATH(port, u32PinMask) ((port)->DINOFF |= ((u32PinMask)<<16))
N
N/**
N  * @brief       Enable I/O Digital Input Path
N  * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE, PF, PG, or PH.
N  * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port.
N  *                          It could be BIT0 ~ BIT15 for PA, PB, PD, and PE.
N  *                          It could be BIT0 ~ BIT14 for PC.
N  *                          It could be BIT0 ~ BIT11, BIT14, and BIT15 for PF.
N  *                          It could be BIT2 ~ BIT4, and BIT9 ~ BIT15 for PG.
N  *                          It could be BIT4 ~ BIT11 for PH.
N  * @return      None
N  * @details     Enable I/O digital input path of specified GPIO pin.
N  * \hideinitializer
N  */
N#define GPIO_ENABLE_DIGITAL_PATH(port, u32PinMask)  ((port)->DINOFF &= ~((u32PinMask)<<16))
N
N/**
N  * @brief       Disable I/O DOUT mask
N  * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE, PF, PG, or PH.
N  * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port.
N  *                          It could be BIT0 ~ BIT15 for PA, PB, PD, and PE.
N  *                          It could be BIT0 ~ BIT14 for PC.
N  *                          It could be BIT0 ~ BIT11, BIT14, and BIT15 for PF.
N  *                          It could be BIT2 ~ BIT4, and BIT9 ~ BIT15 for PG.
N  *                          It could be BIT4 ~ BIT11 for PH.
N  * @return      None
N  * @details     Disable I/O DOUT mask of specified GPIO pin.
N  * \hideinitializer
N  */
N#define GPIO_DISABLE_DOUT_MASK(port, u32PinMask)    ((port)->DATMSK &= ~(u32PinMask))
N
N/**
N  * @brief       Enable I/O DOUT mask
N  * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE, PF, PG, or PH.
N  * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port.
N  *                          It could be BIT0 ~ BIT15 for PA, PB, PD, and PE.
N  *                          It could be BIT0 ~ BIT14 for PC.
N  *                          It could be BIT0 ~ BIT11, BIT14, and BIT15 for PF.
N  *                          It could be BIT2 ~ BIT4, and BIT9 ~ BIT15 for PG.
N  *                          It could be BIT4 ~ BIT11 for PH.
N  * @return      None
N  * @details     Enable I/O DOUT mask of specified GPIO pin.
N  * \hideinitializer
N  */
N#define GPIO_ENABLE_DOUT_MASK(port, u32PinMask)     ((port)->DATMSK |= (u32PinMask))
N
N/**
N  * @brief       Get GPIO Pin Interrupt Flag
N  * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE, PF, PG, or PH.
N  * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port.
N  *                          It could be BIT0 ~ BIT15 for PA, PB, PD, and PE.
N  *                          It could be BIT0 ~ BIT14 for PC.
N  *                          It could be BIT0 ~ BIT11, BIT14, and BIT15 for PF.
N  *                          It could be BIT2 ~ BIT4, and BIT9 ~ BIT15 for PG.
N  *                          It could be BIT4 ~ BIT11 for PH.
N  * @retval      0           No interrupt at specified GPIO pin
N  * @retval      1           The specified GPIO pin generate an interrupt
N  * @details     Get the interrupt status of specified GPIO pin.
N  * \hideinitializer
N  */
N#define GPIO_GET_INT_FLAG(port, u32PinMask)     ((port)->INTSRC & (u32PinMask))
N
N/**
N  * @brief       Set De-bounce Sampling Cycle Time
N  * @param[in]   u32ClkSrc   The de-bounce counter clock source. It could be
N  *                          - \ref GPIO_DBCTL_DBCLKSRC_HCLK
N  *                          - \ref GPIO_DBCTL_DBCLKSRC_LIRC
N  * @param[in]   u32ClkSel   The de-bounce sampling cycle selection. It could be
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_1
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_2
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_4
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_8
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_16
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_32
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_64
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_128
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_256
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_512
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_1024
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_2048
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_4096
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_8192
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_16384
N  *                          - \ref GPIO_DBCTL_DBCLKSEL_32768
N  * @return      None
N  * @details     Set the interrupt de-bounce sampling cycle time based on the debounce counter clock source. \n
N  *              Example: GPIO_SET_DEBOUNCE_TIME(GPIO_DBCTL_DBCLKSRC_LIRC, GPIO_DBCTL_DBCLKSEL_4). \n
N  *              It's meaning the de-bounce counter clock source is LIRC (38.4 KHz) and sampling cycle selection is 4. \n
N  *              Then the target de-bounce sampling cycle time is (4)*(1/38400) s = 4*26.042 us = 104.168 us,
N  *              and system will sampling interrupt input once per 104.168 us.
N  * \hideinitializer
N  */
N#define GPIO_SET_DEBOUNCE_TIME(u32ClkSrc, u32ClkSel)    (GPIO->DBCTL = (GPIO_DBCTL_ICLKON_Msk | (u32ClkSrc) | (u32ClkSel)))
N
N/**
N  * @brief       Set GPIO Interrupt Clock on bit
N  * @param[in]   port        Not used in M031.
N  * @return      None
N  * @details     Set the I/O pins edge detection circuit always active after reset for specified port.
N  * \hideinitializer
N  */
N#define GPIO_SET_DEBOUNCE_ICLKON(port)  (GPIO->DBCTL |= GPIO_DBCTL_ICLKON_Msk)
N
N/**
N  * @brief       Clear GPIO Interrupt Clock on bit
N  * @param[in]   port        Not used in M031.
N  * @return      None
N  * @details     Set edge detection circuit active only if I/O pin edge interrupt enabled for specified port
N  * \hideinitializer
N  */
N#define GPIO_CLR_DEBOUNCE_ICLKON(port)  (GPIO->DBCTL &= ~(GPIO_DBCTL_ICLKON_Msk))
N
N/**
N  * @brief       Get GPIO Port IN Data
N  * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE, PF, PG, or PH.
N  * @return      The specified port data
N  * @details     Get the PIN register of specified GPIO port.
N  * \hideinitializer
N  */
N#define GPIO_GET_IN_DATA(port)  ((port)->PIN)
N
N/**
N  * @brief       Set GPIO Port OUT Data
N  * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE, PF, PG, or PH.
N  * @param[in]   u32Data     GPIO port data.
N  * @return      None
N  * @details     Set the Data into specified GPIO port.
N  * \hideinitializer
N  */
N#define GPIO_SET_OUT_DATA(port, u32Data)    ((port)->DOUT = (u32Data))
N
N/**
N  * @brief       Toggle Specified GPIO pin
N  * @param[in]   u32Pin      Pxy
N  * @return      None
N  * @details     Toggle the specified GPIO pint.
N  * \hideinitializer
N  */
N#define GPIO_TOGGLE(u32Pin) ((u32Pin) ^= 1)
N
N/**
N  * @brief       Enable External GPIO interrupt
N  * @param[in]   port    GPIO port. It could be PA, PB, PC, PD, or PF.
N  * @param[in]   u32Pin  The pin of specified GPIO port.
N  *                      It could be 0 ~ 15 for PA, PB, PD, and PE.
N  *                      It could be 0 ~ 14 for PC.
N  *                      It could be 0 ~ 11, 14, and 15 for PF.
N  *                      It could be 2 ~ 4, and 9 ~ 15 for PG.
N  *                      It could be 4 ~ 11 for PH.
N  * @param[in]   u32IntAttribs   The interrupt attribute of specified GPIO pin. It could be
N  *                      - \ref GPIO_INT_RISING
N  *                      - \ref GPIO_INT_FALLING
N  *                      - \ref GPIO_INT_BOTH_EDGE
N  *                      - \ref GPIO_INT_HIGH
N  *                      - \ref GPIO_INT_LOW
N  * @return      None
N  * @details     This function is used to enable specified GPIO pin interrupt.
N  * \hideinitializer
N  */
N#define GPIO_EnableEINT     GPIO_EnableInt
N
N/**
N  * @brief       Disable External GPIO interrupt
N  * @param[in]   port    GPIO port. It could be PA, PB, PC, PD, or PF.
N  * @param[in]   u32Pin  The pin of specified GPIO port.
N  *                      It could be 0 ~ 15 for PA, PB, PD, and PE.
N  *                      It could be 0 ~ 14 for PC.
N  *                      It could be 0 ~ 11, 14, and 15 for PF.
N  *                      It could be 2 ~ 4, and 9 ~ 15 for PG.
N  *                      It could be 4 ~ 11 for PH.
N  * @return      None
N  * @details     This function is used to enable specified GPIO pin interrupt.
N  * \hideinitializer
N  */
N#define GPIO_DisableEINT    GPIO_DisableInt
N
N
Nvoid GPIO_SetMode(GPIO_T *port, uint32_t u32PinMask, uint32_t u32Mode);
Nvoid GPIO_EnableInt(GPIO_T *port, uint32_t u32Pin, uint32_t u32IntAttribs);
Nvoid GPIO_DisableInt(GPIO_T *port, uint32_t u32Pin);
N
N
N/*@}*/ /* end of group GPIO_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group GPIO_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif  /* __GPIO_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 571 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "i2c.h"
L 1 "..\..\..\Library\StdDriver\inc\i2c.h" 1
N/****************************************************************************//**
N * @file     i2c.h
N * @version  V1.00
N * @brief    M031 series I2C driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N*****************************************************************************/
N#ifndef __I2C_H__
N#define __I2C_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup I2C_Driver I2C Driver
N  @{
N*/
N
N/** @addtogroup I2C_EXPORTED_CONSTANTS I2C Exported Constants
N  @{
N*/
N
N#define I2C_TIMEOUT_ERR    (-1L)          /*!< I2C operation abort due to timeout error \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  I2C_CTL constant definitions.                                                                            */
N/*---------------------------------------------------------------------------------------------------------*/
N#define I2C_CTL_STA_SI            0x28UL /*!< I2C_CTL setting for I2C control bits. It would set STA and SI bits          \hideinitializer */
N#define I2C_CTL_STA_SI_AA         0x2CUL /*!< I2C_CTL setting for I2C control bits. It would set STA, SI and AA bits      \hideinitializer */
N#define I2C_CTL_STO_SI            0x18UL /*!< I2C_CTL setting for I2C control bits. It would set STO and SI bits          \hideinitializer */
N#define I2C_CTL_STO_SI_AA         0x1CUL /*!< I2C_CTL setting for I2C control bits. It would set STO, SI and AA bits      \hideinitializer */
N#define I2C_CTL_SI                0x08UL /*!< I2C_CTL setting for I2C control bits. It would set SI bit                   \hideinitializer */
N#define I2C_CTL_SI_AA             0x0CUL /*!< I2C_CTL setting for I2C control bits. It would set SI and AA bits           \hideinitializer */
N#define I2C_CTL_STA               0x20UL /*!< I2C_CTL setting for I2C control bits. It would set STA bit                  \hideinitializer */
N#define I2C_CTL_STO               0x10UL /*!< I2C_CTL setting for I2C control bits. It would set STO bit                  \hideinitializer */
N#define I2C_CTL_AA                0x04UL /*!< I2C_CTL setting for I2C control bits. It would set AA bit                   \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  I2C GCMode constant definitions.                                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
N#define I2C_GCMODE_ENABLE           1    /*!< Enable  I2C GC Mode                                                         \hideinitializer */
N#define I2C_GCMODE_DISABLE          0    /*!< Disable I2C GC Mode                                                         \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  I2C SMBUS constant definitions.                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N#define I2C_SMBH_ENABLE             1    /*!< Enable  SMBus Host Mode enable                                              \hideinitializer */
N#define I2C_SMBD_ENABLE             0    /*!< Enable  SMBus Device Mode enable                                            \hideinitializer */
N#define I2C_PECTX_ENABLE            1    /*!< Enable  SMBus Packet Error Check Transmit function                          \hideinitializer */
N#define I2C_PECTX_DISABLE           0    /*!< Disable SMBus Packet Error Check Transmit function                          \hideinitializer */
N
N/*@}*/ /* end of group I2C_EXPORTED_CONSTANTS */
N
Nextern int32_t g_I2C_i32ErrCode;
N
N/** @addtogroup I2C_EXPORTED_FUNCTIONS I2C Exported Functions
N  @{
N*/
N/**
N *    @brief        The macro is used to set I2C bus condition at One Time
N *
N *    @param[in]    i2c        Specify I2C port
N *    @param[in]    u8Ctrl     A byte writes to I2C control register
N *
N *    @return       None
N *
N *    @details      Set I2C_CTL register to control I2C bus conditions of START, STOP, SI, ACK.
N *    \hideinitializer
N */
N#define I2C_SET_CONTROL_REG(i2c, u8Ctrl) ((i2c)->CTL0 = ((i2c)->CTL0 & ~0x3C) | (u8Ctrl))
N
N/**
N *    @brief        The macro is used to set START condition of I2C Bus
N *
N *    @param[in]    i2c        Specify I2C port
N *
N *    @return       None
N *
N *    @details      Set the I2C bus START condition in I2C_CTL register.
N *    \hideinitializer
N */
N#define I2C_START(i2c)  ((i2c)->CTL0 = ((i2c)->CTL0 | I2C_CTL0_SI_Msk) | I2C_CTL0_STA_Msk)
N
N/**
N *    @brief        The macro is used to wait I2C bus status get ready
N *
N *    @param[in]    i2c        Specify I2C port
N *
N *    @return       None
N *
N *    @details      When a new status is presented of I2C bus, the SI flag will be set in I2C_CTL register.
N *    \hideinitializer
N */
N#define I2C_WAIT_READY(i2c)     while(!((i2c)->CTL0 & I2C_CTL0_SI_Msk))
N
N/**
N *    @brief        The macro is used to Read I2C Bus Data Register
N *
N *    @param[in]    i2c        Specify I2C port
N *
N *    @return       A byte of I2C data register
N *
N *    @details      I2C controller read data from bus and save it in I2C_DAT register.
N *    \hideinitializer
N */
N#define I2C_GET_DATA(i2c)   ((i2c)->DAT)
N
N/**
N *    @brief        Write a Data to I2C Data Register
N *
N *    @param[in]    i2c         Specify I2C port
N *    @param[in]    u8Data      A byte that writes to data register
N *
N *    @return       None
N *
N *    @details      When write a data to I2C_DAT register, the I2C controller will shift it to I2C bus.
N *    \hideinitializer
N */
N#define I2C_SET_DATA(i2c, u8Data) ((i2c)->DAT = (u8Data))
N
N/**
N *    @brief        Get I2C Bus status code
N *
N *    @param[in]    i2c        Specify I2C port
N *
N *    @return       I2C status code
N *
N *    @details      To get this status code to monitor I2C bus event.
N *    \hideinitializer
N */
N#define I2C_GET_STATUS(i2c) ((i2c)->STATUS0)
N
N/**
N *    @brief        Get Time-out flag from I2C Bus
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @retval       0       I2C Bus time-out is not happened
N *    @retval       1       I2C Bus time-out is happened
N *
N *    @details      When I2C bus occurs time-out event, the time-out flag will be set.
N *    \hideinitializer
N */
N#define I2C_GET_TIMEOUT_FLAG(i2c)   ( ((i2c)->TOCTL & I2C_TOCTL_TOIF_Msk) == I2C_TOCTL_TOIF_Msk ? 1:0 )
N
N/**
N *    @brief        To get wake-up flag from I2C Bus
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @retval       0       Chip is not woken-up from power-down mode
N *    @retval       1       Chip is woken-up from power-down mode
N *
N *    @details      I2C bus occurs wake-up event, wake-up flag will be set.
N *    \hideinitializer
N */
N#define I2C_GET_WAKEUP_FLAG(i2c) ( ((i2c)->WKSTS & I2C_WKSTS_WKIF_Msk) == I2C_WKSTS_WKIF_Msk ? 1:0  )
N
N/**
N *    @brief        To clear wake-up flag
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @return       None
N *
N *    @details      If wake-up flag is set, use this macro to clear it.
N *    \hideinitializer
N */
N#define I2C_CLEAR_WAKEUP_FLAG(i2c)  ((i2c)->WKSTS = I2C_WKSTS_WKIF_Msk)
N
N/**
N *    @brief        To get wake-up address frame ACK done flag from I2C Bus
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @retval       0       The ACK bit cycle of address match frame is not done
N *    @retval       1       The ACK bit cycle of address match frame is done in power-down
N *
N *    @details      I2C bus occurs wake-up event and address frame ACK is done, this flag will be set.
N *    \hideinitializer
N */
N#define I2C_GET_WAKEUP_DONE(i2c) ( ((i2c)->WKSTS & I2C_WKSTS_WKAKDONE_Msk) == I2C_WKSTS_WKAKDONE_Msk ? 1 : 0)
N
N/**
N *    @brief        To clear address frame ACK done flag
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @return       None
N *
N *    @details      If wake-up done is set, use this macro to clear it.
N *    \hideinitializer
N */
N#define I2C_CLEAR_WAKEUP_DONE(i2c)  ((i2c)->WKSTS = I2C_WKSTS_WKAKDONE_Msk)
N
N/**
N *    @brief        To get read/write status bit in address wakeup frame
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @retval       0       Write command be record on the address match wakeup frame
N *    @retval       1       Read command be record on the address match wakeup frame.
N *
N *    @details      I2C bus occurs wake-up event and address frame is received, this bit will record read/write status.
N *    \hideinitializer
N*/
N#define I2C_GET_WAKEUP_WR_STATUS(i2c) ( ((i2c)->WKSTS & I2C_WKSTS_WRSTSWK_Msk) == I2C_WKSTS_WRSTSWK_Msk ? 1 : 0)
N
N/**
N * @brief      To get SMBus Status
N *
N * @param[in]  i2c          Specify I2C port
N *
N * @return     SMBus status
N *
N * @details    To get the Bus Management status of I2C_BUSSTS register
N * \hideinitializer
N *
N */
N#define I2C_SMBUS_GET_STATUS(i2c) ((i2c)->BUSSTS)
N
N/**
N * @brief      Get SMBus CRC value
N *
N * @param[in]  i2c          Specify I2C port
N *
N * @return     Packet error check byte value
N *
N * @details    The CRC check value after a transmission or a reception by count by using CRC8
N * \hideinitializer
N */
N#define I2C_SMBUS_GET_PEC_VALUE(i2c) ((i2c)->PKTCRC)
N
N/**
N * @brief      Set SMBus Bytes number of Transmission or reception
N *
N * @param[in]  i2c              Specify I2C port
N * @param[in]  u32PktSize       Transmit / Receive bytes
N *
N * @return     None
N *
N * @details    The transmission or receive byte number in one transaction when PECEN is set. The maximum is 255 bytes.
N * \hideinitializer
N */
N#define I2C_SMBUS_SET_PACKET_BYTE_COUNT(i2c, u32PktSize) ((i2c)->PKTSIZE = (u32PktSize))
N
N/**
N * @brief      Enable SMBus Alert function
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    Device Mode(BMHEN=0): If ALERTEN(I2C_BUSCTL[4]) is set, the Alert pin will pull lo, and reply ACK when get ARP from host
N *             Host   Mode(BMHEN=1): If ALERTEN(I2C_BUSCTL[4]) is set, the Alert pin is supported to receive alert state(Lo trigger)
N * \hideinitializer
N */
N#define I2C_SMBUS_ENABLE_ALERT(i2c) ((i2c)->BUSCTL |= I2C_BUSCTL_ALERTEN_Msk)
N
N/**
N * @brief      Disable SMBus Alert pin function
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    Device Mode(BMHEN=0): If ALERTEN(I2C_BUSCTL[4]) is clear, the Alert pin will pull hi, and reply NACK when get ARP from host
N *             Host   Mode(BMHEN=1): If ALERTEN(I2C_BUSCTL[4]) is clear, the Alert pin is not supported to receive alert state(Lo trigger)
N * \hideinitializer
N */
N#define I2C_SMBUS_DISABLE_ALERT(i2c) ((i2c)->BUSCTL &= ~I2C_BUSCTL_ALERTEN_Msk)
N
N/**
N * @brief      Set SMBus SUSCON pin is output mode
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    This function to set SUSCON(I2C_BUSCTL[6]) pin is output mode.
N *
N * \hideinitializer
N */
N#define I2C_SMBUS_SET_SUSCON_OUT(i2c)   ((i2c)->BUSCTL |= I2C_BUSCTL_SCTLOEN_Msk)
N
N/**
N * @brief      Set SMBus SUSCON pin is input mode
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    This function to set SUSCON(I2C_BUSCTL[6]) pin is input mode.
N *
N * \hideinitializer
N */
N#define I2C_SMBUS_SET_SUSCON_IN(i2c)   ((i2c)->BUSCTL &= ~I2C_BUSCTL_SCTLOEN_Msk)
N
N/**
N * @brief      Set SMBus SUSCON pin output high state
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    This function to set SUSCON(I2C_BUSCTL[6]) pin is output hi state.
N * \hideinitializer
N */
N#define I2C_SMBUS_SET_SUSCON_HIGH(i2c)   ((i2c)->BUSCTL |= I2C_BUSCTL_SCTLOSTS_Msk)
N
N
N/**
N * @brief      Set SMBus SUSCON pin output low state
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    This function to set SUSCON(I2C_BUSCTL[6]) pin is output lo state.
N * \hideinitializer
N */
N#define I2C_SMBUS_SET_SUSCON_LOW(i2c)   ((i2c)->BUSCTL &= ~I2C_BUSCTL_SCTLOSTS_Msk)
N
N/**
N * @brief      Enable SMBus Acknowledge control by manual
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    The 9th bit can response the ACK or NACK according the received data by user. When the byte is received, SCLK line stretching to low between the 8th and 9th SCLK pulse.
N * \hideinitializer
N */
N#define I2C_SMBUS_ACK_MANUAL(i2c)   ((i2c)->BUSCTL |= I2C_BUSCTL_ACKMEN_Msk)
N
N/**
N * @brief      Disable SMBus Acknowledge control by manual
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    Disable acknowledge response control by user.
N * \hideinitializer
N */
N#define I2C_SMBUS_ACK_AUTO(i2c)   ((i2c)->BUSCTL &= ~I2C_BUSCTL_ACKMEN_Msk)
N
N/**
N * @brief      Enable SMBus Acknowledge manual interrupt
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    This function is used to enable SMBUS acknowledge manual interrupt on the 9th clock cycle when SMBUS=1 and ACKMEN=1
N * \hideinitializer
N */
N#define I2C_SMBUS_9THBIT_INT_ENABLE(i2c)   ((i2c)->BUSCTL |= I2C_BUSCTL_ACKM9SI_Msk)
N
N/**
N * @brief      Disable SMBus Acknowledge manual interrupt
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    This function is used to disable SMBUS acknowledge manual interrupt on the 9th clock cycle when SMBUS=1 and ACKMEN=1
N * \hideinitializer
N */
N#define I2C_SMBUS_9THBIT_INT_DISABLE(i2c)   ((i2c)->BUSCTL &= ~I2C_BUSCTL_ACKM9SI_Msk)
N
N/**
N * @brief      Enable SMBus PEC clear at REPEAT START
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    This function is used to enable the condition of REAEAT START can clear the PEC calculation.
N * \hideinitializer
N */
N#define I2C_SMBUS_RST_PEC_AT_START_ENABLE(i2c)   ((i2c)->BUSCTL |= I2C_BUSCTL_PECCLR_Msk)
N
N/**
N * @brief      Disable SMBus PEC clear at Repeat START
N *
N * @param[in]  i2c              Specify I2C port
N *
N * @return     None
N *
N * @details    This function is used to disable the condition of Repeat START can clear the PEC calculation.
N * \hideinitializer
N */
N#define I2C_SMBUS_RST_PEC_AT_START_DISABLE(i2c)   ((i2c)->BUSCTL &= ~I2C_BUSCTL_PECCLR_Msk)
N
N/**
N  * @brief      Enable RX PDMA function.
N  * @param[in]  i2c The pointer of the specified I2C module.
N  * @return     None.
N  * @details    Set RXPDMAEN bit of I2C_CTL1 register to enable RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define I2C_ENABLE_RX_PDMA(i2c)   ((i2c)->CTL1 |= I2C_CTL1_RXPDMAEN_Msk)
N
N/**
N  * @brief      Enable TX PDMA function.
N  * @param[in]  i2c The pointer of the specified I2C module.
N  * @return     None.
N  * @details    Set TXPDMAEN bit of I2C_CTL1 register to enable TX PDMA transfer function.
N  * \hideinitializer
N  */
N#define I2C_ENABLE_TX_PDMA(i2c)   ((i2c)->CTL1 |= I2C_CTL1_TXPDMAEN_Msk)
N
N/**
N  * @brief      Disable RX PDMA transfer.
N  * @param[in]  i2c The pointer of the specified I2C module.
N  * @return     None.
N  * @details    Clear RXPDMAEN bit of I2C_CTL1 register to disable RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define I2C_DISABLE_RX_PDMA(i2c)   ((i2c)->CTL1 &= ~I2C_CTL1_RXPDMAEN_Msk)
N
N/**
N  * @brief      Disable TX PDMA transfer.
N  * @param[in]  i2c The pointer of the specified I2C module.
N  * @return     None.
N  * @details    Clear TXPDMAEN bit of I2C_CTL1 register to disable TX PDMA transfer function.
N  * \hideinitializer
N  */
N#define I2C_DISABLE_TX_PDMA(i2c)   ((i2c)->CTL1 &= ~I2C_CTL1_TXPDMAEN_Msk)
N
N/**
N  * @brief      Enable PDMA stretch function.
N  * @param[in]  i2c The pointer of the specified I2C module.
N  * @return     None.
N  * @details    Enable this function is to stretch bus by hardware after PDMA transfer is done if SI is not cleared.
N  * \hideinitializer
N  */
N#define I2C_ENABLE_PDMA_STRETCH(i2c)   ((i2c)->CTL1 |= I2C_CTL1_PDMASTR_Msk)
N
N/**
N  * @brief      Disable PDMA stretch function.
N  * @param[in]  i2c The pointer of the specified I2C module.
N  * @return     None.
N  * @details    I2C will send STOP after PDMA transfers done automatically.
N  * \hideinitializer
N  */
N#define I2C_DISABLE_PDMA_STRETCH(i2c)   ((i2c)->CTL1 &= ~I2C_CTL1_PDMASTR_Msk)
N
N/**
N  * @brief      Reset PDMA function.
N  * @param[in]  i2c The pointer of the specified I2C module.
N  * @return     None.
N  * @details    I2C PDMA engine will be reset after this function is called.
N  * \hideinitializer
N  */
N#define I2C_DISABLE_RST_PDMA(i2c)   ((i2c)->CTL1 |= I2C_CTL1_PDMARST_Msk)
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* inline functions                                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N
N/* Declare these inline functions here to avoid MISRA C 2004 rule 8.1 error */
N__STATIC_INLINE void I2C_STOP(I2C_T *i2c);
Xstatic __inline void I2C_STOP(I2C_T *i2c);
N
N/**
N *    @brief        The macro is used to set STOP condition of I2C Bus
N *
N *    @param[in]    i2c        Specify I2C port
N *
N *    @return       None
N *
N *    @details      Set the I2C bus STOP condition in I2C_CTL register.
N */
N__STATIC_INLINE void I2C_STOP(I2C_T *i2c)
Xstatic __inline void I2C_STOP(I2C_T *i2c)
N{
N    uint32_t u32TimeOutCount = SystemCoreClock;
N
N    (i2c)->CTL0 |= (I2C_CTL0_SI_Msk | I2C_CTL0_STO_Msk);
X    (i2c)->CTL0 |= ((0x1ul << (3)) | (0x1ul << (4)));
N    while(i2c->CTL0 & I2C_CTL0_STO_Msk)
X    while(i2c->CTL0 & (0x1ul << (4)))
N    {
N        u32TimeOutCount--;
N        if(u32TimeOutCount == 0) break;
N    }
N}
N
Nvoid I2C_ClearTimeoutFlag(I2C_T *i2c);
Nvoid I2C_Close(I2C_T *i2c);
Nvoid I2C_Trigger(I2C_T *i2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Si, uint8_t u8Ack);
Nvoid I2C_DisableInt(I2C_T *i2c);
Nvoid I2C_EnableInt(I2C_T *i2c);
Nuint32_t I2C_GetBusClockFreq(I2C_T *i2c);
Nuint32_t I2C_GetIntFlag(I2C_T *i2c);
Nuint32_t I2C_GetStatus(I2C_T *i2c);
Nuint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock);
Nuint8_t I2C_GetData(I2C_T *i2c);
Nvoid I2C_SetSlaveAddr(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddr, uint8_t u8GCMode);
Nvoid I2C_SetSlaveAddrMask(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddrMask);
Nuint32_t I2C_SetBusClockFreq(I2C_T *i2c, uint32_t u32BusClock);
Nvoid I2C_EnableTimeout(I2C_T *i2c, uint8_t u8LongTimeout);
Nvoid I2C_DisableTimeout(I2C_T *i2c);
Nvoid I2C_EnableWakeup(I2C_T *i2c);
Nvoid I2C_DisableWakeup(I2C_T *i2c);
Nvoid I2C_SetData(I2C_T *i2c, uint8_t u8Data);
Nuint8_t I2C_WriteByte(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t data);
Nuint32_t I2C_WriteMultiBytes(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t data[], uint32_t u32wLen);
Nuint8_t I2C_WriteByteOneReg(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, uint8_t data);
Nuint32_t I2C_WriteMultiBytesOneReg(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, uint8_t data[], uint32_t u32wLen);
Nuint8_t I2C_WriteByteTwoRegs(I2C_T *i2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, uint8_t data);
Nuint32_t I2C_WriteMultiBytesTwoRegs(I2C_T *i2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, uint8_t data[], uint32_t u32wLen);
Nuint8_t I2C_ReadByte(I2C_T *i2c, uint8_t u8SlaveAddr);
Nuint32_t I2C_ReadMultiBytes(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t rdata[], uint32_t u32rLen);
Nuint8_t I2C_ReadByteOneReg(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr);
Nuint32_t I2C_ReadMultiBytesOneReg(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, uint8_t rdata[], uint32_t u32rLen);
Nuint8_t I2C_ReadByteTwoRegs(I2C_T *i2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr);
Nuint32_t I2C_ReadMultiBytesTwoRegs(I2C_T *i2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, uint8_t rdata[], uint32_t u32rLen);
Nuint32_t I2C_SMBusGetStatus(I2C_T *i2c);
Nvoid I2C_SMBusClearInterruptFlag(I2C_T *i2c, uint8_t u8SMBusIntFlag);
Nvoid I2C_SMBusSetPacketByteCount(I2C_T *i2c, uint32_t u32PktSize);
Nvoid I2C_SMBusOpen(I2C_T *i2c, uint8_t u8HostDevice);
Nvoid I2C_SMBusClose(I2C_T *i2c);
Nvoid I2C_SMBusPECTxEnable(I2C_T *i2c, uint8_t u8PECTxEn);
Nuint8_t I2C_SMBusGetPECValue(I2C_T *i2c);
Nvoid I2C_SMBusIdleTimeout(I2C_T *i2c, uint32_t us, uint32_t u32Hclk);
Nvoid I2C_SMBusTimeout(I2C_T *i2c, uint32_t ms, uint32_t u32Pclk);
Nvoid I2C_SMBusClockLoTimeout(I2C_T *i2c, uint32_t ms, uint32_t u32Pclk);
N
N/*@}*/ /* end of group I2C_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group I2C_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 572 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "pdma.h"
L 1 "..\..\..\Library\StdDriver\inc\pdma.h" 1
N/**************************************************************************//**
N * @file     pdma.h
N * @version  V1.00
N * @brief    M031 series PDMA driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __PDMA_H__
N#define __PDMA_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup PDMA_Driver PDMA Driver
N  @{
N*/
N
N/** @addtogroup PDMA_EXPORTED_CONSTANTS PDMA Exported Constants
N  @{
N*/
N#define PDMA_CH_MAX    9UL   /*!< Specify Maximum Channels of PDMA  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Operation Mode Constant Definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_OP_STOP        0x00000000UL            /*!<DMA Stop Mode  \hideinitializer */
N#define PDMA_OP_BASIC       0x00000001UL            /*!<DMA Basic Mode  \hideinitializer */
N#define PDMA_OP_SCATTER     0x00000002UL            /*!<DMA Scatter-gather Mode  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Data Width Constant Definitions                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_WIDTH_8        0x00000000UL            /*!<DMA Transfer Width 8-bit  \hideinitializer */
N#define PDMA_WIDTH_16       0x00001000UL            /*!<DMA Transfer Width 16-bit  \hideinitializer */
N#define PDMA_WIDTH_32       0x00002000UL            /*!<DMA Transfer Width 32-bit  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Address Attribute Constant Definitions                                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_SAR_INC        0x00000000UL            /*!<DMA SAR increment  \hideinitializer */
N#define PDMA_SAR_FIX        0x00000300UL            /*!<DMA SAR fix address  \hideinitializer */
N#define PDMA_DAR_INC        0x00000000UL            /*!<DMA DAR increment  \hideinitializer */
N#define PDMA_DAR_FIX        0x00000C00UL            /*!<DMA DAR fix address  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Burst Mode Constant Definitions                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_REQ_SINGLE     0x00000004UL            /*!<DMA Single Request  \hideinitializer */
N#define PDMA_REQ_BURST      0x00000000UL            /*!<DMA Burst Request  \hideinitializer */
N
N#define PDMA_BURST_128      0x00000000UL            /*!<DMA Burst 128 Transfers  \hideinitializer */
N#define PDMA_BURST_64       0x00000010UL            /*!<DMA Burst 64 Transfers  \hideinitializer */
N#define PDMA_BURST_32       0x00000020UL            /*!<DMA Burst 32 Transfers  \hideinitializer */
N#define PDMA_BURST_16       0x00000030UL            /*!<DMA Burst 16 Transfers  \hideinitializer */
N#define PDMA_BURST_8        0x00000040UL            /*!<DMA Burst 8 Transfers  \hideinitializer */
N#define PDMA_BURST_4        0x00000050UL            /*!<DMA Burst 4 Transfers  \hideinitializer */
N#define PDMA_BURST_2        0x00000060UL            /*!<DMA Burst 2 Transfers  \hideinitializer */
N#define PDMA_BURST_1        0x00000070UL            /*!<DMA Burst 1 Transfers  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Table Interrupt Disable Constant Definitions                                                           */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_TBINTDIS_ENABLE  (0x0UL<<PDMA_DSCT_CTL_TBINTDIS_Pos)  /*!<DMA Table Interrupt Enabled   \hideinitializer */
N#define PDMA_TBINTDIS_DISABLE (0x1UL<<PDMA_DSCT_CTL_TBINTDIS_Pos)  /*!<DMA Table Interrupt Disabled  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Peripheral Transfer Mode Constant Definitions                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_MEM          0UL   /*!<DMA Connect to Memory \hideinitializer */
N#define PDMA_UART0_TX     4UL /*!<DMA Connect to UART0_TX \hideinitializer */
N#define PDMA_UART0_RX     5UL /*!<DMA Connect to UART0_RX \hideinitializer */
N#define PDMA_UART1_TX     6UL /*!<DMA Connect to UART1_TX \hideinitializer */
N#define PDMA_UART1_RX     7UL /*!<DMA Connect to UART1_RX \hideinitializer */
N#define PDMA_UART2_TX     8UL /*!<DMA Connect to UART2_TX \hideinitializer */
N#define PDMA_UART2_RX     9UL /*!<DMA Connect to UART2_RX \hideinitializer */
N#define PDMA_USCI0_TX    10UL /*!<DMA Connect to USCI0_TX \hideinitializer */
N#define PDMA_USCI0_RX    11UL /*!<DMA Connect to USCI0_RX \hideinitializer */
N#define PDMA_USCI1_TX    12UL /*!<DMA Connect to USCI1_TX \hideinitializer */
N#define PDMA_USCI1_RX    13UL /*!<DMA Connect to USCI1_RX \hideinitializer */
N#define PDMA_QSPI0_TX    16UL /*!<DMA Connect to QSPI0_TX \hideinitializer */
N#define PDMA_QSPI0_RX    17UL /*!<DMA Connect to QSPI0_RX \hideinitializer */
N#define PDMA_SPI0_TX     18UL /*!<DMA Connect to SPI0_TX \hideinitializer */
N#define PDMA_SPI0_RX     19UL /*!<DMA Connect to SPI0_RX \hideinitializer */
N#define PDMA_ADC_RX      20UL /*!<DMA Connect to ADC_RX \hideinitializer */
N#define PDMA_PWM0_P1_RX  21UL /*!<DMA Connect to PWM0_P1 \hideinitializer */
N#define PDMA_PWM0_P2_RX  22UL /*!<DMA Connect to PWM0_P2 \hideinitializer */
N#define PDMA_PWM0_P3_RX  23UL /*!<DMA Connect to PWM0_P3 \hideinitializer */
N#define PDMA_PWM1_P1_RX  24UL /*!<DMA Connect to PWM1_P1 \hideinitializer */
N#define PDMA_PWM1_P2_RX  25UL /*!<DMA Connect to PWM1_P2 \hideinitializer */
N#define PDMA_PWM1_P3_RX  26UL /*!<DMA Connect to PWM1_P3 \hideinitializer */
N#define PDMA_I2C0_TX     28UL /*!<DMA Connect to I2C0_TX \hideinitializer */
N#define PDMA_I2C0_RX     29UL /*!<DMA Connect to I2C0_RX \hideinitializer */
N#define PDMA_I2C1_TX     30UL /*!<DMA Connect to I2C1_TX \hideinitializer */
N#define PDMA_I2C1_RX     31UL /*!<DMA Connect to I2C1_RX \hideinitializer */
N#define PDMA_TMR0        32UL /*!<DMA Connect to TMR0 \hideinitializer */
N#define PDMA_TMR1        33UL /*!<DMA Connect to TMR1 \hideinitializer */
N#define PDMA_TMR2        34UL /*!<DMA Connect to TMR2 \hideinitializer */
N#define PDMA_TMR3        35UL /*!<DMA Connect to TMR3 \hideinitializer */
N#define PDMA_UART3_TX    36UL /*!<DMA Connect to UART3_TX \hideinitializer */
N#define PDMA_UART3_RX    37UL /*!<DMA Connect to UART3_RX \hideinitializer */
N#define PDMA_UART4_TX    38UL /*!<DMA Connect to UART4_TX \hideinitializer */
N#define PDMA_UART4_RX    39UL /*!<DMA Connect to UART4_RX \hideinitializer */
N#define PDMA_UART5_TX    40UL /*!<DMA Connect to UART5_TX \hideinitializer */
N#define PDMA_UART5_RX    41UL /*!<DMA Connect to UART5_RX \hideinitializer */
N#define PDMA_UART6_TX    42UL /*!<DMA Connect to UART6_TX \hideinitializer */
N#define PDMA_UART6_RX    43UL /*!<DMA Connect to UART6_RX \hideinitializer */
N#define PDMA_UART7_TX    44UL /*!<DMA Connect to UART7_TX \hideinitializer */
N#define PDMA_UART7_RX    45UL /*!<DMA Connect to UART7_RX \hideinitializer */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Interrupt Type Constant Definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_INT_TRANS_DONE 0x00000000UL            /*!<Transfer Done Interrupt  \hideinitializer */
N#define PDMA_INT_TEMPTY     0x00000001UL            /*!<Table Empty Interrupt  \hideinitializer */
N#define PDMA_INT_TIMEOUT    0x00000002UL            /*!<Timeout Interrupt \hideinitializer */
N
N
N/*@}*/ /* end of group PDMA_EXPORTED_CONSTANTS */
N
N/** @addtogroup PDMA_EXPORTED_FUNCTIONS PDMA Exported Functions
N  @{
N*/
N
N/**
N * @brief       Get PDMA Interrupt Status
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N *
N * @return      None
N *
N * @details     This macro gets the interrupt status.
N * \hideinitializer
N */
N#define PDMA_GET_INT_STATUS(pdma) ((uint32_t)((pdma)->INTSTS))
N
N/**
N * @brief       Get Transfer Done Interrupt Status
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N *
N * @return      None
N *
N * @details     Get the transfer done Interrupt status.
N * \hideinitializer
N */
N#define PDMA_GET_TD_STS(pdma) ((uint32_t)((pdma)->TDSTS))
N
N/**
N * @brief       Clear Transfer Done Interrupt Status
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N * @param[in]   u32Mask     The channel mask
N *
N * @return      None
N *
N * @details     Clear the transfer done Interrupt status.
N * \hideinitializer
N */
N#define PDMA_CLR_TD_FLAG(pdma, u32Mask) ((uint32_t)((pdma)->TDSTS = (u32Mask)))
N
N/**
N * @brief       Get Target Abort Interrupt Status
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N *
N * @return      None
N *
N * @details     Get the target abort Interrupt status.
N * \hideinitializer
N */
N#define PDMA_GET_ABORT_STS(pdma) ((uint32_t)((pdma)->ABTSTS))
N
N/**
N * @brief       Clear Target Abort Interrupt Status
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N * @param[in]   u32Mask     The channel mask
N *
N * @return      None
N *
N * @details     Clear the target abort Interrupt status.
N * \hideinitializer
N */
N#define PDMA_CLR_ABORT_FLAG(pdma, u32Mask) ((uint32_t)((pdma)->ABTSTS = (u32Mask)))
N
N/**
N * @brief       Get Alignment Interrupt Status
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N *
N * @return      None
N *
N * @details     Get Alignment Interrupt status.
N * \hideinitializer
N */
N#define PDMA_GET_ALIGN_STS(pdma) ((uint32_t)((pdma)->ALIGN))
N
N/**
N * @brief       Clear Alignment Interrupt Status
N *
N * @param[in]   pdma        The pointer of the specified PDMA module
N * @param[in]   u32Mask     The channel mask
N *
N * @return      None
N *
N * @details     Clear the Alignment Interrupt status.
N * \hideinitializer
N */
N#define PDMA_CLR_ALIGN_FLAG(pdma,u32Mask) ((uint32_t)((pdma)->ALIGN = (u32Mask)))
N
N/**
N * @brief       Clear Timeout Interrupt Status
N *
N * @param[in]   pdma        The pointer of the specified PDMA module
N * @param[in]   u32Ch     The selected channel
N *
N * @return      None
N *
N * @details     Clear the selected channel timeout interrupt status.
N * \hideinitializer
N */
N#define PDMA_CLR_TMOUT_FLAG(pdma, u32Ch) ((uint32_t)((pdma)->INTSTS = (1UL << ((u32Ch) + 8UL))))
N
N/**
N * @brief       Check Channel Status
N *
N * @param[in]   pdma        The pointer of the specified PDMA module
N * @param[in]   u32Ch     The selected channel
N *
N * @retval      0 Idle state
N * @retval      1 Busy state
N *
N * @details     Check the selected channel is busy or not.
N * \hideinitializer
N */
N#define PDMA_IS_CH_BUSY(pdma, u32Ch) ((uint32_t)((pdma)->TRGSTS & (1UL << (u32Ch)))? 1 : 0)
N
N/**
N * @brief       Set Source Address
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N * @param[in]   u32Ch     The selected channel
N * @param[in]   u32Addr   The selected address
N *
N * @return      None
N *
N * @details     This macro set the selected channel source address.
N * \hideinitializer
N */
N#define PDMA_SET_SRC_ADDR(pdma, u32Ch, u32Addr) ((uint32_t)((pdma)->DSCT[(u32Ch)].SA = (u32Addr)))
N
N/**
N * @brief       Set Destination Address
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N * @param[in]   u32Ch     The selected channel
N * @param[in]   u32Addr   The selected address
N *
N * @return      None
N *
N * @details     This macro set the selected channel destination address.
N * \hideinitializer
N */
N#define PDMA_SET_DST_ADDR(pdma, u32Ch, u32Addr) ((uint32_t)((pdma)->DSCT[(u32Ch)].DA = (u32Addr)))
N
N/**
N * @brief       Set Transfer Count
N *
N * @param[in]   pdma           The pointer of the specified PDMA module
N * @param[in]   u32Ch          The selected channel
N * @param[in]   u32TransCount  Transfer Count
N *
N * @return      None
N *
N * @details     This macro set the selected channel transfer count.
N * \hideinitializer
N */
N#define PDMA_SET_TRANS_CNT(pdma, u32Ch, u32TransCount) ((uint32_t)((pdma)->DSCT[(u32Ch)].CTL=((pdma)->DSCT[(u32Ch)].CTL&~PDMA_DSCT_CTL_TXCNT_Msk)|(((u32TransCount)-1UL) << PDMA_DSCT_CTL_TXCNT_Pos)))
N
N/**
N * @brief       Set Scatter-gather descriptor Address
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N * @param[in]   u32Ch     The selected channel
N * @param[in]   u32Addr   The descriptor address
N *
N * @return      None
N *
N * @details     This macro set the selected channel scatter-gather descriptor address.
N * \hideinitializer
N */
N#define PDMA_SET_SCATTER_DESC(pdma, u32Ch, u32Addr) ((uint32_t)((pdma)->DSCT[(u32Ch)].NEXT = (u32Addr) - ((pdma)->SCATBA)))
N
N/**
N * @brief       Stop the channel
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N * @param[in]   u32Ch     The selected channel
N *
N * @return      None
N *
N * @details     This macro stop the selected channel.
N * \hideinitializer
N */
N#define PDMA_STOP(pdma, u32Ch) ((uint32_t)((pdma)->PAUSE = (1UL << (u32Ch))))
N
N/**
N * @brief       Pause the channel
N *
N * @param[in]   pdma      The pointer of the specified PDMA module
N * @param[in]   u32Ch     The selected channel
N *
N * @return      None
N *
N * @details     This macro pause the selected channel.
N * \hideinitializer
N */
N#define PDMA_PAUSE(pdma, u32Ch) ((uint32_t)((pdma)->PAUSE = (1UL << (u32Ch))))
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define PDMA functions prototype                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid PDMA_Open(PDMA_T *pdma, uint32_t u32Mask);
Nvoid PDMA_Close(PDMA_T *pdma);
Nvoid PDMA_SetTransferCnt(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount);
Nvoid PDMA_SetTransferAddr(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl);
Nvoid PDMA_SetTransferMode(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Peripheral, uint32_t u32ScatterEn, uint32_t u32DescAddr);
Nvoid PDMA_SetBurstType(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32BurstType, uint32_t u32BurstSize);
Nvoid PDMA_EnableTimeout(PDMA_T *pdma, uint32_t u32Mask);
Nvoid PDMA_DisableTimeout(PDMA_T *pdma, uint32_t u32Mask);
Nvoid PDMA_SetTimeOut(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32OnOff, uint32_t u32TimeOutCnt);
Nvoid PDMA_Trigger(PDMA_T *pdma, uint32_t u32Ch);
Nvoid PDMA_EnableInt(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Mask);
Nvoid PDMA_DisableInt(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Mask);
N
N
N/*@}*/ /* end of group PDMA_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group PDMA_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __PDMA_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 573 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "pwm.h"
L 1 "..\..\..\Library\StdDriver\inc\pwm.h" 1
N/**************************************************************************//**
N * @file     pwm.h
N * @version  V1.00
N * $Revision: 9 $
N * $Date: 18/06/07 3:47p $
N * @brief    M031 series PWM driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __PWM_H__
N#define __PWM_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup PWM_Driver PWM Driver
N  @{
N*/
N
N/** @addtogroup PWM_EXPORTED_CONSTANTS PWM Exported Constants
N  @{
N*/
N#define PWM_CHANNEL_NUM                          (6UL)      /*!< PWM channel number \hideinitializer */
N#define PWM_CH_0_MASK                            (0x1UL)    /*!< PWM channel 0 mask \hideinitializer */
N#define PWM_CH_1_MASK                            (0x2UL)    /*!< PWM channel 1 mask \hideinitializer */
N#define PWM_CH_2_MASK                            (0x4UL)    /*!< PWM channel 2 mask \hideinitializer */
N#define PWM_CH_3_MASK                            (0x8UL)    /*!< PWM channel 3 mask \hideinitializer */
N#define PWM_CH_4_MASK                            (0x10UL)   /*!< PWM channel 4 mask \hideinitializer */
N#define PWM_CH_5_MASK                            (0x20UL)   /*!< PWM channel 5 mask \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Counter Type Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_UP_COUNTER                           (0UL)      /*!< Up counter type \hideinitializer */
N#define PWM_DOWN_COUNTER                         (1UL)      /*!< Down counter type \hideinitializer */
N#define PWM_UP_DOWN_COUNTER                      (2UL)      /*!< Up-Down counter type \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Aligned Type Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_EDGE_ALIGNED                         (1UL)      /*!< PWM working in edge aligned type(down count) \hideinitializer */
N#define PWM_CENTER_ALIGNED                       (2UL)      /*!< PWM working in center aligned type \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Output Level Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_OUTPUT_NOTHING                       (0UL)      /*!< PWM output nothing \hideinitializer */
N#define PWM_OUTPUT_LOW                           (1UL)      /*!< PWM output low \hideinitializer */
N#define PWM_OUTPUT_HIGH                          (2UL)      /*!< PWM output high \hideinitializer */
N#define PWM_OUTPUT_TOGGLE                        (3UL)      /*!< PWM output toggle \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Synchronous Start Function Control Constant Definitions                                                */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_SSCTL_SSRC_PWM0                      (0UL<<PWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from PWM0 \hideinitializer */
N#define PWM_SSCTL_SSRC_PWM1                      (1UL<<PWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from PWM1 \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Trigger Source Select Constant Definitions                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_TRIGGER_ADC_EVEN_ZERO_POINT                     (0UL)     /*!< PWM trigger ADC while counter of even channel matches zero point \hideinitializer */
N#define PWM_TRIGGER_ADC_EVEN_PERIOD_POINT                   (1UL)     /*!< PWM trigger ADC while counter of even channel matches period point \hideinitializer */
N#define PWM_TRIGGER_ADC_EVEN_ZERO_OR_PERIOD_POINT           (2UL)     /*!< PWM trigger ADC while counter of even channel matches zero or period point \hideinitializer */
N#define PWM_TRIGGER_ADC_EVEN_COMPARE_UP_COUNT_POINT         (3UL)     /*!< PWM trigger ADC while counter of even channel matches up count to comparator point \hideinitializer */
N#define PWM_TRIGGER_ADC_EVEN_COMPARE_DOWN_COUNT_POINT       (4UL)     /*!< PWM trigger ADC while counter of even channel matches down count to comparator point \hideinitializer */
N#define PWM_TRIGGER_ADC_ODD_COMPARE_UP_COUNT_POINT          (8UL)     /*!< PWM trigger ADC while counter of odd channel matches up count to comparator point \hideinitializer */
N#define PWM_TRIGGER_ADC_ODD_COMPARE_DOWN_COUNT_POINT        (9UL)     /*!< PWM trigger ADC while counter of odd channel matches down count to comparator point \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Fail brake Control Constant Definitions                                                                */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_FB_EDGE_ACMP0                        (PWM_BRKCTL0_1_CPO0EBEN_Msk)    /*!< Comparator 0 as edge-detect fault brake source \hideinitializer */
N#define PWM_FB_EDGE_ACMP1                        (PWM_BRKCTL0_1_CPO1EBEN_Msk)    /*!< Comparator 1 as edge-detect fault brake source \hideinitializer */
N#define PWM_FB_EDGE_BKP0                         (PWM_BRKCTL0_1_BRKP0EEN_Msk)    /*!< BKP0 pin as edge-detect fault brake source \hideinitializer */
N#define PWM_FB_EDGE_BKP1                         (PWM_BRKCTL0_1_BRKP1EEN_Msk)    /*!< BKP1 pin as edge-detect fault brake source \hideinitializer */
N#define PWM_FB_EDGE_ADCRM                        (PWM_BRKCTL0_1_ADCEBEN_Msk)     /*!< ADC Result Monitor (ADCRM) as edge-detect fault brake source \hideinitializer */
N#define PWM_FB_EDGE_SYS_CSS                      (PWM_BRKCTL0_1_SYSEBEN_Msk | PWM_FAILBRK_CSSBRKEN_Msk)    /*!< System fail condition: clock security system detection as edge-detect fault brake source \hideinitializer */
N#define PWM_FB_EDGE_SYS_BOD                      (PWM_BRKCTL0_1_SYSEBEN_Msk | PWM_FAILBRK_BODBRKEN_Msk)    /*!< System fail condition: brown-out detection as edge-detect fault brake source \hideinitializer */
N#define PWM_FB_EDGE_SYS_COR                      (PWM_BRKCTL0_1_SYSEBEN_Msk | PWM_FAILBRK_CORBRKEN_Msk)    /*!< System fail condition: core lockup detection as edge-detect fault brake source \hideinitializer */
N
N#define PWM_FB_LEVEL_ACMP0                       (PWM_BRKCTL0_1_CPO0LBEN_Msk)    /*!< Comparator 0 as level-detect fault brake source \hideinitializer */
N#define PWM_FB_LEVEL_ACMP1                       (PWM_BRKCTL0_1_CPO1LBEN_Msk)    /*!< Comparator 1 as level-detect fault brake source \hideinitializer */
N#define PWM_FB_LEVEL_BKP0                        (PWM_BRKCTL0_1_BRKP0LEN_Msk)    /*!< BKP0 pin as level-detect fault brake source \hideinitializer */
N#define PWM_FB_LEVEL_BKP1                        (PWM_BRKCTL0_1_BRKP1LEN_Msk)    /*!< BKP1 pin as level-detect fault brake source \hideinitializer */
N#define PWM_FB_LEVEL_ADCRM                       (PWM_BRKCTL0_1_ADCLBEN_Msk)     /*!< ADC Result Monitor (ADCRM) as level-detect fault brake source \hideinitializer */
N#define PWM_FB_LEVEL_SYS_CSS                     (PWM_BRKCTL0_1_SYSLBEN_Msk | PWM_FAILBRK_CSSBRKEN_Msk)    /*!< System fail condition: clock security system detection as level-detect fault brake source \hideinitializer */
N#define PWM_FB_LEVEL_SYS_BOD                     (PWM_BRKCTL0_1_SYSLBEN_Msk | PWM_FAILBRK_BODBRKEN_Msk)    /*!< System fail condition: brown-out detection as level-detect fault brake source \hideinitializer */
N#define PWM_FB_LEVEL_SYS_COR                     (PWM_BRKCTL0_1_SYSLBEN_Msk | PWM_FAILBRK_CORBRKEN_Msk)    /*!< System fail condition: core lockup detection as level-detect fault brake source \hideinitializer */
N
N#define PWM_FB_EDGE                              (0UL)    /*!< Edge-detect fault brake \hideinitializer */
N#define PWM_FB_LEVEL                             (8UL)    /*!< Level-detect fault brake \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Capture Control Constant Definitions                                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_CAPTURE_INT_RISING_LATCH             (1UL)        /*!< PWM capture interrupt if channel has rising transition \hideinitializer */
N#define PWM_CAPTURE_INT_FALLING_LATCH            (0x100UL)    /*!< PWM capture interrupt if channel has falling transition \hideinitializer */
N
N#define PWM_CAPTURE_PDMA_RISING_LATCH            (0x2UL)      /*!< PWM capture rising latched data transfer by PDMA \hideinitializer */
N#define PWM_CAPTURE_PDMA_FALLING_LATCH           (0x4UL)      /*!< PWM capture falling latched data transfer by PDMA \hideinitializer */
N#define PWM_CAPTURE_PDMA_RISING_FALLING_LATCH    (0x6UL)      /*!< PWM capture rising and falling latched data transfer by PDMA \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Duty Interrupt Type Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_DUTY_INT_DOWN_COUNT_MATCH_CMP        (PWM_INTEN0_CMPDIEN0_Msk)   /*!< PWM duty interrupt triggered if down count match comparator \hideinitializer */
N#define PWM_DUTY_INT_UP_COUNT_MATCH_CMP          (PWM_INTEN0_CMPUIEN0_Msk)   /*!< PWM duty interrupt triggered if up count match comparator \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Load Mode Constant Definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_LOAD_MODE_IMMEDIATE                  (PWM_CTL0_IMMLDEN0_Msk)    /*!< PWM immediately load mode \hideinitializer */
N#define PWM_LOAD_MODE_CENTER                     (PWM_CTL0_CTRLD0_Msk)      /*!< PWM center load mode \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Synchronize Control Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_SYNC_OUT_FROM_SYNCIN_SWSYNC          (0UL)    /*!< Synchronize source from SYNC_IN or SWSYNC  \hideinitializer */
N#define PWM_SYNC_OUT_FROM_COUNT_TO_ZERO          (1UL)    /*!< Synchronize source from counter equal to 0  \hideinitializer */
N#define PWM_SYNC_OUT_FROM_COUNT_TO_COMPARATOR    (2UL)    /*!< Synchronize source from counter equal to CMPDAT1, CMPDAT3, CMPDAT5 \hideinitializer */
N#define PWM_SYNC_OUT_DISABLE                     (3UL)    /*!< SYNC_OUT will not be generated \hideinitializer */
N#define PWM_PHS_DIR_DECREMENT                    (0UL)    /*!< PWM counter count decrement  \hideinitializer */
N#define PWM_PHS_DIR_INCREMENT                    (1UL)    /*!< PWM counter count increment  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Noise Filter Clock Divide Select Constant Definitions                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_NF_CLK_DIV_1                         (0UL)    /*!< Noise filter clock is HCLK divide by 1 \hideinitializer */
N#define PWM_NF_CLK_DIV_2                         (1UL)    /*!< Noise filter clock is HCLK divide by 2 \hideinitializer */
N#define PWM_NF_CLK_DIV_4                         (2UL)    /*!< Noise filter clock is HCLK divide by 4 \hideinitializer */
N#define PWM_NF_CLK_DIV_8                         (3UL)    /*!< Noise filter clock is HCLK divide by 8 \hideinitializer */
N#define PWM_NF_CLK_DIV_16                        (4UL)    /*!< Noise filter clock is HCLK divide by 16 \hideinitializer */
N#define PWM_NF_CLK_DIV_32                        (5UL)    /*!< Noise filter clock is HCLK divide by 32 \hideinitializer */
N#define PWM_NF_CLK_DIV_64                        (6UL)    /*!< Noise filter clock is HCLK divide by 64 \hideinitializer */
N#define PWM_NF_CLK_DIV_128                       (7UL)    /*!< Noise filter clock is HCLK divide by 128 \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Clock Source Select Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_CLKSRC_PWM_CLK                       (0UL)    /*!< PWM Clock source selects to PWM0_CLK or PWM1_CLK \hideinitializer */
N#define PWM_CLKSRC_TIMER0                        (1UL)    /*!< PWM Clock source selects to TIMER0 overflow \hideinitializer */
N#define PWM_CLKSRC_TIMER1                        (2UL)    /*!< PWM Clock source selects to TIMER1 overflow \hideinitializer */
N#define PWM_CLKSRC_TIMER2                        (3UL)    /*!< PWM Clock source selects to TIMER2 overflow \hideinitializer */
N#define PWM_CLKSRC_TIMER3                        (4UL)    /*!< PWM Clock source selects to TIMER3 overflow \hideinitializer */
N
N
N/*@}*/ /* end of group PWM_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup PWM_EXPORTED_FUNCTIONS PWM Exported Functions
N  @{
N*/
N
N/**
N * @brief This macro enable complementary mode
N * @param[in] pwm The pointer of the specified PWM module
N * @return None
N * @details This macro is used to enable complementary mode of PWM module.
N * \hideinitializer
N */
N#define PWM_ENABLE_COMPLEMENTARY_MODE(pwm) ((pwm)->CTL1 = (pwm)->CTL1 | (0x7ul<<PWM_CTL1_OUTMODE0_Pos))
N
N/**
N * @brief This macro disable complementary mode, and enable independent mode.
N * @param[in] pwm The pointer of the specified PWM module
N * @return None
N * @details This macro is used to disable complementary mode of PWM module.
N * \hideinitializer
N */
N#define PWM_DISABLE_COMPLEMENTARY_MODE(pwm) ((pwm)->CTL1 = (pwm)->CTL1 & ~(0x7ul<<PWM_CTL1_OUTMODE0_Pos))
N
N/**
N * @brief Enable timer synchronous start counting function of specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32SyncSrc Synchronous start source selection, valid values are:
N *              - \ref PWM_SSCTL_SSRC_PWM0
N *              - \ref PWM_SSCTL_SSRC_PWM1
N * @return None
N * @details This macro is used to enable timer synchronous start counting function of specified channel(s).
N * \hideinitializer
N */
N#define PWM_ENABLE_TIMER_SYNC(pwm, u32ChannelMask, u32SyncSrc) ((pwm)->SSCTL = ((pwm)->SSCTL & ~PWM_SSCTL_SSRC_Msk) | (u32SyncSrc) | (u32ChannelMask))
N
N/**
N * @brief Disable timer synchronous start counting function of specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @return None
N * @details This macro is used to disable timer synchronous start counting function of specified channel(s).
N * \hideinitializer
N */
N#define PWM_DISABLE_TIMER_SYNC(pwm, u32ChannelMask) \
N    do{ \
N        int i;\
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)) \
N                (pwm)->SSCTL &= ~(1UL << i); \
N        } \
N    }while(0)
X#define PWM_DISABLE_TIMER_SYNC(pwm, u32ChannelMask)     do{         int i;        for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i))                 (pwm)->SSCTL &= ~(1UL << i);         }     }while(0)
N
N/**
N * @brief This macro enable PWM counter synchronous start counting function.
N * @param[in] pwm The pointer of the specified PWM module
N * @return None
N * @details This macro is used to make selected PWM0 and PWM1 channel(s) start counting at the same time.
N *          To configure synchronous start counting channel(s) by PWM_ENABLE_TIMER_SYNC() and PWM_DISABLE_TIMER_SYNC().
N * \hideinitializer
N */
N#define PWM_TRIGGER_SYNC_START(pwm) ((pwm)->SSTRG = PWM_SSTRG_CNTSEN_Msk)
N
N/**
N * @brief This macro enable output inverter of specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @return None
N * @details This macro is used to enable output inverter of specified channel(s).
N * \hideinitializer
N */
N#define PWM_ENABLE_OUTPUT_INVERTER(pwm, u32ChannelMask) ((pwm)->POLCTL = (u32ChannelMask))
N
N/**
N * @brief This macro get captured rising data
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @return None
N * @details This macro is used to get captured rising data of specified channel.
N * \hideinitializer
N */
N#define PWM_GET_CAPTURE_RISING_DATA(pwm, u32ChannelNum) (*(__IO uint32_t *) (&((pwm)->RCAPDAT0) + ((u32ChannelNum) << 1)))
N
N/**
N * @brief This macro get captured falling data
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @return None
N * @details This macro is used to get captured falling data of specified channel.
N * \hideinitializer
N */
N#define PWM_GET_CAPTURE_FALLING_DATA(pwm, u32ChannelNum) (*(__IO uint32_t *) (&((pwm)->FCAPDAT0) + ((u32ChannelNum) << 1)))
N
N/**
N * @brief This macro mask output logic to high or low
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32LevelMask Output logic to high or low
N * @return None
N * @details This macro is used to mask output logic to high or low of specified channel(s).
N * @note If u32ChannelMask parameter is 0, then mask function will be disabled.
N * \hideinitializer
N */
N#define PWM_MASK_OUTPUT(pwm, u32ChannelMask, u32LevelMask) \
N    { \
N        (pwm)->MSKEN = (u32ChannelMask); \
N        (pwm)->MSK = (u32LevelMask); \
N    }
X#define PWM_MASK_OUTPUT(pwm, u32ChannelMask, u32LevelMask)     {         (pwm)->MSKEN = (u32ChannelMask);         (pwm)->MSK = (u32LevelMask);     }
N
N/**
N * @brief This macro set the prescaler of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @param[in] u32Prescaler Clock prescaler of specified channel. Valid values are between 0 ~ 0xFFF
N * @return None
N * @details This macro is used to set the prescaler of specified channel.
N * @note Every even channel N, and channel (N + 1) share a prescaler. So if channel 0 prescaler changed, channel 1 will also be affected.
N *       The clock of PWM counter is divided by (u32Prescaler + 1).
N * \hideinitializer
N */
N#define PWM_SET_PRESCALER(pwm, u32ChannelNum, u32Prescaler) ((pwm)->CLKPSC[(u32ChannelNum) >> 1] = (u32Prescaler))
N
N/**
N * @brief This macro get the prescaler of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @return Return Clock prescaler of specified channel. Valid values are between 0 ~ 0xFFF
N * @details This macro is used to get the prescaler of specified channel.
N * @note Every even channel N, and channel (N + 1) share a prescaler. So if channel 0 prescaler changed, channel 1 will also be affected.
N *       The clock of PWM counter is divided by (u32Prescaler + 1).
N * \hideinitializer
N */
N#define PWM_GET_PRESCALER(pwm, u32ChannelNum) (*(__IO uint32_t *) (&((pwm)->CLKPSC[0]) + ((u32ChannelNum) >> 1)))
N
N/**
N * @brief This macro set the comparator of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @param[in] u32CMR Comparator of specified channel. Valid values are between 0~0xFFFF
N * @return None
N * @details This macro is used to set the comparator of specified channel.
N * @note This new setting will take effect on next PWM period.
N * \hideinitializer
N */
N#define PWM_SET_CMR(pwm, u32ChannelNum, u32CMR) ((pwm)->CMPDAT[(u32ChannelNum)]= (u32CMR))
N
N/**
N * @brief This macro get the comparator of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @return Return the comparator of specified channel. Valid values are between 0~0xFFFF
N * @details This macro is used to get the comparator of specified channel.
N * \hideinitializer
N */
N#define PWM_GET_CMR(pwm, u32ChannelNum) ((pwm)->CMPDAT[(u32ChannelNum)])
N
N/**
N * @brief This macro set the period of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @param[in] u32CNR Period of specified channel. Valid values are between 0~0xFFFF
N * @return None
N * @details This macro is used to set the period of specified channel.
N * @note This new setting will take effect on next PWM period.
N * @note PWM counter will stop if period length set to 0.
N * \hideinitializer
N */
N#define PWM_SET_CNR(pwm, u32ChannelNum, u32CNR)  ((pwm)->PERIOD[(u32ChannelNum>>1)<<1] = (u32CNR))
N
N/**
N * @brief This macro get the period of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @return Return the period of specified channel. Valid values are between 0~0xFFFF
N * @details This macro is used to get the period of specified channel.
N * \hideinitializer
N */
N#define PWM_GET_CNR(pwm, u32ChannelNum)  ((pwm)->PERIOD[(u32ChannelNum>>1)<<1])
N
N/**
N * @brief This macro set the PWM aligned type
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32AlignedType PWM aligned type, valid values are:
N *              - \ref PWM_EDGE_ALIGNED
N *              - \ref PWM_CENTER_ALIGNED
N * @return None
N * @details This macro is used to set the PWM aligned type of specified channel(s).
N * \hideinitializer
N */
N#define PWM_SET_ALIGNED_TYPE(pwm, u32ChannelMask, u32AlignedType) \
N   do{ \
N        int i; \
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)) \
N                (pwm)->CTL1 = (((pwm)->CTL1 & ~(3UL << (i << 1))) | ((u32AlignedType) << (i << 1))); \
N        } \
N    }while(0)
X#define PWM_SET_ALIGNED_TYPE(pwm, u32ChannelMask, u32AlignedType)    do{         int i;         for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i))                 (pwm)->CTL1 = (((pwm)->CTL1 & ~(3UL << (i << 1))) | ((u32AlignedType) << (i << 1)));         }     }while(0)
N
N/**
N * @brief Clear counter of specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @return None
N * @details This macro is used to clear counter of specified channel(s).
N * \hideinitializer
N */
N #define PWM_CLR_COUNTER(pwm, u32ChannelMask) \
N    do{ \
N        uint32_t i; \
N        for(i = 0UL; i < 6UL; i++) { \
N            if((u32ChannelMask) & (1UL << i)) \
N                ((pwm)->CNTCLR |= (1UL << ((i >> 1UL) << 1UL))); \
N        } \
N    }while(0)
X #define PWM_CLR_COUNTER(pwm, u32ChannelMask)     do{         uint32_t i;         for(i = 0UL; i < 6UL; i++) {             if((u32ChannelMask) & (1UL << i))                 ((pwm)->CNTCLR |= (1UL << ((i >> 1UL) << 1UL)));         }     }while(0)
N 
N/**
N * @brief Set output level at zero, compare up, period(center) and compare down of specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32ZeroLevel output level at zero point, valid values are:
N *              - \ref PWM_OUTPUT_NOTHING
N *              - \ref PWM_OUTPUT_LOW
N *              - \ref PWM_OUTPUT_HIGH
N *              - \ref PWM_OUTPUT_TOGGLE
N * @param[in] u32CmpUpLevel output level at compare up point, valid values are:
N *              - \ref PWM_OUTPUT_NOTHING
N *              - \ref PWM_OUTPUT_LOW
N *              - \ref PWM_OUTPUT_HIGH
N *              - \ref PWM_OUTPUT_TOGGLE
N * @param[in] u32PeriodLevel output level at period(center) point, valid values are:
N *              - \ref PWM_OUTPUT_NOTHING
N *              - \ref PWM_OUTPUT_LOW
N *              - \ref PWM_OUTPUT_HIGH
N *              - \ref PWM_OUTPUT_TOGGLE
N * @param[in] u32CmpDownLevel output level at compare down point, valid values are:
N *              - \ref PWM_OUTPUT_NOTHING
N *              - \ref PWM_OUTPUT_LOW
N *              - \ref PWM_OUTPUT_HIGH
N *              - \ref PWM_OUTPUT_TOGGLE
N * @return None
N * @details This macro is used to Set output level at zero, compare up, period(center) and compare down of specified channel(s).
N * \hideinitializer
N */
N#define PWM_SET_OUTPUT_LEVEL(pwm, u32ChannelMask, u32ZeroLevel, u32CmpUpLevel, u32PeriodLevel, u32CmpDownLevel) \
N   do{ \
N        int i; \
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)) { \
N                (pwm)->WGCTL0 = (((pwm)->WGCTL0 & ~(3UL << (i << 1))) | ((u32ZeroLevel) << (i << 1))); \
N                (pwm)->WGCTL0 = (((pwm)->WGCTL0 & ~(3UL << (PWM_WGCTL0_PRDPCTL0_Pos + (i << 1)))) | ((u32PeriodLevel) << (PWM_WGCTL0_PRDPCTL0_Pos + (i << 1)))); \
N                (pwm)->WGCTL1 = (((pwm)->WGCTL1 & ~(3UL << (i << 1))) | ((u32CmpUpLevel) << (i << 1))); \
N                (pwm)->WGCTL1 = (((pwm)->WGCTL1 & ~(3UL << (PWM_WGCTL1_CMPDCTL0_Pos + (i << 1)))) | ((u32CmpDownLevel) << (PWM_WGCTL1_CMPDCTL0_Pos + (i << 1)))); \
N            } \
N        } \
N    }while(0)
X#define PWM_SET_OUTPUT_LEVEL(pwm, u32ChannelMask, u32ZeroLevel, u32CmpUpLevel, u32PeriodLevel, u32CmpDownLevel)    do{         int i;         for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i)) {                 (pwm)->WGCTL0 = (((pwm)->WGCTL0 & ~(3UL << (i << 1))) | ((u32ZeroLevel) << (i << 1)));                 (pwm)->WGCTL0 = (((pwm)->WGCTL0 & ~(3UL << (PWM_WGCTL0_PRDPCTL0_Pos + (i << 1)))) | ((u32PeriodLevel) << (PWM_WGCTL0_PRDPCTL0_Pos + (i << 1))));                 (pwm)->WGCTL1 = (((pwm)->WGCTL1 & ~(3UL << (i << 1))) | ((u32CmpUpLevel) << (i << 1)));                 (pwm)->WGCTL1 = (((pwm)->WGCTL1 & ~(3UL << (PWM_WGCTL1_CMPDCTL0_Pos + (i << 1)))) | ((u32CmpDownLevel) << (PWM_WGCTL1_CMPDCTL0_Pos + (i << 1))));             }         }     }while(0)
N
N/**
N * @brief Trigger brake event from specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 2 and bit 2 represents channel 4
N * @param[in] u32BrakeType Type of brake trigger. PWM_FB_EDGE of this macro is only supported in M45xD/M45xC.
N *              - \ref PWM_FB_EDGE
N *              - \ref PWM_FB_LEVEL
N * @return None
N * @details This macro is used to trigger brake event from specified channel(s).
N * \hideinitializer
N */
N#define PWM_TRIGGER_BRAKE(pwm, u32ChannelMask, u32BrakeType) ((pwm)->SWBRK |= ((u32ChannelMask) << (u32BrakeType)))
N
N/**
N * @brief Set Dead zone clock source
N * @param[in] pwm The pointer of the specified PWM module
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @param[in] u32AfterPrescaler Dead zone clock source is from prescaler output. Valid values are TRUE (after prescaler) or FALSE (before prescaler).
N * @return None
N * @details This macro is used to set Dead zone clock source. Every two channels share the same setting.
N * @note The write-protection function should be disabled before using this function.
N * @note This function is only supported in M45xD/M45xC.
N * \hideinitializer
N */
N#define PWM_SET_DEADZONE_CLK_SRC(pwm, u32ChannelNum, u32AfterPrescaler) \
N    ((pwm)->DTCTL[(u32ChannelNum) >> 1] = (((pwm)->DTCTL[(u32ChannelNum) >> 1] & ~PWM_DTCTL0_1_DTCKSEL_Msk) | \
N    ((u32AfterPrescaler) << PWM_DTCTL0_1_DTCKSEL_Pos)))
X#define PWM_SET_DEADZONE_CLK_SRC(pwm, u32ChannelNum, u32AfterPrescaler)     ((pwm)->DTCTL[(u32ChannelNum) >> 1] = (((pwm)->DTCTL[(u32ChannelNum) >> 1] & ~PWM_DTCTL0_1_DTCKSEL_Msk) |     ((u32AfterPrescaler) << PWM_DTCTL0_1_DTCKSEL_Pos)))
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define PWM functions prototype                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
Nuint32_t PWM_ConfigCaptureChannel(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32UnitTimeNsec, uint32_t u32CaptureEdge);
Nuint32_t PWM_ConfigOutputChannel(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Frequency, uint32_t u32DutyCycle);
Nvoid PWM_Start(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_Stop(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_ForceStop(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_EnableADCTrigger(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
Nvoid PWM_DisableADCTrigger(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_ClearADCTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
Nuint32_t PWM_GetADCTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableFaultBrake(PWM_T *pwm, uint32_t u32ChannelMask, uint32_t u32LevelMask, uint32_t u32BrakeSource);
Nvoid PWM_EnableCapture(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_DisableCapture(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_EnableOutput(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_DisableOutput(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_EnablePDMA(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32RisingFirst, uint32_t u32Mode);
Nvoid PWM_DisablePDMA(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableDeadZone(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Duration);
Nvoid PWM_DisableDeadZone(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableCaptureInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nvoid PWM_DisableCaptureInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nvoid PWM_ClearCaptureIntFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nuint32_t PWM_GetCaptureIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableDutyInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32IntDutyType);
Nvoid PWM_DisableDutyInt(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_ClearDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nuint32_t PWM_GetDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableFaultBrakeInt(PWM_T *pwm, uint32_t u32BrakeSource);
Nvoid PWM_DisableFaultBrakeInt(PWM_T *pwm, uint32_t u32BrakeSource);
Nvoid PWM_ClearFaultBrakeIntFlag(PWM_T *pwm, uint32_t u32BrakeSource);
Nuint32_t PWM_GetFaultBrakeIntFlag(PWM_T *pwm, uint32_t u32BrakeSource);
Nvoid PWM_EnablePeriodInt(PWM_T *pwm, uint32_t u32ChannelNum,  uint32_t u32IntPeriodType);
Nvoid PWM_DisablePeriodInt(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_ClearPeriodIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nuint32_t PWM_GetPeriodIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableZeroInt(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_DisableZeroInt(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_ClearZeroIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nuint32_t PWM_GetZeroIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableLoadMode(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
Nvoid PWM_DisableLoadMode(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
Nvoid PWM_SetClockSource(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32ClkSrcSel);
Nvoid PWM_EnableBrakeNoiseFilter(PWM_T *pwm, uint32_t u32BrakePinNum, uint32_t u32ClkCnt, uint32_t u32ClkDivSel);
Nvoid PWM_DisableBrakeNoiseFilter(PWM_T *pwm, uint32_t u32BrakePinNum);
Nvoid PWM_EnableBrakePinInverse(PWM_T *pwm, uint32_t u32BrakePinNum);
Nvoid PWM_DisableBrakePinInverse(PWM_T *pwm, uint32_t u32BrakePinNum);
Nvoid PWM_SetBrakePinSource(PWM_T *pwm, uint32_t u32BrakePinNum, uint32_t u32SelAnotherModule);
Nuint32_t PWM_GetWrapAroundFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_ClearWrapAroundFlag(PWM_T *pwm, uint32_t u32ChannelNum);
N
N/*@}*/ /* end of group PWM_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group PWM_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__PWM_H__
N
N/*** (C) COPYRIGHT 2017 Nuvoton Technology Corp. ***/
L 574 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "bpwm.h"
L 1 "..\..\..\Library\StdDriver\inc\bpwm.h" 1
N/******************************************************************************
N * @file     bpwm.h
N * @version  V1.00
N * $Revision: 9 $
N * $Date: 18/06/07 3:47p $
N * @brief    M031 series BPWM driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __BPWM_H__
N#define __BPWM_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup BPWM_Driver BPWM Driver
N  @{
N*/
N
N
N/** @addtogroup BPWM_EXPORTED_CONSTANTS BPWM Exported Constants
N  @{
N*/
N#define BPWM_CHANNEL_NUM                          (6UL)        /*!< BPWM channel number */
N#define BPWM_CH_0_MASK                            (0x1UL)    /*!< BPWM channel 0 mask */
N#define BPWM_CH_1_MASK                            (0x2UL)    /*!< BPWM channel 1 mask */
N#define BPWM_CH_2_MASK                            (0x4UL)    /*!< BPWM channel 2 mask */
N#define BPWM_CH_3_MASK                            (0x8UL)    /*!< BPWM channel 3 mask */
N#define BPWM_CH_4_MASK                            (0x10UL)   /*!< BPWM channel 4 mask */
N#define BPWM_CH_5_MASK                            (0x20UL)   /*!< BPWM channel 5 mask */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Counter Type Constant Definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_UP_COUNTER                           (0UL)      /*!< Up counter type */
N#define BPWM_DOWN_COUNTER                         (1UL)      /*!< Down counter type */
N#define BPWM_UP_DOWN_COUNTER                      (2UL)      /*!< Up-Down counter type */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Aligned Type Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_EDGE_ALIGNED                         (1UL)      /*!< BPWM working in edge aligned type(down count) */
N#define BPWM_CENTER_ALIGNED                       (2UL)      /*!< BPWM working in center aligned type */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Output Level Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_OUTPUT_NOTHING                       (0UL)      /*!< BPWM output nothing */
N#define BPWM_OUTPUT_LOW                           (1UL)      /*!< BPWM output low */
N#define BPWM_OUTPUT_HIGH                          (2UL)      /*!< BPWM output high */
N#define BPWM_OUTPUT_TOGGLE                        (3UL)      /*!< BPWM output toggle */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Synchronous Start Function Control Constant Definitions                                                */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_SSCTL_SSRC_PWM0                      (0UL<<BPWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from PWM0 */
N#define BPWM_SSCTL_SSRC_PWM1                      (1UL<<BPWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from PWM1 */
N#define BPWM_SSCTL_SSRC_BPWM0                     (2UL<<BPWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from BPWM0 */
N#define BPWM_SSCTL_SSRC_BPWM1                     (3UL<<BPWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from BPWM1 */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Trigger Source Select Constant Definitions                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_TRIGGER_ADC_EVEN_ZERO_POINT                     (0UL)     /*!< BPWM trigger ADC while counter of even channel matches zero point */
N#define BPWM_TRIGGER_ADC_EVEN_PERIOD_POINT                   (1UL)     /*!< BPWM trigger ADC while counter of even channel matches period point */
N#define BPWM_TRIGGER_ADC_EVEN_ZERO_OR_PERIOD_POINT           (2UL)     /*!< BPWM trigger ADC while counter of even channel matches zero or period point */
N#define BPWM_TRIGGER_ADC_EVEN_CMP_UP_COUNT_POINT             (3UL)     /*!< BPWM trigger ADC while counter of even channel matches up count to comparator point */
N#define BPWM_TRIGGER_ADC_EVEN_CMP_DOWN_COUNT_POINT           (4UL)     /*!< BPWM trigger ADC while counter of even channel matches down count to comparator point */
N#define BPWM_TRIGGER_ADC_ODD_CMP_UP_COUNT_POINT              (8UL)     /*!< BPWM trigger ADC while counter of odd channel matches up count to comparator point */
N#define BPWM_TRIGGER_ADC_ODD_CMP_DOWN_COUNT_POINT            (9UL)     /*!< BPWM trigger ADC while counter of odd channel matches down count to comparator point */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Capture Control Constant Definitions                                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_CAPTURE_INT_RISING_LATCH             (1UL)        /*!< BPWM capture interrupt if channel has rising transition */
N#define BPWM_CAPTURE_INT_FALLING_LATCH            (0x100UL)    /*!< BPWM capture interrupt if channel has falling transition */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Duty Interrupt Type Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_DUTY_INT_DOWN_COUNT_MATCH_CMP        (BPWM_INTEN_CMPDIEN0_Msk)   /*!< BPWM duty interrupt triggered if down count match comparator */
N#define BPWM_DUTY_INT_UP_COUNT_MATCH_CMP          (BPWM_INTEN_CMPUIEN0_Msk)   /*!< BPWM duty interrupt triggered if up down match comparator */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Load Mode Constant Definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_LOAD_MODE_IMMEDIATE                  (BPWM_CTL0_IMMLDEN0_Msk)    /*!< BPWM immediately load mode */
N#define BPWM_LOAD_MODE_CENTER                     (BPWM_CTL0_CTRLD0_Msk)      /*!< BPWM center load mode      */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Clock Source Select Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_CLKSRC_BPWM_CLK                      (0UL)    /*!< BPWM Clock source selects to BPWM0_CLK or BPWM1_CLK */
N#define BPWM_CLKSRC_TIMER0                        (1UL)    /*!< BPWM Clock source selects to TIMER0 overflow */
N#define BPWM_CLKSRC_TIMER1                        (2UL)    /*!< BPWM Clock source selects to TIMER1 overflow */
N#define BPWM_CLKSRC_TIMER2                        (3UL)    /*!< BPWM Clock source selects to TIMER2 overflow */
N#define BPWM_CLKSRC_TIMER3                        (4UL)    /*!< BPWM Clock source selects to TIMER3 overflow */
N
N/*@}*/ /* end of group BPWM_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup BPWM_EXPORTED_FUNCTIONS BPWM Exported Functions
N  @{
N*/
N
N/**
N * @brief Enable timer synchronous start counting function of specified channel(s)
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelMask Combination of enabled channels. This parameter is not used.
N * @param[in] u32SyncSrc Synchronous start source selection, valid values are:
N *              - \ref BPWM_SSCTL_SSRC_PWM0
N *              - \ref BPWM_SSCTL_SSRC_PWM1
N *              - \ref BPWM_SSCTL_SSRC_BPWM0
N *              - \ref BPWM_SSCTL_SSRC_BPWM1
N * @return None
N * @details This macro is used to enable timer synchronous start counting function of specified channel(s).
N * @note All channels share channel 0's setting.
N * \hideinitializer
N */
N#define BPWM_ENABLE_TIMER_SYNC(bpwm, u32ChannelMask, u32SyncSrc) ((bpwm)->SSCTL = ((bpwm)->SSCTL & ~BPWM_SSCTL_SSRC_Msk) | (u32SyncSrc) | BPWM_SSCTL_SSEN0_Msk)
N
N/**
N * @brief Disable timer synchronous start counting function of specified channel(s)
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelMask Combination of enabled channels. This parameter is not used.
N * @return None
N * @details This macro is used to disable timer synchronous start counting function of specified channel(s).
N * @note All channels share channel 0's setting.
N * \hideinitializer
N */
N#define BPWM_DISABLE_TIMER_SYNC(bpwm, u32ChannelMask) ((bpwm)->SSCTL &= ~BPWM_SSCTL_SSEN0_Msk)
N
N/**
N * @brief This macro enable BPWM counter synchronous start counting function.
N * @param[in] bpwm The pointer of the specified BPWM module
N * @return None
N * @details This macro is used to make selected BPWM0 and BPWM1 channel(s) start counting at the same time.
N *          To configure synchronous start counting channel(s) by BPWM_ENABLE_TIMER_SYNC() and BPWM_DISABLE_TIMER_SYNC().
N * \hideinitializer
N */
N#define BPWM_TRIGGER_SYNC_START(bpwm) ((bpwm)->SSTRG = BPWM_SSTRG_CNTSEN_Msk)
N
N/**
N * @brief This macro enable output inverter of specified channel(s)
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @return None
N * \hideinitializer
N */
N#define BPWM_ENABLE_OUTPUT_INVERTER(bpwm, u32ChannelMask) ((bpwm)->POLCTL = (u32ChannelMask))
N
N/**
N * @brief This macro get captured rising data
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5
N * @return None
N * \hideinitializer
N */
N#define BPWM_GET_CAPTURE_RISING_DATA(bpwm, u32ChannelNum) ((bpwm)->CAPDAT[(u32ChannelNum)].RCAPDAT)
N
N/**
N * @brief This macro get captured falling data
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5
N * @return None
N * \hideinitializer
N */
N#define BPWM_GET_CAPTURE_FALLING_DATA(bpwm, u32ChannelNum) ((bpwm)->CAPDAT[(u32ChannelNum)].FCAPDAT)
N
N/**
N * @brief This macro mask output logic to high or low
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32LevelMask Output logic to high or low
N * @return None
N * @details This macro is used to mask output logic to high or low of specified channel(s).
N * @note If u32ChannelMask parameter is 0, then mask function will be disabled.
N * \hideinitializer
N */
N#define BPWM_MASK_OUTPUT(bpwm, u32ChannelMask, u32LevelMask) \
N    { \
N        (bpwm)->MSKEN = (u32ChannelMask); \
N        (bpwm)->MSK = (u32LevelMask); \
N    }
X#define BPWM_MASK_OUTPUT(bpwm, u32ChannelMask, u32LevelMask)     {         (bpwm)->MSKEN = (u32ChannelMask);         (bpwm)->MSK = (u32LevelMask);     }
N
N/**
N * @brief This macro set the prescaler of all channels
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelNum BPWM channel number. This parameter is not used.
N * @param[in] u32Prescaler Clock prescaler of specified channel. Valid values are between 1 ~ 0xFFF
N * @return None
N * \hideinitializer
N */
N#define BPWM_SET_PRESCALER(bpwm, u32ChannelNum, u32Prescaler) ((bpwm)->CLKPSC = (u32Prescaler))
N
N/**
N* @brief This macro get the prescaler of the selected channel
N* @param[in] bpwm The pointer of the specified BPWM module
N* @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5. This parameter is not used.
N* @return Return Clock prescaler of specified channel. Valid values are between 0 ~ 0xFFF
N* @details This macro is used to get the prescaler of specified channel.
N* @note All channels share channel 0's setting.
N*       The clock of BPWM counter is divided by (u32Prescaler + 1).
N* \hideinitializer
N*/
N#define BPWM_GET_PRESCALER(bpwm, u32ChannelNum) (bpwm)->CLKPSC
N
N/**
N * @brief This macro set the duty of the selected channel
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5
N * @param[in] u32CMR Duty of specified channel. Valid values are between 0~0xFFFF
N * @return None
N * @note This new setting will take effect on next BPWM period
N * \hideinitializer
N */
N#define BPWM_SET_CMR(bpwm, u32ChannelNum, u32CMR) ((bpwm)->CMPDAT[(u32ChannelNum)] = (u32CMR))
N
N/**
N * @brief This macro get the duty of the selected channel
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5
N * @return Return the duty of specified channel. Valid values are between 0~0xFFFF
N * @details This macro is used to get the duty of specified channel.
N * \hideinitializer
N */
N#define BPWM_GET_CMR(bpwm, u32ChannelNum) ((bpwm)->CMPDAT[(u32ChannelNum)])
N
N/**
N * @brief This macro set the period of all channels
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelNum BPWM channel number. This parameter is not used.
N * @param[in] u32CNR Period of specified channel. Valid values are between 0~0xFFFF
N * @return None
N * @note This new setting will take effect on next BPWM period
N * @note BPWM counter will stop if period length set to 0
N * \hideinitializer
N */
N#define BPWM_SET_CNR(bpwm, u32ChannelNum, u32CNR) ((bpwm)->PERIOD = (u32CNR))
N
N/**
N * @brief This macro get the period of all channels
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelNum BPWM channel number. This parameter is not used.
N * @return Return the period of specified channel.
N * @details This macro is used to get the period of specified channel.
N * \hideinitializer
N */
N#define BPWM_GET_CNR(bpwm, u32ChannelNum)  ((bpwm)->PERIOD)
N
N/**
N * @brief This macro set the BPWM aligned type
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelMask Combination of enabled channels. This parameter is not used.
N * @param[in] u32AlignedType BPWM aligned type, valid values are:
N *              - \ref BPWM_UP_COUNTER
N *              - \ref BPWM_DOWN_COUNTER
N *              - \ref BPWM_UP_DOWN_COUNTER
N * @return None
N * @note All channels share channel 0's setting.
N * \hideinitializer
N */
N#define BPWM_SET_ALIGNED_TYPE(bpwm, u32ChannelMask, u32AlignedType) ((bpwm)->CTL1 = (u32AlignedType))
N
N/**
N * @brief Clear counter of channel 0
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelMask Combination of enabled channels. This parameter is not used.
N * @return None
N * @details This macro is used to clear counter of channel 0
N * \hideinitializer
N */
N#define BPWM_CLR_COUNTER(bpwm, u32ChannelMask) ((bpwm)->CNTCLR = (BPWM_CNTCLR_CNTCLR0_Msk))
N
N/**
N * @brief Set output level at zero, compare up, period(center) and compare down of specified channel(s)
N * @param[in] bpwm The pointer of the specified BPWM module
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32ZeroLevel output level at zero point, valid values are:
N *              - \ref BPWM_OUTPUT_NOTHING
N *              - \ref BPWM_OUTPUT_LOW
N *              - \ref BPWM_OUTPUT_HIGH
N *              - \ref BPWM_OUTPUT_TOGGLE
N * @param[in] u32CmpUpLevel output level at compare up point, valid values are:
N *              - \ref BPWM_OUTPUT_NOTHING
N *              - \ref BPWM_OUTPUT_LOW
N *              - \ref BPWM_OUTPUT_HIGH
N *              - \ref BPWM_OUTPUT_TOGGLE
N * @param[in] u32PeriodLevel output level at period(center) point, valid values are:
N *              - \ref BPWM_OUTPUT_NOTHING
N *              - \ref BPWM_OUTPUT_LOW
N *              - \ref BPWM_OUTPUT_HIGH
N *              - \ref BPWM_OUTPUT_TOGGLE
N * @param[in] u32CmpDownLevel output level at compare down point, valid values are:
N *              - \ref BPWM_OUTPUT_NOTHING
N *              - \ref BPWM_OUTPUT_LOW
N *              - \ref BPWM_OUTPUT_HIGH
N *              - \ref BPWM_OUTPUT_TOGGLE
N * @return None
N * @details This macro is used to Set output level at zero, compare up, period(center) and compare down of specified channel(s)
N * \hideinitializer
N */
N#define BPWM_SET_OUTPUT_LEVEL(bpwm, u32ChannelMask, u32ZeroLevel, u32CmpUpLevel, u32PeriodLevel, u32CmpDownLevel) \
N    do{ \
N        uint32_t i; \
N        for(i = 0UL; i < 6UL; i++) { \
N            if((u32ChannelMask) & (1UL << i)) { \
N                (bpwm)->WGCTL0 = (((bpwm)->WGCTL0 & ~(3UL << (i << 1UL))) | ((u32ZeroLevel) << (i << 1UL))); \
N                (bpwm)->WGCTL0 = (((bpwm)->WGCTL0 & ~(3UL << (BPWM_WGCTL0_PRDPCTL0_Pos + (i << 1UL)))) | ((u32PeriodLevel) << (BPWM_WGCTL0_PRDPCTL0_Pos + (i << 1UL)))); \
N                (bpwm)->WGCTL1 = (((bpwm)->WGCTL1 & ~(3UL << (i << 1UL))) | ((u32CmpUpLevel) << (i << 1UL))); \
N                (bpwm)->WGCTL1 = (((bpwm)->WGCTL1 & ~(3UL << (BPWM_WGCTL1_CMPDCTL0_Pos + (i << 1UL)))) | ((u32CmpDownLevel) << (BPWM_WGCTL1_CMPDCTL0_Pos + (i << 1UL)))); \
N            } \
N        } \
N    }while(0)
X#define BPWM_SET_OUTPUT_LEVEL(bpwm, u32ChannelMask, u32ZeroLevel, u32CmpUpLevel, u32PeriodLevel, u32CmpDownLevel)     do{         uint32_t i;         for(i = 0UL; i < 6UL; i++) {             if((u32ChannelMask) & (1UL << i)) {                 (bpwm)->WGCTL0 = (((bpwm)->WGCTL0 & ~(3UL << (i << 1UL))) | ((u32ZeroLevel) << (i << 1UL)));                 (bpwm)->WGCTL0 = (((bpwm)->WGCTL0 & ~(3UL << (BPWM_WGCTL0_PRDPCTL0_Pos + (i << 1UL)))) | ((u32PeriodLevel) << (BPWM_WGCTL0_PRDPCTL0_Pos + (i << 1UL))));                 (bpwm)->WGCTL1 = (((bpwm)->WGCTL1 & ~(3UL << (i << 1UL))) | ((u32CmpUpLevel) << (i << 1UL)));                 (bpwm)->WGCTL1 = (((bpwm)->WGCTL1 & ~(3UL << (BPWM_WGCTL1_CMPDCTL0_Pos + (i << 1UL)))) | ((u32CmpDownLevel) << (BPWM_WGCTL1_CMPDCTL0_Pos + (i << 1UL))));             }         }     }while(0)
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define BPWM functions prototype                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
Nuint32_t BPWM_ConfigCaptureChannel(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32UnitTimeNsec, uint32_t u32CaptureEdge);
Nuint32_t BPWM_ConfigOutputChannel(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Frequency, uint32_t u32DutyCycle);
Nvoid BPWM_Start(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_Stop(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_ForceStop(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_EnableADCTrigger(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Condition);
Nvoid BPWM_DisableADCTrigger(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_ClearADCTriggerFlag(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Condition);
Nuint32_t BPWM_GetADCTriggerFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_EnableCapture(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_DisableCapture(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_EnableOutput(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_DisableOutput(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_EnableCaptureInt(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nvoid BPWM_DisableCaptureInt(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nvoid BPWM_ClearCaptureIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nuint32_t BPWM_GetCaptureIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_EnableDutyInt(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32IntDutyType);
Nvoid BPWM_DisableDutyInt(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_ClearDutyIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nuint32_t BPWM_GetDutyIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_EnablePeriodInt(BPWM_T *bpwm, uint32_t u32ChannelNum,  uint32_t u32IntPeriodType);
Nvoid BPWM_DisablePeriodInt(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_ClearPeriodIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nuint32_t BPWM_GetPeriodIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_EnableZeroInt(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_DisableZeroInt(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_ClearZeroIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nuint32_t BPWM_GetZeroIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_EnableLoadMode(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
Nvoid BPWM_DisableLoadMode(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
Nvoid BPWM_SetClockSource(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32ClkSrcSel);
Nuint32_t BPWM_GetWrapAroundFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_ClearWrapAroundFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
N
N
N/*@}*/ /* end of group BPWM_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group BPWM_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __BPWM_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 575 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "qspi.h"
L 1 "..\..\..\Library\StdDriver\inc\qspi.h" 1
N/**************************************************************************//**
N * @file     qspi.h
N * @version  V1.00
N * @brief    M031 series QSPI driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N*****************************************************************************/
N#ifndef __QSPI_H__
N#define __QSPI_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup QSPI_Driver QSPI Driver
N  @{
N*/
N
N/** @addtogroup QSPI_EXPORTED_CONSTANTS QSPI Exported Constants
N  @{
N*/
N
N#define QSPI_MODE_0        (QSPI_CTL_TXNEG_Msk)                             /*!< CLKPOL=0; RXNEG=0; TXNEG=1 \hideinitializer */
N#define QSPI_MODE_1        (QSPI_CTL_RXNEG_Msk)                             /*!< CLKPOL=0; RXNEG=1; TXNEG=0 \hideinitializer */
N#define QSPI_MODE_2        (QSPI_CTL_CLKPOL_Msk | QSPI_CTL_RXNEG_Msk)       /*!< CLKPOL=1; RXNEG=1; TXNEG=0 \hideinitializer */
N#define QSPI_MODE_3        (QSPI_CTL_CLKPOL_Msk | QSPI_CTL_TXNEG_Msk)       /*!< CLKPOL=1; RXNEG=0; TXNEG=1 \hideinitializer */
N
N#define QSPI_SLAVE         (QSPI_CTL_SLAVE_Msk)                             /*!< Set as slave \hideinitializer */
N#define QSPI_MASTER        (0x0UL)                                          /*!< Set as master \hideinitializer */
N
N#define QSPI_SS                (QSPI_SSCTL_SS_Msk)                          /*!< Set SS \hideinitializer */
N#define QSPI_SS_ACTIVE_HIGH    (QSPI_SSCTL_SSACTPOL_Msk)                    /*!< SS active high \hideinitializer */
N#define QSPI_SS_ACTIVE_LOW     (0x0UL)                                      /*!< SS active low \hideinitializer */
N
N/* QSPI Interrupt Mask */
N#define QSPI_UNIT_INT_MASK                (0x001UL)                          /*!< Unit transfer interrupt mask \hideinitializer */
N#define QSPI_SSACT_INT_MASK               (0x002UL)                          /*!< Slave selection signal active interrupt mask \hideinitializer */
N#define QSPI_SSINACT_INT_MASK             (0x004UL)                          /*!< Slave selection signal inactive interrupt mask \hideinitializer */
N#define QSPI_SLVUR_INT_MASK               (0x008UL)                          /*!< Slave under run interrupt mask \hideinitializer */
N#define QSPI_SLVBE_INT_MASK               (0x010UL)                          /*!< Slave bit count error interrupt mask \hideinitializer */
N#define QSPI_SLVTO_INT_MASK               (0x020UL)                          /*!< Slave Mode Time-out interrupt mask \hideinitializer */
N#define QSPI_TXUF_INT_MASK                (0x040UL)                          /*!< Slave TX underflow interrupt mask \hideinitializer */
N#define QSPI_FIFO_TXTH_INT_MASK           (0x080UL)                          /*!< FIFO TX threshold interrupt mask \hideinitializer */
N#define QSPI_FIFO_RXTH_INT_MASK           (0x100UL)                          /*!< FIFO RX threshold interrupt mask \hideinitializer */
N#define QSPI_FIFO_RXOV_INT_MASK           (0x200UL)                          /*!< FIFO RX overrun interrupt mask \hideinitializer */
N#define QSPI_FIFO_RXTO_INT_MASK           (0x400UL)                          /*!< FIFO RX time-out interrupt mask \hideinitializer */
N
N/* QSPI Status Mask */
N#define QSPI_BUSY_MASK                    (0x01UL)                           /*!< Busy status mask \hideinitializer */
N#define QSPI_RX_EMPTY_MASK                (0x02UL)                           /*!< RX empty status mask \hideinitializer */
N#define QSPI_RX_FULL_MASK                 (0x04UL)                           /*!< RX full status mask \hideinitializer */
N#define QSPI_TX_EMPTY_MASK                (0x08UL)                           /*!< TX empty status mask \hideinitializer */
N#define QSPI_TX_FULL_MASK                 (0x10UL)                           /*!< TX full status mask \hideinitializer */
N#define QSPI_TXRX_RESET_MASK              (0x20UL)                           /*!< TX or RX reset status mask \hideinitializer */
N#define QSPI_SPIEN_STS_MASK               (0x40UL)                           /*!< SPIEN status mask \hideinitializer */
N#define QSPI_SSLINE_STS_MASK              (0x80UL)                           /*!< QSPIx_SS line status mask \hideinitializer */
N
N/*@}*/ /* end of group QSPI_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup QSPI_EXPORTED_FUNCTIONS QSPI Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Clear the unit transfer interrupt flag.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Write 1 to UNITIF bit of QSPI_STATUS register to clear the unit transfer interrupt flag.
N  * \hideinitializer
N  */
N#define QSPI_CLR_UNIT_TRANS_INT_FLAG(qspi)   ((qspi)->STATUS = QSPI_STATUS_UNITIF_Msk)
N
N/**
N  * @brief      Trigger RX PDMA function.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Set RXPDMAEN bit of QSPI_PDMACTL register to enable RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define QSPI_TRIGGER_RX_PDMA(qspi)   ((qspi)->PDMACTL |= QSPI_PDMACTL_RXPDMAEN_Msk)
N
N/**
N  * @brief      Trigger TX PDMA function.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Set TXPDMAEN bit of QSPI_PDMACTL register to enable TX PDMA transfer function.
N  * \hideinitializer
N  */
N#define QSPI_TRIGGER_TX_PDMA(qspi)   ((qspi)->PDMACTL |= QSPI_PDMACTL_TXPDMAEN_Msk)
N
N/**
N  * @brief      Trigger TX and RX PDMA function.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Set TXPDMAEN bit and RXPDMAEN bit of QSPI_PDMACTL register to enable TX and RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define QSPI_TRIGGER_TX_RX_PDMA(qspi)   ((qspi)->PDMACTL |= (QSPI_PDMACTL_TXPDMAEN_Msk | QSPI_PDMACTL_RXPDMAEN_Msk))
N
N/**
N  * @brief      Disable RX PDMA transfer.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Clear RXPDMAEN bit of QSPI_PDMACTL register to disable RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define QSPI_DISABLE_RX_PDMA(qspi) ( (qspi)->PDMACTL &= ~QSPI_PDMACTL_RXPDMAEN_Msk )
N
N/**
N  * @brief      Disable TX PDMA transfer.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Clear TXPDMAEN bit of QSPI_PDMACTL register to disable TX PDMA transfer function.
N  * \hideinitializer
N  */
N#define QSPI_DISABLE_TX_PDMA(qspi) ( (qspi)->PDMACTL &= ~QSPI_PDMACTL_TXPDMAEN_Msk )
N
N/**
N  * @brief      Disable TX and RX PDMA transfer.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Clear TXPDMAEN bit and RXPDMAEN bit of QSPI_PDMACTL register to disable TX and RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define QSPI_DISABLE_TX_RX_PDMA(qspi) ( (qspi)->PDMACTL &= ~(QSPI_PDMACTL_TXPDMAEN_Msk | QSPI_PDMACTL_RXPDMAEN_Msk) )
N
N/**
N  * @brief      Get the count of available data in RX FIFO.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     The count of available data in RX FIFO.
N  * @details    Read RXCNT (QSPI_STATUS[27:24]) to get the count of available data in RX FIFO.
N  * \hideinitializer
N  */
N#define QSPI_GET_RX_FIFO_COUNT(qspi)   (((qspi)->STATUS & QSPI_STATUS_RXCNT_Msk) >> QSPI_STATUS_RXCNT_Pos)
N
N/**
N  * @brief      Get the RX FIFO empty flag.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @retval     0 RX FIFO is not empty.
N  * @retval     1 RX FIFO is empty.
N  * @details    Read RXEMPTY bit of QSPI_STATUS register to get the RX FIFO empty flag.
N  * \hideinitializer
N  */
N#define QSPI_GET_RX_FIFO_EMPTY_FLAG(qspi)   (((qspi)->STATUS & QSPI_STATUS_RXEMPTY_Msk)>>QSPI_STATUS_RXEMPTY_Pos)
N
N/**
N  * @brief      Get the TX FIFO empty flag.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @retval     0 TX FIFO is not empty.
N  * @retval     1 TX FIFO is empty.
N  * @details    Read TXEMPTY bit of QSPI_STATUS register to get the TX FIFO empty flag.
N  * \hideinitializer
N  */
N#define QSPI_GET_TX_FIFO_EMPTY_FLAG(qspi)   (((qspi)->STATUS & QSPI_STATUS_TXEMPTY_Msk)>>QSPI_STATUS_TXEMPTY_Pos)
N
N/**
N  * @brief      Get the TX FIFO full flag.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @retval     0 TX FIFO is not full.
N  * @retval     1 TX FIFO is full.
N  * @details    Read TXFULL bit of QSPI_STATUS register to get the TX FIFO full flag.
N  * \hideinitializer
N  */
N#define QSPI_GET_TX_FIFO_FULL_FLAG(qspi)   (((qspi)->STATUS & QSPI_STATUS_TXFULL_Msk)>>QSPI_STATUS_TXFULL_Pos)
N
N/**
N  * @brief      Get the datum read from RX register.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     Data in RX register.
N  * @details    Read QSPI_RX register to get the received datum.
N  * \hideinitializer
N  */
N#define QSPI_READ_RX(qspi)   ((qspi)->RX)
N
N/**
N  * @brief      Write datum to TX register.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @param[in]  u32TxData The datum which user attempt to transfer through QSPI bus.
N  * @return     None.
N  * @details    Write u32TxData to QSPI_TX register.
N  * \hideinitializer
N  */
N#define QSPI_WRITE_TX(qspi, u32TxData)   ((qspi)->TX = (u32TxData))
N
N/**
N  * @brief      Set QSPIx_SS pin to high state.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Disable automatic slave selection function and set QSPIx_SS pin to high state.
N  * \hideinitializer
N  */
N#define QSPI_SET_SS_HIGH(qspi)   ((qspi)->SSCTL = ((qspi)->SSCTL & (~QSPI_SSCTL_AUTOSS_Msk)) | (QSPI_SSCTL_SSACTPOL_Msk | QSPI_SSCTL_SS_Msk))
N
N/**
N  * @brief      Set QSPIx_SS pin to low state.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Disable automatic slave selection function and set QSPIx_SS pin to low state.
N  * \hideinitializer
N  */
N#define QSPI_SET_SS_LOW(qspi)   ((qspi)->SSCTL = ((qspi)->SSCTL & (~(QSPI_SSCTL_AUTOSS_Msk | QSPI_SSCTL_SSACTPOL_Msk))) | QSPI_SSCTL_SS_Msk)
N
N/**
N  * @brief      Enable Byte Reorder function.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Enable Byte Reorder function. The suspend interval depends on the setting of SUSPITV (QSPI_CTL[7:4]).
N  * \hideinitializer
N  */
N#define QSPI_ENABLE_BYTE_REORDER(qspi)   ((qspi)->CTL |=  QSPI_CTL_REORDER_Msk)
N
N/**
N  * @brief      Disable Byte Reorder function.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Clear REORDER bit field of QSPI_CTL register to disable Byte Reorder function.
N  * \hideinitializer
N  */
N#define QSPI_DISABLE_BYTE_REORDER(qspi)   ((qspi)->CTL &= ~QSPI_CTL_REORDER_Msk)
N
N/**
N  * @brief      Set the length of suspend interval.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @param[in]  u32SuspCycle Decides the length of suspend interval. It could be 0 ~ 15.
N  * @return     None.
N  * @details    Set the length of suspend interval according to u32SuspCycle.
N  *             The length of suspend interval is ((u32SuspCycle + 0.5) * the length of one QSPI bus clock cycle).
N  * \hideinitializer
N  */
N#define QSPI_SET_SUSPEND_CYCLE(qspi, u32SuspCycle)   ((qspi)->CTL = ((qspi)->CTL & ~QSPI_CTL_SUSPITV_Msk) | ((u32SuspCycle) << QSPI_CTL_SUSPITV_Pos))
N
N/**
N  * @brief      Set the QSPI transfer sequence with LSB first.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Set LSB bit of QSPI_CTL register to set the QSPI transfer sequence with LSB first.
N  * \hideinitializer
N  */
N#define QSPI_SET_LSB_FIRST(qspi)   ((qspi)->CTL |= QSPI_CTL_LSB_Msk)
N
N/**
N  * @brief      Set the QSPI transfer sequence with MSB first.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Clear LSB bit of QSPI_CTL register to set the QSPI transfer sequence with MSB first.
N  * \hideinitializer
N  */
N#define QSPI_SET_MSB_FIRST(qspi)   ((qspi)->CTL &= ~QSPI_CTL_LSB_Msk)
N
N/**
N  * @brief      Set the data width of a QSPI transaction.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @param[in]  u32Width The bit width of one transaction.
N  * @return     None.
N  * @details    The data width can be 8 ~ 32 bits.
N  * \hideinitializer
N  */
N#define QSPI_SET_DATA_WIDTH(qspi, u32Width)   ((qspi)->CTL = ((qspi)->CTL & ~QSPI_CTL_DWIDTH_Msk) | (((u32Width)&0x1F) << QSPI_CTL_DWIDTH_Pos))
N
N/**
N  * @brief      Get the QSPI busy state.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @retval     0 QSPI controller is not busy.
N  * @retval     1 QSPI controller is busy.
N  * @details    This macro will return the busy state of QSPI controller.
N  * \hideinitializer
N  */
N#define QSPI_IS_BUSY(qspi)   ( ((qspi)->STATUS & QSPI_STATUS_BUSY_Msk)>>QSPI_STATUS_BUSY_Pos )
N
N/**
N  * @brief      Enable QSPI controller.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Set SPIEN (QSPI_CTL[0]) to enable QSPI controller.
N  * \hideinitializer
N  */
N#define QSPI_ENABLE(qspi)   ((qspi)->CTL |= QSPI_CTL_SPIEN_Msk)
N
N/**
N  * @brief      Disable QSPI controller.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Clear SPIEN (QSPI_CTL[0]) to disable QSPI controller.
N  * \hideinitializer
N  */
N#define QSPI_DISABLE(qspi)   ((qspi)->CTL &= ~QSPI_CTL_SPIEN_Msk)
N
N/**
N  * @brief      Disable 2-bit Transfer mode.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Clear TWOBIT bit of QSPI_CTL register to disable 2-bit Transfer mode.
N  * \hideinitializer
N  */
N#define QSPI_DISABLE_2BIT_MODE(qspi)   ( (qspi)->CTL &= ~QSPI_CTL_TWOBIT_Msk )
N
N/**
N  * @brief      Enable 2-bit Transfer mode.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Set TWOBIT bit of QSPI_CTL register to enable 2-bit Transfer mode.
N  * \hideinitializer
N  */
N#define QSPI_ENABLE_2BIT_MODE(qspi)   ( (qspi)->CTL |= QSPI_CTL_TWOBIT_Msk )
N
N/**
N  * @brief      Disable Slave 3-wire mode.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Clear SLV3WIRE bit of QSPI_SSCTL register to disable Slave 3-wire mode.
N  * \hideinitializer
N  */
N#define QSPI_DISABLE_3WIRE_MODE(qspi)   ( (qspi)->SSCTL &= ~QSPI_SSCTL_SLV3WIRE_Msk )
N
N/**
N  * @brief      Enable Slave 3-wire mode.
N  * @param[in]  qspi The pointer of the specified QSPI module.
N  * @return     None.
N  * @details    Set SLV3WIRE bit of QSPI_SSCTL register to enable Slave 3-wire mode.
N  * \hideinitializer
N  */
N#define QSPI_ENABLE_3WIRE_MODE(qspi)   ( (qspi)->SSCTL |= QSPI_SSCTL_SLV3WIRE_Msk )
N
N/**
N  * @brief  Disable QSPI Dual IO function.
N  * @param[in]  qspi is the base address of QSPI module.
N  * @return none
N  * \hideinitializer
N  */
N#define QSPI_DISABLE_DUAL_MODE(qspi) ( (qspi)->CTL &= ~QSPI_CTL_DUALIOEN_Msk )
N
N/**
N  * @brief  Enable Dual IO function and set QSPI Dual IO direction to input.
N  * @param[in]  qspi is the base address of QSPI module.
N  * @return none
N  * \hideinitializer
N  */
N#define QSPI_ENABLE_DUAL_INPUT_MODE(qspi) ( (qspi)->CTL = ((qspi)->CTL & ~QSPI_CTL_DATDIR_Msk) | QSPI_CTL_DUALIOEN_Msk )
N
N/**
N  * @brief  Enable Dual IO function and set QSPI Dual IO direction to output.
N  * @param[in]  qspi is the base address of QSPI module.
N  * @return none
N  * \hideinitializer
N  */
N#define QSPI_ENABLE_DUAL_OUTPUT_MODE(qspi) ( (qspi)->CTL |= QSPI_CTL_DATDIR_Msk | QSPI_CTL_DUALIOEN_Msk )
N
N/**
N  * @brief  Disable QSPI Quad IO function.
N  * @param[in]  qspi is the base address of QSPI module.
N  * @return none
N  * \hideinitializer
N  */
N#define QSPI_DISABLE_QUAD_MODE(qspi) ( (qspi)->CTL &= ~QSPI_CTL_QUADIOEN_Msk )
N
N/**
N  * @brief  Set QSPI Quad IO direction to input.
N  * @param[in]  qspi is the base address of QSPI module.
N  * @return none
N  * \hideinitializer
N  */
N#define QSPI_ENABLE_QUAD_INPUT_MODE(qspi) ( (qspi)->CTL = ((qspi)->CTL & ~QSPI_CTL_DATDIR_Msk) | QSPI_CTL_QUADIOEN_Msk )
N
N/**
N  * @brief  Set QSPI Quad IO direction to output.
N  * @param[in]  qspi is the base address of QSPI module.
N  * @return none
N  * \hideinitializer
N  */
N#define QSPI_ENABLE_QUAD_OUTPUT_MODE(qspi) ( (qspi)->CTL |= QSPI_CTL_DATDIR_Msk | QSPI_CTL_QUADIOEN_Msk )
N
N
N
N
N/* Function prototype declaration */
Nuint32_t QSPI_Open(QSPI_T *qspi, uint32_t u32MasterSlave, uint32_t u32QSPIMode, uint32_t u32DataWidth, uint32_t u32BusClock);
Nvoid QSPI_Close(QSPI_T *qspi);
Nvoid QSPI_ClearRxFIFO(QSPI_T *qspi);
Nvoid QSPI_ClearTxFIFO(QSPI_T *qspi);
Nvoid QSPI_DisableAutoSS(QSPI_T *qspi);
Nvoid QSPI_EnableAutoSS(QSPI_T *qspi, uint32_t u32SSPinMask, uint32_t u32ActiveLevel);
Nuint32_t QSPI_SetBusClock(QSPI_T *qspi, uint32_t u32BusClock);
Nvoid QSPI_SetFIFO(QSPI_T *qspi, uint32_t u32TxThreshold, uint32_t u32RxThreshold);
Nuint32_t QSPI_GetBusClock(QSPI_T *qspi);
Nvoid QSPI_EnableInt(QSPI_T *qspi, uint32_t u32Mask);
Nvoid QSPI_DisableInt(QSPI_T *qspi, uint32_t u32Mask);
Nuint32_t QSPI_GetIntFlag(QSPI_T *qspi, uint32_t u32Mask);
Nvoid QSPI_ClearIntFlag(QSPI_T *qspi, uint32_t u32Mask);
Nuint32_t QSPI_GetStatus(QSPI_T *qspi, uint32_t u32Mask);
N
N
N/*@}*/ /* end of group QSPI_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group QSPI_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __QSPI_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 576 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "spi.h"
L 1 "..\..\..\Library\StdDriver\inc\spi.h" 1
N/******************************************************************************
N * @file     spi.h
N * @version  V1.00
N * $Revision: 4 $
N * $Date: 18/06/07 2:32p $
N * @brief    M031 series SPI driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N*****************************************************************************/
N#ifndef __SPI_H__
N#define __SPI_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup SPI_Driver SPI Driver
N  @{
N*/
N
N/** @addtogroup SPI_EXPORTED_CONSTANTS SPI Exported Constants
N  @{
N*/
N#define SPI_NONE		  		(0x00ul)   		   						  /*!< SPI interface not existed \hideinitializer */
N#define SPI_MODE_0        		(SPI_CTL_TXNEG_Msk)    			  		  /*!< CLKPOL=0; RXNEG=0; TXNEG=1 \hideinitializer */
N#define SPI_MODE_1        		(SPI_CTL_RXNEG_Msk)                       /*!< CLKPOL=0; RXNEG=1; TXNEG=0 \hideinitializer */
N#define SPI_MODE_2        		(SPI_CTL_CLKPOL_Msk | SPI_CTL_RXNEG_Msk)  /*!< CLKPOL=1; RXNEG=1; TXNEG=0 \hideinitializer */
N#define SPI_MODE_3        		(SPI_CTL_CLKPOL_Msk | SPI_CTL_TXNEG_Msk)  /*!< CLKPOL=1; RXNEG=0; TXNEG=1 \hideinitializer */
N#define SPI_SLAVE         		(SPI_CTL_SLAVE_Msk)                       /*!< Set as slave \hideinitializer */
N#define SPI_MASTER        		(0x0ul)                                   /*!< Set as master \hideinitializer */
N#define SPI_SS                	(SPI_SSCTL_SS_Msk)                        /*!< Set SS \hideinitializer */
N#define SPI_SS_ACTIVE_HIGH    	(SPI_SSCTL_SSACTPOL_Msk)                  /*!< SS active high \hideinitializer */
N#define SPI_SS_ACTIVE_LOW     	(0x0ul)                                   /*!< SS active low \hideinitializer */
N
N/* SPI Interrupt Mask */
N#define SPI_UNIT_INT_MASK                (0x001ul)            	          /*!< Unit transfer interrupt mask \hideinitializer */
N#define SPI_SSACT_INT_MASK               (0x002ul)                        /*!< Slave selection signal active interrupt mask \hideinitializer */
N#define SPI_SSINACT_INT_MASK             (0x004ul)                        /*!< Slave selection signal inactive interrupt mask \hideinitializer */
N#define SPI_SLVUR_INT_MASK               (0x008ul)                        /*!< Slave under run interrupt mask \hideinitializer */
N#define SPI_SLVBE_INT_MASK               (0x010ul)                        /*!< Slave bit count error interrupt mask \hideinitializer */
N#define SPI_TXUF_INT_MASK                (0x040ul)                        /*!< Slave TX underflow interrupt mask \hideinitializer */
N#define SPI_FIFO_TXTH_INT_MASK           (0x080ul)                        /*!< FIFO TX threshold interrupt mask \hideinitializer */
N#define SPI_FIFO_RXTH_INT_MASK           (0x100ul)                        /*!< FIFO RX threshold interrupt mask \hideinitializer */
N#define SPI_FIFO_RXOV_INT_MASK           (0x200ul)                        /*!< FIFO RX overrun interrupt mask \hideinitializer */
N#define SPI_FIFO_RXTO_INT_MASK           (0x400ul)                        /*!< FIFO RX time-out interrupt mask \hideinitializer */
N
N/* SPI Status Mask */
N#define SPI_BUSY_MASK                    (0x01ul)                         /*!< Busy status mask \hideinitializer */
N#define SPI_RX_EMPTY_MASK                (0x02ul)                         /*!< RX empty status mask \hideinitializer */
N#define SPI_RX_FULL_MASK                 (0x04ul)                         /*!< RX full status mask \hideinitializer */
N#define SPI_TX_EMPTY_MASK                (0x08ul)                         /*!< TX empty status mask \hideinitializer */
N#define SPI_TX_FULL_MASK                 (0x10ul)                         /*!< TX full status mask \hideinitializer */
N#define SPI_TXRX_RESET_MASK              (0x20ul)                         /*!< TX or RX reset status mask \hideinitializer */
N#define SPI_SPIEN_STS_MASK               (0x40ul)                         /*!< SPIEN status mask \hideinitializer */
N#define SPI_SSLINE_STS_MASK              (0x80ul)                         /*!< SPIx_SS line status mask \hideinitializer */
N
N
N/* SPII2S Data Width */
N#define SPII2S_DATABIT_8           (0ul << SPI_I2SCTL_WDWIDTH_Pos)        /*!< SPII2S data width is 8-bit \hideinitializer */
N#define SPII2S_DATABIT_16          (1ul << SPI_I2SCTL_WDWIDTH_Pos)        /*!< SPII2S data width is 16-bit \hideinitializer */
N#define SPII2S_DATABIT_24          (2ul << SPI_I2SCTL_WDWIDTH_Pos)        /*!< SPII2S data width is 24-bit \hideinitializer */
N#define SPII2S_DATABIT_32          (3ul << SPI_I2SCTL_WDWIDTH_Pos)        /*!< SPII2S data width is 32-bit \hideinitializer */
N
N/* SPII2S Audio Format */
N#define SPII2S_MONO                SPI_I2SCTL_MONO_Msk                    /*!< Monaural channel \hideinitializer */
N#define SPII2S_STEREO              (0x0ul)                                /*!< Stereo channel \hideinitializer */
N
N/* SPII2S Data Format */
N#define SPII2S_FORMAT_I2S          (0ul<<SPI_I2SCTL_FORMAT_Pos)           /*!< I2S data format \hideinitializer */
N#define SPII2S_FORMAT_MSB          (1ul<<SPI_I2SCTL_FORMAT_Pos)           /*!< MSB justified data format \hideinitializer */
N#define SPII2S_FORMAT_PCMA         (2ul<<SPI_I2SCTL_FORMAT_Pos)           /*!< PCM mode A data format \hideinitializer */
N#define SPII2S_FORMAT_PCMB         (3ul<<SPI_I2SCTL_FORMAT_Pos)           /*!< PCM mode B data format \hideinitializer */
N
N/* SPII2S Operation mode */
N#define SPII2S_MODE_SLAVE          SPI_I2SCTL_SLAVE_Msk                   /*!< As slave mode \hideinitializer */
N#define SPII2S_MODE_MASTER         (0x0ul)                                /*!< As master mode \hideinitializer */
N
N/* SPII2S TX FIFO Threshold */
N#define SPII2S_FIFO_TX_LEVEL_WORD_0    (0ul)                              /*!< TX threshold is 0 word \hideinitializer */
N#define SPII2S_FIFO_TX_LEVEL_WORD_1    (1ul << SPI_FIFOCTL_TXTH_Pos)   	  /*!< TX threshold is 1 word \hideinitializer */
N#define SPII2S_FIFO_TX_LEVEL_WORD_2    (2ul << SPI_FIFOCTL_TXTH_Pos)      /*!< TX threshold is 2 words \hideinitializer */
N#define SPII2S_FIFO_TX_LEVEL_WORD_3    (3ul << SPI_FIFOCTL_TXTH_Pos)      /*!< TX threshold is 3 words \hideinitializer */
N/* SPII2S RX FIFO Threshold */
N#define SPII2S_FIFO_RX_LEVEL_WORD_1    (0ul)                              /*!< RX threshold is 1 word \hideinitializer */
N#define SPII2S_FIFO_RX_LEVEL_WORD_2    (1ul << SPI_FIFOCTL_RXTH_Pos)      /*!< RX threshold is 2 words \hideinitializer */
N#define SPII2S_FIFO_RX_LEVEL_WORD_3    (2ul << SPI_FIFOCTL_RXTH_Pos)      /*!< RX threshold is 3 words \hideinitializer */
N#define SPII2S_FIFO_RX_LEVEL_WORD_4    (3ul << SPI_FIFOCTL_RXTH_Pos)      /*!< RX threshold is 4 words \hideinitializer */
N
N/* SPII2S Record Channel */
N#define SPII2S_MONO_RIGHT          (0ul)                                  /*!< Record mono right channel \hideinitializer */
N#define SPII2S_MONO_LEFT           SPI_I2SCTL_RXLCH_Msk              	  /*!< Record mono left channel \hideinitializer */
N
N/* SPII2S Channel */
N#define SPII2S_RIGHT               (0ul)                                  /*!< Select right channel \hideinitializer */
N#define SPII2S_LEFT                (1ul)                                  /*!< Select left channel \hideinitializer */
N
N/* SPII2S Interrupt Mask */
N#define SPII2S_FIFO_TXTH_INT_MASK           (0x01ul)                      /*!< TX FIFO threshold interrupt mask \hideinitializer */
N#define SPII2S_FIFO_RXTH_INT_MASK           (0x02ul)                      /*!< RX FIFO threshold interrupt mask \hideinitializer */
N#define SPII2S_FIFO_RXOV_INT_MASK           (0x04ul)                      /*!< RX FIFO overrun interrupt mask \hideinitializer */
N#define SPII2S_FIFO_RXTO_INT_MASK           (0x08ul)                      /*!< RX FIFO time-out interrupt mask \hideinitializer */
N#define SPII2S_TXUF_INT_MASK                (0x10ul)                      /*!< TX FIFO underflow interrupt mask \hideinitializer */
N#define SPII2S_RIGHT_ZC_INT_MASK            (0x20ul)                      /*!< Right channel zero cross interrupt mask \hideinitializer */
N#define SPII2S_LEFT_ZC_INT_MASK             (0x40ul)                      /*!< Left channel zero cross interrupt mask \hideinitializer */
N
N/*@}*/ /* end of group SPI_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup SPI_EXPORTED_FUNCTIONS SPI Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Clear the unit transfer interrupt flag.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Write 1 to UNITIF bit of SPI_STATUS register to clear the unit transfer interrupt flag.
N  */
N#define SPI_CLR_UNIT_TRANS_INT_FLAG(spi)   ((spi)->STATUS = SPI_STATUS_UNITIF_Msk)
N
N/**
N  * @brief      Trigger RX PDMA function.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Set RXPDMAEN bit of SPI_PDMACTL register to enable RX PDMA transfer function.
N  */
N#define SPI_TRIGGER_RX_PDMA(spi)   ((spi)->PDMACTL |= SPI_PDMACTL_RXPDMAEN_Msk)
N
N/**
N  * @brief      Trigger TX PDMA function.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Set TXPDMAEN bit of SPI_PDMACTL register to enable TX PDMA transfer function.
N  */
N#define SPI_TRIGGER_TX_PDMA(spi)   ((spi)->PDMACTL |= SPI_PDMACTL_TXPDMAEN_Msk)
N
N/**
N  * @brief      Disable RX PDMA transfer.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Clear RXPDMAEN bit of SPI_PDMACTL register to disable RX PDMA transfer function.
N  */
N#define SPI_DISABLE_RX_PDMA(spi) ( (spi)->PDMACTL &= ~SPI_PDMACTL_RXPDMAEN_Msk )
N
N/**
N  * @brief      Disable TX PDMA transfer.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Clear TXPDMAEN bit of SPI_PDMACTL register to disable TX PDMA transfer function.
N  */
N#define SPI_DISABLE_TX_PDMA(spi) ( (spi)->PDMACTL &= ~SPI_PDMACTL_TXPDMAEN_Msk )
N
N/**
N  * @brief      Get the count of available data in RX FIFO.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     The count of available data in RX FIFO.
N  * @details    Read RXCNT (SPI_STATUS[27:24]) to get the count of available data in RX FIFO.
N  */
N#define SPI_GET_RX_FIFO_COUNT(spi)   (((spi)->STATUS & SPI_STATUS_RXCNT_Msk) >> SPI_STATUS_RXCNT_Pos)
N
N/**
N  * @brief      Get the RX FIFO empty flag.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @retval     0 RX FIFO is not empty.
N  * @retval     1 RX FIFO is empty.
N  * @details    Read RXEMPTY bit of SPI_STATUS register to get the RX FIFO empty flag.
N  */
N#define SPI_GET_RX_FIFO_EMPTY_FLAG(spi)   (((spi)->STATUS & SPI_STATUS_RXEMPTY_Msk)>>SPI_STATUS_RXEMPTY_Pos)
N
N/**
N  * @brief      Get the TX FIFO empty flag.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @retval     0 TX FIFO is not empty.
N  * @retval     1 TX FIFO is empty.
N  * @details    Read TXEMPTY bit of SPI_STATUS register to get the TX FIFO empty flag.
N  */
N#define SPI_GET_TX_FIFO_EMPTY_FLAG(spi)   (((spi)->STATUS & SPI_STATUS_TXEMPTY_Msk)>>SPI_STATUS_TXEMPTY_Pos)
N
N/**
N  * @brief      Get the TX FIFO full flag.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @retval     0 TX FIFO is not full.
N  * @retval     1 TX FIFO is full.
N  * @details    Read TXFULL bit of SPI_STATUS register to get the TX FIFO full flag.
N  */
N#define SPI_GET_TX_FIFO_FULL_FLAG(spi)   (((spi)->STATUS & SPI_STATUS_TXFULL_Msk)>>SPI_STATUS_TXFULL_Pos)
N
N/**
N  * @brief      Get the datum read from RX register.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     Data in RX register.
N  * @details    Read SPI_RX register to get the received datum.
N  */
N#define SPI_READ_RX(spi)   ((spi)->RX)
N
N/**
N  * @brief      Write datum to TX register.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @param[in]  u32TxData The datum which user attempt to transfer through SPI bus.
N  * @return     None.
N  * @details    Write u32TxData to SPI_TX register.
N  */
N#define SPI_WRITE_TX(spi, u32TxData)   ((spi)->TX = (u32TxData))
N
N/**
N  * @brief      Set SPIx_SS pin to high state.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Disable automatic slave selection function and set SPIx_SS pin to high state.
N  */
N#define SPI_SET_SS_HIGH(spi)   ((spi)->SSCTL = ((spi)->SSCTL & (~SPI_SSCTL_AUTOSS_Msk)) | (SPI_SSCTL_SSACTPOL_Msk | SPI_SSCTL_SS_Msk))
N
N/**
N  * @brief      Set SPIx_SS pin to low state.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Disable automatic slave selection function and set SPIx_SS pin to low state.
N  */
N#define SPI_SET_SS_LOW(spi)   ((spi)->SSCTL = ((spi)->SSCTL & (~(SPI_SSCTL_AUTOSS_Msk | SPI_SSCTL_SSACTPOL_Msk))) | SPI_SSCTL_SS_Msk)
N
N/**
N  * @brief      Enable Byte Reorder function.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Enable Byte Reorder function. The suspend interval depends on the setting of SUSPITV (SPI_CTL[7:4]).
N  */
N#define SPI_ENABLE_BYTE_REORDER(spi)   ((spi)->CTL |=  SPI_CTL_REORDER_Msk)
N
N/**
N  * @brief      Disable Byte Reorder function.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Clear REORDER bit field of SPI_CTL register to disable Byte Reorder function.
N  */
N#define SPI_DISABLE_BYTE_REORDER(spi)   ((spi)->CTL &= ~SPI_CTL_REORDER_Msk)
N
N/**
N  * @brief      Set the length of suspend interval.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @param[in]  u32SuspCycle Decides the length of suspend interval. It could be 0 ~ 15.
N  * @return     None.
N  * @details    Set the length of suspend interval according to u32SuspCycle.
N  *             The length of suspend interval is ((u32SuspCycle + 0.5) * the length of one SPI bus clock cycle).
N  */
N#define SPI_SET_SUSPEND_CYCLE(spi, u32SuspCycle)   ((spi)->CTL = ((spi)->CTL & ~SPI_CTL_SUSPITV_Msk) | ((u32SuspCycle) << SPI_CTL_SUSPITV_Pos))
N
N/**
N  * @brief      Set the SPI transfer sequence with LSB first.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Set LSB bit of SPI_CTL register to set the SPI transfer sequence with LSB first.
N  */
N#define SPI_SET_LSB_FIRST(spi)   ((spi)->CTL |= SPI_CTL_LSB_Msk)
N
N/**
N  * @brief      Set the SPI transfer sequence with MSB first.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Clear LSB bit of SPI_CTL register to set the SPI transfer sequence with MSB first.
N  */
N#define SPI_SET_MSB_FIRST(spi)   ((spi)->CTL &= ~SPI_CTL_LSB_Msk)
N
N/**
N  * @brief      Set the data width of a SPI transaction.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @param[in]  u32Width The bit width of one transaction.
N  * @return     None.
N  * @details    The data width can be 8 ~ 32 bits.
N  */
N#define SPI_SET_DATA_WIDTH(spi, u32Width)   ((spi)->CTL = ((spi)->CTL & ~SPI_CTL_DWIDTH_Msk) | (((u32Width)&0x1F) << SPI_CTL_DWIDTH_Pos))
N
N/**
N  * @brief      Get the SPI busy state.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @retval     0 SPI controller is not busy.
N  * @retval     1 SPI controller is busy.
N  * @details    This macro will return the busy state of SPI controller.
N  */
N#define SPI_IS_BUSY(spi)   ( ((spi)->STATUS & SPI_STATUS_BUSY_Msk)>>SPI_STATUS_BUSY_Pos )
N
N/**
N  * @brief      Enable SPI controller.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Set SPIEN (SPI_CTL[0]) to enable SPI controller.
N  */
N#define SPI_ENABLE(spi)   ((spi)->CTL |= SPI_CTL_SPIEN_Msk)
N
N/**
N  * @brief      Disable SPI controller.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Clear SPIEN (SPI_CTL[0]) to disable SPI controller.
N  */
N#define SPI_DISABLE(spi)   ((spi)->CTL &= ~SPI_CTL_SPIEN_Msk)
N
N
N/**
N  * @brief  Enable zero cross detection function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @param[in] u32ChMask The mask for left or right channel. Valid values are:
N  *                    - \ref SPII2S_RIGHT
N  *                    - \ref SPII2S_LEFT
N  * @return None
N  * @details This function will set RZCEN or LZCEN bit of SPI_I2SCTL register to enable zero cross detection function.
N  */
Nstatic __INLINE void SPII2S_ENABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
Xstatic __inline void SPII2S_ENABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
N{
N    if(u32ChMask == SPII2S_RIGHT)
X    if(u32ChMask == (0ul))
N        i2s->I2SCTL |= SPI_I2SCTL_RZCEN_Msk;
X        i2s->I2SCTL |= (0x1ul << (16));
N    else
N        i2s->I2SCTL |= SPI_I2SCTL_LZCEN_Msk;
X        i2s->I2SCTL |= (0x1ul << (17));
N}
N
N/**
N  * @brief  Disable zero cross detection function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @param[in] u32ChMask The mask for left or right channel. Valid values are:
N  *                    - \ref SPII2S_RIGHT
N  *                    - \ref SPII2S_LEFT
N  * @return None
N  * @details This function will clear RZCEN or LZCEN bit of SPI_I2SCTL register to disable zero cross detection function.
N  */
Nstatic __INLINE void SPII2S_DISABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
Xstatic __inline void SPII2S_DISABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
N{
N    if(u32ChMask == SPII2S_RIGHT)
X    if(u32ChMask == (0ul))
N        i2s->I2SCTL &= ~SPI_I2SCTL_RZCEN_Msk;
X        i2s->I2SCTL &= ~(0x1ul << (16));
N    else
N        i2s->I2SCTL &= ~SPI_I2SCTL_LZCEN_Msk;
X        i2s->I2SCTL &= ~(0x1ul << (17));
N}
N
N/**
N  * @brief  Enable SPII2S TX DMA function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will set TXPDMAEN bit of SPI_PDMACTL register to transmit data with PDMA.
N  */
N#define SPII2S_ENABLE_TXDMA(i2s)  ( (i2s)->PDMACTL |= SPI_PDMACTL_TXPDMAEN_Msk )
N
N/**
N  * @brief  Disable SPII2S TX DMA function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will clear TXPDMAEN bit of SPI_PDMACTL register to disable TX DMA function.
N  */
N#define SPII2S_DISABLE_TXDMA(i2s) ( (i2s)->PDMACTL &= ~SPI_PDMACTL_TXPDMAEN_Msk )
N
N/**
N  * @brief  Enable SPII2S RX DMA function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will set RXPDMAEN bit of SPI_PDMACTL register to receive data with PDMA.
N  */
N#define SPII2S_ENABLE_RXDMA(i2s) ( (i2s)->PDMACTL |= SPI_PDMACTL_RXPDMAEN_Msk )
N
N/**
N  * @brief  Disable SPII2S RX DMA function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will clear RXPDMAEN bit of SPI_PDMACTL register to disable RX DMA function.
N  */
N#define SPII2S_DISABLE_RXDMA(i2s) ( (i2s)->PDMACTL &= ~SPI_PDMACTL_RXPDMAEN_Msk )
N
N/**
N  * @brief  Enable SPII2S TX function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will set TXEN bit of SPI_I2SCTL register to enable SPII2S TX function.
N  */
N#define SPII2S_ENABLE_TX(i2s) ( (i2s)->I2SCTL |= SPI_I2SCTL_TXEN_Msk )
N
N/**
N  * @brief  Disable SPII2S TX function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will clear TXEN bit of SPI_I2SCTL register to disable SPII2S TX function.
N  */
N#define SPII2S_DISABLE_TX(i2s) ( (i2s)->I2SCTL &= ~SPI_I2SCTL_TXEN_Msk )
N
N/**
N  * @brief  Enable SPII2S RX function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will set RXEN bit of SPI_I2SCTL register to enable SPII2S RX function.
N  */
N#define SPII2S_ENABLE_RX(i2s) ( (i2s)->I2SCTL |= SPI_I2SCTL_RXEN_Msk )
N
N/**
N  * @brief  Disable SPII2S RX function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will clear RXEN bit of SPI_I2SCTL register to disable SPII2S RX function.
N  */
N#define SPII2S_DISABLE_RX(i2s) ( (i2s)->I2SCTL &= ~SPI_I2SCTL_RXEN_Msk )
N
N/**
N  * @brief  Enable TX Mute function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will set MUTE bit of SPI_I2SCTL register to enable SPII2S TX mute function.
N  */
N#define SPII2S_ENABLE_TX_MUTE(i2s)  ( (i2s)->I2SCTL |= SPI_I2SCTL_MUTE_Msk )
N
N/**
N  * @brief  Disable TX Mute function.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will clear MUTE bit of SPI_I2SCTL register to disable SPII2S TX mute function.
N  */
N#define SPII2S_DISABLE_TX_MUTE(i2s) ( (i2s)->I2SCTL &= ~SPI_I2SCTL_MUTE_Msk )
N
N/**
N  * @brief  Clear TX FIFO.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will clear TX FIFO. The internal TX FIFO pointer will be reset to FIFO start point.
N  */
N#define SPII2S_CLR_TX_FIFO(i2s) ( (i2s)->FIFOCTL |= SPI_FIFOCTL_TXFBCLR_Msk )
N
N/**
N  * @brief  Clear RX FIFO.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return None
N  * @details This macro will clear RX FIFO. The internal RX FIFO pointer will be reset to FIFO start point.
N  */
N#define SPII2S_CLR_RX_FIFO(i2s) ( (i2s)->FIFOCTL |= SPI_FIFOCTL_RXFBCLR_Msk )
N
N/**
N  * @brief  This function sets the recording source channel when mono mode is used.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @param[in] u32Ch left or right channel. Valid values are:
N  *                - \ref SPII2S_MONO_LEFT
N  *                - \ref SPII2S_MONO_RIGHT
N  * @return None
N  * @details This function selects the recording source channel of monaural mode.
N  */
Nstatic __INLINE void SPII2S_SET_MONO_RX_CHANNEL(SPI_T *i2s, uint32_t u32Ch)
Xstatic __inline void SPII2S_SET_MONO_RX_CHANNEL(SPI_T *i2s, uint32_t u32Ch)
N{
N    u32Ch == SPII2S_MONO_LEFT ?
X    u32Ch == (0x1ul << (23)) ?
N    (i2s->I2SCTL |= SPI_I2SCTL_RXLCH_Msk) :
X    (i2s->I2SCTL |= (0x1ul << (23))) :
N    (i2s->I2SCTL &= ~SPI_I2SCTL_RXLCH_Msk);
X    (i2s->I2SCTL &= ~(0x1ul << (23)));
N}
N
N/**
N  * @brief  Write data to SPII2S TX FIFO.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @param[in] u32Data The value written to TX FIFO.
N  * @return None
N  * @details This macro will write a value to TX FIFO.
N  */
N#define SPII2S_WRITE_TX_FIFO(i2s, u32Data)  ( (i2s)->TX = (u32Data) )
N
N/**
N  * @brief  Read RX FIFO.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return The value read from RX FIFO.
N  * @details This function will return a value read from RX FIFO.
N  */
N#define SPII2S_READ_RX_FIFO(i2s) ( (i2s)->RX )
N
N/**
N  * @brief  Get the interrupt flag.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @param[in] u32Mask The mask value for all interrupt flags.
N  * @return The interrupt flags specified by the u32mask parameter.
N  * @details This macro will return the combination interrupt flags of SPI_I2SSTS register. The flags are specified by the u32mask parameter.
N  */
N#define SPII2S_GET_INT_FLAG(i2s, u32Mask) ( (i2s)->I2SSTS & (u32Mask) )
N
N/**
N  * @brief  Clear the interrupt flag.
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @param[in] u32Mask The mask value for all interrupt flags.
N  * @return None
N  * @details This macro will clear the interrupt flags specified by the u32mask parameter.
N  * @note Except TX and RX FIFO threshold interrupt flags, the other interrupt flags can be cleared by writing 1 to itself.
N  */
N#define SPII2S_CLR_INT_FLAG(i2s, u32Mask) ( (i2s)->I2SSTS = (u32Mask) )
N
N/**
N  * @brief  Get transmit FIFO level
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return TX FIFO level
N  * @details This macro will return the number of available words in TX FIFO.
N  */
N#define SPII2S_GET_TX_FIFO_LEVEL(i2s) ( ((i2s)->I2SSTS & SPI_I2SSTS_TXCNT_Msk) >> SPI_I2SSTS_TXCNT_Pos  )
N
N/**
N  * @brief  Get receive FIFO level
N  * @param[in] i2s The pointer of the specified SPII2S module.
N  * @return RX FIFO level
N  * @details This macro will return the number of available words in RX FIFO.
N  */
N#define SPII2S_GET_RX_FIFO_LEVEL(i2s) ( ((i2s)->I2SSTS & SPI_I2SSTS_RXCNT_Msk) >> SPI_I2SSTS_RXCNT_Pos )
N
N
N
N/* Function prototype declaration */
Nuint32_t SPI_Open(SPI_T *spi, uint32_t u32MasterSlave, uint32_t u32SPIMode, uint32_t u32DataWidth, uint32_t u32BusClock);
Nvoid SPI_Close(SPI_T *spi);
Nvoid SPI_ClearRxFIFO(SPI_T *spi);
Nvoid SPI_ClearTxFIFO(SPI_T *spi);
Nvoid SPI_DisableAutoSS(SPI_T *spi);
Nvoid SPI_EnableAutoSS(SPI_T *spi, uint32_t u32SSPinMask, uint32_t u32ActiveLevel);
Nuint32_t SPI_SetBusClock(SPI_T *spi, uint32_t u32BusClock);
Nvoid SPI_SetFIFO(SPI_T *spi, uint32_t u32TxThreshold, uint32_t u32RxThreshold);
Nuint32_t SPI_GetBusClock(SPI_T *spi);
Nvoid SPI_EnableInt(SPI_T *spi, uint32_t u32Mask);
Nvoid SPI_DisableInt(SPI_T *spi, uint32_t u32Mask);
Nuint32_t SPI_GetIntFlag(SPI_T *spi, uint32_t u32Mask);
Nvoid SPI_ClearIntFlag(SPI_T *spi, uint32_t u32Mask);
Nuint32_t SPI_GetStatus(SPI_T *spi, uint32_t u32Mask);
N
Nuint32_t SPII2S_Open(SPI_T *i2s, uint32_t u32MasterSlave, uint32_t u32SampleRate, uint32_t u32WordWidth, uint32_t u32Channels, uint32_t u32DataFormat);
Nvoid SPII2S_Close(SPI_T *i2s);
Nvoid SPII2S_EnableInt(SPI_T *i2s, uint32_t u32Mask);
Nvoid SPII2S_DisableInt(SPI_T *i2s, uint32_t u32Mask);
Nuint32_t SPII2S_EnableMCLK(SPI_T *i2s, uint32_t u32BusClock);
Nvoid SPII2S_DisableMCLK(SPI_T *i2s);
Nvoid SPII2S_SetFIFO(SPI_T *i2s, uint32_t u32TxThreshold, uint32_t u32RxThreshold);
N
N
N/*@}*/ /* end of group SPI_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group SPI_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__SPI_H__
N
N/*** (C) COPYRIGHT 2017 Nuvoton Technology Corp. ***/
L 577 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "rtc.h"
L 1 "..\..\..\Library\StdDriver\inc\rtc.h" 1
N/******************************************************************************
N * @file     rtc.h
N * @version  V1.00
N * $Revision: 4 $
N * $Date: 18/06/07 2:32p $
N * @brief    M031 series Real Time Clock(RTC) driver header file
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N*****************************************************************************/
N
N#ifndef __RTC_H__
N#define __RTC_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup RTC_Driver RTC Driver
N  @{
N*/
N
N/** @addtogroup RTC_EXPORTED_CONSTANTS RTC Exported Constants
N  @{
N*/
N/*---------------------------------------------------------------------------------------------------------*/
N/*  RTC Initial Keyword Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define RTC_INIT_KEY            0xA5EB1357UL    /*!< RTC Initiation Key to make RTC leaving reset state \hideinitializer */
N#define RTC_WRITE_KEY           0x0000A965UL    /*!< RTC Register Access Enable Key to enable RTC read/write accessible and kept 1024 RTC clock \hideinitializer */
N/*---------------------------------------------------------------------------------------------------------*/
N/*  RTC Frequency Compensation Definitions                                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N#define RTC_INTEGER_32752       (0x0ul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32752HZ \hideinitializer */
N#define RTC_INTEGER_32753       (0x1ul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32753HZ \hideinitializer */
N#define RTC_INTEGER_32754       (0x2ul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32754HZ \hideinitializer */
N#define RTC_INTEGER_32755       (0x3ul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32755HZ \hideinitializer */
N#define RTC_INTEGER_32756       (0x4ul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32756HZ \hideinitializer */
N#define RTC_INTEGER_32757       (0x5ul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32757HZ \hideinitializer */
N#define RTC_INTEGER_32758       (0x6ul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32758HZ \hideinitializer */
N#define RTC_INTEGER_32759       (0x7ul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32759HZ \hideinitializer */
N#define RTC_INTEGER_32760       (0x8ul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32760HZ \hideinitializer */
N#define RTC_INTEGER_32761       (0x9ul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32761HZ \hideinitializer */
N#define RTC_INTEGER_32762       (0xaul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32762HZ \hideinitializer */
N#define RTC_INTEGER_32763       (0xbul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32763HZ \hideinitializer */
N#define RTC_INTEGER_32764       (0xcul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32764HZ \hideinitializer */
N#define RTC_INTEGER_32765       (0xdul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32765HZ \hideinitializer */
N#define RTC_INTEGER_32766       (0xeul << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32766HZ \hideinitializer */
N#define RTC_INTEGER_32767       (0xful << RTC_FREQADJ_INTEGER_Pos )    /*!< RTC Frequency is 32767HZ \hideinitializer */
N#define RTC_INTEGER_32768       (0x10ul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32768HZ \hideinitializer */
N#define RTC_INTEGER_32769       (0x11ul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32769HZ \hideinitializer */
N#define RTC_INTEGER_32770       (0x12ul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32770HZ \hideinitializer */
N#define RTC_INTEGER_32771       (0x13ul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32771HZ \hideinitializer */
N#define RTC_INTEGER_32772       (0x14ul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32772HZ \hideinitializer */
N#define RTC_INTEGER_32773       (0x15ul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32773HZ \hideinitializer */
N#define RTC_INTEGER_32774       (0x16ul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32774HZ \hideinitializer */
N#define RTC_INTEGER_32775       (0x17ul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32775HZ \hideinitializer */
N#define RTC_INTEGER_32776       (0x18ul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32776HZ \hideinitializer */
N#define RTC_INTEGER_32777       (0x19ul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32777HZ \hideinitializer */
N#define RTC_INTEGER_32778       (0x1aul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32778HZ \hideinitializer */
N#define RTC_INTEGER_32779       (0x1bul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32779HZ \hideinitializer */
N#define RTC_INTEGER_32780       (0x1cul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32780HZ \hideinitializer */
N#define RTC_INTEGER_32781       (0x1dul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32781HZ \hideinitializer */
N#define RTC_INTEGER_32782       (0x1eul << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32782HZ \hideinitializer */
N#define RTC_INTEGER_32783       (0x1ful << RTC_FREQADJ_INTEGER_Pos )   /*!< RTC Frequency is 32783HZ \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  RTC Time Attribute Constant Definitions                                                                */
N/*---------------------------------------------------------------------------------------------------------*/
N#define RTC_CLOCK_12            0UL             /*!< RTC as 12-hour time scale with AM and PM indication \hideinitializer */
N#define RTC_CLOCK_24            1UL             /*!< RTC as 24-hour time scale \hideinitializer */
N#define RTC_AM                  1UL             /*!< RTC as AM indication \hideinitializer */
N#define RTC_PM                  2UL             /*!< RTC as PM indication \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  RTC Tick Period Constant Definitions                                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define RTC_TICK_1_SEC          0x0UL           /*!< RTC time tick period is 1 second \hideinitializer */
N#define RTC_TICK_1_2_SEC        0x1UL           /*!< RTC time tick period is 1/2 second \hideinitializer */
N#define RTC_TICK_1_4_SEC        0x2UL           /*!< RTC time tick period is 1/4 second \hideinitializer */
N#define RTC_TICK_1_8_SEC        0x3UL           /*!< RTC time tick period is 1/8 second \hideinitializer */
N#define RTC_TICK_1_16_SEC       0x4UL           /*!< RTC time tick period is 1/16 second \hideinitializer */
N#define RTC_TICK_1_32_SEC       0x5UL           /*!< RTC time tick period is 1/32 second \hideinitializer */
N#define RTC_TICK_1_64_SEC       0x6UL           /*!< RTC time tick period is 1/64 second \hideinitializer */
N#define RTC_TICK_1_128_SEC      0x7UL           /*!< RTC time tick period is 1/128 second \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  RTC Day of Week Constant Definitions                                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define RTC_SUNDAY              0x0UL           /*!< Day of the Week is Sunday \hideinitializer */
N#define RTC_MONDAY              0x1UL           /*!< Day of the Week is Monday \hideinitializer */
N#define RTC_TUESDAY             0x2UL           /*!< Day of the Week is Tuesday \hideinitializer */
N#define RTC_WEDNESDAY           0x3UL           /*!< Day of the Week is Wednesday \hideinitializer */
N#define RTC_THURSDAY            0x4UL           /*!< Day of the Week is Thursday \hideinitializer */
N#define RTC_FRIDAY              0x5UL           /*!< Day of the Week is Friday \hideinitializer */
N#define RTC_SATURDAY            0x6UL           /*!< Day of the Week is Saturday \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  RTC Miscellaneous Constant Definitions                                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N#define RTC_YEAR2000            2000UL          /*!< RTC Reference for compute year data \hideinitializer */
N#define RTC_FCR_REFERENCE       32761UL           /*!< RTC Reference for frequency compensation \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  RTC Clock Source Constant Definitions                                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
N#define RTC_CLKSRC_LXT          0x0UL           /*!< Clock Source from LXT \hideinitializer */
N#define RTC_CLKSRC_LIRC         0x1UL           /*!< Clock Source from LIRC \hideinitializer */
N
N/*@}*/ /* end of group RTC_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup RTC_EXPORTED_STRUCTS RTC Exported Structs
N  @{
N*/
N/**
N  * @details    RTC define Time Data Struct
N  */
Ntypedef struct
N{
N    uint32_t u32Year;           /*!< Year value */
N    uint32_t u32Month;          /*!< Month value */
N    uint32_t u32Day;            /*!< Day value */
N    uint32_t u32DayOfWeek;      /*!< Day of week value */
N    uint32_t u32Hour;           /*!< Hour value */
N    uint32_t u32Minute;         /*!< Minute value */
N    uint32_t u32Second;         /*!< Second value */
N    uint32_t u32TimeScale;      /*!< 12-Hour, 24-Hour */
N    uint32_t u32AmPm;           /*!< Only Time Scale select 12-hr used */
N} S_RTC_TIME_DATA_T;
N
N/*@}*/ /* end of group RTC_EXPORTED_STRUCTS */
N
N
N/** @addtogroup RTC_EXPORTED_FUNCTIONS RTC Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Indicate is Leap Year or not
N  *
N  * @param      None
N  *
N  * @retval     0   This year is not a leap year
N  * @retval     1   This year is a leap year
N  *
N  * @details    According to current date, return this year is leap year or not.
N  * \hideinitializer
N  */
N#define RTC_IS_LEAP_YEAR()              (RTC->LEAPYEAR & RTC_LEAPYEAR_LEAPYEAR_Msk ? 1:0)
N
N/**
N  * @brief      Clear RTC Alarm Interrupt Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to clear RTC alarm interrupt flag.
N  * \hideinitializer
N  */
N#define RTC_CLEAR_ALARM_INT_FLAG()   (RTC->INTSTS = RTC_INTSTS_ALMIF_Msk)
N
N/**
N  * @brief      Clear RTC Tick Interrupt Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to clear RTC tick interrupt flag.
N  * \hideinitializer
N  */
N#define RTC_CLEAR_TICK_INT_FLAG()    (RTC->INTSTS = RTC_INTSTS_TICKIF_Msk)
N
N/**
N  * @brief      Get RTC Alarm Interrupt Flag
N  *
N  * @param      None
N  *
N  * @retval     0   RTC alarm interrupt did not occur
N  * @retval     1   RTC alarm interrupt occurred
N  *
N  * @details    This macro indicates RTC alarm interrupt occurred or not.
N  * \hideinitializer
N  */
N#define RTC_GET_ALARM_INT_FLAG()         ((RTC->INTSTS & RTC_INTSTS_ALMIF_Msk)? 1:0)
N
N/**
N  * @brief      Get RTC Time Tick Interrupt Flag
N  *
N  * @param      None
N  *
N  * @retval     0   RTC time tick interrupt did not occur
N  * @retval     1   RTC time tick interrupt occurred
N  *
N  * @details    This macro indicates RTC time tick interrupt occurred or not.
N  * \hideinitializer
N  */
N#define RTC_GET_TICK_INT_FLAG()          ((RTC->INTSTS & RTC_INTSTS_TICKIF_Msk)? 1:0)
N
N/**
N  * @brief      Enable RTC Tick Wake-up Function
N  *
N * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to enable RTC tick interrupt wake-up function.
N  * \hideinitializer
N  */
N#define RTC_ENABLE_TICK_WAKEUP()         ((RTC->INTEN |= RTC_INTEN_TICKIEN_Msk))
N
N/**
N  * @brief      Disable RTC Tick Wake-up Function
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to disable RTC tick interrupt wake-up function.
N  * \hideinitializer
N  */
N#define RTC_DISABLE_TICK_WAKEUP()        ((RTC->INTEN &= ~RTC_INTEN_TICKIEN_Msk));
N
N/**
N * @brief      Enable RTC Alarm Wake-up Function
N *
N * @param      None
N *
N * @return     None
N *
N * @details    This macro is used to enable RTC Alarm interrupt wake-up function.
N * \hideinitializer
N */
N#define RTC_ENABLE_ALARM_WAKEUP()         ((RTC->INTEN |= RTC_INTEN_ALMIEN_Msk))
N
N/**
N  * @brief      Disable RTC Alarm Wake-up Function
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to disable RTC Alarm interrupt wake-up function.
N  * \hideinitializer
N  */
N#define RTC_DISABLE_ALARM_WAKEUP()        ((RTC->INTEN &= ~RTC_INTEN_ALMIEN_Msk));
N
N/**
N  * @brief      Select RTC Clock Source
N  *
N  * @param[in]  u32ClkSrc      Specify the clock source. It consists of:
N  *                                     - \ref RTC_CLKSRC_LXT   : Clock source from LXT
N  *                                     - \ref RTC_CLKSRC_LIRC  : Clock source from LIRC
N  * @return     None
N  *
N  * @details    This macro is used to select RTC clock source.
N  * \hideinitializer
N  */
N#define RTC_CLKSRCSEL(u32ClkSrc)        (RTC->LXTCTL = (RTC->LXTCTL & (~RTC_LXTCTL_C32KS_Msk)) | (u32ClkSrc << RTC_LXTCTL_C32KS_Pos)); 
N
Nvoid RTC_Open(S_RTC_TIME_DATA_T *psPt);
Nvoid RTC_Close(void);
Nvoid RTC_32KCalibration(int32_t i32FrequencyX10000);
Nvoid RTC_GetDateAndTime(S_RTC_TIME_DATA_T *psPt);
Nvoid RTC_GetAlarmDateAndTime(S_RTC_TIME_DATA_T *psPt);
Nvoid RTC_SetDateAndTime(S_RTC_TIME_DATA_T *psPt);
Nvoid RTC_SetAlarmDateAndTime(S_RTC_TIME_DATA_T *psPt);
Nvoid RTC_SetDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day, uint32_t u32DayOfWeek);
Nvoid RTC_SetTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm);
Nvoid RTC_SetAlarmDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day);
Nvoid RTC_SetAlarmTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm);
Nvoid RTC_SetAlarmDateMask(uint8_t u8IsTenYMsk, uint8_t u8IsYMsk, uint8_t u8IsTenMMsk, uint8_t u8IsMMsk, uint8_t u8IsTenDMsk, uint8_t u8IsDMsk);
Nvoid RTC_SetAlarmTimeMask(uint8_t u8IsTenHMsk, uint8_t u8IsHMsk, uint8_t u8IsTenMMsk, uint8_t u8IsMMsk, uint8_t u8IsTenSMsk, uint8_t u8IsSMsk);
Nuint32_t RTC_GetDayOfWeek(void);
Nvoid RTC_SetTickPeriod(uint32_t u32TickSelection);
Nvoid RTC_EnableInt(uint32_t u32IntFlagMask);
Nvoid RTC_DisableInt(uint32_t u32IntFlagMask);
N
N/*@}*/ /* end of group RTC_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group RTC_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __RTC_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 578 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "hdiv.h"
L 1 "..\..\..\Library\StdDriver\inc\hdiv.h" 1
N/**************************************************************************//**
N * @file     hdiv.h
N * @version  V1.00
N * $Revision: 1 $
N * $Date: 18/07/25 3:42p $
N * @brief    M031 series Hardware Divider(HDIV) driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __HDIV_H__
N#define __HDIV_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup HDIV_Driver HDIV Driver
N  @{
N*/
N
N/** @addtogroup HDIV_EXPORTED_FUNCTIONS HDIV Exported Functions
N  @{
N*/
N
N/**
N * @brief      Division function to calculate (x/y)
N *
N * @param[in]  x the dividend of the division
N * @param[in]  y the divisor of the division
N *
N * @return     The result of (x/y)
N *
N * @details    This is a division function to calculate x/y
N *
N */
Nstatic __INLINE int32_t HDIV_Div(int32_t x, int16_t y)
Xstatic __inline int32_t HDIV_Div(int32_t x, int16_t y)
N{
N    uint32_t *p32;
N
N    p32 = (uint32_t *)HDIV_BASE;
X    p32 = (uint32_t *)((( uint32_t)0x40000000) + 0x14000);
N    *p32++ = x;
N    *p32++ = y;
N    return *p32;
N}
N
N
N/**
N * @brief      To calculate the remainder of x/y, i.e., the result of x mod y.
N *
N * @param[in]  x the dividend of the division
N * @param[in]  y the divisor of the division
N *
N * @return     The remainder of (x/y)
N *
N * @details    This function is used to calculate the remainder of x/y.
N */
Nstatic __INLINE int16_t HDIV_Mod(int32_t x, int16_t y)
Xstatic __inline int16_t HDIV_Mod(int32_t x, int16_t y)
N{
N    uint32_t *p32;
N
N    p32 = (uint32_t *)HDIV_BASE;
X    p32 = (uint32_t *)((( uint32_t)0x40000000) + 0x14000);
N    *p32++ = x;
N    *p32++ = y;
N    return p32[1];
N}
N
N/*@}*/ /* end of group HDIV_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group HDIV_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__HDIV_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
N
N
L 579 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "timer.h"
L 1 "..\..\..\Library\StdDriver\inc\timer.h" 1
N/**************************************************************************//**
N * @file     timer.h
N * @version  V0.10
N * $Revision: 6 $
N * $Date: 18/07/13 4:59p $
N * @brief    M031 Series Timer Controller (TIMER) Driver Header File
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __TIMER_H__
N#define __TIMER_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup TIMER_Driver TIMER Driver
N  @{
N*/
N
N/** @addtogroup TIMER_EXPORTED_CONSTANTS TIMER Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  TIMER Operation Mode, External Counter and Capture Mode Constant Definitions                           */
N/*---------------------------------------------------------------------------------------------------------*/
N#define TIMER_ONESHOT_MODE                      (0UL << TIMER_CTL_OPMODE_Pos)      /*!< Timer working in one-shot mode              \hideinitializer */
N#define TIMER_PERIODIC_MODE                     (1UL << TIMER_CTL_OPMODE_Pos)      /*!< Timer working in periodic mode              \hideinitializer */
N#define TIMER_TOGGLE_MODE                       (2UL << TIMER_CTL_OPMODE_Pos)      /*!< Timer working in toggle-output mode         \hideinitializer */
N#define TIMER_CONTINUOUS_MODE                   (3UL << TIMER_CTL_OPMODE_Pos)      /*!< Timer working in continuous counting mode   \hideinitializer */
N
N#define TIMER_TOUT_PIN_FROM_TX                  (0UL << TIMER_CTL_TGLPINSEL_Pos)   /*!< Timer toggle-output pin is from Tx pin      \hideinitializer */
N#define TIMER_TOUT_PIN_FROM_TX_EXT              (1UL << TIMER_CTL_TGLPINSEL_Pos)   /*!< Timer toggle-output pin is from Tx_EXT pin  \hideinitializer */
N
N#define TIMER_CAPTURE_FREE_COUNTING_MODE        (0UL << TIMER_EXTCTL_CAPFUNCS_Pos) /*!< Timer capture event to get timer counter value  \hideinitializer */
N#define TIMER_CAPTURE_COUNTER_RESET_MODE        (1UL << TIMER_EXTCTL_CAPFUNCS_Pos) /*!< Timer capture event to reset timer counter      \hideinitializer */
N
N#define TIMER_CAPTURE_FALLING_EDGE              (0UL << TIMER_EXTCTL_CAPEDGE_Pos)  /*!< Falling edge detection to trigger timer capture \hideinitializer */
N#define TIMER_CAPTURE_RISING_EDGE               (1UL << TIMER_EXTCTL_CAPEDGE_Pos)  /*!< Rising edge detection to trigger timer capture  \hideinitializer */
N#define TIMER_CAPTURE_FALLING_AND_RISING_EDGE   (2UL << TIMER_EXTCTL_CAPEDGE_Pos)  /*!< Both falling and rising edge detection to trigger timer capture     \hideinitializer */
N
N#define TIMER_COUNTER_FALLING_EDGE              (0UL << TIMER_EXTCTL_CNTPHASE_Pos) /*!< Counter increase on falling edge detection  \hideinitializer */
N#define TIMER_COUNTER_RISING_EDGE               (1UL << TIMER_EXTCTL_CNTPHASE_Pos) /*!< Counter increase on rising edge detection   \hideinitializer */
N
N#define TIMER_TRGSRC_TIMEOUT_EVENT              (0UL << TIMER_CTL_TRGSSEL_Pos)     /*!< Trigger source from Timeout event   \hideinitializer */
N#define TIMER_TRGSRC_CAPTURE_EVENT              (1UL << TIMER_CTL_TRGSSEL_Pos)     /*!< Trigger source from Capture event   \hideinitializer */
N
N#define TIMER_CAPSRC_TX_EXT                     (0UL << TIMER_CTL_CAPSRC_Pos)      /*!< Capture source from Tx_EXT pin      \hideinitializer */
N#define TIMER_CAPSRC_INTERNAL                   (1UL << TIMER_CTL_CAPSRC_Pos)      /*!< Capture source from Internal event such as LIRC or ACMP0/1  \hideinitializer */
N
N#define TIMER_INTERCAPSEL_ACMP0                 (0UL << TIMER_EXTCTL_INTERCAPSEL_Pos)   /*!< Capture source from Internal event ACMP0   \hideinitializer */
N#define TIMER_INTERCAPSEL_ACMP1                 (1UL << TIMER_EXTCTL_INTERCAPSEL_Pos)   /*!< Capture source from Internal event ACMP1   \hideinitializer */
N#define TIMER_INTERCAPSEL_LIRC                  (5UL << TIMER_EXTCTL_INTERCAPSEL_Pos)   /*!< Capture source from Internal event LIRC    \hideinitializer */
N
N#define TIMER_CAPTURE_FROM_ACMP0                (TIMER_INTERCAPSEL_ACMP0)          /*!< Capture source from Internal event ACMP0   \hideinitializer */
N#define TIMER_CAPTURE_FROM_ACMP1                (TIMER_INTERCAPSEL_ACMP1)          /*!< Capture source from Internal event ACMP1   \hideinitializer */
N#define TIMER_CAPTURE_FROM_LIRC                 (TIMER_INTERCAPSEL_LIRC)           /*!< Capture source from Internal event LIRC    \hideinitializer */
N#define TIMER_CAPTURE_FROM_INTERNAL             (TIMER_CAPTURE_FROM_ACMP0)         /*!< Capture source from Internal event ACMP0   \hideinitializer */
N#define TIMER_CAPTURE_FROM_EXTERNAL             (0xFFUL)                           /*!< Capture source from Tx_EXT pin             \hideinitializer */
N
N#define TIMER_TRG_TO_PWM                        (TIMER_CTL_TRGPWM_Msk)             /*!< Timer trigger PWM   \hideinitializer */
N#define TIMER_TRG_TO_ADC                        (TIMER_CTL_TRGADC_Msk)             /*!< Timer trigger ADC   \hideinitializer */
N#define TIMER_TRG_TO_PDMA                       (TIMER_CTL_TRGPDMA_Msk)            /*!< Timer trigger PDMA  \hideinitializer */
N#define TIMER_TRG_TO_BPWM                       (TIMER_CTL_TRGBPWM_Msk)            /*!< Timer trigger BPWM  \hideinitializer */
N
N#define TIMER_CMP_MAX_VALUE                     (0xFFFFFFUL)                       /*!< Max Timer compare value \hideinitializer */
N
N#define TIMER_TIMEOUT_ERR                       (-1L)                              /*!< TIMER operation abort due to timeout error \hideinitializer */
N
N/*@}*/ /* end of group TIMER_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup TIMER_EXPORTED_FUNCTIONS TIMER Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Set Timer Compared Value
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  * @param[in]  u32Value    Timer compare value. Valid values are between 2 to 0xFFFFFF.
N  *
N  * @return     None
N  *
N  * @details    This macro is used to set timer compared value to adjust timer time-out interval.
N  * @note       1. Never write 0x0 or 0x1 in this field, or the core will run into unknown state.
N  * @note       2. If update timer compared value in continuous counting mode, timer counter value will keep counting continuously.
N  *                But if timer is operating at other modes, the timer up counter will restart counting and start from 0.
N  *
N  * \hideinitializer
N  */
N#define TIMER_SET_CMP_VALUE(timer, u32Value)        ((timer)->CMP = (u32Value))
N
N/**
N  * @brief      Set Timer Prescale Value
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  * @param[in]  u32Value    Timer prescale value. Valid values are between 0 to 0xFF.
N  *
N  * @return     None
N  *
N  * @details    This macro is used to set timer prescale value and timer source clock will be divided by (prescale + 1) \n
N  *             before it is fed into timer.
N  *
N  * \hideinitializer
N  */
N#define TIMER_SET_PRESCALE_VALUE(timer, u32Value)   ((timer)->CTL = ((timer)->CTL & ~TIMER_CTL_PSC_Msk) | (u32Value))
N
N/**
N  * @brief      Check specify Timer Status
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @retval     0   Timer 24-bit up counter is inactive
N  * @retval     1   Timer 24-bit up counter is active
N  *
N  * @details    This macro is used to check if specify Timer counter is inactive or active.
N  *
N  * \hideinitializer
N  */
N#define TIMER_IS_ACTIVE(timer)                      (((timer)->CTL & TIMER_CTL_ACTSTS_Msk)? 1 : 0)
N
N/**
N  * @brief      Select Toggle-output Pin
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  * @param[in]  u32ToutSel  Toggle-output pin selection, valid values are:
N  *                         - \ref TIMER_TOUT_PIN_FROM_TX
N  *                         - \ref TIMER_TOUT_PIN_FROM_TX_EXT
N  *
N  * @return     None
N  *
N  * @details    This macro is used to select timer toggle-output pin is output on Tx or Tx_EXT pin.
N  *
N  * \hideinitializer
N  */
N#define TIMER_SELECT_TOUT_PIN(timer, u32ToutSel)    ((timer)->CTL = ((timer)->CTL & ~TIMER_CTL_TGLPINSEL_Msk) | (u32ToutSel))
N
N/**
N  * @brief      Select Timer operating mode
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  * @param[in]  u32OpMode   Operation mode. Possible options are
N  *                         - \ref TIMER_ONESHOT_MODE
N  *                         - \ref TIMER_PERIODIC_MODE
N  *                         - \ref TIMER_TOGGLE_MODE
N  *                         - \ref TIMER_CONTINUOUS_MODE
N  *
N  * @return     None
N  *
N  * \hideinitializer
N  */
N#define TIMER_SET_OPMODE(timer, u32OpMode)   ((timer)->CTL = ((timer)->CTL & ~TIMER_CTL_OPMODE_Msk) | (u32OpMode))
N
N/**
N  * @brief      Start Timer Counting
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to start Timer counting.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_Start(TIMER_T *timer)
Xstatic __inline void TIMER_Start(TIMER_T *timer)
N{
N    timer->CTL |= TIMER_CTL_CNTEN_Msk;
X    timer->CTL |= (0x1ul << (30));
N}
N
N/**
N  * @brief      Stop Timer Counting
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to stop/suspend Timer counting.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_Stop(TIMER_T *timer)
Xstatic __inline void TIMER_Stop(TIMER_T *timer)
N{
N    timer->CTL &= ~TIMER_CTL_CNTEN_Msk;
X    timer->CTL &= ~(0x1ul << (30));
N}
N
N/**
N  * @brief      Enable Timer Interrupt Wake-up Function
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to enable the timer interrupt wake-up function and interrupt source could be time-out interrupt, \n
N  *             counter event interrupt or capture trigger interrupt.
N  * @note       To wake the system from Power-down mode, timer clock source must be ether LXT or LIRC.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_EnableWakeup(TIMER_T *timer)
Xstatic __inline void TIMER_EnableWakeup(TIMER_T *timer)
N{
N    timer->CTL |= TIMER_CTL_WKEN_Msk;
X    timer->CTL |= (0x1ul << (23));
N}
N
N/**
N  * @brief      Disable Timer Wake-up Function
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to disable the timer interrupt wake-up function.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_DisableWakeup(TIMER_T *timer)
Xstatic __inline void TIMER_DisableWakeup(TIMER_T *timer)
N{
N    timer->CTL &= ~TIMER_CTL_WKEN_Msk;
X    timer->CTL &= ~(0x1ul << (23));
N}
N
N/**
N  * @brief      Start Timer Capture Function
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to start Timer capture function.
N  *
N  * \hideinitializer
N  */
N__STATIC_INLINE void TIMER_StartCapture(TIMER_T *timer)
Xstatic __inline void TIMER_StartCapture(TIMER_T *timer)
N{
N    timer->EXTCTL |= TIMER_EXTCTL_CAPEN_Msk;
X    timer->EXTCTL |= (0x1ul << (3));
N}
N
N/**
N  * @brief      Stop Timer Capture Function
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to stop Timer capture function.
N  *
N  * \hideinitializer
N  */
N__STATIC_INLINE void TIMER_StopCapture(TIMER_T *timer)
Xstatic __inline void TIMER_StopCapture(TIMER_T *timer)
N{
N    timer->EXTCTL &= ~TIMER_EXTCTL_CAPEN_Msk;
X    timer->EXTCTL &= ~(0x1ul << (3));
N}
N
N/**
N  * @brief      Enable Capture Pin De-bounce
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to enable the detect de-bounce function of capture pin.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_EnableCaptureDebounce(TIMER_T *timer)
Xstatic __inline void TIMER_EnableCaptureDebounce(TIMER_T *timer)
N{
N    timer->EXTCTL |= TIMER_EXTCTL_CAPDBEN_Msk;
X    timer->EXTCTL |= (0x1ul << (6));
N}
N
N/**
N  * @brief      Disable Capture Pin De-bounce
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to disable the detect de-bounce function of capture pin.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_DisableCaptureDebounce(TIMER_T *timer)
Xstatic __inline void TIMER_DisableCaptureDebounce(TIMER_T *timer)
N{
N    timer->EXTCTL &= ~TIMER_EXTCTL_CAPDBEN_Msk;
X    timer->EXTCTL &= ~(0x1ul << (6));
N}
N
N/**
N  * @brief      Enable Counter Pin De-bounce
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to enable the detect de-bounce function of counter pin.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_EnableEventCounterDebounce(TIMER_T *timer)
Xstatic __inline void TIMER_EnableEventCounterDebounce(TIMER_T *timer)
N{
N    timer->EXTCTL |= TIMER_EXTCTL_CNTDBEN_Msk;
X    timer->EXTCTL |= (0x1ul << (7));
N}
N
N/**
N  * @brief      Disable Counter Pin De-bounce
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to disable the detect de-bounce function of counter pin.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_DisableEventCounterDebounce(TIMER_T *timer)
Xstatic __inline void TIMER_DisableEventCounterDebounce(TIMER_T *timer)
N{
N    timer->EXTCTL &= ~TIMER_EXTCTL_CNTDBEN_Msk;
X    timer->EXTCTL &= ~(0x1ul << (7));
N}
N
N/**
N  * @brief      Enable Timer Time-out Interrupt
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to enable the timer time-out interrupt function.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_EnableInt(TIMER_T *timer)
Xstatic __inline void TIMER_EnableInt(TIMER_T *timer)
N{
N    timer->CTL |= TIMER_CTL_INTEN_Msk;
X    timer->CTL |= (0x1ul << (29));
N}
N
N/**
N  * @brief      Disable Timer Time-out Interrupt
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to disable the timer time-out interrupt function.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_DisableInt(TIMER_T *timer)
Xstatic __inline void TIMER_DisableInt(TIMER_T *timer)
N{
N    timer->CTL &= ~TIMER_CTL_INTEN_Msk;
X    timer->CTL &= ~(0x1ul << (29));
N}
N
N/**
N  * @brief      Enable Capture Trigger Interrupt
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to enable the timer capture trigger interrupt function.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_EnableCaptureInt(TIMER_T *timer)
Xstatic __inline void TIMER_EnableCaptureInt(TIMER_T *timer)
N{
N    timer->EXTCTL |= TIMER_EXTCTL_CAPIEN_Msk;
X    timer->EXTCTL |= (0x1ul << (5));
N}
N
N/**
N  * @brief      Disable Capture Trigger Interrupt
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to disable the timer capture trigger interrupt function.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_DisableCaptureInt(TIMER_T *timer)
Xstatic __inline void TIMER_DisableCaptureInt(TIMER_T *timer)
N{
N    timer->EXTCTL &= ~TIMER_EXTCTL_CAPIEN_Msk;
X    timer->EXTCTL &= ~(0x1ul << (5));
N}
N
N/**
N  * @brief      Get Timer Time-out Interrupt Flag
N  *
N  * @param[in]  timer   The pointer of the specified Timer module.
N  *
N  * @retval     0   Timer time-out interrupt did not occur
N  * @retval     1   Timer time-out interrupt occurred
N  *
N  * @details    This function indicates timer time-out interrupt occurred or not.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE uint32_t TIMER_GetIntFlag(TIMER_T *timer)
Xstatic __inline uint32_t TIMER_GetIntFlag(TIMER_T *timer)
N{
N    return ((timer->INTSTS & TIMER_INTSTS_TIF_Msk) ? 1 : 0);
X    return ((timer->INTSTS & (0x1ul << (0))) ? 1 : 0);
N}
N
N/**
N  * @brief      Clear Timer Time-out Interrupt Flag
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function clears timer time-out interrupt flag to 0.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_ClearIntFlag(TIMER_T *timer)
Xstatic __inline void TIMER_ClearIntFlag(TIMER_T *timer)
N{
N    timer->INTSTS = TIMER_INTSTS_TIF_Msk;
X    timer->INTSTS = (0x1ul << (0));
N}
N
N/**
N  * @brief      Get Timer Capture Interrupt Flag
N  *
N  * @param[in]  timer   The pointer of the specified Timer module.
N  *
N  * @retval     0   Timer capture interrupt did not occur
N  * @retval     1   Timer capture interrupt occurred
N  *
N  * @details    This function indicates timer capture trigger interrupt occurred or not.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE uint32_t TIMER_GetCaptureIntFlag(TIMER_T *timer)
Xstatic __inline uint32_t TIMER_GetCaptureIntFlag(TIMER_T *timer)
N{
N    return timer->EINTSTS;
N}
N
N/**
N  * @brief      Clear Timer Capture Interrupt Flag
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function clears timer capture trigger interrupt flag to 0.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_ClearCaptureIntFlag(TIMER_T *timer)
Xstatic __inline void TIMER_ClearCaptureIntFlag(TIMER_T *timer)
N{
N    timer->EINTSTS = TIMER_EINTSTS_CAPIF_Msk;
X    timer->EINTSTS = (0x1ul << (0));
N}
N
N/**
N  * @brief      Get Timer Wake-up Flag
N  *
N  * @param[in]  timer   The pointer of the specified Timer module.
N  *
N  * @retval     0   Timer does not cause CPU wake-up
N  * @retval     1   Timer interrupt event cause CPU wake-up
N  *
N  * @details    This function indicates timer interrupt event has waked up system or not.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE uint32_t TIMER_GetWakeupFlag(TIMER_T *timer)
Xstatic __inline uint32_t TIMER_GetWakeupFlag(TIMER_T *timer)
N{
N    return (timer->INTSTS & TIMER_INTSTS_TWKF_Msk ? 1 : 0);
X    return (timer->INTSTS & (0x1ul << (1)) ? 1 : 0);
N}
N
N/**
N  * @brief      Clear Timer Wake-up Flag
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function clears the timer wake-up system flag to 0.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE void TIMER_ClearWakeupFlag(TIMER_T *timer)
Xstatic __inline void TIMER_ClearWakeupFlag(TIMER_T *timer)
N{
N    timer->INTSTS = TIMER_INTSTS_TWKF_Msk;
X    timer->INTSTS = (0x1ul << (1));
N}
N
N/**
N  * @brief      Get Capture value
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     24-bit Capture Value
N  *
N  * @details    This function reports the current 24-bit timer capture value.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE uint32_t TIMER_GetCaptureData(TIMER_T *timer)
Xstatic __inline uint32_t TIMER_GetCaptureData(TIMER_T *timer)
N{
N    return timer->CAP;
N}
N
N/**
N  * @brief      Get Counter value
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     24-bit Counter Value
N  *
N  * @details    This function reports the current 24-bit timer counter value.
N  *
N  * \hideinitializer
N  */
Nstatic __INLINE uint32_t TIMER_GetCounter(TIMER_T *timer)
Xstatic __inline uint32_t TIMER_GetCounter(TIMER_T *timer)
N{
N    return timer->CNT;
N}
N
N/**
N  * @brief      Reset Counter
N  *
N  * @param[in]  timer       The pointer of the specified Timer module.
N  *
N  * @return     None
N  *
N  * @details    This function is used to reset current counter value and internal prescale counter value.
N  *
N  * \hideinitializer
N  */
N__STATIC_INLINE void TIMER_ResetCounter(TIMER_T *timer)
Xstatic __inline void TIMER_ResetCounter(TIMER_T *timer)
N{
N    timer->CTL |= TIMER_CTL_RSTCNT_Msk;
X    timer->CTL |= (0x1ul << (26));
N    while((timer->CTL & TIMER_CTL_RSTCNT_Msk) == TIMER_CTL_RSTCNT_Msk);
X    while((timer->CTL & (0x1ul << (26))) == (0x1ul << (26)));
N}
N
N
Nuint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq);
Nvoid TIMER_Close(TIMER_T *timer);
Nint32_t TIMER_Delay(TIMER_T *timer, uint32_t u32Usec);
Nvoid TIMER_EnableCapture(TIMER_T *timer, uint32_t u32CapMode, uint32_t u32Edge);
Nvoid TIMER_DisableCapture(TIMER_T *timer);
Nvoid TIMER_EnableEventCounter(TIMER_T *timer, uint32_t u32Edge);
Nvoid TIMER_DisableEventCounter(TIMER_T *timer);
Nuint32_t TIMER_GetModuleClock(TIMER_T *timer);
Nvoid TIMER_EnableFreqCounter(TIMER_T *timer,
N                             uint32_t u32DropCount,
N                             uint32_t u32Timeout,
N                             uint32_t u32EnableInt);
Nvoid TIMER_DisableFreqCounter(TIMER_T *timer);
Nvoid TIMER_SetTriggerSource(TIMER_T *timer, uint32_t u32Src);
Nvoid TIMER_SetTriggerTarget(TIMER_T *timer, uint32_t u32Mask);
Nvoid TIMER_CaptureSelect(TIMER_T *timer, uint32_t u32Src);
N
N/*@}*/ /* end of group TIMER_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group TIMER_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__TIMER_H__
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 580 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "uart.h"
L 1 "..\..\..\Library\StdDriver\inc\uart.h" 1
N/****************************************************************************
N * @file     uart.h
N * @version  V1.00
N * @brief    M031 series UART driver source file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __UART_H__
N#define __UART_H__
N
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup UART_Driver UART Driver
N  @{
N*/
N
N/** @addtogroup UART_EXPORTED_CONSTANTS UART Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART FIFO size constants definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N
N#define UART0_FIFO_SIZE 16ul /*!< UART0 supports separated receive/transmit 16/16 bytes entry FIFO \hideinitializer */
N#define UART1_FIFO_SIZE 16ul /*!< UART1 supports separated receive/transmit 16/16 bytes entry FIFO \hideinitializer */
N#define UART2_FIFO_SIZE 1ul  /*!< UART2 supports separated receive/transmit 1/1 bytes entry FIFO \hideinitializer */
N#define UART3_FIFO_SIZE 1ul  /*!< UART3 supports separated receive/transmit 1/1 bytes entry FIFO \hideinitializer */
N#define UART4_FIFO_SIZE 16ul /*!< UART4 supports separated receive/transmit 16/16 bytes entry FIFO \hideinitializer */
N#define UART5_FIFO_SIZE 16ul /*!< UART5 supports separated receive/transmit 16/16 bytes entry FIFO \hideinitializer */
N#define UART6_FIFO_SIZE 1ul  /*!< UART6 supports separated receive/transmit 1/1 bytes entry FIFO \hideinitializer */
N#define UART7_FIFO_SIZE 1ul  /*!< UART7 supports separated receive/transmit 1/1 bytes entry FIFO \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART_FIFO constants definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N
N#define UART_FIFO_RFITL_1BYTE      (0x0ul << UART_FIFO_RFITL_Pos)   /*!< UART_FIFO setting to set RX FIFO Trigger Level to 1 byte \hideinitializer */
N#define UART_FIFO_RFITL_4BYTES     (0x1ul << UART_FIFO_RFITL_Pos)   /*!< UART_FIFO setting to set RX FIFO Trigger Level to 4 bytes \hideinitializer */
N#define UART_FIFO_RFITL_8BYTES     (0x2ul << UART_FIFO_RFITL_Pos)   /*!< UART_FIFO setting to set RX FIFO Trigger Level to 8 bytes \hideinitializer */
N#define UART_FIFO_RFITL_14BYTES    (0x3ul << UART_FIFO_RFITL_Pos)   /*!< UART_FIFO setting to set RX FIFO Trigger Level to 14 bytes \hideinitializer */
N
N#define UART_FIFO_RTSTRGLV_1BYTE      (0x0ul << UART_FIFO_RTSTRGLV_Pos)  /*!< UART_FIFO setting to set RTS Trigger Level to 1 byte \hideinitializer */
N#define UART_FIFO_RTSTRGLV_4BYTES     (0x1ul << UART_FIFO_RTSTRGLV_Pos)  /*!< UART_FIFO setting to set RTS Trigger Level to 4 bytes \hideinitializer */
N#define UART_FIFO_RTSTRGLV_8BYTES     (0x2ul << UART_FIFO_RTSTRGLV_Pos)  /*!< UART_FIFO setting to set RTS Trigger Level to 8 bytes \hideinitializer */
N#define UART_FIFO_RTSTRGLV_14BYTES    (0x3ul << UART_FIFO_RTSTRGLV_Pos)  /*!< UART_FIFO setting to set RTS Trigger Level to 14 bytes \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART_LINE constants definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_WORD_LEN_5     (0ul) /*!< UART_LINE setting to set UART word length to 5 bits \hideinitializer */
N#define UART_WORD_LEN_6     (1ul) /*!< UART_LINE setting to set UART word length to 6 bits \hideinitializer */
N#define UART_WORD_LEN_7     (2ul) /*!< UART_LINE setting to set UART word length to 7 bits \hideinitializer */
N#define UART_WORD_LEN_8     (3ul) /*!< UART_LINE setting to set UART word length to 8 bits \hideinitializer */
N
N#define UART_PARITY_NONE    (0x0ul << UART_LINE_PBE_Pos) /*!< UART_LINE setting to set UART as no parity   \hideinitializer */
N#define UART_PARITY_ODD     (0x1ul << UART_LINE_PBE_Pos) /*!< UART_LINE setting to set UART as odd parity  \hideinitializer */
N#define UART_PARITY_EVEN    (0x3ul << UART_LINE_PBE_Pos) /*!< UART_LINE setting to set UART as even parity \hideinitializer */
N#define UART_PARITY_MARK    (0x5ul << UART_LINE_PBE_Pos) /*!< UART_LINE setting to keep parity bit as '1'  \hideinitializer */
N#define UART_PARITY_SPACE   (0x7ul << UART_LINE_PBE_Pos) /*!< UART_LINE setting to keep parity bit as '0'  \hideinitializer */
N
N#define UART_STOP_BIT_1     (0x0ul << UART_LINE_NSB_Pos) /*!< UART_LINE setting for one stop bit  \hideinitializer */
N#define UART_STOP_BIT_1_5   (0x1ul << UART_LINE_NSB_Pos) /*!< UART_LINE setting for 1.5 stop bit when 5-bit word length  \hideinitializer */
N#define UART_STOP_BIT_2     (0x1ul << UART_LINE_NSB_Pos) /*!< UART_LINE setting for two stop bit when 6, 7, 8-bit word length \hideinitializer */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART RTS ACTIVE LEVEL constants definitions                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_RTS_IS_LOW_LEV_ACTIVE   (0x1ul << UART_MODEM_RTSACTLV_Pos) /*!< Set RTS is Low Level Active \hideinitializer */
N#define UART_RTS_IS_HIGH_LEV_ACTIVE  (0x0ul << UART_MODEM_RTSACTLV_Pos) /*!< Set RTS is High Level Active \hideinitializer */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART_IRDA constants definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_IRDA_TXEN      (0x1ul << UART_IRDA_TXEN_Pos) /*!< Set IrDA function Tx mode \hideinitializer */
N#define UART_IRDA_RXEN      (0x0ul << UART_IRDA_TXEN_Pos) /*!< Set IrDA function Rx mode \hideinitializer */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART_FUNCSEL constants definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_FUNCSEL_UART  (0x0ul << UART_FUNCSEL_FUNCSEL_Pos) /*!< UART_FUNCSEL setting to set UART Function  (Default) \hideinitializer */
N#define UART_FUNCSEL_LIN   (0x1ul << UART_FUNCSEL_FUNCSEL_Pos) /*!< UART_FUNCSEL setting to set LIN Function             \hideinitializer */
N#define UART_FUNCSEL_IrDA  (0x2ul << UART_FUNCSEL_FUNCSEL_Pos) /*!< UART_FUNCSEL setting to set IrDA Function            \hideinitializer */
N#define UART_FUNCSEL_RS485 (0x3ul << UART_FUNCSEL_FUNCSEL_Pos) /*!< UART_FUNCSEL setting to set RS485 Function           \hideinitializer */
N#define UART_FUNCSEL_SINGLE_WIRE (0x4ul << UART_FUNCSEL_FUNCSEL_Pos) /*!< UART_FUNCSEL setting to set Single Wire Function           \hideinitializer */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART BAUDRATE MODE constants definitions                                                                */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_BAUD_MODE0     (0ul) /*!< Set UART Baudrate Mode is Mode0 \hideinitializer */
N#define UART_BAUD_MODE2     (UART_BAUD_BAUDM1_Msk | UART_BAUD_BAUDM0_Msk) /*!< Set UART Baudrate Mode is Mode2 \hideinitializer */
N
N
N/*@}*/ /* end of group UART_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup UART_EXPORTED_FUNCTIONS UART Exported Functions
N  @{
N*/
N
N
N/**
N *    @brief        Calculate UART baudrate mode0 divider
N *
N *    @param[in]    u32SrcFreq      UART clock frequency
N *    @param[in]    u32BaudRate     Baudrate of UART module
N *
N *    @return       UART baudrate mode0 divider
N *
N *    @details      This macro calculate UART baudrate mode0 divider.
N *    \hideinitializer
N */
N#define UART_BAUD_MODE0_DIVIDER(u32SrcFreq, u32BaudRate)    ((((u32SrcFreq) + ((u32BaudRate)*8ul)) / (u32BaudRate) >> 4ul)-2ul)
N
N
N/**
N *    @brief        Calculate UART baudrate mode2 divider
N *
N *    @param[in]    u32SrcFreq      UART clock frequency
N *    @param[in]    u32BaudRate     Baudrate of UART module
N *
N *    @return       UART baudrate mode2 divider
N *
N *    @details      This macro calculate UART baudrate mode2 divider.
N *    \hideinitializer
N */
N#define UART_BAUD_MODE2_DIVIDER(u32SrcFreq, u32BaudRate)    ((((u32SrcFreq) + ((u32BaudRate)/2ul)) / (u32BaudRate))-2ul)
N
N
N/**
N *    @brief        Write UART data
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *    @param[in]    u8Data  Data byte to transmit.
N *
N *    @return       None
N *
N *    @details      This macro write Data to Tx data register.
N *    \hideinitializer
N */
N#define UART_WRITE(uart, u8Data)    ((uart)->DAT = (u8Data))
N
N
N/**
N *    @brief        Read UART data
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @return       The oldest data byte in RX FIFO.
N *
N *    @details      This macro read Rx data register.
N *    \hideinitializer
N */
N#define UART_READ(uart)    ((uart)->DAT)
N
N
N/**
N *    @brief        Get Tx empty
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @retval       0   Tx FIFO is not empty
N *    @retval       >=1 Tx FIFO is empty
N *
N *    @details      This macro get Transmitter FIFO empty register value.
N *    \hideinitializer
N */
N#define UART_GET_TX_EMPTY(uart)    ((uart)->FIFOSTS & UART_FIFOSTS_TXEMPTY_Msk)
N
N
N/**
N *    @brief        Get Rx empty
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @retval       0   Rx FIFO is not empty
N *    @retval       >=1 Rx FIFO is empty
N *
N *    @details      This macro get Receiver FIFO empty register value.
N *    \hideinitializer
N */
N#define UART_GET_RX_EMPTY(uart)    ((uart)->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk)
N
N
N/**
N *    @brief        Check specified UART port transmission is over.
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @retval       0 Tx transmission is not over
N *    @retval       1 Tx transmission is over
N *
N *    @details      This macro return Transmitter Empty Flag register bit value.
N *                  It indicates if specified UART port transmission is over nor not.
N *    \hideinitializer
N */
N#define UART_IS_TX_EMPTY(uart)    (((uart)->FIFOSTS & UART_FIFOSTS_TXEMPTYF_Msk) >> UART_FIFOSTS_TXEMPTYF_Pos)
N
N
N/**
N *    @brief        Wait specified UART port transmission is over
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @return       None
N *
N *    @details      This macro wait specified UART port transmission is over.
N *    \hideinitializer
N */
N#define UART_WAIT_TX_EMPTY(uart)    while(!((((uart)->FIFOSTS) & UART_FIFOSTS_TXEMPTYF_Msk) >> UART_FIFOSTS_TXEMPTYF_Pos))
N
N
N/**
N *    @brief        Check RX is ready or not
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @retval       0 The number of bytes in the RX FIFO is less than the RFITL
N *    @retval       1 The number of bytes in the RX FIFO equals or larger than RFITL
N *
N *    @details      This macro check receive data available interrupt flag is set or not.
N *    \hideinitializer
N */
N#define UART_IS_RX_READY(uart)    (((uart)->INTSTS & UART_INTSTS_RDAIF_Msk)>>UART_INTSTS_RDAIF_Pos)
N
N
N/**
N *    @brief        Check TX FIFO is full or not
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @retval       1 TX FIFO is full
N *    @retval       0 TX FIFO is not full
N *
N *    @details      This macro check TX FIFO is full or not.
N *    \hideinitializer
N */
N#define UART_IS_TX_FULL(uart)    (((uart)->FIFOSTS & UART_FIFOSTS_TXFULL_Msk)>>UART_FIFOSTS_TXFULL_Pos)
N
N
N/**
N *    @brief        Check RX FIFO is full or not
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @retval       1 RX FIFO is full
N *    @retval       0 RX FIFO is not full
N *
N *    @details      This macro check RX FIFO is full or not.
N *    \hideinitializer
N */
N#define UART_IS_RX_FULL(uart)    (((uart)->FIFOSTS & UART_FIFOSTS_RXFULL_Msk)>>UART_FIFOSTS_RXFULL_Pos)
N
N
N/**
N *    @brief        Get Tx full register value
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @retval       0   Tx FIFO is not full.
N *    @retval       >=1 Tx FIFO is full.
N *
N *    @details      This macro get Tx full register value.
N *    \hideinitializer
N */
N#define UART_GET_TX_FULL(uart)    ((uart)->FIFOSTS & UART_FIFOSTS_TXFULL_Msk)
N
N
N/**
N *    @brief        Get Rx full register value
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @retval       0   Rx FIFO is not full.
N *    @retval       >=1 Rx FIFO is full.
N *
N *    @details      This macro get Rx full register value.
N *    \hideinitializer
N */
N#define UART_GET_RX_FULL(uart)    ((uart)->FIFOSTS & UART_FIFOSTS_RXFULL_Msk)
N
N/**
N *    @brief        Rx Idle Status register value
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @retval       0 Rx is busy.
N *    @retval       1 Rx is Idle(Default)
N *
N *    @details      This macro get Rx Idle Status register value.
N *    \hideinitializer
N */
N#define UART_RX_IDLE(uart) (((uart)->FIFOSTS & UART_FIFOSTS_RXIDLE_Msk )>> UART_FIFOSTS_RXIDLE_Pos)
N
N
N/**
N *    @brief        Enable specified UART interrupt
N *
N *    @param[in]    uart        The pointer of the specified UART module
N *    @param[in]    u32eIntSel  Interrupt type select
N *                              - \ref UART_INTEN_TXENDIEN_Msk   : Transmitter Empty interrupt
N *                              - \ref UART_INTEN_ABRIEN_Msk     : Auto baud rate interrupt
N *                              - \ref UART_INTEN_SWBEIEN_Msk    : Single-wire bit error detection interrupt
N *                              - \ref UART_INTEN_RXPDMAEN_Msk   : RX PDMA interrupt
N *                              - \ref UART_INTEN_TXPDMAEN_Msk   : TX PDMA interrupt 
N *                              - \ref UART_INTEN_WKIEN_Msk      : Wakeup interrupt
N *                              - \ref UART_INTEN_BUFERRIEN_Msk  : Buffer Error interrupt
N *                              - \ref UART_INTEN_RXTOIEN_Msk    : Rx time-out interrupt
N *                              - \ref UART_INTEN_MODEMIEN_Msk   : Modem interrupt
N *                              - \ref UART_INTEN_RLSIEN_Msk     : Rx Line status interrupt
N *                              - \ref UART_INTEN_THREIEN_Msk    : Tx empty interrupt
N *                              - \ref UART_INTEN_RDAIEN_Msk     : Rx ready interrupt
N *
N *    @return       None
N *
N *    @details      This macro enable specified UART interrupt.
N *    \hideinitializer
N */
N#define UART_ENABLE_INT(uart, u32eIntSel)    ((uart)->INTEN |= (u32eIntSel))
N
N
N/**
N *    @brief        Disable specified UART interrupt
N *
N *    @param[in]    uart        The pointer of the specified UART module
N *    @param[in]    u32eIntSel  Interrupt type select
N *                              - \ref UART_INTEN_TXENDIEN_Msk   : Transmitter Empty interrupt
N *                              - \ref UART_INTEN_ABRIEN_Msk     : Auto baud rate interrupt
N *                              - \ref UART_INTEN_SWBEIEN_Msk    : Single-wire bit error detection interrupt
N *                              - \ref UART_INTEN_RXPDMAEN_Msk   : RX PDMA interrupt
N *                              - \ref UART_INTEN_TXPDMAEN_Msk   : TX PDMA interrupt  
N *                              - \ref UART_INTEN_WKIEN_Msk      : Wakeup interrupt
N *                              - \ref UART_INTEN_BUFERRIEN_Msk  : Buffer Error interrupt
N *                              - \ref UART_INTEN_RXTOIEN_Msk    : Rx time-out interrupt
N *                              - \ref UART_INTEN_MODEMIEN_Msk   : Modem status interrupt
N *                              - \ref UART_INTEN_RLSIEN_Msk     : Receive Line status interrupt
N *                              - \ref UART_INTEN_THREIEN_Msk    : Tx empty interrupt
N *                              - \ref UART_INTEN_RDAIEN_Msk     : Rx ready interrupt
N *
N *    @return       None
N *
N *    @details      This macro enable specified UART interrupt.
N *    \hideinitializer
N */
N#define UART_DISABLE_INT(uart, u32eIntSel)    ((uart)->INTEN &= ~ (u32eIntSel))
N
N
N/**
N *    @brief        Get specified interrupt flag/status
N *
N *    @param[in]    uart            The pointer of the specified UART module
N *    @param[in]    u32eIntTypeFlag Interrupt Type Flag, should be
N *                                  - \ref UART_INTSTS_ABRINT_Msk    : Auto-baud Rate Interrupt Indicator
N *                                  - \ref UART_INTSTS_TXENDINT_Msk  : Transmitter Empty Interrupt Indicator
N *                                  - \ref UART_INTSTS_HWBUFEINT_Msk : In PDMA Mode, Buffer Error Interrupt Indicator
N *                                  - \ref UART_INTSTS_HWTOINT_Msk   : In PDMA Mode, Time-out Interrupt Indicator
N *                                  - \ref UART_INTSTS_HWMODINT_Msk  : In PDMA Mode, MODEM Status Interrupt Indicator
N *                                  - \ref UART_INTSTS_HWRLSINT_Msk  : In PDMA Mode, Receive Line Status Interrupt Indicator
N *                                  - \ref UART_INTSTS_SWBEINT_Msk   : In Single-wire Mode, Bit Error Detect Interrupt Indicator
N *                                  - \ref UART_INTSTS_TXENDIF_Msk   : Transmitter Empty Interrupt Flag
N *                                  - \ref UART_INTSTS_HWBUFEIF_Msk  : In PDMA Mode, Buffer Error Interrupt Flag
N *                                  - \ref UART_INTSTS_HWTOIF_Msk    : In PDMA Mode, Time-out Interrupt Flag
N *                                  - \ref UART_INTSTS_HWMODIF_Msk   : In PDMA Mode, MODEM Interrupt Flag
N *                                  - \ref UART_INTSTS_HWRLSIF_Msk   : In PDMA Mode, Receive Line Status Flag
N *                                  - \ref UART_INTSTS_SWBEIF_Msk    : In Single-wire Mode, Bit Error Detection Interrupt Flag
N *                                  - \ref UART_INTSTS_WKINT_Msk     : Wake-up Interrupt Indicator
N *                                  - \ref UART_INTSTS_BUFERRINT_Msk : Buffer Error Interrupt Indicator
N *                                  - \ref UART_INTSTS_RXTOINT_Msk   : Time-out Interrupt Indicator
N *                                  - \ref UART_INTSTS_MODEMINT_Msk  : Modem Status Interrupt Indicator
N *                                  - \ref UART_INTSTS_RLSINT_Msk    : Receive Line Status Interrupt Indicator
N *                                  - \ref UART_INTSTS_THREINT_Msk   : Transmit Holding Register Empty Interrupt Indicator
N *                                  - \ref UART_INTSTS_RDAINT_Msk    : Receive Data Available Interrupt Indicator
N *                                  - \ref UART_INTSTS_WKIF_Msk      : Wake-up Interrupt Flag
N *                                  - \ref UART_INTSTS_BUFERRIF_Msk  : Buffer Error Interrupt Flag
N *                                  - \ref UART_INTSTS_RXTOIF_Msk    : Rx Time-out Interrupt Flag
N *                                  - \ref UART_INTSTS_MODEMIF_Msk   : Modem Interrupt Flag
N *                                  - \ref UART_INTSTS_RLSIF_Msk     : Receive Line Status Interrupt Flag
N *                                  - \ref UART_INTSTS_THREIF_Msk    : Tx Empty Interrupt Flag
N *                                  - \ref UART_INTSTS_RDAIF_Msk     : Rx Ready Interrupt Flag
N *
N *    @retval       0 The specified interrupt is not happened.
N *    @retval       1 The specified interrupt is happened.
N *
N *    @details      This macro get specified interrupt flag or interrupt indicator status.
N *    \hideinitializer
N */
N#define UART_GET_INT_FLAG(uart,u32eIntTypeFlag)    (((uart)->INTSTS & (u32eIntTypeFlag))?1:0)
N
N
N/**
N *    @brief        Clear RS-485 Address Byte Detection Flag
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @return       None
N *
N *    @details      This macro clear RS-485 address byte detection flag.
N *    \hideinitializer
N */
N#define UART_RS485_CLEAR_ADDR_FLAG(uart)    ((uart)->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk)
N
N
N/**
N *    @brief        Get RS-485 Address Byte Detection Flag
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @retval       0 Receiver detects a data that is not an address bit.
N *    @retval       1 Receiver detects a data that is an address bit.
N *
N *    @details      This macro get RS-485 address byte detection flag.
N *    \hideinitializer
N */
N#define UART_RS485_GET_ADDR_FLAG(uart)    (((uart)->FIFOSTS  & UART_FIFOSTS_ADDRDETF_Msk) >> UART_FIFOSTS_ADDRDETF_Pos)
N
N/* Declare these inline functions here to avoid MISRA C 2004 rule 8.1 error */
N__STATIC_INLINE void UART_CLEAR_RTS(UART_T *uart);
Xstatic __inline void UART_CLEAR_RTS(UART_T *uart);
N__STATIC_INLINE void UART_SET_RTS(UART_T *uart);
Xstatic __inline void UART_SET_RTS(UART_T *uart);
N
N
N/**
N *    @brief        Set RTS pin to low
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @return       None
N *
N *    @details      This macro set RTS pin to low.
N */
N__STATIC_INLINE void UART_CLEAR_RTS(UART_T *uart)
Xstatic __inline void UART_CLEAR_RTS(UART_T *uart)
N{
N    uart->MODEM |= UART_MODEM_RTSACTLV_Msk;
X    uart->MODEM |= (0x1ul << (9));
N    uart->MODEM &= ~UART_MODEM_RTS_Msk;
X    uart->MODEM &= ~(0x1ul << (1));
N}
N
N
N/**
N *    @brief        Set RTS pin to high
N *
N *    @param[in]    uart    The pointer of the specified UART module
N *
N *    @return       None
N *
N *    @details      This macro set RTS pin to high.
N */
N__STATIC_INLINE void UART_SET_RTS(UART_T *uart)
Xstatic __inline void UART_SET_RTS(UART_T *uart)
N{
N    uart->MODEM |= UART_MODEM_RTSACTLV_Msk | UART_MODEM_RTS_Msk;
X    uart->MODEM |= (0x1ul << (9)) | (0x1ul << (1));
N}
N
N
Nvoid UART_ClearIntFlag(UART_T *uart , uint32_t u32InterruptFlag);
Nvoid UART_Close(UART_T *uart);
Nvoid UART_DisableFlowCtrl(UART_T *uart);
Nvoid UART_DisableInt(UART_T  *uart, uint32_t u32InterruptFlag);
Nvoid UART_EnableFlowCtrl(UART_T *uart);
Nvoid UART_EnableInt(UART_T  *uart, uint32_t u32InterruptFlag);
Nvoid UART_Open(UART_T *uart, uint32_t u32baudrate);
Nuint32_t UART_Read(UART_T *uart, uint8_t pu8RxBuf[], uint32_t u32ReadBytes);
Nvoid UART_SetLine_Config(UART_T *uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits);
Nvoid UART_SetTimeoutCnt(UART_T *uart, uint32_t u32TOC);
Nvoid UART_SelectIrDAMode(UART_T *uart, uint32_t u32Buadrate, uint32_t u32Direction);
Nvoid UART_SelectRS485Mode(UART_T *uart, uint32_t u32Mode, uint32_t u32Addr);
Nuint32_t UART_Write(UART_T *uart, uint8_t pu8TxBuf[], uint32_t u32WriteBytes);
Nvoid UART_SelectSingleWireMode(UART_T *uart);
N
N
N
N/*@}*/ /* end of group UART_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group UART_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__UART_H__*/
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 581 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "usbd.h"
L 1 "..\..\..\Library\StdDriver\inc\usbd.h" 1
N
N/**************************************************************************//**
N * @file     usbd.H
N * @version  V1.00
N * $Revision: 9 $
N * $Date: 18/07/13 3:05p $
N * @brief    M031 series USB driver header file
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/ 
N#ifndef __USBD_H__
N#define __USBD_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup USBD_Driver USBD Driver
N  @{
N*/
N
N/** @addtogroup USBD_EXPORTED_STRUCT USBD Exported Struct
N  @{
N*/
Ntypedef struct s_usbd_info
N{
N    uint8_t *gu8DevDesc;            /*!< Pointer for USB Device Descriptor          */
N    uint8_t *gu8ConfigDesc;         /*!< Pointer for USB Configuration Descriptor   */
N    uint8_t **gu8StringDesc;        /*!< Pointer for USB String Descriptor pointers */
N    uint8_t **gu8HidReportDesc;     /*!< Pointer for USB HID Report Descriptor      */
N    uint8_t *gu8BosDesc;            /*!< Pointer for USB BOS Descriptor             */
N    uint32_t *gu32HidReportSize;    /*!< Pointer for HID Report descriptor Size */
N    uint32_t *gu32ConfigHidDescIdx; /*!< Pointer for HID Descriptor start index */
N
N} S_USBD_INFO_T;  /*!< Device description structure */
N
Nextern const S_USBD_INFO_T gsInfo;
N
N/*@}*/ /* end of group USBD_EXPORTED_STRUCTS */
N
N
N
N
N/** @addtogroup USBD_EXPORTED_CONSTANTS USBD Exported Constants
N  @{
N*/
N#define USBD_BUF_BASE   (USBD_BASE+0x100ul)  /*!< USBD buffer base address \hideinitializer */
N#define USBD_MAX_EP     8ul /*!< Total EP number \hideinitializer */
N
N#define EP0     0ul       /*!< Endpoint 0 \hideinitializer */
N#define EP1     1ul       /*!< Endpoint 1 \hideinitializer */
N#define EP2     2ul       /*!< Endpoint 2 \hideinitializer */
N#define EP3     3ul       /*!< Endpoint 3 \hideinitializer */
N#define EP4     4ul       /*!< Endpoint 4 \hideinitializer */
N#define EP5     5ul       /*!< Endpoint 5 \hideinitializer */
N#define EP6     6ul       /*!< Endpoint 6 \hideinitializer */
N#define EP7     7ul       /*!< Endpoint 7 \hideinitializer */
N
N/** @cond HIDDEN_SYMBOLS */
N/* USB Request Type */
N#define REQ_STANDARD        0x00ul
N#define REQ_CLASS           0x20ul
N#define REQ_VENDOR          0x40ul
N
N/* USB Standard Request */
N#define GET_STATUS          0x00ul
N#define CLEAR_FEATURE       0x01ul
N#define SET_FEATURE         0x03ul
N#define SET_ADDRESS         0x05ul
N#define GET_DESCRIPTOR      0x06ul
N#define SET_DESCRIPTOR      0x07ul
N#define GET_CONFIGURATION   0x08ul
N#define SET_CONFIGURATION   0x09ul
N#define GET_INTERFACE       0x0Aul
N#define SET_INTERFACE       0x0Bul
N#define SYNC_FRAME          0x0Cul
N
N/* USB Descriptor Type */
N#define DESC_DEVICE         0x01ul
N#define DESC_CONFIG         0x02ul
N#define DESC_STRING         0x03ul
N#define DESC_INTERFACE      0x04ul
N#define DESC_ENDPOINT       0x05ul
N#define DESC_QUALIFIER      0x06ul
N#define DESC_OTHERSPEED     0x07ul
N#define DESC_IFPOWER        0x08ul
N#define DESC_OTG            0x09ul
N#define DESC_BOS            0x0Ful
N#define DESC_CAPABILITY     0x10ul
N
N/* USB Device Capability Type */
N#define CAP_WIRELESS        0x01ul
N#define CAP_USB20_EXT       0x02ul
N
N/* USB HID Descriptor Type */
N#define DESC_HID            0x21ul
N#define DESC_HID_RPT        0x22ul
N
N/* USB Descriptor Length */
N#define LEN_DEVICE          18ul
N#define LEN_QUALIFIER       10ul
N#define LEN_CONFIG          9ul
N#define LEN_INTERFACE       9ul
N#define LEN_ENDPOINT        7ul
N#define LEN_OTG             5ul
N#define LEN_BOS             5ul
N#define LEN_HID             9ul
N#define LEN_CCID            0x36ul
N#define LEN_BOSCAP          7ul
N
N/*!<USB Endpoint Type */
N#define EP_ISO              0x01
N#define EP_BULK             0x02
N#define EP_INT              0x03
N
N#define EP_INPUT            0x80
N#define EP_OUTPUT           0x00
N
N/* USB Feature Selector */
N#define FEATURE_DEVICE_REMOTE_WAKEUP    0x01ul
N#define FEATURE_ENDPOINT_HALT           0x00ul
N/** @endcond HIDDEN_SYMBOLS */
N
N/******************************************************************************/
N/*                USB Specific Macros                                         */
N/******************************************************************************/
N
N#define USBD_WAKEUP_EN          USBD_INTEN_WKEN_Msk         /*!< USB Wake-up Enable                      \hideinitializer */
N#define USBD_DRVSE0             USBD_SE0_SE0_Msk            /*!< Drive SE0                               \hideinitializer */  
N#define USBD_L1RESUME           USBD_ATTR_L1RESUME_Msk      /*!< LPM L1 Resume                           \hideinitializer */
N#define USBD_L1SUSPEND          USBD_ATTR_L1SUSPEND_Msk     /*!< LPM L1 Suspend                          \hideinitializer */
N#define USBD_LPMACK             USBD_ATTR_LPMACK_Msk        /*!< LPM Enable                              \hideinitializer */
N#define USBD_BYTEM              USBD_ATTR_BYTEM_Msk         /*!< CPU Access USB SRAM Size Mode Selection \hideinitializer */
N#define USBD_DPPU_EN            USBD_ATTR_DPPUEN_Msk        /*!< USB D+ Pull-up Enable                   \hideinitializer */
N#define USBD_USB_EN             USBD_ATTR_USBEN_Msk         /*!< USB Enable                              \hideinitializer */
N#define USBD_RWAKEUP            USBD_ATTR_RWAKEUP_Msk       /*!< Remote Wake-up                          \hideinitializer */
N#define USBD_PHY_EN             USBD_ATTR_PHYEN_Msk         /*!< PHY Enable                              \hideinitializer */
N
N#define USBD_INT_BUS            USBD_INTEN_BUSIEN_Msk       /*!< USB Bus Event Interrupt                 \hideinitializer */
N#define USBD_INT_USB            USBD_INTEN_USBIEN_Msk       /*!< USB Event Interrupt                     \hideinitializer */
N#define USBD_INT_FLDET          USBD_INTEN_VBDETIEN_Msk     /*!< USB VBUS Detection Interrupt            \hideinitializer */
N#define USBD_INT_VBDET          USBD_INTEN_VBDETIEN_Msk     /*!< USB VBUS Detection Interrupt            \hideinitializer */
N#define USBD_INT_WAKEUP         (USBD_INTEN_NEVWKIEN_Msk | USBD_INTEN_WKEN_Msk)     /*!< USB No-Event-Wake-Up Interrupt   \hideinitializer */
N
N#define USBD_INTSTS_SOF         USBD_INTSTS_SOFIF_Msk       /*!< USB Start of Frame Interrupt Status     \hideinitializer */
N#define USBD_INTSTS_WAKEUP      USBD_INTSTS_NEVWKIF_Msk     /*!< USB No-Event-Wake-Up Interrupt Status   \hideinitializer */
N#define USBD_INTSTS_FLDET       USBD_INTSTS_VBDETIF_Msk     /*!< USB Float Detect Interrupt Status       \hideinitializer */
N#define USBD_INTSTS_VBDET       USBD_INTSTS_VBDETIF_Msk     /*!< USB Float Detect Interrupt Status       \hideinitializer */
N#define USBD_INTSTS_BUS         USBD_INTSTS_BUSIF_Msk       /*!< USB Bus Event Interrupt Status          \hideinitializer */
N#define USBD_INTSTS_USB         USBD_INTSTS_USBIF_Msk       /*!< USB Event Interrupt Status              \hideinitializer */
N#define USBD_INTSTS_SETUP       USBD_INTSTS_SETUP_Msk       /*!< USB Setup Event                         \hideinitializer */
N#define USBD_INTSTS_EP0         USBD_INTSTS_EPEVT0_Msk      /*!< USB Endpoint 0 Event                    \hideinitializer */
N#define USBD_INTSTS_EP1         USBD_INTSTS_EPEVT1_Msk      /*!< USB Endpoint 1 Event                    \hideinitializer */
N#define USBD_INTSTS_EP2         USBD_INTSTS_EPEVT2_Msk      /*!< USB Endpoint 2 Event                    \hideinitializer */
N#define USBD_INTSTS_EP3         USBD_INTSTS_EPEVT3_Msk      /*!< USB Endpoint 3 Event                    \hideinitializer */
N#define USBD_INTSTS_EP4         USBD_INTSTS_EPEVT4_Msk      /*!< USB Endpoint 4 Event                    \hideinitializer */
N#define USBD_INTSTS_EP5         USBD_INTSTS_EPEVT5_Msk      /*!< USB Endpoint 5 Event                    \hideinitializer */
N#define USBD_INTSTS_EP6         USBD_INTSTS_EPEVT6_Msk      /*!< USB Endpoint 6 Event                    \hideinitializer */
N#define USBD_INTSTS_EP7         USBD_INTSTS_EPEVT7_Msk      /*!< USB Endpoint 7 Event                    \hideinitializer */
N
N#define USBD_STATE_USBRST       USBD_ATTR_USBRST_Msk        /*!< USB Bus Reset                           \hideinitializer */
N#define USBD_STATE_SUSPEND      USBD_ATTR_SUSPEND_Msk       /*!< USB Bus Suspend                         \hideinitializer */
N#define USBD_STATE_RESUME       USBD_ATTR_RESUME_Msk        /*!< USB Bus Resume                          \hideinitializer */
N#define USBD_STATE_TIMEOUT      USBD_ATTR_TOUT_Msk          /*!< USB Bus Timeout                         \hideinitializer */
N#define USBD_STATE_L1RESUME     USBD_ATTR_L1RESUME_Msk      /*!< USB Bus L1RESUME                        \hideinitializer */
N#define USBD_STATE_L1SUSPEND    USBD_ATTR_L1SUSPEND_Msk     /*!< USB BUS L1SUSPEND                       \hideinitializer */
N
N#define USBD_CFGP_SSTALL        USBD_CFGP_SSTALL_Msk        /*!< Set Stall                               \hideinitializer */
N#define USBD_CFGP_CLRRDY        USBD_CFGP_CLRRDY_Msk
N
N#define USBD_CFG_CSTALL         USBD_CFG_CSTALL_Msk         /*!< Clear Stall                             \hideinitializer */
N#define USBD_CFG_EPMODE_DISABLE (0ul << USBD_CFG_STATE_Pos) /*!< Endpoint Disable                        \hideinitializer */
N#define USBD_CFG_EPMODE_OUT     (1ul << USBD_CFG_STATE_Pos) /*!< Out Endpoint                            \hideinitializer */
N#define USBD_CFG_EPMODE_IN      (2ul << USBD_CFG_STATE_Pos) /*!< In Endpoint                             \hideinitializer */
N#define USBD_CFG_TYPE_ISO       (1ul << USBD_CFG_ISOCH_Pos) /*!< Isochronous                             \hideinitializer */
N
N
N
N/*@}*/ /* end of group USBD_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup USBD_EXPORTED_FUNCTIONS USBD Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Compare two input numbers and return maximum one.
N  *
N  * @param[in]  a   First number to be compared.
N  * @param[in]  b   Second number to be compared.
N  *
N  * @return     Maximum value between a and b.
N  *
N  * @details    If a > b, then return a. Otherwise, return b.
N  * \hideinitializer
N  */
N#define USBD_Maximum(a,b)        ((a)>(b) ? (a) : (b))
N
N
N/**
N  * @brief      Compare two input numbers and return minimum one
N  *
N  * @param[in]  a   First number to be compared
N  * @param[in]  b   Second number to be compared
N  *
N  * @return     Minimum value between a and b
N  *
N  * @details    If a < b, then return a. Otherwise, return b.
N  * \hideinitializer
N  */
N#define USBD_Minimum(a,b)        ((a)<(b) ? (a) : (b))
N
N
N/**
N  * @brief    Enable USB
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  To set USB ATTR control register to enable USB and PHY.
N  * \hideinitializer
N  */
N#define USBD_ENABLE_USB()           ((uint32_t)(USBD->ATTR |= 0x7D0))
N
N/**
N  * @brief    Disable USB
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  To set USB ATTR control register to disable USB.
N  * \hideinitializer
N  */
N#define USBD_DISABLE_USB()          ((uint32_t)(USBD->ATTR &= ~USBD_USB_EN))
N
N/**
N  * @brief    Enable USB PHY
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  To set USB ATTR control register to enable USB PHY.
N  * \hideinitializer
N  */
N#define USBD_ENABLE_PHY()           ((uint32_t)(USBD->ATTR |= USBD_PHY_EN))
N
N/**
N  * @brief    Disable USB PHY
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  To set USB ATTR control register to disable USB PHY.
N  * \hideinitializer
N  */
N#define USBD_DISABLE_PHY()          ((uint32_t)(USBD->ATTR &= ~USBD_PHY_EN))
N
N/**
N  * @brief    Enable SE0. Force USB PHY transceiver to drive SE0.
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  Set DRVSE0 bit of USB_DRVSE0 register to enable software-disconnect function. Force USB PHY transceiver to drive SE0 to bus.
N  * \hideinitializer
N  */
N#define USBD_SET_SE0()              ((uint32_t)(USBD->SE0 |= USBD_DRVSE0))
N
N/**
N  * @brief    Disable SE0
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  Clear DRVSE0 bit of USB_DRVSE0 register to disable software-disconnect function.
N  * \hideinitializer
N  */
N#define USBD_CLR_SE0()              ((uint32_t)(USBD->SE0 &= ~USBD_DRVSE0))
N
N/**
N  * @brief       Set USB device address
N  *
N  * @param[in]   addr The USB device address.
N  *
N  * @return      None
N  *
N  * @details     Write USB device address to USB_FADDR register.
N  * \hideinitializer
N  */
N#define USBD_SET_ADDR(addr)         (USBD->FADDR = (addr))
N
N/**
N  * @brief    Get USB device address
N  *
N  * @param    None
N  *
N  * @return   USB device address
N  *
N  * @details  Read USB_FADDR register to get USB device address.
N  * \hideinitializer
N  */
N#define USBD_GET_ADDR()             ((uint32_t)(USBD->FADDR))
N
N/**
N  * @brief      Enable USB interrupt function
N  *
N  * @param[in]  intr The combination of the specified interrupt enable bits.
N  *             Each bit corresponds to a interrupt enable bit.
N  *             This parameter decides which interrupts will be enabled.
N  *             (USBD_INT_WAKEUP, USBD_INT_FLDET, USBD_INT_USB, USBD_INT_BUS)
N  *
N  * @return     None
N  *
N  * @details    Enable USB related interrupt functions specified by intr parameter.
N  * \hideinitializer
N  */
N#define USBD_ENABLE_INT(intr)       (USBD->INTEN |= (intr))
N
N/**
N  * @brief    Get interrupt status
N  *
N  * @param    None
N  *
N  * @return   The value of USB_INTSTS register
N  *
N  * @details  Return all interrupt flags of USB_INTSTS register.
N  * \hideinitializer
N  */
N#define USBD_GET_INT_FLAG()         ((uint32_t)(USBD->INTSTS))
N
N/**
N  * @brief      Clear USB interrupt flag
N  *
N  * @param[in]  flag The combination of the specified interrupt flags.
N  *             Each bit corresponds to a interrupt source.
N  *             This parameter decides which interrupt flags will be cleared.
N  *             (USBD_INTSTS_WAKEUP, USBD_INTSTS_FLDET, USBD_INTSTS_BUS, USBD_INTSTS_USB)
N  *
N  * @return     None
N  *
N  * @details    Clear USB related interrupt flags specified by flag parameter.
N  * \hideinitializer
N  */
N#define USBD_CLR_INT_FLAG(flag)     (USBD->INTSTS = (flag))
N
N/**
N  * @brief    Get endpoint status
N  *
N  * @param    None
N  *
N  * @return   The value of USB_EPSTS register.
N  *
N  * @details  Return all endpoint status.
N  * \hideinitializer
N  */
N#define USBD_GET_EP_FLAG()          ((uint32_t)(USBD->EPSTS))
N
N/**
N  * @brief    Get USB bus state
N  *
N  * @param    None
N  *
N  * @return   The value of USB_ATTR[3:0].
N  *           Bit 0 indicates USB bus reset status.
N  *           Bit 1 indicates USB bus suspend status.
N  *           Bit 2 indicates USB bus resume status.
N  *           Bit 3 indicates USB bus time-out status.
N  *
N  * @details  Return USB_ATTR[3:0] for USB bus events.
N  * \hideinitializer
N  */
N#define USBD_GET_BUS_STATE()        ((uint32_t)(USBD->ATTR & 0xf))
N
N/**
N  * @brief    Check cable connection state
N  *
N  * @param    None
N  *
N  * @retval   0 USB cable is not attached.
N  * @retval   1 USB cable is attached.
N  *
N  * @details  Check the connection state by FLDET bit of USB_FLDET register.
N  * \hideinitializer
N  */
N#define USBD_IS_ATTACHED()          ((uint32_t)(USBD->VBUSDET & USBD_VBUSDET_VBUSDET_Msk))
N
N/**
N  * @brief      Stop USB transaction of the specified endpoint ID
N  *
N  * @param[in]  ep The USB endpoint ID. M451 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return     None
N  *
N  * @details    Write 1 to CLRRDY bit of USB_CFGPx register to stop USB transaction of the specified endpoint ID.
N  * \hideinitializer
N  */
N#define USBD_STOP_TRANSACTION(ep)   (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFGP + (uint32_t)((ep) << 4))) |= USBD_CFGP_CLRRDY_Msk)
N
N/**
N  * @brief      Set USB DATA1 PID for the specified endpoint ID
N  *
N  * @param[in]  ep The USB endpoint ID. M451 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return     None
N  *
N  * @details    Set DSQ_SYNC bit of USB_CFGx register to specify the DATA1 PID for the following IN token transaction.
N  *             Base on this setting, hardware will toggle PID between DATA0 and DATA1 automatically for IN token transactions.
N  * \hideinitializer
N  */
N#define USBD_SET_DATA1(ep)          (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFG + (uint32_t)((ep) << 4))) |= USBD_CFG_DSQSYNC_Msk)
N
N/**
N  * @brief      Set USB DATA0 PID for the specified endpoint ID
N  *
N  * @param[in]  ep The USB endpoint ID. M451 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return     None
N  *
N  * @details    Clear DSQ_SYNC bit of USB_CFGx register to specify the DATA0 PID for the following IN token transaction.
N  *             Base on this setting, hardware will toggle PID between DATA0 and DATA1 automatically for IN token transactions.
N  * \hideinitializer
N  */
N#define USBD_SET_DATA0(ep)          (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFG + (uint32_t)((ep) << 4))) &= (~USBD_CFG_DSQSYNC_Msk))
N
N/**
N  * @brief      Set USB payload size (IN data)
N  *
N  * @param[in]  ep The USB endpoint ID. M451 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @param[in]  size The transfer length.
N  *
N  * @return     None
N  *
N  * @details    This macro will write the transfer length to USB_MXPLDx register for IN data transaction.
N  * \hideinitializer
N  */
N#define USBD_SET_PAYLOAD_LEN(ep, size)  (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].MXPLD + (uint32_t)((ep) << 4))) = (size))
N
N/**
N  * @brief      Get USB payload size (OUT data)
N  *
N  * @param[in]  ep The USB endpoint ID. M451 Series supports 8 endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return     The value of USB_MXPLDx register.
N  *
N  * @details    Get the data length of OUT data transaction by reading USB_MXPLDx register.
N  * \hideinitializer
N  */
N#define USBD_GET_PAYLOAD_LEN(ep)        ((uint32_t)*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].MXPLD + (uint32_t)((ep) << 4))))
N
N/**
N  * @brief      Configure endpoint
N  *
N  * @param[in]  ep The USB endpoint ID. M451 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @param[in]  config The USB configuration.
N  *
N  * @return     None
N  *
N  * @details    This macro will write config parameter to USB_CFGx register of specified endpoint ID.
N  * \hideinitializer
N  */
N#define USBD_CONFIG_EP(ep, config)      (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFG + (uint32_t)((ep) << 4))) = (config))
N
N/**
N  * @brief      Set USB endpoint buffer
N  *
N  * @param[in]  ep The USB endpoint ID. M451 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @param[in]  offset The SRAM offset.
N  *
N  * @return     None
N  *
N  * @details    This macro will set the SRAM offset for the specified endpoint ID.
N  * \hideinitializer
N  */
N#define USBD_SET_EP_BUF_ADDR(ep, offset)    (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].BUFSEG + (uint32_t)((ep) << 4))) = (offset))
N
N/**
N  * @brief      Get the offset of the specified USB endpoint buffer
N  *
N  * @param[in]  ep The USB endpoint ID. M451 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return     The offset of the specified endpoint buffer.
N  *
N  * @details    This macro will return the SRAM offset of the specified endpoint ID.
N  * \hideinitializer
N  */
N#define USBD_GET_EP_BUF_ADDR(ep)        ((uint32_t)*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].BUFSEG + (uint32_t)((ep) << 4))))
N
N/**
N  * @brief       Set USB endpoint stall state
N  *
N  * @param[in]   ep  The USB endpoint ID. M451 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return      None
N  *
N  * @details     Set USB endpoint stall state for the specified endpoint ID. Endpoint will respond STALL token automatically.
N  * \hideinitializer
N  */
N#define USBD_SET_EP_STALL(ep)        (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0ul].CFGP + (uint32_t)((ep) << 4))) |= USBD_CFGP_SSTALL_Msk)
N
N/**
N  * @brief       Clear USB endpoint stall state
N  *
N  * @param[in]   ep  The USB endpoint ID. M451 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return      None
N  *
N  * @details     Clear USB endpoint stall state for the specified endpoint ID. Endpoint will respond ACK/NAK token.
N  * \hideinitializer
N  */
N#define USBD_CLR_EP_STALL(ep)        (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFGP + (uint32_t)((ep) << 4))) &= ~USBD_CFGP_SSTALL_Msk)
N
N/**
N  * @brief       Get USB endpoint stall state
N  *
N  * @param[in]   ep  The USB endpoint ID. M451 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @retval      0      USB endpoint is not stalled.
N  * @retval      Others USB endpoint is stalled.
N  *
N  * @details     Get USB endpoint stall state of the specified endpoint ID.
N  * \hideinitializer
N  */
N#define USBD_GET_EP_STALL(ep)        (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFGP + (uint32_t)((ep) << 4))) & USBD_CFGP_SSTALL_Msk)
N
N/**
N  * @brief      To support byte access between USB SRAM and system SRAM
N  *
N  * @param[in]  dest Destination pointer.
N  *
N  * @param[in]  src  Source pointer.
N  *
N  * @param[in]  size Byte count.
N  *
N  * @return     None
N  *
N  * @details    This function will copy the number of data specified by size and src parameters to the address specified by dest parameter.
N  *
N  */
N__STATIC_INLINE void USBD_MemCopy(uint8_t dest[], uint8_t src[], uint32_t size)
Xstatic __inline void USBD_MemCopy(uint8_t dest[], uint8_t src[], uint32_t size)
N{
N    uint32_t volatile i=0ul;
N
N    while(size--)
N    {
N        dest[i] = src[i];
N        i++;
N    }
N}
N
N/**
N  * @brief       Set USB endpoint stall state
N  *
N  * @param[in]   epnum  USB endpoint number
N  *
N  * @return      None
N  *
N  * @details     Set USB endpoint stall state. Endpoint will respond STALL token automatically.
N  *
N  */
N__STATIC_INLINE void USBD_SetStall(uint8_t epnum)
Xstatic __inline void USBD_SetStall(uint8_t epnum)
N{
N    uint32_t u32CfgAddr;
N    uint32_t u32Cfg;
N    uint32_t i;
N
N    for(i = 0ul; i < USBD_MAX_EP; i++)
X    for(i = 0ul; i < 8ul; i++)
N    {
N        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFG; /* USBD_CFG0 */
X        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) ((( uint32_t)0x40000000) + 0xC0000))->EP[0].CFG;  
N        u32Cfg = *((__IO uint32_t *)(u32CfgAddr));
X        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));
N
N        if((u32Cfg & 0xful) == epnum)
N        {
N            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFGP; /* USBD_CFGP0 */
X            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) ((( uint32_t)0x40000000) + 0xC0000))->EP[0].CFGP;  
N            u32Cfg = *((__IO uint32_t *)(u32CfgAddr));
X            u32Cfg = *((volatile uint32_t *)(u32CfgAddr));
N
N            *((__IO uint32_t *)(u32CfgAddr)) = (u32Cfg | USBD_CFGP_SSTALL);
X            *((volatile uint32_t *)(u32CfgAddr)) = (u32Cfg | (0x1ul << (1)));
N            break;
N        }
N    }
N}
N
N/**
N  * @brief       Clear USB endpoint stall state
N  *
N  * @param[in]   epnum  USB endpoint number
N  *
N  * @return      None
N  *
N  * @details     Clear USB endpoint stall state. Endpoint will respond ACK/NAK token.
N  */
N__STATIC_INLINE void USBD_ClearStall(uint8_t epnum)
Xstatic __inline void USBD_ClearStall(uint8_t epnum)
N{
N    uint32_t u32CfgAddr;
N    uint32_t u32Cfg;
N    uint32_t i;
N
N    for(i = 0ul; i < USBD_MAX_EP; i++)
X    for(i = 0ul; i < 8ul; i++)
N    {
N        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFG; /* USBD_CFG0 */
X        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) ((( uint32_t)0x40000000) + 0xC0000))->EP[0].CFG;  
N        u32Cfg = *((__IO uint32_t *)(u32CfgAddr));
X        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));
N
N        if((u32Cfg & 0xful) == epnum)
N        {
N            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFGP; /* USBD_CFGP0 */
X            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) ((( uint32_t)0x40000000) + 0xC0000))->EP[0].CFGP;  
N            u32Cfg = *((__IO uint32_t *)(u32CfgAddr));
X            u32Cfg = *((volatile uint32_t *)(u32CfgAddr));
N
N            *((__IO uint32_t *)(u32CfgAddr)) = (u32Cfg & ~USBD_CFGP_SSTALL);
X            *((volatile uint32_t *)(u32CfgAddr)) = (u32Cfg & ~(0x1ul << (1)));
N            break;
N        }
N    }
N}
N
N/**
N  * @brief       Get USB endpoint stall state
N  *
N  * @param[in]   epnum  USB endpoint number
N  *
N  * @retval      0      USB endpoint is not stalled.
N  * @retval      Others USB endpoint is stalled.
N  *
N  * @details     Get USB endpoint stall state.
N  *
N  */
N__STATIC_INLINE uint32_t USBD_GetStall(uint8_t epnum)
Xstatic __inline uint32_t USBD_GetStall(uint8_t epnum)
N{
N    uint32_t u32CfgAddr;
N    uint32_t u32Cfg;
N    uint32_t i;
N
N    for(i = 0ul; i < USBD_MAX_EP; i++)
X    for(i = 0ul; i < 8ul; i++)
N    {
N        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFG; /* USBD_CFG0 */
X        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) ((( uint32_t)0x40000000) + 0xC0000))->EP[0].CFG;  
N        u32Cfg = *((__IO uint32_t *)(u32CfgAddr));
X        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));
N
N        if((u32Cfg & 0xful) == epnum)
N        {
N            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFGP; /* USBD_CFGP0 */
X            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) ((( uint32_t)0x40000000) + 0xC0000))->EP[0].CFGP;  
N            break;
N        }
N    }
N
N    return ((*((__IO uint32_t *)(u32CfgAddr))) & USBD_CFGP_SSTALL);
X    return ((*((volatile uint32_t *)(u32CfgAddr))) & (0x1ul << (1)));
N}
N
N
Nextern volatile uint8_t g_usbd_RemoteWakeupEn;
N
N
Ntypedef void (*VENDOR_REQ)(void);           /*!< Functional pointer type definition for Vendor class */
Ntypedef void (*CLASS_REQ)(void);            /*!< Functional pointer type declaration for USB class request callback handler */
Ntypedef void (*SET_INTERFACE_REQ)(uint32_t u32AltInterface);    /*!< Functional pointer type declaration for USB set interface request callback handler */
Ntypedef void (*SET_CONFIG_CB)(void);       /*!< Functional pointer type declaration for USB set configuration request callback handler */
N
N
N/*--------------------------------------------------------------------*/
Nvoid USBD_Open(const S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface);
Nvoid USBD_Start(void);
Nvoid USBD_GetSetupPacket(uint8_t *buf);
Nvoid USBD_ProcessSetupPacket(void);
Nvoid USBD_StandardRequest(void);
Nvoid USBD_PrepareCtrlIn(uint8_t pu8Buf[], uint32_t u32Size);
Nvoid USBD_CtrlIn(void);
Nvoid USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size);
Nvoid USBD_CtrlOut(void);
Nvoid USBD_SwReset(void);
Nvoid USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq);
Nvoid USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback);
Nvoid USBD_LockEpStall(uint32_t u32EpBitmap);
N
N/*@}*/ /* end of group USBD_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group USBD_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__USBD_H__
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 582 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "usci_i2c.h"
L 1 "..\..\..\Library\StdDriver\inc\usci_i2c.h" 1
N/**************************************************************************//**
N * @file     usci_i2c.h
N * @version  V1.00
N * @brief    M031 series USCI I2C(UI2C) driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __USCI_I2C_H__
N#define __USCI_I2C_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup USCI_I2C_Driver USCI_I2C Driver
N  @{
N*/
N
N/** @addtogroup USCI_I2C_EXPORTED_CONSTANTS USCI_I2C Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* USCI_I2C master event definitions                                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
Nenum UI2C_MASTER_EVENT
N{
N    MASTER_SEND_ADDRESS = 10u,    /*!< Master send address to Slave */
N    MASTER_SEND_H_WR_ADDRESS,    /*!< Master send High address to Slave */
N    MASTER_SEND_H_RD_ADDRESS,    /*!< Master send address to Slave (Read ADDR) */
N    MASTER_SEND_L_ADDRESS,       /*!< Master send Low address to Slave */
N    MASTER_SEND_DATA,            /*!< Master Send Data to Slave */
N    MASTER_SEND_REPEAT_START,    /*!< Master send repeat start to Slave */
N    MASTER_READ_DATA,            /*!< Master Get Data from Slave */
N    MASTER_STOP,                 /*!< Master send stop to Slave */
N    MASTER_SEND_START            /*!< Master send start to Slave */
N};
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* USCI_I2C slave event definitions                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
Nenum UI2C_SLAVE_EVENT
N{
N    SLAVE_ADDRESS_ACK = 100u,      /*!< Slave send address ACK */
N    SLAVE_H_WR_ADDRESS_ACK,       /*!< Slave send High address ACK */
N    SLAVE_L_WR_ADDRESS_ACK,       /*!< Slave send Low address ACK */
N    SLAVE_GET_DATA,               /*!< Slave Get Data from Master (Write CMD) */
N    SLAVE_SEND_DATA,              /*!< Slave Send Data to Master (Read CMD) */
N    SLAVE_H_RD_ADDRESS_ACK,       /*!< Slave send High address ACK */
N    SLAVE_L_RD_ADDRESS_ACK        /*!< Slave send Low address ACK */
N};
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  USCI_CTL constant definitions.                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UI2C_CTL_PTRG              0x20UL    /*!< USCI_CTL setting for I2C control bits. It would set PTRG bit \hideinitializer */
N#define UI2C_CTL_STA               0x08UL    /*!< USCI_CTL setting for I2C control bits. It would set STA bit \hideinitializer */
N#define UI2C_CTL_STO               0x04UL    /*!< USCI_CTL setting for I2C control bits. It would set STO bit \hideinitializer */
N#define UI2C_CTL_AA                0x02UL    /*!< USCI_CTL setting for I2C control bits. It would set AA bit  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  USCI_I2C GCMode constant definitions.                                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UI2C_GCMODE_ENABLE         (1U)    /*!< Enable  USCI_I2C GC Mode \hideinitializer */
N#define UI2C_GCMODE_DISABLE        (0U)    /*!< Disable USCI_I2C GC Mode \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  USCI_I2C Wakeup Mode constant definitions.                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UI2C_DATA_TOGGLE_WK        (0x0U << UI2C_WKCTL_WKADDREN_Pos)    /*!< Wakeup according data toggle \hideinitializer */
N#define UI2C_ADDR_MATCH_WK         (0x1U << UI2C_WKCTL_WKADDREN_Pos)    /*!< Wakeup according address match \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* USCI_I2C interrupt mask definitions                                                                     */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UI2C_TO_INT_MASK           (0x001U)    /*!< Time-out interrupt mask \hideinitializer */
N#define UI2C_STAR_INT_MASK         (0x002U)    /*!< Start condition received interrupt mask \hideinitializer */
N#define UI2C_STOR_INT_MASK         (0x004U)    /*!< Stop condition received interrupt mask \hideinitializer */
N#define UI2C_NACK_INT_MASK         (0x008U)    /*!< Non-acknowledge interrupt mask \hideinitializer */
N#define UI2C_ARBLO_INT_MASK        (0x010U)    /*!< Arbitration lost interrupt mask \hideinitializer */
N#define UI2C_ERR_INT_MASK          (0x020U)    /*!< Error interrupt mask \hideinitializer */
N#define UI2C_ACK_INT_MASK          (0x040U)    /*!< Acknowledge interrupt mask \hideinitializer */
N
N/*@}*/ /* end of group USCI_I2C_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup USCI_I2C_EXPORTED_FUNCTIONS USCI_I2C Exported Functions
N  @{
N*/
N
N/**
N *    @brief        This macro sets the USCI_I2C protocol control register at one time
N *
N *    @param[in]    ui2c      The pointer of the specified USCI_I2C module.
N *    @param[in]    u8Ctrl    Set the register value of USCI_I2C control register.
N *
N *    @return       None
N *
N *    @details      Set UI2C_PROTCTL register to control USCI_I2C bus conditions of START, STOP, PTRG, ACK.
N *    \hideinitializer
N */
N#define UI2C_SET_CONTROL_REG(ui2c, u8Ctrl) ((ui2c)->PROTCTL = ((ui2c)->PROTCTL & ~0x2EU) | (u8Ctrl))
N
N/**
N *    @brief        This macro only set START bit to protocol control register of USCI_I2C module.
N *
N *    @param[in]    ui2c      The pointer of the specified USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      Set the USCI_I2C bus START condition in UI2C_PROTCTL register.
N *    \hideinitializer
N */
N#define UI2C_START(ui2c) ((ui2c)->PROTCTL = ((ui2c)->PROTCTL & ~UI2C_PROTCTL_PTRG_Msk) | UI2C_PROTCTL_STA_Msk)
N
N/**
N *    @brief        This macro only set STOP bit to the control register of USCI_I2C module
N *
N *    @param[in]    ui2c      The pointer of the specified USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      Set the USCI_I2C bus STOP condition in UI2C_PROTCTL register.
N *    \hideinitializer
N */
N#define UI2C_STOP(ui2c) ((ui2c)->PROTCTL = ((ui2c)->PROTCTL & ~0x2E) | (UI2C_PROTCTL_PTRG_Msk | UI2C_PROTCTL_STO_Msk))
N
N/**
N *    @brief        This macro returns the data stored in data register of USCI_I2C module
N *
N *    @param[in]    ui2c      The pointer of the specified USCI_I2C module.
N *
N *    @return       Data
N *
N *    @details      Read a byte data value of UI2C_RXDAT register from USCI_I2C bus
N *    \hideinitializer
N */
N#define UI2C_GET_DATA(ui2c) ((ui2c)->RXDAT)
N
N/**
N *    @brief        This macro writes the data to data register of USCI_I2C module
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *    @param[in]    u8Data   The data which will be written to data register of USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      Write a byte data value of UI2C_TXDAT register, then sends address or data to USCI I2C bus
N *    \hideinitializer
N */
N#define UI2C_SET_DATA(ui2c, u8Data) ((ui2c)->TXDAT = (u8Data))
N
N/**
N *    @brief        This macro returns time-out flag
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @retval       0        USCI_I2C bus time-out is not happened
N *    @retval       1        USCI_I2C bus time-out is happened
N *
N *    @details      USCI_I2C bus occurs time-out event, the time-out flag will be set. If not occurs time-out event, this bit is cleared.
N *    \hideinitializer
N */
N#define UI2C_GET_TIMEOUT_FLAG(ui2c) (((ui2c)->PROTSTS & UI2C_PROTSTS_TOIF_Msk) == UI2C_PROTSTS_TOIF_Msk ? 1:0)
N
N/**
N *    @brief        This macro returns wake-up flag
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @retval       0        Chip is not woken-up from power-down mode
N *    @retval       1        Chip is woken-up from power-down mode
N *
N *    @details      USCI_I2C controller wake-up flag will be set when USCI_I2C bus occurs wake-up from deep-sleep.
N *    \hideinitializer
N */
N#define UI2C_GET_WAKEUP_FLAG(ui2c) (((ui2c)->WKSTS & UI2C_WKSTS_WKF_Msk) == UI2C_WKSTS_WKF_Msk ? 1:0)
N
N/**
N *    @brief        This macro is used to clear USCI_I2C wake-up flag
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      If USCI_I2C wake-up flag is set, use this macro to clear it.
N *    \hideinitializer
N */
N#define UI2C_CLR_WAKEUP_FLAG(ui2c)  ((ui2c)->WKSTS = UI2C_WKSTS_WKF_Msk)
N
N/**
N *    @brief        This macro disables the USCI_I2C 10-bit address mode
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      The UI2C_I2C is 7-bit address mode, when disable USCI_I2C 10-bit address match function.
N *    \hideinitializer
N */
N#define UI2C_DISABLE_10BIT_ADDR_MODE(ui2c)  ((ui2c)->PROTCTL &= ~(UI2C_PROTCTL_ADDR10EN_Msk))
N
N/**
N *    @brief        This macro enables the 10-bit address mode
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      To enable USCI_I2C 10-bit address match function.
N *    \hideinitializer
N */
N#define UI2C_ENABLE_10BIT_ADDR_MODE(ui2c)  ((ui2c)->PROTCTL |= UI2C_PROTCTL_ADDR10EN_Msk)
N
N/**
N *    @brief        This macro gets USCI_I2C protocol interrupt flag or bus status
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @return       A word data of USCI_I2C_PROTSTS register
N *
N *    @details      Read a word data of USCI_I2C PROTSTS register to get USCI_I2C bus Interrupt flags or status.
N *    \hideinitializer
N */
N#define UI2C_GET_PROT_STATUS(ui2c)    ((ui2c)->PROTSTS)
N
N/**
N *    @brief        This macro clears specified protocol interrupt flag
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *    @param[in]    u32IntTypeFlag Interrupt Type Flag, should be
N *                                  - \ref UI2C_PROTSTS_ACKIF_Msk
N *                                  - \ref UI2C_PROTSTS_ERRIF_Msk
N *                                  - \ref UI2C_PROTSTS_ARBLOIF_Msk
N *                                  - \ref UI2C_PROTSTS_NACKIF_Msk
N *                                  - \ref UI2C_PROTSTS_STORIF_Msk
N *                                  - \ref UI2C_PROTSTS_STARIF_Msk
N *                                  - \ref UI2C_PROTSTS_TOIF_Msk
N *    @return None
N *
N *    @details      To clear interrupt flag when USCI_I2C occurs interrupt and set interrupt flag.
N *    \hideinitializer
N */
N#define UI2C_CLR_PROT_INT_FLAG(ui2c,u32IntTypeFlag)    ((ui2c)->PROTSTS = (u32IntTypeFlag))
N
N/**
N *    @brief        This macro enables specified protocol interrupt
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *    @param[in]    u32IntSel Interrupt Type, should be
N *                                  - \ref UI2C_PROTIEN_ACKIEN_Msk
N *                                  - \ref UI2C_PROTIEN_ERRIEN_Msk
N *                                  - \ref UI2C_PROTIEN_ARBLOIEN_Msk
N *                                  - \ref UI2C_PROTIEN_NACKIEN_Msk
N *                                  - \ref UI2C_PROTIEN_STORIEN_Msk
N *                                  - \ref UI2C_PROTIEN_STARIEN_Msk
N *                                  - \ref UI2C_PROTIEN_TOIEN_Msk
N *    @return None
N *
N *    @details      Set specified USCI_I2C protocol interrupt bits to enable interrupt function.
N *    \hideinitializer
N */
N#define UI2C_ENABLE_PROT_INT(ui2c, u32IntSel)    ((ui2c)->PROTIEN |= (u32IntSel))
N
N/**
N *    @brief        This macro disables specified protocol interrupt
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *    @param[in]    u32IntSel Interrupt Type, should be
N *                                  - \ref UI2C_PROTIEN_ACKIEN_Msk
N *                                  - \ref UI2C_PROTIEN_ERRIEN_Msk
N *                                  - \ref UI2C_PROTIEN_ARBLOIEN_Msk
N *                                  - \ref UI2C_PROTIEN_NACKIEN_Msk
N *                                  - \ref UI2C_PROTIEN_STORIEN_Msk
N *                                  - \ref UI2C_PROTIEN_STARIEN_Msk
N *                                  - \ref UI2C_PROTIEN_TOIEN_Msk
N *    @return None
N *
N *    @details      Clear specified USCI_I2C protocol interrupt bits to disable interrupt function.
N *    \hideinitializer
N */
N#define UI2C_DISABLE_PROT_INT(ui2c, u32IntSel)    ((ui2c)->PROTIEN &= ~ (u32IntSel))
N
N
Nuint32_t UI2C_Open(UI2C_T *ui2c, uint32_t u32BusClock);
Nvoid UI2C_Close(UI2C_T *ui2c);
Nvoid UI2C_ClearTimeoutFlag(UI2C_T *ui2c);
Nvoid UI2C_Trigger(UI2C_T *ui2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Ptrg, uint8_t u8Ack);
Nvoid UI2C_DisableInt(UI2C_T *ui2c, uint32_t u32Mask);
Nvoid UI2C_EnableInt(UI2C_T *ui2c, uint32_t u32Mask);
Nuint32_t UI2C_GetBusClockFreq(UI2C_T *ui2c);
Nuint32_t UI2C_SetBusClockFreq(UI2C_T *ui2c, uint32_t u32BusClock);
Nuint32_t UI2C_GetIntFlag(UI2C_T *ui2c, uint32_t u32Mask);
Nvoid UI2C_ClearIntFlag(UI2C_T *ui2c , uint32_t u32Mask);
Nuint32_t UI2C_GetData(UI2C_T *ui2c);
Nvoid UI2C_SetData(UI2C_T *ui2c, uint8_t u8Data);
Nvoid UI2C_SetSlaveAddr(UI2C_T *ui2c, uint8_t u8SlaveNo, uint16_t u16SlaveAddr, uint8_t u8GCMode);
Nvoid UI2C_SetSlaveAddrMask(UI2C_T *ui2c, uint8_t u8SlaveNo, uint16_t u16SlaveAddrMask);
Nvoid UI2C_EnableTimeout(UI2C_T *ui2c, uint32_t u32TimeoutCnt);
Nvoid UI2C_DisableTimeout(UI2C_T *ui2c);
Nvoid UI2C_EnableWakeup(UI2C_T *ui2c, uint8_t u8WakeupMode);
Nvoid UI2C_DisableWakeup(UI2C_T *ui2c);
Nuint8_t UI2C_WriteByte(UI2C_T *ui2c, uint8_t u8SlaveAddr, const uint8_t data);
Nuint32_t UI2C_WriteMultiBytes(UI2C_T *ui2c, uint8_t u8SlaveAddr, const uint8_t *data, uint32_t u32wLen);
Nuint8_t UI2C_WriteByteOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t data);
Nuint32_t UI2C_WriteMultiBytesOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t *data, uint32_t u32wLen);
Nuint8_t UI2C_WriteByteTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t data);
Nuint32_t UI2C_WriteMultiBytesTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t *data, uint32_t u32wLen);
Nuint8_t UI2C_ReadByte(UI2C_T *ui2c, uint8_t u8SlaveAddr);
Nuint32_t UI2C_ReadMultiBytes(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t *rdata, uint32_t u32rLen);
Nuint8_t UI2C_ReadByteOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr);
Nuint32_t UI2C_ReadMultiBytesOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, uint8_t *rdata, uint32_t u32rLen);
Nuint8_t UI2C_ReadByteTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr);
Nuint32_t UI2C_ReadMultiBytesTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, uint8_t *rdata, uint32_t u32rLen);
N
N/*@}*/ /* end of group USCI_I2C_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group USCI_I2C_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __USCI_I2C_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 583 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "usci_spi.h"
L 1 "..\..\..\Library\StdDriver\inc\usci_spi.h" 1
N/****************************************************************************//**
N * @file     usci_spi.h
N * @version  V1.00
N * @brief    M031 series USCI_SPI driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N*****************************************************************************/
N#ifndef __USCI_SPI_H__
N#define __USCI_SPI_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup USCI_SPI_Driver USCI_SPI Driver
N  @{
N*/
N
N/** @addtogroup USCI_SPI_EXPORTED_CONSTANTS USCI_SPI Exported Constants
N  @{
N*/
N
N#define USPI_MODE_0        (0x0UL << USPI_PROTCTL_SCLKMODE_Pos)        /*!< SCLK idle low; data transmit with falling edge and receive with rising edge \hideinitializer */
N#define USPI_MODE_1        (0x1UL << USPI_PROTCTL_SCLKMODE_Pos)        /*!< SCLK idle low; data transmit with rising edge and receive with falling edge \hideinitializer */
N#define USPI_MODE_2        (0x2UL << USPI_PROTCTL_SCLKMODE_Pos)        /*!< SCLK idle high; data transmit with rising edge and receive with falling edge \hideinitializer */
N#define USPI_MODE_3        (0x3UL << USPI_PROTCTL_SCLKMODE_Pos)        /*!< SCLK idle high; data transmit with falling edge and receive with rising edge \hideinitializer */
N
N#define USPI_SLAVE         (USPI_PROTCTL_SLAVE_Msk)                    /*!< Set as slave \hideinitializer */
N#define USPI_MASTER        (0x0UL)                                     /*!< Set as master \hideinitializer */
N
N#define USPI_SS                (USPI_PROTCTL_SS_Msk)                   /*!< Set SS \hideinitializer */
N#define USPI_SS_ACTIVE_HIGH    (0x0UL)                                 /*!< SS active high \hideinitializer */
N#define USPI_SS_ACTIVE_LOW     (USPI_LINECTL_CTLOINV_Msk)              /*!< SS active low \hideinitializer */
N
N/* USCI_SPI Interrupt Mask */
N#define USPI_SSINACT_INT_MASK        (0x001UL)                         /*!< Slave Select Inactive interrupt mask \hideinitializer */
N#define USPI_SSACT_INT_MASK          (0x002UL)                         /*!< Slave Select Active interrupt mask \hideinitializer */
N#define USPI_SLVTO_INT_MASK          (0x004UL)                         /*!< Slave Mode Time-out interrupt mask \hideinitializer */
N#define USPI_SLVBE_INT_MASK          (0x008UL)                         /*!< Slave Mode Bit Count Error interrupt mask \hideinitializer */
N#define USPI_TXUDR_INT_MASK          (0x010UL)                         /*!< Slave Transmit Under Run interrupt mask \hideinitializer */
N#define USPI_RXOV_INT_MASK           (0x020UL)                         /*!< Receive Buffer Overrun interrupt mask \hideinitializer */
N#define USPI_TXST_INT_MASK           (0x040UL)                         /*!< Transmit Start interrupt mask \hideinitializer */
N#define USPI_TXEND_INT_MASK          (0x080UL)                         /*!< Transmit End interrupt mask \hideinitializer */
N#define USPI_RXST_INT_MASK           (0x100UL)                         /*!< Receive Start interrupt mask \hideinitializer */
N#define USPI_RXEND_INT_MASK          (0x200UL)                         /*!< Receive End interrupt mask \hideinitializer */
N
N/* USCI_SPI Status Mask */
N#define USPI_BUSY_MASK               (0x01UL)                          /*!< Busy status mask \hideinitializer */
N#define USPI_RX_EMPTY_MASK           (0x02UL)                          /*!< RX empty status mask \hideinitializer */
N#define USPI_RX_FULL_MASK            (0x04UL)                          /*!< RX full status mask \hideinitializer */
N#define USPI_TX_EMPTY_MASK           (0x08UL)                          /*!< TX empty status mask \hideinitializer */
N#define USPI_TX_FULL_MASK            (0x10UL)                          /*!< TX full status mask \hideinitializer */
N#define USPI_SSLINE_STS_MASK         (0x20UL)                          /*!< USCI_SPI_SS line status mask \hideinitializer */
N
N/*@}*/ /* end of group USCI_SPI_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup USCI_SPI_EXPORTED_FUNCTIONS USCI_SPI Exported Functions
N  @{
N*/
N
N/**
N  * @brief  Disable slave 3-wire mode.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_DISABLE_3WIRE_MODE(uspi) ( (uspi)->PROTCTL &= ~USPI_PROTCTL_SLV3WIRE_Msk )
N
N/**
N  * @brief  Enable slave 3-wire mode.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_ENABLE_3WIRE_MODE(uspi) ( (uspi)->PROTCTL |= USPI_PROTCTL_SLV3WIRE_Msk )
N
N/**
N  * @brief  Get the Rx buffer empty flag.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return Rx buffer flag
N  * @retval 0: Rx buffer is not empty
N  * @retval 1: Rx buffer is empty
N  * \hideinitializer
N  */
N#define USPI_GET_RX_EMPTY_FLAG(uspi) ( ((uspi)->BUFSTS & USPI_BUFSTS_RXEMPTY_Msk) == USPI_BUFSTS_RXEMPTY_Msk ? 1:0 )
N
N/**
N  * @brief  Get the Tx buffer empty flag.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return Tx buffer flag
N  * @retval 0: Tx buffer is not empty
N  * @retval 1: Tx buffer is empty
N  * \hideinitializer
N  */
N#define USPI_GET_TX_EMPTY_FLAG(uspi) ( ((uspi)->BUFSTS & USPI_BUFSTS_TXEMPTY_Msk) == USPI_BUFSTS_TXEMPTY_Msk ? 1:0 )
N
N/**
N  * @brief  Get the Tx buffer full flag.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return Tx buffer flag
N  * @retval 0: Tx buffer is not full
N  * @retval 1: Tx buffer is full
N  * \hideinitializer
N  */
N#define USPI_GET_TX_FULL_FLAG(uspi) ( ((uspi)->BUFSTS & USPI_BUFSTS_TXFULL_Msk) == USPI_BUFSTS_TXFULL_Msk ? 1:0 )
N
N/**
N  * @brief  Get the datum read from RX register.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return data in Rx register
N  * \hideinitializer
N  */
N#define USPI_READ_RX(uspi) ( (uspi)->RXDAT )
N
N/**
N  * @brief  Write datum to TX register.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @param[in]  u32TxData The datum which user attempt to transfer through USCI_SPI bus.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_WRITE_TX(uspi, u32TxData) ( (uspi)->TXDAT = (u32TxData) )
N
N/**
N  * @brief      Set USCI_SPI_SS pin to high state.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return     None.
N  * @details    Disable automatic slave selection function and set USCI_SPI_SS pin to high state. Only available in Master mode.
N  * \hideinitializer
N  */
N#define USPI_SET_SS_HIGH(uspi) \
N    do{ \
N        (uspi)->LINECTL &= ~(USPI_LINECTL_CTLOINV_Msk); \
N        (uspi)->PROTCTL = (((uspi)->PROTCTL & ~USPI_PROTCTL_AUTOSS_Msk) | USPI_PROTCTL_SS_Msk); \
N    }while(0)
X#define USPI_SET_SS_HIGH(uspi)     do{         (uspi)->LINECTL &= ~(USPI_LINECTL_CTLOINV_Msk);         (uspi)->PROTCTL = (((uspi)->PROTCTL & ~USPI_PROTCTL_AUTOSS_Msk) | USPI_PROTCTL_SS_Msk);     }while(0)
N
N/**
N  * @brief      Set USCI_SPI_SS pin to low state.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return     None.
N  * @details    Disable automatic slave selection function and set USCI_SPI_SS pin to low state. Only available in Master mode.
N  * \hideinitializer
N  */
N#define USPI_SET_SS_LOW(uspi) \
N    do{ \
N        (uspi)->LINECTL |= (USPI_LINECTL_CTLOINV_Msk); \
N        (uspi)->PROTCTL = (((uspi)->PROTCTL & ~USPI_PROTCTL_AUTOSS_Msk) | USPI_PROTCTL_SS_Msk); \
N    }while(0)
X#define USPI_SET_SS_LOW(uspi)     do{         (uspi)->LINECTL |= (USPI_LINECTL_CTLOINV_Msk);         (uspi)->PROTCTL = (((uspi)->PROTCTL & ~USPI_PROTCTL_AUTOSS_Msk) | USPI_PROTCTL_SS_Msk);     }while(0)
N
N/**
N  * @brief  Set the length of suspend interval.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @param[in]  u32SuspCycle Decide the length of suspend interval.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_SET_SUSPEND_CYCLE(uspi, u32SuspCycle) ( (uspi)->PROTCTL = ((uspi)->PROTCTL & ~USPI_PROTCTL_SUSPITV_Msk) | ((u32SuspCycle) << USPI_PROTCTL_SUSPITV_Pos) )
N
N/**
N  * @brief  Set the USCI_SPI transfer sequence with LSB first.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_SET_LSB_FIRST(uspi) ( (uspi)->LINECTL |= USPI_LINECTL_LSB_Msk )
N
N/**
N  * @brief  Set the USCI_SPI transfer sequence with MSB first.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_SET_MSB_FIRST(uspi) ( (uspi)->LINECTL &= ~USPI_LINECTL_LSB_Msk )
N
N/**
N  * @brief  Set the data width of a USCI_SPI transaction.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @param[in]  u32Width The data width
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_SET_DATA_WIDTH(uspi, u32Width) \
N    do{ \
N      if((u32Width) == 16ul){ \
N        (uspi)->LINECTL = ((uspi)->LINECTL & ~USPI_LINECTL_DWIDTH_Msk) | (0 << USPI_LINECTL_DWIDTH_Pos); \
N      }else { \
N        (uspi)->LINECTL = ((uspi)->LINECTL & ~USPI_LINECTL_DWIDTH_Msk) | ((u32Width) << USPI_LINECTL_DWIDTH_Pos); \
N      } \
N    }while(0)
X#define USPI_SET_DATA_WIDTH(uspi, u32Width)     do{       if((u32Width) == 16ul){         (uspi)->LINECTL = ((uspi)->LINECTL & ~USPI_LINECTL_DWIDTH_Msk) | (0 << USPI_LINECTL_DWIDTH_Pos);       }else {         (uspi)->LINECTL = ((uspi)->LINECTL & ~USPI_LINECTL_DWIDTH_Msk) | ((u32Width) << USPI_LINECTL_DWIDTH_Pos);       }     }while(0)
N
N/**
N  * @brief  Get the USCI_SPI busy state.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return USCI_SPI busy status
N  * @retval 0: USCI_SPI module is not busy
N  * @retval 1: USCI_SPI module is busy
N  * \hideinitializer
N  */
N#define USPI_IS_BUSY(uspi) ( ((uspi)->PROTSTS & USPI_PROTSTS_BUSY_Msk) == USPI_PROTSTS_BUSY_Msk ? 1:0 )
N
N/**
N  * @brief Get the USCI_SPI wakeup flag.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @return Wakeup status.
N  * @retval 0 Flag is not set.
N  * @retval 1 Flag is set.
N  * \hideinitializer
N  */
N#define USPI_GET_WAKEUP_FLAG(uspi) ( ((uspi)->WKSTS & USPI_WKSTS_WKF_Msk) == USPI_WKSTS_WKF_Msk ? 1:0 )
N
N/**
N  * @brief Clear the USCI_SPI wakeup flag.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_CLR_WAKEUP_FLAG(uspi)  ( (uspi)->WKSTS |= USPI_WKSTS_WKF_Msk )
N
N/**
N  * @brief Get protocol interrupt flag/status.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @return The interrupt flag/status of protocol status register.
N  * \hideinitializer
N  */
N#define USPI_GET_PROT_STATUS(uspi)    ( (uspi)->PROTSTS )
N
N/**
N  * @brief Clear specified protocol interrupt flag.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntTypeFlag Interrupt Type Flag, should be
N  *                                  - \ref USPI_PROTSTS_SSACTIF_Msk
N  *                                  - \ref USPI_PROTSTS_SSINAIF_Msk
N  *                                  - \ref USPI_PROTSTS_SLVBEIF_Msk
N  *                                  - \ref USPI_PROTSTS_SLVTOIF_Msk
N  *                                  - \ref USPI_PROTSTS_RXENDIF_Msk
N  *                                  - \ref USPI_PROTSTS_RXSTIF_Msk
N  *                                  - \ref USPI_PROTSTS_TXENDIF_Msk
N  *                                  - \ref USPI_PROTSTS_TXSTIF_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_CLR_PROT_INT_FLAG(uspi, u32IntTypeFlag)    ( (uspi)->PROTSTS = (u32IntTypeFlag) )
N
N/**
N  * @brief Get buffer interrupt flag/status.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @return The interrupt flag/status of buffer status register.
N  * \hideinitializer
N  */
N#define USPI_GET_BUF_STATUS(uspi)    ( (uspi)->BUFSTS )
N
N/**
N  * @brief Clear specified buffer interrupt flag.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntTypeFlag Interrupt Type Flag, should be
N  *                                  - \ref USPI_BUFSTS_TXUDRIF_Msk
N  *                                  - \ref USPI_BUFSTS_RXOVIF_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_CLR_BUF_INT_FLAG(uspi, u32IntTypeFlag)    ( (uspi)->BUFSTS = (u32IntTypeFlag) )
N
N/**
N  * @brief Enable specified protocol interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_PROTIEN_SLVBEIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SLVTOIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SSACTIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SSINAIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_ENABLE_PROT_INT(uspi, u32IntSel)    ( (uspi)->PROTIEN |= (u32IntSel) )
N
N/**
N  * @brief Disable specified protocol interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_PROTIEN_SLVBEIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SLVTOIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SSACTIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SSINAIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_DISABLE_PROT_INT(uspi, u32IntSel)    ( (uspi)->PROTIEN &= ~ (u32IntSel) )
N
N/**
N  * @brief Enable specified buffer interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_BUFCTL_RXOVIEN_Msk
N  *                                  - \ref USPI_BUFCTL_TXUDRIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_ENABLE_BUF_INT(uspi, u32IntSel)    ( (uspi)->BUFCTL |= (u32IntSel) )
N
N/**
N  * @brief Disable specified buffer interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_BUFCTL_RXOVIEN_Msk
N  *                                  - \ref USPI_BUFCTL_TXUDRIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_DISABLE_BUF_INT(uspi, u32IntSel)    ( (uspi)->BUFCTL &= ~ (u32IntSel) )
N
N/**
N  * @brief Enable specified transfer interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_INTEN_RXENDIEN_Msk
N  *                                  - \ref USPI_INTEN_RXSTIEN_Msk
N  *                                  - \ref USPI_INTEN_TXENDIEN_Msk
N  *                                  - \ref USPI_INTEN_TXSTIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_ENABLE_TRANS_INT(uspi, u32IntSel)    ( (uspi)->INTEN |= (u32IntSel) )
N
N/**
N  * @brief Disable specified transfer interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_INTEN_RXENDIEN_Msk
N  *                                  - \ref USPI_INTEN_RXSTIEN_Msk
N  *                                  - \ref USPI_INTEN_TXENDIEN_Msk
N  *                                  - \ref USPI_INTEN_TXSTIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_DISABLE_TRANS_INT(uspi, u32IntSel)    ( (uspi)->INTEN &= ~ (u32IntSel) )
N
N/**
N  * @brief      Trigger RX PDMA function.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return     None.
N  * @details    Set RXPDMAEN bit of USPI_PDMACTL register to enable RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define USPI_TRIGGER_RX_PDMA(uspi)   ( (uspi)->PDMACTL |= USPI_PDMACTL_RXPDMAEN_Msk | USPI_PDMACTL_PDMAEN_Msk )
N
N/**
N  * @brief      Trigger TX PDMA function.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return     None.
N  * @details    Set TXPDMAEN bit of USPI_PDMACTL register to enable TX PDMA transfer function.
N  * \hideinitializer
N  */
N#define USPI_TRIGGER_TX_PDMA(uspi)   ( (uspi)->PDMACTL |= USPI_PDMACTL_TXPDMAEN_Msk | USPI_PDMACTL_PDMAEN_Msk )
N
N/**
N  * @brief      Trigger TX and RX PDMA function.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return     None.
N  * @details    Set TXPDMAEN bit and RXPDMAEN bit of USPI_PDMACTL register to enable TX and RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define USPI_TRIGGER_TX_RX_PDMA(uspi)   ((uspi)->PDMACTL |= USPI_PDMACTL_TXPDMAEN_Msk|USPI_PDMACTL_RXPDMAEN_Msk|USPI_PDMACTL_PDMAEN_Msk)
N
N/**
N  * @brief      Disable RX PDMA transfer.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return     None.
N  * @details    Clear RXPDMAEN bit of USPI_PDMACTL register to disable RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define USPI_DISABLE_RX_PDMA(uspi) ( (uspi)->PDMACTL &= ~USPI_PDMACTL_RXPDMAEN_Msk )
N
N/**
N  * @brief      Disable TX PDMA transfer.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return     None.
N  * @details    Clear TXPDMAEN bit of USPI_PDMACTL register to disable TX PDMA transfer function.
N  * \hideinitializer
N  */
N#define USPI_DISABLE_TX_PDMA(uspi) ( (uspi)->PDMACTL &= ~USPI_PDMACTL_TXPDMAEN_Msk )
N
N/**
N  * @brief      Disable TX and RX PDMA transfer.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return     None.
N  * @details    Clear TXPDMAEN bit and RXPDMAEN bit of USPI_PDMACTL register to disable TX and RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define USPI_DISABLE_TX_RX_PDMA(uspi) ( (uspi)->PDMACTL &= ~(USPI_PDMACTL_TXPDMAEN_Msk | USPI_PDMACTL_RXPDMAEN_Msk))
N
Nuint32_t USPI_Open(USPI_T *uspi, uint32_t u32MasterSlave, uint32_t u32SPIMode,  uint32_t u32DataWidth, uint32_t u32BusClock);
Nvoid USPI_Close(USPI_T *uspi);
Nvoid USPI_ClearRxBuf(USPI_T *uspi);
Nvoid USPI_ClearTxBuf(USPI_T *uspi);
Nvoid USPI_DisableAutoSS(USPI_T *uspi);
Nvoid USPI_EnableAutoSS(USPI_T *uspi, uint32_t u32SSPinMask, uint32_t u32ActiveLevel);
Nuint32_t USPI_SetBusClock(USPI_T *uspi, uint32_t u32BusClock);
Nuint32_t USPI_GetBusClock(USPI_T *uspi);
Nvoid USPI_EnableInt(USPI_T *uspi, uint32_t u32Mask);
Nvoid USPI_DisableInt(USPI_T *uspi, uint32_t u32Mask);
Nuint32_t USPI_GetIntFlag(USPI_T *uspi, uint32_t u32Mask);
Nvoid USPI_ClearIntFlag(USPI_T *uspi, uint32_t u32Mask);
Nuint32_t USPI_GetStatus(USPI_T *uspi, uint32_t u32Mask);
Nvoid USPI_EnableWakeup(USPI_T *uspi);
Nvoid USPI_DisableWakeup(USPI_T *uspi);
N
N
N/*@}*/ /* end of group USCI_SPI_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group USCI_SPI_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __USCI_SPI_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 584 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "usci_uart.h"
L 1 "..\..\..\Library\StdDriver\inc\usci_uart.h" 1
N/**************************************************************************//**
N * @file     usci_uart.h
N * @version  V1.00
N * @brief    M031 series USCI UART (UUART) driver header file
N *
N * SPDX-License-Identifier: Apache-2.0
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N*****************************************************************************/
N#ifndef __USCI_UART_H__
N#define __USCI_UART_H__
N
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup USCI_UART_Driver USCI_UART Driver
N  @{
N*/
N
N/** @addtogroup USCI_UART_EXPORTED_CONSTANTS USCI_UART Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UUART_LINECTL constants definitions                                                                     */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UUART_WORD_LEN_6     (6ul << UUART_LINECTL_DWIDTH_Pos) /*!< UUART_LINECTL setting to set UART word length to 6 bits \hideinitializer */
N#define UUART_WORD_LEN_7     (7ul << UUART_LINECTL_DWIDTH_Pos) /*!< UUART_LINECTL setting to set UART word length to 7 bits \hideinitializer */
N#define UUART_WORD_LEN_8     (8ul << UUART_LINECTL_DWIDTH_Pos) /*!< UUART_LINECTL setting to set UART word length to 8 bits \hideinitializer */
N#define UUART_WORD_LEN_9     (9ul << UUART_LINECTL_DWIDTH_Pos) /*!< UUART_LINECTL setting to set UART word length to 9 bits \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UUART_PROTCTL constants definitions                                                                     */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UUART_PARITY_NONE    (0x0ul << UUART_PROTCTL_PARITYEN_Pos)    /*!< UUART_PROTCTL setting to set UART as no parity \hideinitializer */
N#define UUART_PARITY_ODD     (0x1ul << UUART_PROTCTL_PARITYEN_Pos)    /*!< UUART_PROTCTL setting to set UART as odd parity \hideinitializer */
N#define UUART_PARITY_EVEN    (0x3ul << UUART_PROTCTL_PARITYEN_Pos)    /*!< UUART_PROTCTL setting to set UART as even parity \hideinitializer */
N
N#define UUART_STOP_BIT_1     (0x0ul) /*!< UUART_PROTCTL setting for one stop bit \hideinitializer */
N#define UUART_STOP_BIT_2     (0x1ul) /*!< UUART_PROTCTL setting for two stop bit \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* USCI UART interrupt mask definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UUART_ABR_INT_MASK      (0x002ul) /*!< Auto-baud rate interrupt mask \hideinitializer */
N#define UUART_RLS_INT_MASK      (0x004ul) /*!< Receive line status interrupt mask \hideinitializer */
N#define UUART_BUF_RXOV_INT_MASK (0x008ul) /*!< Buffer RX overrun interrupt mask \hideinitializer */
N#define UUART_TXST_INT_MASK     (0x010ul) /*!< TX start interrupt mask \hideinitializer */
N#define UUART_TXEND_INT_MASK    (0x020ul) /*!< Tx end interrupt mask \hideinitializer */
N#define UUART_RXST_INT_MASK     (0x040ul) /*!< RX start interrupt mask \hideinitializer */
N#define UUART_RXEND_INT_MASK    (0x080ul) /*!< RX end interrupt mask \hideinitializer */
N
N
N/*@}*/ /* end of group USCI_UART_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup USCI_UART_EXPORTED_FUNCTIONS USCI_UART Exported Functions
N  @{
N*/
N
N
N/**
N *    @brief        Write USCI_UART data
N *
N *    @param[in]    uuart   The pointer of the specified USCI_UART module
N *    @param[in]    u8Data  Data byte to transmit.
N *
N *    @return       None
N *
N *    @details      This macro write Data to Tx data register.
N *    \hideinitializer
N */
N#define UUART_WRITE(uuart, u8Data)    ((uuart)->TXDAT = (u8Data))
N
N
N/**
N *    @brief        Read USCI_UART data
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @return       The oldest data byte in RX buffer.
N *
N *    @details      This macro read Rx data register.
N *    \hideinitializer
N */
N#define UUART_READ(uuart)    ((uuart)->RXDAT)
N
N
N/**
N *    @brief        Get Tx empty
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @retval       0   Tx buffer is not empty
N *    @retval       >=1 Tx buffer is empty
N *
N *    @details      This macro get Transmitter buffer empty register value.
N *    \hideinitializer
N */
N#define UUART_GET_TX_EMPTY(uuart)    ((uuart)->BUFSTS & UUART_BUFSTS_TXEMPTY_Msk)
N
N
N/**
N *    @brief        Get Rx empty
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @retval       0   Rx buffer is not empty
N *    @retval       >=1 Rx buffer is empty
N *
N *    @details      This macro get Receiver buffer empty register value.
N *    \hideinitializer
N */
N#define UUART_GET_RX_EMPTY(uuart)    ((uuart)->BUFSTS & UUART_BUFSTS_RXEMPTY_Msk)
N
N
N/**
N *    @brief        Check specified usci_uart port transmission is over.
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @retval       0 Tx transmission is not over
N *    @retval       1 Tx transmission is over
N *
N *    @details      This macro return Transmitter Empty Flag register bit value. \n
N *                  It indicates if specified usci_uart port transmission is over nor not.
N *    \hideinitializer
N */
N#define UUART_IS_TX_EMPTY(uuart)    (((uuart)->BUFSTS & UUART_BUFSTS_TXEMPTY_Msk) >> UUART_BUFSTS_TXEMPTY_Pos)
N
N
N/**
N *    @brief        Check specified usci_uart port receiver is empty.
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @retval       0 Rx receiver is not empty
N *    @retval       1 Rx receiver is empty
N *
N *    @details      This macro return Receive Empty Flag register bit value. \n
N *                  It indicates if specified usci_uart port receiver is empty nor not.
N *    \hideinitializer
N */
N#define UUART_IS_RX_EMPTY(uuart)    (((uuart)->BUFSTS & UUART_BUFSTS_RXEMPTY_Msk) >> UUART_BUFSTS_RXEMPTY_Pos)
N
N
N/**
N *    @brief        Wait specified usci_uart port transmission is over
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @return       None
N *
N *    @details      This macro wait specified usci_uart port transmission is over.
N *    \hideinitializer
N */
N#define UUART_WAIT_TX_EMPTY(uuart)    while(!((((uuart)->BUFSTS) & UUART_BUFSTS_TXEMPTY_Msk) >> UUART_BUFSTS_TXEMPTY_Pos))
N
N
N/**
N *    @brief        Check TX buffer is full or not
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @retval       1 TX buffer is full
N *    @retval       0 TX buffer is not full
N *
N *    @details      This macro check TX buffer is full or not.
N *    \hideinitializer
N */
N#define UUART_IS_TX_FULL(uuart)    (((uuart)->BUFSTS & UUART_BUFSTS_TXFULL_Msk)>>UUART_BUFSTS_TXFULL_Pos)
N
N
N/**
N *    @brief        Check RX buffer is full or not
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @retval       1 RX buffer is full
N *    @retval       0 RX buffer is not full
N *
N *    @details      This macro check RX buffer is full or not.
N *    \hideinitializer
N */
N#define UUART_IS_RX_FULL(uuart)    (((uuart)->BUFSTS & UUART_BUFSTS_RXFULL_Msk)>>UUART_BUFSTS_RXFULL_Pos)
N
N
N/**
N *    @brief        Get Tx full register value
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @retval       0   Tx buffer is not full.
N *    @retval       >=1 Tx buffer is full.
N *
N *    @details      This macro get Tx full register value.
N *    \hideinitializer
N */
N#define UUART_GET_TX_FULL(uuart)    ((uuart)->BUFSTS & UUART_BUFSTS_TXFULL_Msk)
N
N
N/**
N *    @brief        Get Rx full register value
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @retval       0   Rx buffer is not full.
N *    @retval       >=1 Rx buffer is full.
N *
N *    @details      This macro get Rx full register value.
N *    \hideinitializer
N */
N#define UUART_GET_RX_FULL(uuart)    ((uuart)->BUFSTS & UUART_BUFSTS_RXFULL_Msk)
N
N
N/**
N *    @brief        Enable specified USCI_UART protocol interrupt
N *
N *    @param[in]    uuart      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_PROTIEN_RLSIEN_Msk   : Rx Line status interrupt
N *                             - \ref UUART_PROTIEN_ABRIEN_Msk   : Auto-baud rate interrupt
N *
N *    @return       None
N *
N *    @details      This macro enable specified USCI_UART protocol interrupt.
N *    \hideinitializer
N */
N#define UUART_ENABLE_PROT_INT(uuart, u32IntSel)    ((uuart)->PROTIEN |= (u32IntSel))
N
N
N/**
N *    @brief        Disable specified USCI_UART protocol interrupt
N *
N *    @param[in]    uuart      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_PROTIEN_RLSIEN_Msk   : Rx Line status interrupt
N *                             - \ref UUART_PROTIEN_ABRIEN_Msk   : Auto-baud rate interrupt
N *
N *    @return       None
N *
N *    @details      This macro disable specified USCI_UART protocol interrupt.
N *    \hideinitializer
N */
N#define UUART_DISABLE_PROT_INT(uuart, u32IntSel)    ((uuart)->PROTIEN &= ~(u32IntSel))
N
N
N/**
N *    @brief        Enable specified USCI_UART buffer interrupt
N *
N *    @param[in]    uuart      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_BUFCTL_RXOVIEN_Msk     : Receive buffer overrun error interrupt
N *
N *    @return       None
N *
N *    @details      This macro enable specified USCI_UART buffer interrupt.
N *    \hideinitializer
N */
N#define UUART_ENABLE_BUF_INT(uuart, u32IntSel)    ((uuart)->BUFCTL |= (u32IntSel))
N
N
N/**
N *    @brief        Disable specified USCI_UART buffer interrupt
N *
N *    @param[in]    uuart      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_BUFCTL_RXOVIEN_Msk     : Receive buffer overrun error interrupt
N *
N *    @return       None
N *
N *    @details      This macro disable specified USCI_UART buffer interrupt.
N *    \hideinitializer
N */
N#define UUART_DISABLE_BUF_INT(uuart, u32IntSel)    ((uuart)->BUFCTL &= ~ (u32IntSel))
N
N
N/**
N *    @brief        Enable specified USCI_UART transfer interrupt
N *
N *    @param[in]    uuart      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_INTEN_RXENDIEN_Msk  : Receive end interrupt
N *                             - \ref UUART_INTEN_RXSTIEN_Msk   : Receive start interrupt
N *                             - \ref UUART_INTEN_TXENDIEN_Msk  : Transmit end interrupt
N *                             - \ref UUART_INTEN_TXSTIEN_Msk   : Transmit start interrupt
N *
N *    @return       None
N *
N *    @details      This macro enable specified USCI_UART transfer interrupt.
N *    \hideinitializer
N */
N#define UUART_ENABLE_TRANS_INT(uuart, u32IntSel)    ((uuart)->INTEN |= (u32IntSel))
N
N
N/**
N *    @brief        Disable specified USCI_UART transfer interrupt
N *
N *    @param[in]    uuart      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_INTEN_RXENDIEN_Msk  : Receive end interrupt
N *                             - \ref UUART_INTEN_RXSTIEN_Msk   : Receive start interrupt
N *                             - \ref UUART_INTEN_TXENDIEN_Msk  : Transmit end interrupt
N *                             - \ref UUART_INTEN_TXSTIEN_Msk   : Transmit start interrupt
N *
N *    @return       None
N *
N *    @details      This macro disable specified USCI_UART transfer interrupt.
N *    \hideinitializer
N */
N#define UUART_DISABLE_TRANS_INT(uuart, u32IntSel)    ((uuart)->INTEN &= ~(u32IntSel))
N
N
N/**
N *    @brief        Get protocol interrupt flag/status
N *
N *    @param[in]    uuart        The pointer of the specified USCI_UART module
N *
N *    @return       The interrupt flag/status of protocol status register.
N *
N *    @details      This macro get protocol status register value.
N *    \hideinitializer
N */
N#define UUART_GET_PROT_STATUS(uuart)    ((uuart)->PROTSTS)
N
N
N/**
N *    @brief        Clear specified protocol interrupt flag
N *
N *    @param[in]    uuart           The pointer of the specified USCI_UART module
N *    @param[in]    u32IntTypeFlag  Interrupt Type Flag, should be
N *                                  - \ref UUART_PROTSTS_ABERRSTS_Msk    : Auto-baud Rate Error Interrupt Indicator
N *                                  - \ref UUART_PROTSTS_ABRDETIF_Msk    : Auto-baud Rate Detected Interrupt Flag
N *                                  - \ref UUART_PROTSTS_BREAK_Msk       : Break Flag
N *                                  - \ref UUART_PROTSTS_FRMERR_Msk      : Framing Error Flag
N *                                  - \ref UUART_PROTSTS_PARITYERR_Msk   : Parity Error Flag
N *                                  - \ref UUART_PROTSTS_RXENDIF_Msk     : Receive End Interrupt Flag
N *                                  - \ref UUART_PROTSTS_RXSTIF_Msk      : Receive Start Interrupt Flag
N *                                  - \ref UUART_PROTSTS_TXENDIF_Msk     : Transmit End Interrupt Flag
N *                                  - \ref UUART_PROTSTS_TXSTIF_Msk      : Transmit Start Interrupt Flag
N *
N *    @return       None
N *
N *    @details      This macro clear specified protocol interrupt flag.
N *    \hideinitializer
N */
N#define UUART_CLR_PROT_INT_FLAG(uuart,u32IntTypeFlag)    ((uuart)->PROTSTS = (u32IntTypeFlag))
N
N
N/**
N *    @brief        Get transmit/receive buffer interrupt flag/status
N *
N *    @param[in]    uuart        The pointer of the specified USCI_UART module
N *
N *    @return       The interrupt flag/status of buffer status register.
N *
N *    @details      This macro get buffer status register value.
N *    \hideinitializer
N */
N#define UUART_GET_BUF_STATUS(uuart)    ((uuart)->BUFSTS)
N
N
N/**
N *    @brief        Clear specified buffer interrupt flag
N *
N *    @param[in]    uuart           The pointer of the specified USCI_UART module
N *    @param[in]    u32IntTypeFlag  Interrupt Type Flag, should be
N *                                  - \ref UUART_BUFSTS_RXOVIF_Msk : Receive Buffer Over-run Error  Interrupt Indicator
N *
N *    @return       None
N *
N *    @details      This macro clear specified buffer interrupt flag.
N *    \hideinitializer
N */
N#define UUART_CLR_BUF_INT_FLAG(uuart,u32IntTypeFlag)    ((uuart)->BUFSTS = (u32IntTypeFlag))
N
N
N/**
N *    @brief        Get wakeup flag
N *
N *    @param[in]    uuart    The pointer of the specified USCI_UART module
N *
N *    @retval       0       Chip did not wake up from power-down mode.
N *    @retval       1       Chip waked up from power-down mode.
N *
N *    @details      This macro get wakeup flag.
N *    \hideinitializer
N */
N#define UUART_GET_WAKEUP_FLAG(uuart)    ((uuart)->WKSTS & UUART_WKSTS_WKF_Msk ? 1: 0 )
N
N
N/**
N *    @brief        Clear wakeup flag
N *
N *    @param[in]    uuart        The pointer of the specified USCI_UART module
N *
N *    @return       None
N *
N *    @details      This macro clear wakeup flag.
N *    \hideinitializer
N */
N#define UUART_CLR_WAKEUP_FLAG(uuart)    ((uuart)->WKSTS = UUART_WKSTS_WKF_Msk)
N
N
N/**
N *    @brief        Enable specified USCI_UART PDMA function
N *
N *    @param[in]    uuart      The pointer of the specified USCI_UART module
N *    @param[in]    u32FuncSel Combination of following functions
N *                             - \ref UUART_PDMACTL_TXPDMAEN_Msk
N *                             - \ref UUART_PDMACTL_RXPDMAEN_Msk
N *                             - \ref UUART_PDMACTL_PDMAEN_Msk
N *
N *    @return       None
N *
N *    \hideinitializer
N */
N#define UUART_PDMA_ENABLE(uuart, u32FuncSel)   ((uuart)->PDMACTL |= (u32FuncSel))
N
N
N/**
N *    @brief        Disable specified USCI_UART PDMA function
N *
N *    @param[in]    uuart      The pointer of the specified USCI_UART module
N *    @param[in]    u32FuncSel Combination of following functions
N *                             - \ref UUART_PDMACTL_TXPDMAEN_Msk
N *                             - \ref UUART_PDMACTL_RXPDMAEN_Msk
N *                             - \ref UUART_PDMACTL_PDMAEN_Msk
N *
N *    @return       None
N *
N *    \hideinitializer
N */
N#define UUART_PDMA_DISABLE(uuart, u32FuncSel)   ((uuart)->PDMACTL &= ~(u32FuncSel))
N
N
N/**
N *    @brief      Trigger RX PDMA function.
N *
N *    @param[in]  uuart The pointer of the specified USCI_UART module.
N *
N *    @return     None.
N *
N *    @details    Set RXPDMAEN bit of UUART_PDMACTL register to enable RX PDMA transfer function.
N *    \hideinitializer
N */
N#define UUART_TRIGGER_RX_PDMA(uuart)   ((uuart)->PDMACTL |= UUART_PDMACTL_RXPDMAEN_Msk|UUART_PDMACTL_PDMAEN_Msk)
N
N
N/**
N *    @brief      Trigger TX PDMA function.
N *
N *    @param[in]  uuart The pointer of the specified USCI_UART module.
N *
N *    @return     None.
N *
N *    @details    Set TXPDMAEN bit of UUART_PDMACTL register to enable TX PDMA transfer function.
N *    \hideinitializer
N */
N#define UUART_TRIGGER_TX_PDMA(uuart)   ((uuart)->PDMACTL |= UUART_PDMACTL_TXPDMAEN_Msk|UUART_PDMACTL_PDMAEN_Msk)
N
N
N/**
N *    @brief      Disable RX PDMA transfer.
N *
N *    @param[in]  uuart The pointer of the specified USCI_UART module.
N *
N *    @return     None.
N *
N *    @details    Clear RXPDMAEN bit of UUART_PDMACTL register to disable RX PDMA transfer function.
N *    \hideinitializer
N */
N#define UUART_DISABLE_RX_PDMA(uuart) ( (uuart)->PDMACTL &= ~UUART_PDMACTL_RXPDMAEN_Msk )
N
N
N/**
N *    @brief      Disable TX PDMA transfer.
N *
N *    @param[in]  uuart The pointer of the specified USCI_UART module.
N *
N *    @return     None.
N *
N *    @details    Clear TXPDMAEN bit of UUART_PDMACTL register to disable TX PDMA transfer function.
N *    \hideinitializer
N */
N#define UUART_DISABLE_TX_PDMA(uuart) ( (uuart)->PDMACTL &= ~UUART_PDMACTL_TXPDMAEN_Msk )
N
N
Nvoid UUART_ClearIntFlag(UUART_T* uuart, uint32_t u32Mask);
Nuint32_t UUART_GetIntFlag(UUART_T* uuart, uint32_t u32Mask);
Nvoid UUART_Close(UUART_T* uuart);
Nvoid UUART_DisableInt(UUART_T*  uuart, uint32_t u32Mask);
Nvoid UUART_EnableInt(UUART_T*  uuart, uint32_t u32Mask);
Nuint32_t UUART_Open(UUART_T* uuart, uint32_t u32baudrate);
Nuint32_t UUART_Read(UUART_T* uuart, uint8_t pu8RxBuf[], uint32_t u32ReadBytes);
Nuint32_t UUART_SetLine_Config(UUART_T* uuart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t u32stop_bits);
Nuint32_t UUART_Write(UUART_T* uuart, uint8_t pu8TxBuf[], uint32_t u32WriteBytes);
Nvoid UUART_EnableWakeup(UUART_T* uuart, uint32_t u32WakeupMode);
Nvoid UUART_DisableWakeup(UUART_T* uuart);
Nvoid UUART_EnableFlowCtrl(UUART_T* uuart);
Nvoid UUART_DisableFlowCtrl(UUART_T* uuart);
N
N
N/*@}*/ /* end of group USCI_UART_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group USCI_UART_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __USCI_UART_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 585 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "wdt.h"
L 1 "..\..\..\Library\StdDriver\inc\wdt.h" 1
N/**************************************************************************//**
N * @file     wdt.h
N * @version  V3.00
N * $Revision: 6 $
N * $Date: 18/06/08 11:34a $
N * @brief    M031 series Watchdog Timer(WDT) driver header file
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __WDT_H__
N#define __WDT_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup WDT_Driver WDT Driver
N  @{
N*/
N
N/** @addtogroup WDT_EXPORTED_CONSTANTS WDT Exported Constants
N  @{
N*/
N/*---------------------------------------------------------------------------------------------------------*/
N/*  WDT Time-out Interval Period Constant Definitions                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define WDT_TIMEOUT_2POW4           (0UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^4 * WDT clocks   \hideinitializer */
N#define WDT_TIMEOUT_2POW6           (1UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^6 * WDT clocks   \hideinitializer */
N#define WDT_TIMEOUT_2POW8           (2UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^8 * WDT clocks   \hideinitializer */
N#define WDT_TIMEOUT_2POW10          (3UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^10 * WDT clocks  \hideinitializer */
N#define WDT_TIMEOUT_2POW12          (4UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^12 * WDT clocks  \hideinitializer */
N#define WDT_TIMEOUT_2POW14          (5UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^14 * WDT clocks  \hideinitializer */
N#define WDT_TIMEOUT_2POW16          (6UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^16 * WDT clocks  \hideinitializer */
N#define WDT_TIMEOUT_2POW18          (7UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^18 * WDT clocks  \hideinitializer */
N#define WDT_TIMEOUT_2POW20          (8UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^20 * WDT clocks  \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  WDT  Reset Delay Period Constant Definitions                                                           */
N/*---------------------------------------------------------------------------------------------------------*/
N#define WDT_RESET_DELAY_1026CLK     (0UL << WDT_ALTCTL_RSTDSEL_Pos) /*!< Setting WDT reset delay period to 1026 * WDT clocks  \hideinitializer */
N#define WDT_RESET_DELAY_130CLK      (1UL << WDT_ALTCTL_RSTDSEL_Pos) /*!< Setting WDT reset delay period to 130 * WDT clocks   \hideinitializer */
N#define WDT_RESET_DELAY_18CLK       (2UL << WDT_ALTCTL_RSTDSEL_Pos) /*!< Setting WDT reset delay period to 18 * WDT clocks    \hideinitializer */
N#define WDT_RESET_DELAY_3CLK        (3UL << WDT_ALTCTL_RSTDSEL_Pos) /*!< Setting WDT reset delay period to 3 * WDT clocks     \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  WDT Free Reset Counter Keyword Constant Definitions                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define WDT_RESET_COUNTER_KEYWORD   (0x00005AA5UL)    /*!< Fill this value to WDT_RSTCNT register to free reset WDT counter \hideinitializer */
N
N/*@}*/ /* end of group WDT_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup WDT_EXPORTED_FUNCTIONS WDT Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Clear WDT Reset System Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro clears WDT time-out reset system flag.
N  * \hideinitializer
N  */
N#define WDT_CLEAR_RESET_FLAG()          (WDT->CTL = (WDT->CTL & ~(WDT_CTL_IF_Msk | WDT_CTL_WKF_Msk)) | WDT_CTL_RSTF_Msk)
N
N/**
N  * @brief      Clear WDT Time-out Interrupt Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro clears WDT time-out interrupt flag.
N  * \hideinitializer
N  */
N#define WDT_CLEAR_TIMEOUT_INT_FLAG()    (WDT->CTL = (WDT->CTL & ~(WDT_CTL_RSTF_Msk | WDT_CTL_WKF_Msk)) | WDT_CTL_IF_Msk)
N
N/**
N  * @brief      Clear WDT Wake-up Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro clears WDT time-out wake-up system flag.
N  * \hideinitializer
N  */
N#define WDT_CLEAR_TIMEOUT_WAKEUP_FLAG() (WDT->CTL = (WDT->CTL & ~(WDT_CTL_RSTF_Msk | WDT_CTL_IF_Msk)) | WDT_CTL_WKF_Msk)
N
N/**
N  * @brief      Get WDT Time-out Reset Flag
N  *
N  * @param      None
N  *
N  * @retval     0   WDT time-out reset system did not occur
N  * @retval     1   WDT time-out reset system occurred
N  *
N  * @details    This macro indicates system has been reset by WDT time-out reset or not.
N  * \hideinitializer
N  */
N#define WDT_GET_RESET_FLAG()            ((WDT->CTL & WDT_CTL_RSTF_Msk)? 1UL : 0UL)
N
N/**
N  * @brief      Get WDT Time-out Interrupt Flag
N  *
N  * @param      None
N  *
N  * @retval     0   WDT time-out interrupt did not occur
N  * @retval     1   WDT time-out interrupt occurred
N  *
N  * @details    This macro indicates WDT time-out interrupt occurred or not.
N  * \hideinitializer
N  */
N#define WDT_GET_TIMEOUT_INT_FLAG()      ((WDT->CTL & WDT_CTL_IF_Msk)? 1UL : 0UL)
N
N/**
N  * @brief      Get WDT Time-out Wake-up Flag
N  *
N  * @param      None
N  *
N  * @retval     0   WDT time-out interrupt does not cause CPU wake-up
N  * @retval     1   WDT time-out interrupt event cause CPU wake-up
N  *
N  * @details    This macro indicates WDT time-out interrupt event has waked up system or not.
N  * \hideinitializer
N  */
N#define WDT_GET_TIMEOUT_WAKEUP_FLAG()   ((WDT->CTL & WDT_CTL_WKF_Msk)? 1UL : 0UL)
N
N/**
N  * @brief      Reset WDT Counter
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to reset the internal 18-bit WDT up counter value.
N  * @note       If WDT is activated and time-out reset system function is enabled also, user should \n
N  *             reset the 18-bit WDT up counter value to avoid generate WDT time-out reset signal to \n
N  *             reset system before the WDT time-out reset delay period expires.
N  * \hideinitializer
N  */
N#define WDT_RESET_COUNTER()             (WDT->RSTCNT = WDT_RESET_COUNTER_KEYWORD)
N
N__STATIC_INLINE void WDT_Close(void);
Xstatic __inline void WDT_Close(void);
N__STATIC_INLINE void WDT_EnableInt(void);
Xstatic __inline void WDT_EnableInt(void);
N__STATIC_INLINE void WDT_DisableInt(void);
Xstatic __inline void WDT_DisableInt(void);
N/**
N  * @brief      Stop WDT Counting
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This function will stop WDT counting and disable WDT module.
N  */
N__STATIC_INLINE void WDT_Close(void)
Xstatic __inline void WDT_Close(void)
N{
N    WDT->CTL = 0UL;
X    ((WDT_T *) ((( uint32_t)0x40000000) + 0x40000))->CTL = 0UL;
N    while(WDT->CTL & WDT_CTL_SYNC_Msk); // Wait disable WDTEN bit completed, it needs 2 * WDT_CLK.
X    while(((WDT_T *) ((( uint32_t)0x40000000) + 0x40000))->CTL & (0x1ul << (30))); 
N    return;
N}
N
N/**
N  * @brief      Enable WDT Time-out Interrupt
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This function will enable the WDT time-out interrupt function.
N  */
N__STATIC_INLINE void WDT_EnableInt(void)
Xstatic __inline void WDT_EnableInt(void)
N{
N    WDT->CTL |= WDT_CTL_INTEN_Msk;
X    ((WDT_T *) ((( uint32_t)0x40000000) + 0x40000))->CTL |= (0x1ul << (6));
N    while(WDT->CTL & WDT_CTL_SYNC_Msk); // Wait enable WDTEN bit completed, it needs 2 * WDT_CLK.
X    while(((WDT_T *) ((( uint32_t)0x40000000) + 0x40000))->CTL & (0x1ul << (30))); 
N    return;
N}
N
N/**
N  * @brief      Disable WDT Time-out Interrupt
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This function will disable the WDT time-out interrupt function.
N  */
N__STATIC_INLINE void WDT_DisableInt(void)
Xstatic __inline void WDT_DisableInt(void)
N{
N    /* Do not touch another write 1 clear bits */
N    WDT->CTL &= ~(WDT_CTL_INTEN_Msk | WDT_CTL_RSTF_Msk | WDT_CTL_IF_Msk | WDT_CTL_WKF_Msk);
X    ((WDT_T *) ((( uint32_t)0x40000000) + 0x40000))->CTL &= ~((0x1ul << (6)) | (0x1ul << (2)) | (0x1ul << (3)) | (0x1ul << (5)));
N    return;
N}
N
Nvoid WDT_Open(uint32_t u32TimeoutInterval, uint32_t u32ResetDelay, uint32_t u32EnableReset, uint32_t u32EnableWakeup);
N
N/*@}*/ /* end of group WDT_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group WDT_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__WDT_H__
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 586 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N#include "wwdt.h"
L 1 "..\..\..\Library\StdDriver\inc\wwdt.h" 1
N/**************************************************************************//**
N * @file     wwdt.h
N * @version  V3.00
N * $Revision: 5 $
N * $Date: 18/06/07 9:48a $
N * @brief    M031 series Window Watchdog Timet(WWDT) driver header file
N *
N * @note
N * SPDX-License-Identifier: Apache-2.0
N * Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __WWDT_H__
N#define __WWDT_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup WWDT_Driver WWDT Driver
N  @{
N*/
N
N/** @addtogroup WWDT_EXPORTED_CONSTANTS WWDT Exported Constants
N  @{
N*/
N/*---------------------------------------------------------------------------------------------------------*/
N/*  WWDT Prescale Period Constant Definitions                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#define WWDT_PRESCALER_1        (0 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 1 * (64*WWDT_CLK)    \hideinitializer */
N#define WWDT_PRESCALER_2        (1 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 2 * (64*WWDT_CLK)    \hideinitializer */
N#define WWDT_PRESCALER_4        (2 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 4 * (64*WWDT_CLK)    \hideinitializer */
N#define WWDT_PRESCALER_8        (3 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 8 * (64*WWDT_CLK)    \hideinitializer */
N#define WWDT_PRESCALER_16       (4 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 16 * (64*WWDT_CLK)   \hideinitializer */
N#define WWDT_PRESCALER_32       (5 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 32 * (64*WWDT_CLK)   \hideinitializer */
N#define WWDT_PRESCALER_64       (6 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 64 * (64*WWDT_CLK)   \hideinitializer */
N#define WWDT_PRESCALER_128      (7 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 128 * (64*WWDT_CLK)  \hideinitializer */
N#define WWDT_PRESCALER_192      (8 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 192 * (64*WWDT_CLK)  \hideinitializer */
N#define WWDT_PRESCALER_256      (9 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 256 * (64*WWDT_CLK)  \hideinitializer */
N#define WWDT_PRESCALER_384      (10 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 384 * (64*WWDT_CLK)  \hideinitializer */
N#define WWDT_PRESCALER_512      (11 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 512 * (64*WWDT_CLK)  \hideinitializer */
N#define WWDT_PRESCALER_768      (12 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 768 * (64*WWDT_CLK)  \hideinitializer */
N#define WWDT_PRESCALER_1024     (13 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 1024 * (64*WWDT_CLK) \hideinitializer */
N#define WWDT_PRESCALER_1536     (14 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 1536 * (64*WWDT_CLK) \hideinitializer */
N#define WWDT_PRESCALER_2048     (15 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 2048 * (64*WWDT_CLK) \hideinitializer */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  WWDT Reload Counter Keyword Constant Definitions                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
N#define WWDT_RELOAD_WORD        (0x00005AA5)                /*!< Fill this value to WWDT_RLDCNT register to reload WWDT counter \hideinitializer */
N
N/*@}*/ /* end of group WWDT_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup WWDT_EXPORTED_FUNCTIONS WWDT Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Clear WWDT Reset System Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to clear WWDT time-out reset system flag.
N  * \hideinitializer
N  */
N#define WWDT_CLEAR_RESET_FLAG()     (WWDT->STATUS = WWDT_STATUS_WWDTRF_Msk)
N
N/**
N  * @brief      Clear WWDT Compared Match Interrupt Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to clear WWDT compared match interrupt flag.
N  * \hideinitializer
N  */
N#define WWDT_CLEAR_INT_FLAG()       (WWDT->STATUS = WWDT_STATUS_WWDTIF_Msk)
N
N/**
N  * @brief      Get WWDT Reset System Flag
N  *
N  * @param      None
N  *
N  * @retval     0   WWDT time-out reset system did not occur
N  * @retval     1   WWDT time-out reset system occurred
N  *
N  * @details    This macro is used to indicate system has been reset by WWDT time-out reset or not.
N  * \hideinitializer
N  */
N#define WWDT_GET_RESET_FLAG()       ((WWDT->STATUS & WWDT_STATUS_WWDTRF_Msk)? 1 : 0)
N
N/**
N  * @brief      Get WWDT Compared Match Interrupt Flag
N  *
N  * @param      None
N  *
N  * @retval     0   WWDT compare match interrupt did not occur
N  * @retval     1   WWDT compare match interrupt occurred
N  *
N  * @details    This macro is used to indicate WWDT counter value matches CMPDAT value or not.
N  * \hideinitializer
N  */
N#define WWDT_GET_INT_FLAG()         ((WWDT->STATUS & WWDT_STATUS_WWDTIF_Msk)? 1 : 0)
N
N/**
N  * @brief      Get WWDT Counter
N  *
N  * @param      None
N  *
N  * @return     WWDT Counter Value
N  *
N  * @details    This macro reflects the current WWDT counter value.
N  * \hideinitializer
N  */
N#define WWDT_GET_COUNTER()          (WWDT->CNT)
N
N/**
N  * @brief      Reload WWDT Counter
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to reload the WWDT counter value to 0x3F.
N  * @note       User can only write WWDT_RLDCNT register to reload WWDT counter value when current WWDT counter value \n
N  *             between 0 and CMPDAT value. If user writes WWDT_RLDCNT when current WWDT counter value is larger than CMPDAT, \n
N  *             WWDT reset signal will generate immediately to reset system.
N  * \hideinitializer
N  */
N#define WWDT_RELOAD_COUNTER()       (WWDT->RLDCNT = WWDT_RELOAD_WORD)
N
Nvoid WWDT_Open(uint32_t u32PreScale, uint32_t u32CmpValue, uint32_t u32EnableInt);
N
N/*@}*/ /* end of group WWDT_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group WWDT_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__WWDT_H__
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 587 "..\..\..\Library\Device\Nuvoton\M031\Include\M031Series.h" 2
N
N#endif  // __M031SERIES_H__
N
N/* Copyright (C) 2018 Nuvoton Technology Corp. All rights reserved. */
L 13 "..\..\..\Library\Device\Nuvoton\M031\Include\NuMicro.h" 2
N
N#endif  /* __NUMICRO_H__ */
N
N/*** (C) COPYRIGHT 2017 Nuvoton Technology Corp. ***/
L 12 "..\..\..\Library\StdDriver\src\uart.c" 2
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup UART_Driver UART Driver
N  @{
N*/
N
N/** @addtogroup UART_EXPORTED_FUNCTIONS UART Exported Functions
N  @{
N*/
N
N/**
N *    @brief        Clear UART specified interrupt flag
N *
N *    @param[in]    uart                The pointer of the specified UART module.
N *    @param[in]    u32InterruptFlag    The specified interrupt of UART module.
N *                                      - \ref UART_INTSTS_SWBEINT_Msk   : Single-wire Bit Error Detect Interrupt
N *                                      - \ref UART_INTEN_WKIEN_Msk      : Wake-up interrupt
N *                                      - \ref UART_INTSTS_BUFERRINT_Msk : Buffer Error interrupt
N *                                      - \ref UART_INTSTS_MODEMINT_Msk  : Modem Status interrupt
N *                                      - \ref UART_INTSTS_RLSINT_Msk    : Receive Line Status interrupt
N *
N *    @return       None
N *
N *    @details      The function is used to clear UART specified interrupt flag.
N */
N
Nvoid UART_ClearIntFlag(UART_T *uart , uint32_t u32InterruptFlag)
N{
N
N
N    if (u32InterruptFlag & UART_INTSTS_SWBEINT_Msk)   /* Clear Bit Error Detection Interrupt */
X    if (u32InterruptFlag & (0x1ul << (24)))    
N    {
N        uart->INTSTS = UART_INTSTS_SWBEIF_Msk;
X        uart->INTSTS = (0x1ul << (16));
N    }
N
N    if (u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
X    if (u32InterruptFlag & (0x1ul << (10)))    
N    {
N        uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
X        uart->FIFOSTS = (0x1ul << (6)) | (0x1ul << (5)) | (0x1ul << (4));
N        uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
X        uart->FIFOSTS = (0x1ul << (3));
N    }
N
N    if (u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
X    if (u32InterruptFlag & (0x1ul << (11)))    
N    {
N        uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
X        uart->MODEMSTS |= (0x1ul << (0));
N    }
N
N    if (u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
X    if (u32InterruptFlag & (0x1ul << (13)))    
N    {
N        uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
X        uart->FIFOSTS = (0x1ul << (0)) | (0x1ul << (24));
N    }
N
N    if (u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
X    if (u32InterruptFlag & (0x1ul << (14)))    
N    {
N        uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
X        uart->WKSTS = (0x1ul << (0))  | (0x1ul << (1))  |
N                      UART_WKSTS_RFRTWKF_Msk | UART_WKSTS_RS485WKF_Msk |
X                      (0x1ul << (2)) | (0x1ul << (3)) |
N                      UART_WKSTS_TOUTWKF_Msk;
X                      (0x1ul << (4));
N    }
N
N}
N
N
N/**
N *  @brief      Disable UART interrupt
N *
N *  @param[in]  uart The pointer of the specified UART module.
N *
N *  @return     None
N *
N *  @details    The function is used to disable UART interrupt.
N */
Nvoid UART_Close(UART_T *uart)
N{
N    uart->INTEN = 0ul;
N}
N
N
N/**
N *  @brief      Disable UART auto flow control function
N *
N *  @param[in]  uart The pointer of the specified UART module.
N *
N *  @return     None
N *
N *  @details    The function is used to disable UART auto flow control.
N */
Nvoid UART_DisableFlowCtrl(UART_T *uart)
N{
N    uart->INTEN &= ~(UART_INTEN_ATORTSEN_Msk | UART_INTEN_ATOCTSEN_Msk);
X    uart->INTEN &= ~((0x1ul << (12)) | (0x1ul << (13)));
N}
N
N
N/**
N *    @brief        Disable UART specified interrupt
N *
N *    @param[in]    uart                The pointer of the specified UART module.
N *    @param[in]    u32InterruptFlag    The specified interrupt of UART module.
N *                                      - \ref UART_INTSTS_SWBEINT_Msk   : Single-wire Bit Error Detect Interrupt
N *                                      - \ref UART_INTEN_WKIEN_Msk      : Wake-up interrupt
N *                                      - \ref UART_INTEN_BUFERRIEN_Msk  : Buffer Error interrupt
N *                                      - \ref UART_INTEN_RXTOIEN_Msk    : Rx time-out interrupt
N *                                      - \ref UART_INTEN_MODEMIEN_Msk   : Modem status interrupt
N *                                      - \ref UART_INTEN_RLSIEN_Msk     : Receive Line status interrupt
N *                                      - \ref UART_INTEN_THREIEN_Msk    : Tx empty interrupt
N *                                      - \ref UART_INTEN_RDAIEN_Msk     : Rx ready interrupt *
N *
N *    @return       None
N *
N *    @details      The function is used to disable UART specified interrupt and disable NVIC UART IRQ.
N */
Nvoid UART_DisableInt(UART_T  *uart, uint32_t u32InterruptFlag)
N{
N    /* Disable UART specified interrupt */
N    UART_DISABLE_INT(uart, u32InterruptFlag);
X    ((uart)->INTEN &= ~ (u32InterruptFlag));
N
N}
N
N
N/**
N *    @brief        Enable UART auto flow control function
N *
N *    @param[in]    uart    The pointer of the specified UART module.
N *
N *    @return       None
N *
N *    @details      The function is used to Enable UART auto flow control.
N */
Nvoid UART_EnableFlowCtrl(UART_T *uart)
N{
N    /* Set RTS pin output is low level active */
N    uart->MODEM |= UART_MODEM_RTSACTLV_Msk;
X    uart->MODEM |= (0x1ul << (9));
N
N    /* Set CTS pin input is low level active */
N    uart->MODEMSTS |= UART_MODEMSTS_CTSACTLV_Msk;
X    uart->MODEMSTS |= (0x1ul << (8));
N
N    /* Set RTS and CTS auto flow control enable */
N    uart->INTEN |= UART_INTEN_ATORTSEN_Msk | UART_INTEN_ATOCTSEN_Msk;
X    uart->INTEN |= (0x1ul << (12)) | (0x1ul << (13));
N}
N
N
N/**
N *    @brief        The function is used to enable UART specified interrupt and enable NVIC UART IRQ.
N *
N *    @param[in]    uart                The pointer of the specified UART module.
N *    @param[in]    u32InterruptFlag    The specified interrupt of UART module:
N *                                      - \ref UART_INTSTS_SWBEINT_Msk   : Single-wire Bit Error Detect Interrupt
N *                                      - \ref UART_INTEN_WKIEN_Msk      : Wake-up interrupt
N *                                      - \ref UART_INTEN_BUFERRIEN_Msk  : Buffer Error interrupt
N *                                      - \ref UART_INTEN_RXTOIEN_Msk    : Rx time-out interrupt
N *                                      - \ref UART_INTEN_MODEMIEN_Msk   : Modem status interrupt
N *                                      - \ref UART_INTEN_RLSIEN_Msk     : Receive Line status interrupt
N *                                      - \ref UART_INTEN_THREIEN_Msk    : Tx empty interrupt
N *                                      - \ref UART_INTEN_RDAIEN_Msk     : Rx ready interrupt *
N *
N *    @return       None
N *
N *    @details      The function is used to enable UART specified interrupt and enable NVIC UART IRQ.
N */
Nvoid UART_EnableInt(UART_T  *uart, uint32_t u32InterruptFlag)
N{
N    /* Enable UART specified interrupt */
N    UART_ENABLE_INT(uart, u32InterruptFlag);
X    ((uart)->INTEN |= (u32InterruptFlag));
N
N}
N
N
N/**
N *    @brief        Open and set UART function
N *
N *    @param[in]    uart            The pointer of the specified UART module.
N *    @param[in]    u32baudrate     The baudrate of UART module.
N *
N *    @return       None
N *
N *    @details      This function use to enable UART function and set baud-rate.
N */
Nvoid UART_Open(UART_T *uart, uint32_t u32baudrate)
N{
N    uint32_t u32UartClkSrcSel = 0ul, u32UartClkDivNum = 0ul;
N    uint32_t u32ClkTbl[6ul] = {__HXT, 0ul, __LXT, __HIRC, 0ul, __LIRC};
X    uint32_t u32ClkTbl[6ul] = {(32000000UL), 0ul, (32768UL), (48000000UL), 0ul, (38400UL)};
N    uint32_t u32Baud_Div = 0ul;
N
N
N    if (uart == (UART_T *)UART0)
X    if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x70000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = ((uint32_t)(CLK->CLKSEL1 & CLK_CLKSEL1_UART0SEL_Msk)) >> CLK_CLKSEL1_UART0SEL_Pos;
X        u32UartClkSrcSel = ((uint32_t)(((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL1 & (0x7ul << (24)))) >> (24);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART0DIV_Msk) >> CLK_CLKDIV0_UART0DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV0 & (0xful << (8))) >> (8);
N    }
N    else if (uart == (UART_T *)UART1)
X    else if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x71000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART1SEL_Msk) >> CLK_CLKSEL1_UART1SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL1 & (0x7ul << (28))) >> (28);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART1DIV_Msk) >> CLK_CLKDIV0_UART1DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV0 & (0xful << (12))) >> (12);
N    }
N    else if (uart == (UART_T *)UART2)
X    else if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x72000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART2SEL_Msk) >> CLK_CLKSEL3_UART2SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (24))) >> (24);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART2DIV_Msk) >> CLK_CLKDIV4_UART2DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (0))) >> (0);
N    }
N    else if(uart==(UART_T*)UART3)
X    else if(uart==(UART_T*)((UART_T *) ((( uint32_t)0x40000000) + 0x73000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART3SEL_Msk) >> CLK_CLKSEL3_UART3SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (28))) >> (28);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART3DIV_Msk) >> CLK_CLKDIV4_UART3DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (4))) >> (4);
N    }
N    else if(uart==(UART_T*)UART4)
X    else if(uart==(UART_T*)((UART_T *) ((( uint32_t)0x40000000) + 0x74000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART4SEL_Msk) >> CLK_CLKSEL3_UART4SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (16))) >> (16);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART4DIV_Msk) >> CLK_CLKDIV4_UART4DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (8))) >> (8);
N    }
N    else if(uart==(UART_T*)UART5)
X    else if(uart==(UART_T*)((UART_T *) ((( uint32_t)0x40000000) + 0x75000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART5SEL_Msk) >> CLK_CLKSEL3_UART5SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (20))) >> (20);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART5DIV_Msk) >> CLK_CLKDIV4_UART5DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (12))) >> (12);
N    }
N    else if(uart==(UART_T*)UART6)
X    else if(uart==(UART_T*)((UART_T *) ((( uint32_t)0x40000000) + 0x76000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART6SEL_Msk) >> CLK_CLKSEL3_UART6SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (8))) >> (8);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART6DIV_Msk) >> CLK_CLKDIV4_UART6DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (16))) >> (16);
N    }
N    else if(uart==(UART_T*)UART7)
X    else if(uart==(UART_T*)((UART_T *) ((( uint32_t)0x40000000) + 0x77000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART7SEL_Msk) >> CLK_CLKSEL3_UART7SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (12))) >> (12);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART7DIV_Msk) >> CLK_CLKDIV4_UART7DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (20))) >> (20);
N    }    
N
N    /* Select UART function */
N    uart->FUNCSEL = UART_FUNCSEL_UART;
X    uart->FUNCSEL = (0x0ul << (0));
N
N    /* Set UART line configuration */
N    uart->LINE = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
X    uart->LINE = (3ul) | (0x0ul << (3)) | (0x0ul << (2));
N
N    /* Set UART Rx and RTS trigger level */
N    uart->FIFO &= ~(UART_FIFO_RFITL_Msk | UART_FIFO_RTSTRGLV_Msk);
X    uart->FIFO &= ~((0xful << (4)) | (0xful << (16)));
N
N    /* Get PLL clock frequency if UART clock source selection is PLL */
N    if (u32UartClkSrcSel == 1ul)
N    {
N        u32ClkTbl[u32UartClkSrcSel] = CLK_GetPLLClockFreq();
N    }
N
N    /* Get PCLK clock frequency if UART clock source selection is PCLK */
N    if (u32UartClkSrcSel == 4ul)
N    {
N        /* UART Port as UART0 ,UART2, UART4 or UART6 */
N        if ((uart == (UART_T *)UART0) || (uart == (UART_T *)UART2) || (uart == (UART_T *)UART4) || (uart == (UART_T *)UART6))
X        if ((uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x70000))) || (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x72000))) || (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x74000))) || (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x76000))))
N        {
N            u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK0Freq();
N        }
N        else     /* UART Port as UART1, UART3, UART5 or UART7*/
N        {
N            u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK1Freq();
N        }
N
N    }
N
N    /* Set UART baud rate */
N    if (u32baudrate != 0ul)
N    {
N        u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul), u32baudrate);
X        u32Baud_Div = (((((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul)) + ((u32baudrate)/2ul)) / (u32baudrate))-2ul);
N
N        if (u32Baud_Div > 0xFFFFul)
N        {
N            uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul), u32baudrate));
X            uart->BAUD = ((0ul) | (((((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul)) + ((u32baudrate)*8ul)) / (u32baudrate) >> 4ul)-2ul));
N        }
N        else
N        {
N            uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
X            uart->BAUD = (((0x1ul << (29)) | (0x1ul << (28))) | u32Baud_Div);
N        }
N    }
N}
N
N
N/**
N *    @brief        Read UART data
N *
N *    @param[in]    uart            The pointer of the specified UART module.
N *    @param[in]    pu8RxBuf        The buffer to receive the data of receive FIFO.
N *    @param[in]    u32ReadBytes    The the read bytes number of data.
N *
N *    @return       u32Count Receive byte count
N *
N *    @details      The function is used to read Rx data from RX FIFO and the data will be stored in pu8RxBuf.
N */
Nuint32_t UART_Read(UART_T *uart, uint8_t pu8RxBuf[], uint32_t u32ReadBytes)
N{
N    uint32_t  u32Count, u32delayno;
N    uint32_t  u32Exit = 0ul;
N
N    for (u32Count = 0ul; u32Count < u32ReadBytes; u32Count++)
N    {
N        u32delayno = 0ul;
N
N        while (uart->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk)   /* Check RX empty => failed */
X        while (uart->FIFOSTS & (0x1ul << (14)))    
N        {
N            u32delayno++;
N
N            if (u32delayno >= 0x40000000ul)
N            {
N                u32Exit = 1ul;
N                break;
N            }
N        }
N
N        if (u32Exit == 1ul)
N        {
N            break;
N        }
N        else
N        {
N            pu8RxBuf[u32Count] = (uint8_t)uart->DAT; /* Get Data from UART RX  */
N        }
N    }
N
N    return u32Count;
N
N}
N
N
N/**
N *    @brief        Set UART line configuration
N *
N *    @param[in]    uart            The pointer of the specified UART module.
N *    @param[in]    u32baudrate     The register value of baudrate of UART module.
N *                                  If u32baudrate = 0, UART baudrate will not change.
N *    @param[in]    u32data_width   The data length of UART module.
N *                                  - \ref UART_WORD_LEN_5
N *                                  - \ref UART_WORD_LEN_6
N *                                  - \ref UART_WORD_LEN_7
N *                                  - \ref UART_WORD_LEN_8
N *    @param[in]    u32parity       The parity setting (none/odd/even/mark/space) of UART module.
N *                                  - \ref UART_PARITY_NONE
N *                                  - \ref UART_PARITY_ODD
N *                                  - \ref UART_PARITY_EVEN
N *                                  - \ref UART_PARITY_MARK
N *                                  - \ref UART_PARITY_SPACE
N *    @param[in]    u32stop_bits    The stop bit length (1/1.5/2 bit) of UART module.
N *                                  - \ref UART_STOP_BIT_1
N *                                  - \ref UART_STOP_BIT_1_5
N *                                  - \ref UART_STOP_BIT_2
N *
N *    @return       None
N *
N *    @details      This function use to config UART line setting.
N */
Nvoid UART_SetLine_Config(UART_T *uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits)
N{
N    uint32_t u32UartClkSrcSel = 0ul, u32UartClkDivNum = 0ul;
N    uint32_t u32ClkTbl[6ul] = {__HXT, 0ul, __LXT, __HIRC, 0, __LIRC};
X    uint32_t u32ClkTbl[6ul] = {(32000000UL), 0ul, (32768UL), (48000000UL), 0, (38400UL)};
N    uint32_t u32Baud_Div = 0ul;
N
N
N    if (uart == (UART_T *)UART0)
X    if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x70000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART0SEL_Msk) >> CLK_CLKSEL1_UART0SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL1 & (0x7ul << (24))) >> (24);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART0DIV_Msk) >> CLK_CLKDIV0_UART0DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV0 & (0xful << (8))) >> (8);
N    }
N    else if (uart == (UART_T *)UART1)
X    else if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x71000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART1SEL_Msk) >> CLK_CLKSEL1_UART1SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL1 & (0x7ul << (28))) >> (28);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART1DIV_Msk) >> CLK_CLKDIV0_UART1DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV0 & (0xful << (12))) >> (12);
N    }
N    else if (uart == (UART_T *)UART2)
X    else if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x72000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART2SEL_Msk) >> CLK_CLKSEL3_UART2SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (24))) >> (24);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART2DIV_Msk) >> CLK_CLKDIV4_UART2DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (0))) >> (0);
N    }
N    else if (uart == (UART_T *)UART3)
X    else if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x73000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART3SEL_Msk) >> CLK_CLKSEL3_UART3SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (28))) >> (28);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART3DIV_Msk) >> CLK_CLKDIV4_UART3DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (4))) >> (4);
N    }
N    else if (uart == (UART_T *)UART4)
X    else if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x74000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART4SEL_Msk) >> CLK_CLKSEL3_UART4SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (16))) >> (16);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART4DIV_Msk) >> CLK_CLKDIV4_UART4DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (8))) >> (8);
N    }
N    else if (uart == (UART_T *)UART5)
X    else if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x75000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART5SEL_Msk) >> CLK_CLKSEL3_UART5SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (20))) >> (20);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART5DIV_Msk) >> CLK_CLKDIV4_UART5DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (12))) >> (12);
N    }
N    else if (uart == (UART_T *)UART6)
X    else if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x76000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART6SEL_Msk) >> CLK_CLKSEL3_UART6SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (8))) >> (8);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART6DIV_Msk) >> CLK_CLKDIV4_UART6DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (16))) >> (16);
N    }
N    else if (uart == (UART_T *)UART7)
X    else if (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x77000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART7SEL_Msk) >> CLK_CLKSEL3_UART7SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (12))) >> (12);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART7DIV_Msk) >> CLK_CLKDIV4_UART7DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (20))) >> (20);
N    }    
N
N    /* Get PLL clock frequency if UART clock source selection is PLL */
N    if (u32UartClkSrcSel == 1ul)
N    {
N        u32ClkTbl[u32UartClkSrcSel] = CLK_GetPLLClockFreq();
N    }
N
N    /* Get PCLK clock frequency if UART clock source selection is PCLK */
N    if (u32UartClkSrcSel == 4ul)
N    {
N        if ((uart == (UART_T *)UART0) || (uart == (UART_T *)UART2) || (uart == (UART_T *)UART4) || (uart == (UART_T *)UART6))
X        if ((uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x70000))) || (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x72000))) || (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x74000))) || (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x76000))))
N        {
N            u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK0Freq();
N        }
N        else     /* UART Port as UART1, UART3, UART5, UART7*/
N        {
N            u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK1Freq();
N        }
N    }
N
N
N    /* Set UART baud rate */
N    if (u32baudrate != 0ul)
N    {
N        u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul), u32baudrate);
X        u32Baud_Div = (((((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul)) + ((u32baudrate)/2ul)) / (u32baudrate))-2ul);
N
N        if (u32Baud_Div > 0xFFFFul)
N        {
N            uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul), u32baudrate));
X            uart->BAUD = ((0ul) | (((((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul)) + ((u32baudrate)*8ul)) / (u32baudrate) >> 4ul)-2ul));
N        }
N        else
N        {
N            uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
X            uart->BAUD = (((0x1ul << (29)) | (0x1ul << (28))) | u32Baud_Div);
N        }
N    }
N
N    /* Set UART line configuration */
N    uart->LINE = u32data_width | u32parity | u32stop_bits;
N}
N
N
N/**
N *    @brief        Set Rx timeout count
N *
N *    @param[in]    uart    The pointer of the specified UART module.
N *    @param[in]    u32TOC  Rx timeout counter.
N *
N *    @return       None
N *
N *    @details      This function use to set Rx timeout count.
N */
Nvoid UART_SetTimeoutCnt(UART_T *uart, uint32_t u32TOC)
N{
N    /* Set time-out interrupt comparator */
N    uart->TOUT = (uart->TOUT & ~UART_TOUT_TOIC_Msk) | (u32TOC);
X    uart->TOUT = (uart->TOUT & ~(0xfful << (0))) | (u32TOC);
N
N    /* Set time-out counter enable */
N    uart->INTEN |= UART_INTEN_TOCNTEN_Msk;
X    uart->INTEN |= (0x1ul << (11));
N}
N
N
N/**
N *    @brief        Select and configure IrDA function
N *
N *    @param[in]    uart            The pointer of the specified UART module.
N *    @param[in]    u32Buadrate     The baudrate of UART module.
N *    @param[in]    u32Direction    The direction of UART module in IrDA mode:
N *                                  - \ref UART_IRDA_TXEN
N *                                  - \ref UART_IRDA_RXEN
N *
N *    @return       None
N  *
N *    @details      The function is used to configure IrDA relative settings. It consists of TX or RX mode and baudrate.
N */
Nvoid UART_SelectIrDAMode(UART_T *uart, uint32_t u32Buadrate, uint32_t u32Direction)
N{
N    uint32_t u32UartClkSrcSel = 0ul, u32UartClkDivNum = 0ul;
N    uint32_t u32ClkTbl[6ul] = {__HXT, 0ul, __LXT, __HIRC, 0ul, __LIRC};
X    uint32_t u32ClkTbl[6ul] = {(32000000UL), 0ul, (32768UL), (48000000UL), 0ul, (38400UL)};
N    uint32_t u32Baud_Div;
N
N    /* Select IrDA function mode */
N    uart->FUNCSEL = UART_FUNCSEL_IrDA;
X    uart->FUNCSEL = (0x2ul << (0));
N
N
N    if (uart == UART0)
X    if (uart == ((UART_T *) ((( uint32_t)0x40000000) + 0x70000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART0SEL_Msk) >> CLK_CLKSEL1_UART0SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL1 & (0x7ul << (24))) >> (24);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART0DIV_Msk) >> CLK_CLKDIV0_UART0DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV0 & (0xful << (8))) >> (8);
N    }
N    else if (uart == UART1)
X    else if (uart == ((UART_T *) ((( uint32_t)0x40000000) + 0x71000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART1SEL_Msk) >> CLK_CLKSEL1_UART1SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL1 & (0x7ul << (28))) >> (28);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART1DIV_Msk) >> CLK_CLKDIV0_UART1DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV0 & (0xful << (12))) >> (12);
N    }
N    else if (uart == UART2)
X    else if (uart == ((UART_T *) ((( uint32_t)0x40000000) + 0x72000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART2SEL_Msk) >> CLK_CLKSEL3_UART2SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (24))) >> (24);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART2DIV_Msk) >> CLK_CLKDIV4_UART2DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (0))) >> (0);
N    }
N    else if (uart == UART3)
X    else if (uart == ((UART_T *) ((( uint32_t)0x40000000) + 0x73000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART3SEL_Msk) >> CLK_CLKSEL3_UART3SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (28))) >> (28);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART3DIV_Msk) >> CLK_CLKDIV4_UART3DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (4))) >> (4);
N    }
N    else if (uart == UART4)
X    else if (uart == ((UART_T *) ((( uint32_t)0x40000000) + 0x74000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART4SEL_Msk) >> CLK_CLKSEL3_UART4SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (16))) >> (16);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART4DIV_Msk) >> CLK_CLKDIV4_UART4DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (8))) >> (8);
N    }
N    else if (uart == UART5)
X    else if (uart == ((UART_T *) ((( uint32_t)0x40000000) + 0x75000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART5SEL_Msk) >> CLK_CLKSEL3_UART5SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (20))) >> (20);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART5DIV_Msk) >> CLK_CLKDIV4_UART5DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (12))) >> (12);
N    }
N    else if (uart == UART6)
X    else if (uart == ((UART_T *) ((( uint32_t)0x40000000) + 0x76000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART6SEL_Msk) >> CLK_CLKSEL3_UART6SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (8))) >> (8);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART6DIV_Msk) >> CLK_CLKDIV4_UART6DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (16))) >> (16);
N    }    
N    else if (uart == UART7)
X    else if (uart == ((UART_T *) ((( uint32_t)0x40000000) + 0x77000)))
N    {
N        /* Get UART clock source selection */
N        u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART7SEL_Msk) >> CLK_CLKSEL3_UART7SEL_Pos;
X        u32UartClkSrcSel = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKSEL3 & (0x7ul << (12))) >> (12);
N        /* Get UART clock divider number */
N        u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART7DIV_Msk) >> CLK_CLKDIV4_UART7DIV_Pos;
X        u32UartClkDivNum = (((CLK_T *) ((( uint32_t)0x40000000) + 0x00200))->CLKDIV4 & (0xful << (20))) >> (20);
N    }    
N
N    /* Get PLL clock frequency if UART clock source selection is PLL */
N    if (u32UartClkSrcSel == 1ul)
N    {
N        u32ClkTbl[u32UartClkSrcSel] = CLK_GetPLLClockFreq();
N    }
N
N    /* Get PCLK clock frequency if UART clock source selection is PCLK */
N    if (u32UartClkSrcSel == 4ul)
N    {
N        if ((uart == (UART_T *)UART0) || (uart == (UART_T *)UART2)|| (uart == (UART_T *)UART4)|| (uart == (UART_T *)UART6))
X        if ((uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x70000))) || (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x72000)))|| (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x74000)))|| (uart == (UART_T *)((UART_T *) ((( uint32_t)0x40000000) + 0x76000))))
N        {
N            u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK0Freq();
N        }
N        else     /* UART Port as UART1, UART3, UART5, UART7*/
N        {
N            u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK1Freq();
N        }
N    }
N
N
N    /* Set UART IrDA baud rate in mode 0 */
N    if (u32Buadrate != 0ul)
N    {
N        u32Baud_Div = UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul), u32Buadrate);
X        u32Baud_Div = (((((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul)) + ((u32Buadrate)*8ul)) / (u32Buadrate) >> 4ul)-2ul);
N
N        if (u32Baud_Div < 0xFFFFul)
N        {
N            uart->BAUD = (UART_BAUD_MODE0 | u32Baud_Div);
X            uart->BAUD = ((0ul) | u32Baud_Div);
N        }
N        else
N        {
N        }
N    }
N
N    /* Configure IrDA relative settings */
N    if (u32Direction == UART_IRDA_RXEN)
X    if (u32Direction == (0x0ul << (1)))
N    {
N        uart->IRDA |= UART_IRDA_RXINV_Msk;     /*Rx signal is inverse*/
X        uart->IRDA |= (0x1ul << (6));      
N        uart->IRDA &= ~UART_IRDA_TXEN_Msk;
X        uart->IRDA &= ~(0x1ul << (1));
N    }
N    else
N    {
N        uart->IRDA &= ~UART_IRDA_TXINV_Msk;    /*Tx signal is not inverse*/
X        uart->IRDA &= ~(0x1ul << (5));     
N        uart->IRDA |= UART_IRDA_TXEN_Msk;
X        uart->IRDA |= (0x1ul << (1));
N    }
N
N}
N
N
N/**
N *    @brief        Select and configure RS485 function
N *
N *    @param[in]    uart        The pointer of the specified UART module.
N *    @param[in]    u32Mode     The operation mode(NMM/AUD/AAD).
N *                              - \ref UART_ALTCTL_RS485NMM_Msk
N *                              - \ref UART_ALTCTL_RS485AUD_Msk
N *                              - \ref UART_ALTCTL_RS485AAD_Msk
N *    @param[in]    u32Addr     The RS485 address.
N *
N *    @return       None
N *
N *    @details      The function is used to set RS485 relative setting.
N */
Nvoid UART_SelectRS485Mode(UART_T *uart, uint32_t u32Mode, uint32_t u32Addr)
N{
N    /* Select UART RS485 function mode */
N    uart->FUNCSEL = UART_FUNCSEL_RS485;
X    uart->FUNCSEL = (0x3ul << (0));
N
N    /* Set RS485 configuration */
N    uart->ALTCTL &= ~(UART_ALTCTL_RS485NMM_Msk | UART_ALTCTL_RS485AUD_Msk | UART_ALTCTL_RS485AAD_Msk | UART_ALTCTL_ADDRMV_Msk);
X    uart->ALTCTL &= ~((0x1ul << (8)) | (0x1ul << (10)) | (0x1ul << (9)) | (0xfful << (24)));
N    uart->ALTCTL |= (u32Mode | (u32Addr << UART_ALTCTL_ADDRMV_Pos));
X    uart->ALTCTL |= (u32Mode | (u32Addr << (24)));
N}
N
N
N/**
N *    @brief        Write UART data
N *
N *    @param[in]    uart            The pointer of the specified UART module.
N *    @param[in]    pu8TxBuf        The buffer to send the data to UART transmission FIFO.
N *    @param[out]   u32WriteBytes   The byte number of data.
N *
N *    @return       u32Count transfer byte count
N *
N *    @details      The function is to write data into TX buffer to transmit data by UART.
N */
Nuint32_t UART_Write(UART_T *uart, uint8_t pu8TxBuf[], uint32_t u32WriteBytes)
N{
N    uint32_t  u32Count, u32delayno;
N    uint32_t  u32Exit = 0ul;
N
N    for (u32Count = 0ul; u32Count != u32WriteBytes; u32Count++)
N    {
N        u32delayno = 0ul;
N
N        while (uart->FIFOSTS & UART_FIFOSTS_TXFULL_Msk)   /* Check Tx Full */
X        while (uart->FIFOSTS & (0x1ul << (23)))    
N        {
N            u32delayno++;
N
N            if (u32delayno >= 0x40000000ul)
N            {
N                u32Exit = 1ul;
N                break;
N            }
N        }
N
N        if (u32Exit == 1ul)
N        {
N            break;
N        }
N        else
N        {
N            uart->DAT = pu8TxBuf[u32Count];    /* Send UART Data from buffer */
N        }
N    }
N
N    return u32Count;
N
N}
N/**
N *    @brief        Select Single Wire mode function
N *
N *    @param[in]    uart        The pointer of the specified UART module.
N *
N *    @return       None
N *
N *    @details      The function is used to select Single Wire mode.
N */
Nvoid UART_SelectSingleWireMode(UART_T *uart)
N{
N
N    /* Select UART SingleWire function mode */
N    uart->FUNCSEL = ((uart->FUNCSEL & (~UART_FUNCSEL_FUNCSEL_Msk)) | UART_FUNCSEL_SINGLE_WIRE);
X    uart->FUNCSEL = ((uart->FUNCSEL & (~(0x7ul << (0)))) | (0x4ul << (0)));
N
N}
N
N
N/*@}*/ /* end of group UART_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group UART_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
N
N
N
