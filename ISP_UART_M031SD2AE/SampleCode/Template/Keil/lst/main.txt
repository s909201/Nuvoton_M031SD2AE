; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I.\RTE\_Template -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.3.18\Device\M031\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -D_RTE_ --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;14     
;;;15     void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
000002  2159              MOVS     r1,#0x59
000004  481e              LDR      r0,|L1.128|
000006  2316              MOVS     r3,#0x16
000008  2288              MOVS     r2,#0x88
                  |L1.10|
00000a  6001              STR      r1,[r0,#0]
00000c  6003              STR      r3,[r0,#0]
00000e  6002              STR      r2,[r0,#0]
000010  6804              LDR      r4,[r0,#0]
000012  2c00              CMP      r4,#0
000014  d0f9              BEQ      |L1.10|
;;;16     {
;;;17         /*---------------------------------------------------------------------------------------------------------*/
;;;18         /* Init System Clock                                                                                       */
;;;19         /*---------------------------------------------------------------------------------------------------------*/
;;;20         /* Unlock protected registers */
;;;21         SYS_UnlockReg();
;;;22         /* Enable HIRC clock (Internal RC 48MHz) */
;;;23         CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
000016  481b              LDR      r0,|L1.132|
000018  6801              LDR      r1,[r0,#0]
00001a  2204              MOVS     r2,#4
00001c  4311              ORRS     r1,r1,r2
00001e  6001              STR      r1,[r0,#0]
;;;24     
;;;25         /* Wait for HIRC clock ready */
;;;26         while (!(CLK->STATUS & CLK_STATUS_HIRCSTB_Msk));
000020  4918              LDR      r1,|L1.132|
000022  3140              ADDS     r1,r1,#0x40
                  |L1.36|
000024  690a              LDR      r2,[r1,#0x10]
000026  06d2              LSLS     r2,r2,#27
000028  d5fc              BPL      |L1.36|
;;;27     
;;;28         /* Select HCLK clock source as HIRC and HCLK clock divider as 1 */
;;;29         CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLKSEL_Msk)) | CLK_CLKSEL0_HCLKSEL_HIRC;
00002a  6902              LDR      r2,[r0,#0x10]
00002c  2307              MOVS     r3,#7
00002e  431a              ORRS     r2,r2,r3
000030  6102              STR      r2,[r0,#0x10]
;;;30         CLK->CLKDIV0 = (CLK->CLKDIV0 & (~CLK_CLKDIV0_HCLKDIV_Msk)) | CLK_CLKDIV0_HCLK(1);
000032  6a02              LDR      r2,[r0,#0x20]
000034  0912              LSRS     r2,r2,#4
000036  0112              LSLS     r2,r2,#4
000038  6202              STR      r2,[r0,#0x20]
;;;31         /* Set PLL to Power-down mode */
;;;32         CLK->PLLCTL |= CLK_PLLCTL_PD_Msk;
00003a  680b              LDR      r3,[r1,#0]
00003c  2201              MOVS     r2,#1
00003e  0412              LSLS     r2,r2,#16
000040  4313              ORRS     r3,r3,r2
000042  600b              STR      r3,[r1,#0]
;;;33         /* Enable UART module clock */
;;;34         CLK->APBCLK0 |= CLK_APBCLK0_UART0CKEN_Msk;
000044  6881              LDR      r1,[r0,#8]
000046  4311              ORRS     r1,r1,r2
000048  6081              STR      r1,[r0,#8]
;;;35         /* Select UART module clock source as HXT and UART module clock divider as 1 */
;;;36         CLK->CLKSEL1 = (CLK->CLKSEL1 & (~CLK_CLKSEL1_UART0SEL_Msk)) | CLK_CLKSEL1_UART0SEL_HIRC;
00004a  6941              LDR      r1,[r0,#0x14]
00004c  2207              MOVS     r2,#7
00004e  0612              LSLS     r2,r2,#24
000050  4391              BICS     r1,r1,r2
000052  2203              MOVS     r2,#3
000054  0612              LSLS     r2,r2,#24
000056  1889              ADDS     r1,r1,r2
000058  6141              STR      r1,[r0,#0x14]
;;;37         CLK->CLKDIV0 = (CLK->CLKDIV0 & (~CLK_CLKDIV0_UART0DIV_Msk)) | CLK_CLKDIV0_UART0(1);
00005a  6a01              LDR      r1,[r0,#0x20]
00005c  220f              MOVS     r2,#0xf
00005e  0212              LSLS     r2,r2,#8
000060  4391              BICS     r1,r1,r2
000062  6201              STR      r1,[r0,#0x20]
;;;38         /*---------------------------------------------------------------------------------------------------------*/
;;;39         /* Init I/O Multi-function                                                                                 */
;;;40         /*---------------------------------------------------------------------------------------------------------*/
;;;41         /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;42         SYS->GPB_MFPH &= ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk);
000064  2001              MOVS     r0,#1
000066  0780              LSLS     r0,r0,#30
000068  6bc1              LDR      r1,[r0,#0x3c]
00006a  22ff              MOVS     r2,#0xff
00006c  0412              LSLS     r2,r2,#16
00006e  4391              BICS     r1,r1,r2
000070  63c1              STR      r1,[r0,#0x3c]
;;;43         SYS->GPB_MFPH |= (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
000072  6bc1              LDR      r1,[r0,#0x3c]
000074  2233              MOVS     r2,#0x33
000076  0452              LSLS     r2,r2,#17
000078  4311              ORRS     r1,r1,r2
00007a  63c1              STR      r1,[r0,#0x3c]
;;;44     }
00007c  bd10              POP      {r4,pc}
;;;45     
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      0x40000100
                  |L1.132|
                          DCD      0x40000200

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;48     /*---------------------------------------------------------------------------------------------------------*/
;;;49     int32_t main(void)
000000  f7fffffe          BL       SYS_Init
;;;50     {
;;;51         /* Init System, peripheral clock and multi-function I/O */
;;;52         SYS_Init();
;;;53         /* Init UART to 115200-8n1 */
;;;54         UART_Init();
000004  f7fffffe          BL       UART_Init
;;;55     
;;;56         /* Checking if flash page size matches with target chip's */
;;;57         if( (GET_CHIP_SERIES_NUM == CHIP_SERIES_NUM_I) || (GET_CHIP_SERIES_NUM == CHIP_SERIES_NUM_G) )
000008  2701              MOVS     r7,#1
00000a  07bf              LSLS     r7,r7,#30
00000c  6838              LDR      r0,[r7,#0]
;;;58         {
;;;59             if(FMC_FLASH_PAGE_SIZE != 2048)
;;;60             {
;;;61                 /* FMC_FLASH_PAGE_SIZE is different from target device */
;;;62                 /* Please enable the compiler option PAGE_SIZE_2048 in fmc.h */
;;;63                 while(SYS->PDID);
;;;64             }
;;;65         }
;;;66         else
;;;67         {
;;;68             if(FMC_FLASH_PAGE_SIZE != 512)
;;;69             {
;;;70                 /* FMC_FLASH_PAGE_SIZE is different from target device */
;;;71                 /* Please disable the compiler option PAGE_SIZE_2048 in fmc.h */
;;;72                 while(SYS->PDID);
;;;73             }
;;;74         }
;;;75     
;;;76         CLK->AHBCLK |= CLK_AHBCLK_ISPCKEN_Msk;
;;;77         FMC->ISPCTL |= (FMC_ISPCTL_ISPEN_Msk | FMC_ISPCTL_APUEN_Msk);
;;;78         g_apromSize = GetApromSize();
;;;79         GetDataFlashInfo(&g_dataFlashAddr, &g_dataFlashSize);
;;;80         SysTick->LOAD = 300000 * CyclesPerUs;
;;;81         SysTick->VAL   = (0x00);
;;;82         SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
;;;83     
;;;84         while (1)
;;;85         {
;;;86             if ((bufhead >= 4) || (bUartDataReady == TRUE))
;;;87             {
;;;88                 uint32_t lcmd;
;;;89                 lcmd = inpw(uart_rcvbuf);
;;;90     
;;;91                 if (lcmd == CMD_CONNECT)
;;;92                 {
;;;93                     goto _ISP;
;;;94                 }
;;;95                 else
;;;96                 {
;;;97                     bUartDataReady = FALSE;
;;;98                     bufhead = 0;
;;;99                 }
;;;100            }
;;;101    
;;;102            if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
;;;103            {
;;;104                goto _APROM;
;;;105            }
;;;106        }
;;;107    
;;;108    _ISP:
;;;109    
;;;110        while (1)
;;;111        {
;;;112            if (bUartDataReady == TRUE)
;;;113            {
;;;114                bUartDataReady = FALSE;
;;;115                ParseCmd(uart_rcvbuf, 64);
;;;116                PutString();
;;;117            }
;;;118        }
;;;119    
;;;120    _APROM:
;;;121        SYS->RSTSTS = (SYS_RSTSTS_PORF_Msk | SYS_RSTSTS_PINRF_Msk);
;;;122        FMC->ISPCTL &= ~(FMC_ISPCTL_ISPEN_Msk | FMC_ISPCTL_BS_Msk);
;;;123        SCB->AIRCR = (V6M_AIRCR_VECTKEY_DATA | V6M_AIRCR_SYSRESETREQ);
;;;124    
;;;125        /* Trap the CPU */
;;;126        while (1);
00000e  0500              LSLS     r0,r0,#20
000010  0f00              LSRS     r0,r0,#28
000012  2801              CMP      r0,#1                 ;57
000014  d004              BEQ      |L2.32|
000016  6838              LDR      r0,[r7,#0]            ;57
000018  0500              LSLS     r0,r0,#20
00001a  0f00              LSRS     r0,r0,#28
00001c  2806              CMP      r0,#6                 ;57
00001e  d102              BNE      |L2.38|
                  |L2.32|
000020  6838              LDR      r0,[r7,#0]            ;63
000022  2800              CMP      r0,#0                 ;63
000024  d1fc              BNE      |L2.32|
                  |L2.38|
000026  4822              LDR      r0,|L2.176|
000028  6841              LDR      r1,[r0,#4]            ;76
00002a  2204              MOVS     r2,#4                 ;76
00002c  4311              ORRS     r1,r1,r2              ;76
00002e  6041              STR      r1,[r0,#4]            ;76
000030  4d20              LDR      r5,|L2.180|
000032  6828              LDR      r0,[r5,#0]            ;77
000034  2109              MOVS     r1,#9                 ;77
000036  4308              ORRS     r0,r0,r1              ;77
000038  6028              STR      r0,[r5,#0]            ;77
00003a  f7fffffe          BL       GetApromSize
00003e  491e              LDR      r1,|L2.184|
000040  6008              STR      r0,[r1,#0]            ;79  ; g_apromSize
000042  491e              LDR      r1,|L2.188|
000044  481e              LDR      r0,|L2.192|
000046  f7fffffe          BL       GetDataFlashInfo
00004a  481e              LDR      r0,|L2.196|
00004c  491e              LDR      r1,|L2.200|
00004e  6800              LDR      r0,[r0,#0]            ;80  ; CyclesPerUs
000050  4b1e              LDR      r3,|L2.204|
000052  4348              MULS     r0,r1,r0              ;80
000054  6158              STR      r0,[r3,#0x14]         ;80
000056  2400              MOVS     r4,#0                 ;81
000058  619c              STR      r4,[r3,#0x18]         ;81
00005a  6918              LDR      r0,[r3,#0x10]         ;82
00005c  2105              MOVS     r1,#5                 ;82
00005e  4308              ORRS     r0,r0,r1              ;82
000060  6118              STR      r0,[r3,#0x10]         ;82
000062  4a1b              LDR      r2,|L2.208|
000064  481b              LDR      r0,|L2.212|
000066  4e1c              LDR      r6,|L2.216|
                  |L2.104|
000068  7801              LDRB     r1,[r0,#0]            ;86  ; bufhead
00006a  2904              CMP      r1,#4                 ;86
00006c  d202              BCS      |L2.116|
00006e  7831              LDRB     r1,[r6,#0]            ;86  ; bUartDataReady
000070  2901              CMP      r1,#1                 ;86
000072  d104              BNE      |L2.126|
                  |L2.116|
000074  6811              LDR      r1,[r2,#0]            ;89  ; uart_rcvbuf
000076  29ae              CMP      r1,#0xae              ;91
000078  d00e              BEQ      |L2.152|
00007a  7034              STRB     r4,[r6,#0]            ;97
00007c  7004              STRB     r4,[r0,#0]            ;98
                  |L2.126|
00007e  6919              LDR      r1,[r3,#0x10]         ;102
000080  03c9              LSLS     r1,r1,#15             ;102
000082  d5f1              BPL      |L2.104|
000084  2003              MOVS     r0,#3                 ;121
000086  6078              STR      r0,[r7,#4]            ;121
000088  6828              LDR      r0,[r5,#0]            ;122
00008a  0880              LSRS     r0,r0,#2              ;122
00008c  0080              LSLS     r0,r0,#2              ;122
00008e  6028              STR      r0,[r5,#0]            ;122
000090  4913              LDR      r1,|L2.224|
000092  4812              LDR      r0,|L2.220|
000094  60c8              STR      r0,[r1,#0xc]          ;123
                  |L2.150|
000096  e7fe              B        |L2.150|
                  |L2.152|
000098  7830              LDRB     r0,[r6,#0]            ;112  ; bUartDataReady
00009a  2801              CMP      r0,#1                 ;112
00009c  d1fc              BNE      |L2.152|
00009e  7034              STRB     r4,[r6,#0]            ;114
0000a0  2140              MOVS     r1,#0x40              ;115
0000a2  480b              LDR      r0,|L2.208|
0000a4  f7fffffe          BL       ParseCmd
0000a8  f7fffffe          BL       PutString
0000ac  e7f4              B        |L2.152|
;;;127    }
                          ENDP

0000ae  0000              DCW      0x0000
                  |L2.176|
                          DCD      0x40000200
                  |L2.180|
                          DCD      0x4000c000
                  |L2.184|
                          DCD      g_apromSize
                  |L2.188|
                          DCD      g_dataFlashSize
                  |L2.192|
                          DCD      g_dataFlashAddr
                  |L2.196|
                          DCD      CyclesPerUs
                  |L2.200|
                          DCD      0x000493e0
                  |L2.204|
                          DCD      0xe000e000
                  |L2.208|
                          DCD      uart_rcvbuf
                  |L2.212|
                          DCD      bufhead
                  |L2.216|
                          DCD      bUartDataReady
                  |L2.220|
                          DCD      0x05fa0004
                  |L2.224|
                          DCD      0xe000ed00

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
