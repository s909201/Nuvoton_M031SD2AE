; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\isp_user.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\isp_user.d --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I.\RTE\_Template -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.3.18\Device\M031\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -D_RTE_ --omf_browse=.\obj\isp_user.crf ..\isp_user.c]
                          THUMB

                          AREA ||i.ParseCmd||, CODE, READONLY, ALIGN=2

                  ParseCmd PROC
;;;46     
;;;47     int ParseCmd(unsigned char *buffer, uint8_t len)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;48     {
000002  b083              SUB      sp,sp,#0xc
;;;49         static uint32_t StartAddress, TotalLen, LastDataLen, g_packno = 1;
;;;50         uint8_t *response;
;;;51         uint16_t lcksum;
;;;52         uint32_t lcmd, srclen, i, regcnf0, security;
;;;53         unsigned char *pSrc;
;;;54         static uint32_t gcmd;
;;;55         response = response_buff;
;;;56         pSrc = buffer;
;;;57         srclen = len;
;;;58         lcmd = inpw(pSrc);
000004  9e03              LDR      r6,[sp,#0xc]
000006  4f87              LDR      r7,|L1.548|
000008  9d04              LDR      r5,[sp,#0x10]
00000a  6834              LDR      r4,[r6,#0]
;;;59         outpw(response + 4, 0);
00000c  2000              MOVS     r0,#0
00000e  6078              STR      r0,[r7,#4]
;;;60         pSrc += 8;
;;;61         srclen -= 8;
;;;62         ReadData(Config0, Config0 + 16, (uint32_t *)(response + 8)); /*read config */
000010  463b              MOV      r3,r7
000012  3308              ADDS     r3,r3,#8
000014  2103              MOVS     r1,#3
000016  4a84              LDR      r2,|L1.552|
000018  0509              LSLS     r1,r1,#20
00001a  3d08              SUBS     r5,r5,#8
00001c  3608              ADDS     r6,r6,#8
00001e  9301              STR      r3,[sp,#4]
000020  f7fffffe          BL       FMC_Proc
;;;63         regcnf0 = *(uint32_t *)(response + 8);
000024  68b8              LDR      r0,[r7,#8]
;;;64         security = regcnf0 & 0x2;
000026  2102              MOVS     r1,#2
000028  9000              STR      r0,[sp,#0]
00002a  4008              ANDS     r0,r0,r1
;;;65     
;;;66         if (lcmd == CMD_SYNC_PACKNO)
00002c  9002              STR      r0,[sp,#8]
00002e  2ca4              CMP      r4,#0xa4
000030  d018              BEQ      |L1.100|
;;;67         {
;;;68             g_packno = inpw(pSrc);
;;;69         }
;;;70     
;;;71         if ((lcmd) && (lcmd != CMD_RESEND_PACKET))
000032  2c00              CMP      r4,#0
000034  d078              BEQ      |L1.296|
000036  2cff              CMP      r4,#0xff
000038  d07d              BEQ      |L1.310|
                  |L1.58|
;;;72         {
;;;73             gcmd = lcmd;
00003a  487c              LDR      r0,|L1.556|
;;;74         }
;;;75     
;;;76         if (lcmd == CMD_GET_FWVER)
00003c  2ca6              CMP      r4,#0xa6
00003e  6104              STR      r4,[r0,#0x10]  ; gcmd
000040  d014              BEQ      |L1.108|
;;;77         {
;;;78             response[8] = FW_VERSION;
;;;79         }
;;;80         else if (lcmd == CMD_GET_DEVICEID)
;;;81         {
;;;82             outpw(response + 8, SYS->PDID);
000042  2001              MOVS     r0,#1
000044  0780              LSLS     r0,r0,#30
000046  2cb1              CMP      r4,#0xb1              ;80
000048  d013              BEQ      |L1.114|
;;;83             goto out;
;;;84         }
;;;85         else if (lcmd == CMD_RUN_APROM || lcmd == CMD_RUN_LDROM || lcmd == CMD_RESET)
00004a  2cab              CMP      r4,#0xab
00004c  d014              BEQ      |L1.120|
00004e  2cac              CMP      r4,#0xac
000050  d012              BEQ      |L1.120|
000052  2cad              CMP      r4,#0xad
000054  d010              BEQ      |L1.120|
;;;86         {
;;;87             SYS->RSTSTS = 3; /*clear bit*/
;;;88     
;;;89             /* Set BS */
;;;90             if (lcmd == CMD_RUN_APROM)
;;;91             {
;;;92                 i = (FMC->ISPCTL & 0xFFFFFFFC);
;;;93             }
;;;94             else if (lcmd == CMD_RUN_LDROM)
;;;95             {
;;;96                 i = (FMC->ISPCTL & 0xFFFFFFFC);
;;;97                 i |= 0x00000002;
;;;98             }
;;;99             else
;;;100            {
;;;101                i = (FMC->ISPCTL & 0xFFFFFFFE);/* ISP disable */
;;;102            }
;;;103    
;;;104            FMC->ISPCTL = i;
;;;105            SCB->AIRCR = (V6M_AIRCR_VECTKEY_DATA | V6M_AIRCR_SYSRESETREQ);
;;;106    
;;;107            /* Trap the CPU */
;;;108            while (1);
;;;109        }
;;;110        else if (lcmd == CMD_CONNECT)
000056  2cae              CMP      r4,#0xae
000058  d026              BEQ      |L1.168|
;;;111        {
;;;112            g_packno = 1;
;;;113            goto out;
;;;114        }
;;;115        else if ((lcmd == CMD_UPDATE_APROM) || (lcmd == CMD_ERASE_ALL))
00005a  2ca0              CMP      r4,#0xa0
00005c  d028              BEQ      |L1.176|
00005e  2ca3              CMP      r4,#0xa3
000060  d026              BEQ      |L1.176|
000062  e035              B        |L1.208|
                  |L1.100|
000064  6831              LDR      r1,[r6,#0]            ;68
000066  4871              LDR      r0,|L1.556|
000068  60c1              STR      r1,[r0,#0xc]          ;68  ; g_packno
00006a  e7e6              B        |L1.58|
                  |L1.108|
00006c  2034              MOVS     r0,#0x34              ;78
00006e  7238              STRB     r0,[r7,#8]            ;78
000070  e05a              B        |L1.296|
                  |L1.114|
000072  6800              LDR      r0,[r0,#0]            ;82
000074  60b8              STR      r0,[r7,#8]            ;82
000076  e0c0              B        |L1.506|
                  |L1.120|
000078  2103              MOVS     r1,#3                 ;87
00007a  6041              STR      r1,[r0,#4]            ;87
00007c  496c              LDR      r1,|L1.560|
00007e  2cab              CMP      r4,#0xab              ;90
000080  d009              BEQ      |L1.150|
000082  6808              LDR      r0,[r1,#0]            ;101
000084  2cac              CMP      r4,#0xac              ;94
000086  d00a              BEQ      |L1.158|
000088  0840              LSRS     r0,r0,#1              ;101
00008a  0040              LSLS     r0,r0,#1              ;101
                  |L1.140|
00008c  6008              STR      r0,[r1,#0]            ;104
00008e  496a              LDR      r1,|L1.568|
000090  4868              LDR      r0,|L1.564|
000092  60c8              STR      r0,[r1,#0xc]          ;105
                  |L1.148|
000094  e7fe              B        |L1.148|
                  |L1.150|
000096  6808              LDR      r0,[r1,#0]            ;92
000098  0880              LSRS     r0,r0,#2              ;92
00009a  0080              LSLS     r0,r0,#2              ;92
00009c  e7f6              B        |L1.140|
                  |L1.158|
00009e  0880              LSRS     r0,r0,#2              ;96
0000a0  0080              LSLS     r0,r0,#2              ;96
0000a2  2202              MOVS     r2,#2                 ;97
0000a4  4310              ORRS     r0,r0,r2              ;97
0000a6  e7f1              B        |L1.140|
                  |L1.168|
0000a8  4960              LDR      r1,|L1.556|
0000aa  2001              MOVS     r0,#1                 ;112
0000ac  60c8              STR      r0,[r1,#0xc]          ;113  ; g_packno
0000ae  e0a4              B        |L1.506|
                  |L1.176|
;;;116        {
;;;117            EraseAP(FMC_APROM_BASE, (g_apromSize < g_dataFlashAddr) ? g_apromSize : g_dataFlashAddr); /* erase APROM */
0000b0  485e              LDR      r0,|L1.556|
0000b2  6982              LDR      r2,[r0,#0x18]  ; g_apromSize
0000b4  69c0              LDR      r0,[r0,#0x1c]  ; g_dataFlashAddr
0000b6  4282              CMP      r2,r0
0000b8  d300              BCC      |L1.188|
0000ba  4602              MOV      r2,r0
                  |L1.188|
0000bc  2300              MOVS     r3,#0
0000be  4619              MOV      r1,r3
0000c0  2022              MOVS     r0,#0x22
0000c2  f7fffffe          BL       FMC_Proc
;;;118    
;;;119            if (lcmd == CMD_ERASE_ALL)
0000c6  2ca3              CMP      r4,#0xa3
0000c8  d00b              BEQ      |L1.226|
;;;120            {
;;;121                EraseAP(g_dataFlashAddr, g_dataFlashSize);
;;;122                *(uint32_t *)(response + 8) = regcnf0 | 0x02;
;;;123                UpdateConfig((uint32_t *)(response + 8), NULL);
;;;124            }
;;;125    
;;;126            bUpdateApromCmd = TRUE;
0000ca  4858              LDR      r0,|L1.556|
0000cc  2101              MOVS     r1,#1
0000ce  6141              STR      r1,[r0,#0x14]  ; bUpdateApromCmd
                  |L1.208|
;;;127        }
;;;128    
;;;129        if ((lcmd == CMD_UPDATE_APROM) || (lcmd == CMD_UPDATE_DATAFLASH))
0000d0  2ca0              CMP      r4,#0xa0
0000d2  d031              BEQ      |L1.312|
0000d4  2cc3              CMP      r4,#0xc3
0000d6  d017              BEQ      |L1.264|
;;;130        {
;;;131            if (lcmd == CMD_UPDATE_DATAFLASH)
;;;132            {
;;;133                StartAddress = g_dataFlashAddr;
;;;134    
;;;135                if (g_dataFlashSize)   /*g_dataFlashAddr*/
;;;136                {
;;;137                    EraseAP(g_dataFlashAddr, g_dataFlashSize);
;;;138                }
;;;139                else
;;;140                {
;;;141                    goto out;
;;;142                }
;;;143            }
;;;144            else
;;;145            {
;;;146                StartAddress = 0;
;;;147            }
;;;148    
;;;149            TotalLen = inpw(pSrc + 4);
;;;150            pSrc += 8;
;;;151            srclen -= 8;
;;;152        }
;;;153        else if (lcmd == CMD_UPDATE_CONFIG)
0000d8  2ca1              CMP      r4,#0xa1
0000da  d031              BEQ      |L1.320|
;;;154        {
;;;155            if ((security == 0) && (!bUpdateApromCmd))   /*security lock*/
;;;156            {
;;;157                goto out;
;;;158            }
;;;159    
;;;160            UpdateConfig((uint32_t *)(pSrc), (uint32_t *)(response + 8));
;;;161            GetDataFlashInfo(&g_dataFlashAddr, &g_dataFlashSize);
;;;162            goto out;
;;;163        }
;;;164        else if (lcmd == CMD_RESEND_PACKET)     /*for APROM&Data flash only*/
0000dc  2cff              CMP      r4,#0xff
0000de  d03e              BEQ      |L1.350|
0000e0  e022              B        |L1.296|
                  |L1.226|
0000e2  4c52              LDR      r4,|L1.556|
0000e4  2300              MOVS     r3,#0                 ;121
0000e6  69e1              LDR      r1,[r4,#0x1c]         ;121  ; g_dataFlashAddr
0000e8  6a20              LDR      r0,[r4,#0x20]         ;121  ; g_dataFlashSize
0000ea  180a              ADDS     r2,r1,r0              ;121
0000ec  2022              MOVS     r0,#0x22              ;121
0000ee  f7fffffe          BL       FMC_Proc
0000f2  9800              LDR      r0,[sp,#0]            ;122
0000f4  2102              MOVS     r1,#2                 ;122
0000f6  4308              ORRS     r0,r0,r1              ;122
0000f8  60b8              STR      r0,[r7,#8]            ;123
0000fa  2100              MOVS     r1,#0                 ;123
0000fc  9801              LDR      r0,[sp,#4]            ;123
0000fe  f7fffffe          BL       UpdateConfig
000102  2101              MOVS     r1,#1                 ;126
000104  6161              STR      r1,[r4,#0x14]         ;123  ; bUpdateApromCmd
000106  e00f              B        |L1.296|
                  |L1.264|
000108  4848              LDR      r0,|L1.556|
00010a  69c1              LDR      r1,[r0,#0x1c]         ;133  ; g_dataFlashAddr
00010c  6001              STR      r1,[r0,#0]            ;135  ; StartAddress
00010e  6a00              LDR      r0,[r0,#0x20]         ;135  ; g_dataFlashSize
000110  2800              CMP      r0,#0                 ;135
000112  d072              BEQ      |L1.506|
000114  180a              ADDS     r2,r1,r0              ;137
000116  2300              MOVS     r3,#0                 ;137
000118  2022              MOVS     r0,#0x22              ;137
00011a  f7fffffe          BL       FMC_Proc
                  |L1.286|
00011e  6871              LDR      r1,[r6,#4]            ;149
000120  4842              LDR      r0,|L1.556|
000122  3d08              SUBS     r5,r5,#8              ;149
000124  3608              ADDS     r6,r6,#8              ;149
000126  6041              STR      r1,[r0,#4]            ;149  ; TotalLen
                  |L1.296|
;;;165        {
;;;166            uint32_t PageAddress;
;;;167            StartAddress -= LastDataLen;
;;;168            TotalLen += LastDataLen;
;;;169            PageAddress = StartAddress & (0x100000 - FMC_FLASH_PAGE_SIZE);
;;;170    
;;;171            if (PageAddress >= Config0)
;;;172            {
;;;173                goto out;
;;;174            }
;;;175    
;;;176            ReadData(PageAddress, StartAddress, (uint32_t *)aprom_buf);
;;;177            FMC_Erase_User(PageAddress);
;;;178            WriteData(PageAddress, StartAddress, (uint32_t *)aprom_buf);
;;;179    
;;;180            if ((StartAddress % FMC_FLASH_PAGE_SIZE) >= (FMC_FLASH_PAGE_SIZE - LastDataLen))
;;;181            {
;;;182                FMC_Erase_User(PageAddress + FMC_FLASH_PAGE_SIZE);
;;;183            }
;;;184    
;;;185            goto out;
;;;186        }
;;;187    
;;;188        if ((gcmd == CMD_UPDATE_APROM) || (gcmd == CMD_UPDATE_DATAFLASH))
000128  4c40              LDR      r4,|L1.556|
00012a  6920              LDR      r0,[r4,#0x10]  ; gcmd
00012c  28a0              CMP      r0,#0xa0
00012e  d04a              BEQ      |L1.454|
000130  28c3              CMP      r0,#0xc3
000132  d048              BEQ      |L1.454|
000134  e061              B        |L1.506|
                  |L1.310|
000136  e012              B        |L1.350|
                  |L1.312|
000138  493c              LDR      r1,|L1.556|
00013a  2000              MOVS     r0,#0                 ;146
00013c  6008              STR      r0,[r1,#0]            ;131  ; StartAddress
00013e  e7ee              B        |L1.286|
                  |L1.320|
000140  493a              LDR      r1,|L1.556|
000142  9802              LDR      r0,[sp,#8]            ;155
000144  6949              LDR      r1,[r1,#0x14]         ;155  ; bUpdateApromCmd
000146  4308              ORRS     r0,r0,r1              ;155
000148  d057              BEQ      |L1.506|
00014a  4630              MOV      r0,r6                 ;160
00014c  9901              LDR      r1,[sp,#4]            ;160
00014e  f7fffffe          BL       UpdateConfig
000152  4936              LDR      r1,|L1.556|
000154  3120              ADDS     r1,r1,#0x20           ;161
000156  1f08              SUBS     r0,r1,#4              ;161
000158  f7fffffe          BL       GetDataFlashInfo
00015c  e04d              B        |L1.506|
                  |L1.350|
00015e  4c33              LDR      r4,|L1.556|
000160  6821              LDR      r1,[r4,#0]            ;167  ; StartAddress
000162  68a0              LDR      r0,[r4,#8]            ;167  ; LastDataLen
000164  1a0a              SUBS     r2,r1,r0              ;167
000166  6022              STR      r2,[r4,#0]            ;168  ; StartAddress
000168  6861              LDR      r1,[r4,#4]            ;168  ; TotalLen
00016a  4615              MOV      r5,r2                 ;169
00016c  1808              ADDS     r0,r1,r0              ;168
00016e  6060              STR      r0,[r4,#4]            ;169  ; TotalLen
000170  4832              LDR      r0,|L1.572|
000172  4005              ANDS     r5,r5,r0              ;169
000174  2003              MOVS     r0,#3                 ;171
000176  0500              LSLS     r0,r0,#20             ;171
000178  4285              CMP      r5,r0                 ;171
00017a  d23e              BCS      |L1.506|
00017c  4b29              LDR      r3,|L1.548|
00017e  4629              MOV      r1,r5                 ;176
000180  3340              ADDS     r3,r3,#0x40           ;176
000182  2000              MOVS     r0,#0                 ;176
000184  f7fffffe          BL       FMC_Proc
000188  2300              MOVS     r3,#0                 ;177
00018a  1d2a              ADDS     r2,r5,#4              ;177
00018c  4629              MOV      r1,r5                 ;177
00018e  2022              MOVS     r0,#0x22              ;177
000190  f7fffffe          BL       FMC_Proc
000194  4b23              LDR      r3,|L1.548|
000196  4629              MOV      r1,r5                 ;178
000198  3340              ADDS     r3,r3,#0x40           ;178
00019a  2021              MOVS     r0,#0x21              ;178
00019c  6822              LDR      r2,[r4,#0]            ;178  ; StartAddress
00019e  f7fffffe          BL       FMC_Proc
0001a2  8820              LDRH     r0,[r4,#0]            ;180  ; StartAddress
0001a4  2201              MOVS     r2,#1                 ;180
0001a6  68a1              LDR      r1,[r4,#8]            ;180  ; LastDataLen
0001a8  05c0              LSLS     r0,r0,#23             ;180
0001aa  0252              LSLS     r2,r2,#9              ;180
0001ac  0dc0              LSRS     r0,r0,#23             ;180
0001ae  1a51              SUBS     r1,r2,r1              ;180
0001b0  4288              CMP      r0,r1                 ;180
0001b2  d322              BCC      |L1.506|
0001b4  1dea              ADDS     r2,r5,#7              ;182
0001b6  32ff              ADDS     r2,r2,#0xff           ;182
0001b8  32fe              ADDS     r2,r2,#0xfe           ;182
0001ba  2300              MOVS     r3,#0                 ;182
0001bc  1f11              SUBS     r1,r2,#4              ;182
0001be  2022              MOVS     r0,#0x22              ;182
0001c0  f7fffffe          BL       FMC_Proc
0001c4  e019              B        |L1.506|
                  |L1.454|
;;;189        {
;;;190            if (TotalLen < srclen)
0001c6  6860              LDR      r0,[r4,#4]  ; TotalLen
0001c8  42a8              CMP      r0,r5
0001ca  d200              BCS      |L1.462|
;;;191            {
;;;192                srclen = TotalLen;/*prevent last package from over writing*/
0001cc  4605              MOV      r5,r0
                  |L1.462|
;;;193            }
;;;194    
;;;195            TotalLen -= srclen;
0001ce  1b40              SUBS     r0,r0,r5
;;;196            WriteData(StartAddress, StartAddress + srclen, (uint32_t *)pSrc);
0001d0  6060              STR      r0,[r4,#4]  ; TotalLen
0001d2  6821              LDR      r1,[r4,#0]  ; StartAddress
0001d4  4633              MOV      r3,r6
0001d6  194a              ADDS     r2,r1,r5
0001d8  2021              MOVS     r0,#0x21
0001da  f7fffffe          BL       FMC_Proc
;;;197            memset(pSrc, 0, srclen);
0001de  4629              MOV      r1,r5
0001e0  4630              MOV      r0,r6
0001e2  f7fffffe          BL       __aeabi_memclr
;;;198            ReadData(StartAddress, StartAddress + srclen, (uint32_t *)pSrc);
0001e6  6821              LDR      r1,[r4,#0]  ; StartAddress
0001e8  4633              MOV      r3,r6
0001ea  194a              ADDS     r2,r1,r5
0001ec  2000              MOVS     r0,#0
0001ee  f7fffffe          BL       FMC_Proc
;;;199            StartAddress += srclen;
0001f2  6820              LDR      r0,[r4,#0]  ; StartAddress
;;;200            LastDataLen =  srclen;
0001f4  60a5              STR      r5,[r4,#8]  ; LastDataLen
0001f6  1940              ADDS     r0,r0,r5              ;199
0001f8  6020              STR      r0,[r4,#0]  ; StartAddress
                  |L1.506|
0001fa  2000              MOVS     r0,#0
0001fc  4601              MOV      r1,r0
;;;201        }
;;;202    
;;;203    out:
;;;204        lcksum = Checksum(buffer, len);
0001fe  9b03              LDR      r3,[sp,#0xc]
000200  9a04              LDR      r2,[sp,#0x10]
000202  e003              B        |L1.524|
                  |L1.516|
000204  5c5c              LDRB     r4,[r3,r1]
000206  1820              ADDS     r0,r4,r0
000208  b280              UXTH     r0,r0
00020a  1c49              ADDS     r1,r1,#1
                  |L1.524|
00020c  4291              CMP      r1,r2
00020e  dbf9              BLT      |L1.516|
;;;205        outps(response, lcksum);
000210  8038              STRH     r0,[r7,#0]
;;;206        ++g_packno;
000212  4906              LDR      r1,|L1.556|
000214  68c8              LDR      r0,[r1,#0xc]  ; g_packno
000216  1c40              ADDS     r0,r0,#1
;;;207        outpw(response + 4, g_packno);
000218  6078              STR      r0,[r7,#4]
00021a  1c40              ADDS     r0,r0,#1
;;;208        g_packno++;
;;;209        return (0);
00021c  60c8              STR      r0,[r1,#0xc]  ; g_packno
00021e  2000              MOVS     r0,#0
;;;210    }
000220  b005              ADD      sp,sp,#0x14
000222  bdf0              POP      {r4-r7,pc}
;;;211    
                          ENDP

                  |L1.548|
                          DCD      ||.bss||
                  |L1.552|
                          DCD      0x00300010
                  |L1.556|
                          DCD      ||.data||
                  |L1.560|
                          DCD      0x4000c000
                  |L1.564|
                          DCD      0x05fa0004
                  |L1.568|
                          DCD      0xe000ed00
                  |L1.572|
                          DCD      0x000ffe00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  response_buff
                          %        64
                  aprom_buf
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  StartAddress
                          DCD      0x00000000
                  TotalLen
                          DCD      0x00000000
                  LastDataLen
                          DCD      0x00000000
                  g_packno
                          DCD      0x00000001
                  gcmd
                          DCD      0x00000000
                  bUpdateApromCmd
                          DCD      0x00000000
                  g_apromSize
                          DCD      0x00000000
                  g_dataFlashAddr
                          DCD      0x00000000
                  g_dataFlashSize
                          DCD      0x00000000

                          AREA ||area_number.6||, DATA, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.data||
                  bISPDataReady
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\isp_user.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_isp_user_c_ParseCmd____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_isp_user_c_ParseCmd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_isp_user_c_ParseCmd____REVSH|
#line 402
|__asm___10_isp_user_c_ParseCmd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
