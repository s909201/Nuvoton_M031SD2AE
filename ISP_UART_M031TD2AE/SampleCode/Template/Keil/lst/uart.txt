; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I.\RTE\_Template -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.3.18\Device\M031\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -D_RTE_ --omf_browse=.\obj\uart.crf ..\..\..\Library\StdDriver\src\uart.c]
                          THUMB

                          AREA ||i.CLK_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPLLClockFreq PROC
;;;460      */
;;;461    static __INLINE uint32_t CLK_GetPLLClockFreq(void)
000000  b508              PUSH     {r3,lr}
;;;462    {
;;;463        uint32_t u32PllFreq;
;;;464        uint32_t u32FIN, u32NF, u32NR, u32NO;
;;;465        uint8_t au8NoTbl[4] = {1, 2, 2, 4}; /* OUTDIV :DEF: {1, 2, 2, 4} */
000002  a011              ADR      r0,|L1.72|
000004  6800              LDR      r0,[r0,#0]
;;;466        uint32_t u32Reg;
;;;467    
;;;468        u32PllFreq = 0;
;;;469        u32Reg = CLK->PLLCTL;
000006  4911              LDR      r1,|L1.76|
000008  9000              STR      r0,[sp,#0]            ;468
00000a  6809              LDR      r1,[r1,#0]
00000c  2000              MOVS     r0,#0                 ;468
;;;470    
;;;471        if ((u32Reg & (CLK_PLLCTL_PD_Msk | CLK_PLLCTL_OE_Msk)) == 0)
00000e  2205              MOVS     r2,#5
000010  0412              LSLS     r2,r2,#16
000012  4211              TST      r1,r2
000014  d116              BNE      |L1.68|
;;;472        {
;;;473            /* PLL is enabled and output enabled */
;;;474            if (u32Reg & CLK_PLLCTL_PLLSRC_Msk)
000016  0308              LSLS     r0,r1,#12
000018  d501              BPL      |L1.30|
;;;475            {
;;;476                u32FIN = (__HIRC >> 2);
00001a  480d              LDR      r0,|L1.80|
00001c  e000              B        |L1.32|
                  |L1.30|
;;;477            } else
;;;478                u32FIN = __HXT;
00001e  480d              LDR      r0,|L1.84|
                  |L1.32|
;;;479    
;;;480            if (u32Reg & CLK_PLLCTL_BP_Msk)
000020  038a              LSLS     r2,r1,#14
000022  d40f              BMI      |L1.68|
;;;481            {
;;;482                /* PLL is in bypass mode */
;;;483                u32PllFreq = u32FIN;
;;;484            }
;;;485            else
;;;486            {
;;;487                /* PLL is in normal work mode */
;;;488                u32NO = au8NoTbl[((u32Reg & CLK_PLLCTL_OUTDIV_Msk) >> CLK_PLLCTL_OUTDIV_Pos)];
000024  040a              LSLS     r2,r1,#16
000026  0f92              LSRS     r2,r2,#30
000028  466b              MOV      r3,sp
00002a  5c9b              LDRB     r3,[r3,r2]
;;;489                u32NF  = ((u32Reg & CLK_PLLCTL_FBDIV_Msk) >> CLK_PLLCTL_FBDIV_Pos) + 2;
00002c  05ca              LSLS     r2,r1,#23
;;;490                u32NR  = ((u32Reg & CLK_PLLCTL_INDIV_Msk) >> CLK_PLLCTL_INDIV_Pos) + 2;
00002e  0489              LSLS     r1,r1,#18
000030  0dd2              LSRS     r2,r2,#23             ;489
000032  0ec9              LSRS     r1,r1,#27
000034  1c89              ADDS     r1,r1,#2
;;;491                /* u32FIN is shifted 2 bits to avoid overflow */
;;;492                u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);
000036  0880              LSRS     r0,r0,#2
000038  1c92              ADDS     r2,r2,#2
00003a  4359              MULS     r1,r3,r1
00003c  4350              MULS     r0,r2,r0
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  0080              LSLS     r0,r0,#2
                  |L1.68|
;;;493            }
;;;494        }
;;;495    
;;;496        return u32PllFreq;
;;;497    }
000044  bd08              POP      {r3,pc}
;;;498    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
000048  01020204          DCB      1,2,2,4
                  |L1.76|
                          DCD      0x40000240
                  |L1.80|
                          DCD      0x00b71b00
                  |L1.84|
                          DCD      0x01e84800

                          AREA ||i.UART_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  UART_ClearIntFlag PROC
;;;40     
;;;41     void UART_ClearIntFlag(UART_T *uart , uint32_t u32InterruptFlag)
000000  01ca              LSLS     r2,r1,#7
;;;42     {
000002  d502              BPL      |L2.10|
;;;43     
;;;44     
;;;45         if (u32InterruptFlag & UART_INTSTS_SWBEINT_Msk)   /* Clear Bit Error Detection Interrupt */
;;;46         {
;;;47             uart->INTSTS = UART_INTSTS_SWBEIF_Msk;
000004  2201              MOVS     r2,#1
000006  0412              LSLS     r2,r2,#16
000008  61c2              STR      r2,[r0,#0x1c]
                  |L2.10|
;;;48         }
;;;49     
;;;50         if (u32InterruptFlag & UART_INTSTS_RLSINT_Msk)   /* Clear Receive Line Status Interrupt */
00000a  054a              LSLS     r2,r1,#21
00000c  d503              BPL      |L2.22|
;;;51         {
;;;52             uart->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk;
00000e  2270              MOVS     r2,#0x70
000010  6182              STR      r2,[r0,#0x18]
;;;53             uart->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk;
000012  2208              MOVS     r2,#8
000014  6182              STR      r2,[r0,#0x18]
                  |L2.22|
;;;54         }
;;;55     
;;;56         if (u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)   /* Clear Modem Status Interrupt */
000016  050a              LSLS     r2,r1,#20
000018  d503              BPL      |L2.34|
;;;57         {
;;;58             uart->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
00001a  6942              LDR      r2,[r0,#0x14]
00001c  2301              MOVS     r3,#1
00001e  431a              ORRS     r2,r2,r3
000020  6142              STR      r2,[r0,#0x14]
                  |L2.34|
;;;59         }
;;;60     
;;;61         if (u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
000022  048a              LSLS     r2,r1,#18
000024  d501              BPL      |L2.42|
;;;62         {
;;;63             uart->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
000026  4a03              LDR      r2,|L2.52|
000028  6182              STR      r2,[r0,#0x18]
                  |L2.42|
;;;64         }
;;;65     
;;;66         if (u32InterruptFlag & UART_INTSTS_WKINT_Msk)   /* Clear Wake-up Interrupt */
00002a  0449              LSLS     r1,r1,#17
00002c  d501              BPL      |L2.50|
;;;67         {
;;;68             uart->WKSTS = UART_WKSTS_CTSWKF_Msk  | UART_WKSTS_DATWKF_Msk  |
00002e  211f              MOVS     r1,#0x1f
000030  6441              STR      r1,[r0,#0x44]
                  |L2.50|
;;;69                           UART_WKSTS_RFRTWKF_Msk | UART_WKSTS_RS485WKF_Msk |
;;;70                           UART_WKSTS_TOUTWKF_Msk;
;;;71         }
;;;72     
;;;73     }
000032  4770              BX       lr
;;;74     
                          ENDP

                  |L2.52|
                          DCD      0x01000001

                          AREA ||i.UART_Close||, CODE, READONLY, ALIGN=1

                  UART_Close PROC
;;;84      */
;;;85     void UART_Close(UART_T *uart)
000000  2100              MOVS     r1,#0
;;;86     {
;;;87         uart->INTEN = 0ul;
000002  6041              STR      r1,[r0,#4]
;;;88     }
000004  4770              BX       lr
;;;89     
                          ENDP


                          AREA ||i.UART_DisableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_DisableFlowCtrl PROC
;;;99      */
;;;100    void UART_DisableFlowCtrl(UART_T *uart)
000000  6841              LDR      r1,[r0,#4]
;;;101    {
;;;102        uart->INTEN &= ~(UART_INTEN_ATORTSEN_Msk | UART_INTEN_ATOCTSEN_Msk);
000002  2203              MOVS     r2,#3
000004  0312              LSLS     r2,r2,#12
000006  4391              BICS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;103    }
00000a  4770              BX       lr
;;;104    
                          ENDP


                          AREA ||i.UART_DisableInt||, CODE, READONLY, ALIGN=1

                  UART_DisableInt PROC
;;;123     */
;;;124    void UART_DisableInt(UART_T  *uart, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;125    {
;;;126        /* Disable UART specified interrupt */
;;;127        UART_DISABLE_INT(uart, u32InterruptFlag);
000002  438a              BICS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
;;;128    
;;;129    }
000006  4770              BX       lr
;;;130    
                          ENDP


                          AREA ||i.UART_EnableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_EnableFlowCtrl PROC
;;;140     */
;;;141    void UART_EnableFlowCtrl(UART_T *uart)
000000  6901              LDR      r1,[r0,#0x10]
;;;142    {
;;;143        /* Set RTS pin output is low level active */
;;;144        uart->MODEM |= UART_MODEM_RTSACTLV_Msk;
000002  2201              MOVS     r2,#1
000004  0252              LSLS     r2,r2,#9
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;145    
;;;146        /* Set CTS pin input is low level active */
;;;147        uart->MODEMSTS |= UART_MODEMSTS_CTSACTLV_Msk;
00000a  6941              LDR      r1,[r0,#0x14]
00000c  1052              ASRS     r2,r2,#1
00000e  4311              ORRS     r1,r1,r2
000010  6141              STR      r1,[r0,#0x14]
;;;148    
;;;149        /* Set RTS and CTS auto flow control enable */
;;;150        uart->INTEN |= UART_INTEN_ATORTSEN_Msk | UART_INTEN_ATOCTSEN_Msk;
000012  6841              LDR      r1,[r0,#4]
000014  2203              MOVS     r2,#3
000016  0312              LSLS     r2,r2,#12
000018  4311              ORRS     r1,r1,r2
00001a  6041              STR      r1,[r0,#4]
;;;151    }
00001c  4770              BX       lr
;;;152    
                          ENDP


                          AREA ||i.UART_EnableInt||, CODE, READONLY, ALIGN=1

                  UART_EnableInt PROC
;;;171     */
;;;172    void UART_EnableInt(UART_T  *uart, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;173    {
;;;174        /* Enable UART specified interrupt */
;;;175        UART_ENABLE_INT(uart, u32InterruptFlag);
000002  430a              ORRS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
;;;176    
;;;177    }
000006  4770              BX       lr
;;;178    
                          ENDP


                          AREA ||i.UART_Open||, CODE, READONLY, ALIGN=2

                  UART_Open PROC
;;;189     */
;;;190    void UART_Open(UART_T *uart, uint32_t u32baudrate)
000000  b5f0              PUSH     {r4-r7,lr}
;;;191    {
000002  b087              SUB      sp,sp,#0x1c
000004  460f              MOV      r7,r1
000006  4604              MOV      r4,r0
;;;192        uint32_t u32UartClkSrcSel = 0ul, u32UartClkDivNum = 0ul;
000008  2500              MOVS     r5,#0
00000a  462e              MOV      r6,r5
;;;193        uint32_t u32ClkTbl[6ul] = {__HXT, 0ul, __LXT, __HIRC, 0ul, __LIRC};
00000c  2218              MOVS     r2,#0x18
00000e  4947              LDR      r1,|L8.300|
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memcpy4
;;;194        uint32_t u32Baud_Div = 0ul;
;;;195    
;;;196    
;;;197        if (uart == (UART_T *)UART0)
000016  4946              LDR      r1,|L8.304|
;;;198        {
;;;199            /* Get UART clock source selection */
;;;200            u32UartClkSrcSel = ((uint32_t)(CLK->CLKSEL1 & CLK_CLKSEL1_UART0SEL_Msk)) >> CLK_CLKSEL1_UART0SEL_Pos;
000018  4846              LDR      r0,|L8.308|
;;;201            /* Get UART clock divider number */
;;;202            u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART0DIV_Msk) >> CLK_CLKDIV0_UART0DIV_Pos;
;;;203        }
;;;204        else if (uart == (UART_T *)UART1)
;;;205        {
;;;206            /* Get UART clock source selection */
;;;207            u32UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART1SEL_Msk) >> CLK_CLKSEL1_UART1SEL_Pos;
;;;208            /* Get UART clock divider number */
;;;209            u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART1DIV_Msk) >> CLK_CLKDIV0_UART1DIV_Pos;
;;;210        }
;;;211        else if (uart == (UART_T *)UART2)
00001a  4a47              LDR      r2,|L8.312|
00001c  428c              CMP      r4,r1                 ;197
00001e  d104              BNE      |L8.42|
000020  6943              LDR      r3,[r0,#0x14]         ;200
000022  6a00              LDR      r0,[r0,#0x20]         ;202
;;;212        {
;;;213            /* Get UART clock source selection */
;;;214            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART2SEL_Msk) >> CLK_CLKSEL3_UART2SEL_Pos;
;;;215            /* Get UART clock divider number */
;;;216            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART2DIV_Msk) >> CLK_CLKDIV4_UART2DIV_Pos;
;;;217        }
;;;218        else if(uart==(UART_T*)UART3)
;;;219        {
;;;220            /* Get UART clock source selection */
;;;221            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART3SEL_Msk) >> CLK_CLKSEL3_UART3SEL_Pos;
;;;222            /* Get UART clock divider number */
;;;223            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART3DIV_Msk) >> CLK_CLKDIV4_UART3DIV_Pos;
;;;224        }
;;;225        else if(uart==(UART_T*)UART4)
;;;226        {
;;;227            /* Get UART clock source selection */
;;;228            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART4SEL_Msk) >> CLK_CLKSEL3_UART4SEL_Pos;
;;;229            /* Get UART clock divider number */
;;;230            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART4DIV_Msk) >> CLK_CLKDIV4_UART4DIV_Pos;
;;;231        }
;;;232        else if(uart==(UART_T*)UART5)
;;;233        {
;;;234            /* Get UART clock source selection */
;;;235            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART5SEL_Msk) >> CLK_CLKSEL3_UART5SEL_Pos;
;;;236            /* Get UART clock divider number */
;;;237            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART5DIV_Msk) >> CLK_CLKDIV4_UART5DIV_Pos;
;;;238        }
;;;239        else if(uart==(UART_T*)UART6)
;;;240        {
;;;241            /* Get UART clock source selection */
;;;242            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART6SEL_Msk) >> CLK_CLKSEL3_UART6SEL_Pos;
;;;243            /* Get UART clock divider number */
;;;244            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART6DIV_Msk) >> CLK_CLKDIV4_UART6DIV_Pos;
;;;245        }
;;;246        else if(uart==(UART_T*)UART7)
;;;247        {
;;;248            /* Get UART clock source selection */
;;;249            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART7SEL_Msk) >> CLK_CLKSEL3_UART7SEL_Pos;
;;;250            /* Get UART clock divider number */
;;;251            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART7DIV_Msk) >> CLK_CLKDIV4_UART7DIV_Pos;
;;;252        }    
;;;253    
;;;254        /* Select UART function */
;;;255        uart->FUNCSEL = UART_FUNCSEL_UART;
;;;256    
;;;257        /* Set UART line configuration */
;;;258        uart->LINE = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
;;;259    
;;;260        /* Set UART Rx and RTS trigger level */
;;;261        uart->FIFO &= ~(UART_FIFO_RFITL_Msk | UART_FIFO_RTSTRGLV_Msk);
;;;262    
;;;263        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;264        if (u32UartClkSrcSel == 1ul)
;;;265        {
;;;266            u32ClkTbl[u32UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;267        }
;;;268    
;;;269        /* Get PCLK clock frequency if UART clock source selection is PCLK */
;;;270        if (u32UartClkSrcSel == 4ul)
;;;271        {
;;;272            /* UART Port as UART0 ,UART2, UART4 or UART6 */
;;;273            if ((uart == (UART_T *)UART0) || (uart == (UART_T *)UART2) || (uart == (UART_T *)UART4) || (uart == (UART_T *)UART6))
;;;274            {
;;;275                u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK0Freq();
;;;276            }
;;;277            else     /* UART Port as UART1, UART3, UART5 or UART7*/
;;;278            {
;;;279                u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK1Freq();
;;;280            }
;;;281    
;;;282        }
;;;283    
;;;284        /* Set UART baud rate */
;;;285        if (u32baudrate != 0ul)
;;;286        {
;;;287            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul), u32baudrate);
;;;288    
;;;289            if (u32Baud_Div > 0xFFFFul)
;;;290            {
;;;291                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul), u32baudrate));
;;;292            }
;;;293            else
;;;294            {
;;;295                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;296            }
;;;297        }
;;;298    }
000024  015b              LSLS     r3,r3,#5
000026  0f5d              LSRS     r5,r3,#29
000028  e01f              B        |L8.106|
                  |L8.42|
00002a  4b44              LDR      r3,|L8.316|
00002c  429c              CMP      r4,r3                 ;204
00002e  d104              BNE      |L8.58|
000030  6943              LDR      r3,[r0,#0x14]         ;207
000032  6a00              LDR      r0,[r0,#0x20]         ;209
000034  005b              LSLS     r3,r3,#1
000036  0f5d              LSRS     r5,r3,#29
000038  e020              B        |L8.124|
                  |L8.58|
00003a  4294              CMP      r4,r2                 ;211
00003c  d104              BNE      |L8.72|
00003e  69c3              LDR      r3,[r0,#0x1c]         ;214
000040  6b00              LDR      r0,[r0,#0x30]         ;216
000042  015b              LSLS     r3,r3,#5
000044  0f5d              LSRS     r5,r3,#29
000046  e02d              B        |L8.164|
                  |L8.72|
000048  4b3d              LDR      r3,|L8.320|
00004a  429c              CMP      r4,r3                 ;218
00004c  d106              BNE      |L8.92|
00004e  69c3              LDR      r3,[r0,#0x1c]         ;221
000050  6b00              LDR      r0,[r0,#0x30]         ;223
000052  005b              LSLS     r3,r3,#1
000054  0f5d              LSRS     r5,r3,#29
000056  0600              LSLS     r0,r0,#24             ;223
000058  0f06              LSRS     r6,r0,#28             ;223
00005a  e025              B        |L8.168|
                  |L8.92|
00005c  4b39              LDR      r3,|L8.324|
00005e  429c              CMP      r4,r3                 ;225
000060  d105              BNE      |L8.110|
000062  69c3              LDR      r3,[r0,#0x1c]         ;228
000064  6b00              LDR      r0,[r0,#0x30]         ;230
000066  035b              LSLS     r3,r3,#13
000068  0f5d              LSRS     r5,r3,#29
                  |L8.106|
00006a  0a00              LSRS     r0,r0,#8
00006c  e01a              B        |L8.164|
                  |L8.110|
00006e  4b36              LDR      r3,|L8.328|
000070  429c              CMP      r4,r3                 ;232
000072  d106              BNE      |L8.130|
000074  69c3              LDR      r3,[r0,#0x1c]         ;235
000076  6b00              LDR      r0,[r0,#0x30]         ;237
000078  025b              LSLS     r3,r3,#9
00007a  0f5d              LSRS     r5,r3,#29
                  |L8.124|
00007c  0400              LSLS     r0,r0,#16             ;237
00007e  0f06              LSRS     r6,r0,#28             ;237
000080  e012              B        |L8.168|
                  |L8.130|
000082  4b32              LDR      r3,|L8.332|
000084  429c              CMP      r4,r3                 ;239
000086  d105              BNE      |L8.148|
000088  69c3              LDR      r3,[r0,#0x1c]         ;242
00008a  6b00              LDR      r0,[r0,#0x30]         ;244
00008c  055b              LSLS     r3,r3,#21
00008e  0f5d              LSRS     r5,r3,#29
000090  0c00              LSRS     r0,r0,#16
000092  e007              B        |L8.164|
                  |L8.148|
000094  4b2e              LDR      r3,|L8.336|
000096  429c              CMP      r4,r3                 ;246
000098  d106              BNE      |L8.168|
00009a  69c3              LDR      r3,[r0,#0x1c]         ;249
00009c  6b00              LDR      r0,[r0,#0x30]         ;251
00009e  045b              LSLS     r3,r3,#17
0000a0  0f5d              LSRS     r5,r3,#29
0000a2  0d00              LSRS     r0,r0,#20
                  |L8.164|
0000a4  0706              LSLS     r6,r0,#28
0000a6  0f36              LSRS     r6,r6,#28
                  |L8.168|
0000a8  2000              MOVS     r0,#0                 ;255
0000aa  6320              STR      r0,[r4,#0x30]         ;255
0000ac  2003              MOVS     r0,#3                 ;258
0000ae  60e0              STR      r0,[r4,#0xc]          ;258
0000b0  68a0              LDR      r0,[r4,#8]            ;261
0000b2  4b28              LDR      r3,|L8.340|
0000b4  4018              ANDS     r0,r0,r3              ;261
0000b6  60a0              STR      r0,[r4,#8]            ;261
0000b8  2d01              CMP      r5,#1                 ;264
0000ba  d002              BEQ      |L8.194|
0000bc  2d04              CMP      r5,#4                 ;270
0000be  d004              BEQ      |L8.202|
0000c0  e013              B        |L8.234|
                  |L8.194|
0000c2  f7fffffe          BL       CLK_GetPLLClockFreq
0000c6  9001              STR      r0,[sp,#4]            ;266
0000c8  e00f              B        |L8.234|
                  |L8.202|
0000ca  428c              CMP      r4,r1                 ;273
0000cc  d007              BEQ      |L8.222|
0000ce  4294              CMP      r4,r2                 ;273
0000d0  d005              BEQ      |L8.222|
0000d2  481c              LDR      r0,|L8.324|
0000d4  4284              CMP      r4,r0                 ;273
0000d6  d002              BEQ      |L8.222|
0000d8  481c              LDR      r0,|L8.332|
0000da  4284              CMP      r4,r0                 ;273
0000dc  d102              BNE      |L8.228|
                  |L8.222|
0000de  f7fffffe          BL       CLK_GetPCLK0Freq
0000e2  e001              B        |L8.232|
                  |L8.228|
0000e4  f7fffffe          BL       CLK_GetPCLK1Freq
                  |L8.232|
0000e8  9004              STR      r0,[sp,#0x10]         ;275
                  |L8.234|
0000ea  2f00              CMP      r7,#0                 ;285
0000ec  d01b              BEQ      |L8.294|
0000ee  00a9              LSLS     r1,r5,#2              ;287
0000f0  4668              MOV      r0,sp                 ;287
0000f2  5840              LDR      r0,[r0,r1]            ;287
0000f4  1c71              ADDS     r1,r6,#1              ;287
0000f6  f7fffffe          BL       __aeabi_uidivmod
0000fa  4605              MOV      r5,r0                 ;287
0000fc  0879              LSRS     r1,r7,#1              ;287
0000fe  1840              ADDS     r0,r0,r1              ;287
000100  4639              MOV      r1,r7                 ;287
000102  f7fffffe          BL       __aeabi_uidivmod
000106  4914              LDR      r1,|L8.344|
000108  1e80              SUBS     r0,r0,#2              ;289
00010a  4288              CMP      r0,r1                 ;289
00010c  d907              BLS      |L8.286|
00010e  00f9              LSLS     r1,r7,#3              ;291
000110  1868              ADDS     r0,r5,r1              ;291
000112  4639              MOV      r1,r7                 ;291
000114  f7fffffe          BL       __aeabi_uidivmod
000118  0900              LSRS     r0,r0,#4              ;291
00011a  1e80              SUBS     r0,r0,#2              ;291
00011c  e002              B        |L8.292|
                  |L8.286|
00011e  2103              MOVS     r1,#3                 ;295
000120  0709              LSLS     r1,r1,#28             ;295
000122  4308              ORRS     r0,r0,r1              ;295
                  |L8.292|
000124  6260              STR      r0,[r4,#0x24]         ;295
                  |L8.294|
000126  b007              ADD      sp,sp,#0x1c
000128  bdf0              POP      {r4-r7,pc}
;;;299    
                          ENDP

00012a  0000              DCW      0x0000
                  |L8.300|
                          DCD      ||.constdata||
                  |L8.304|
                          DCD      0x40070000
                  |L8.308|
                          DCD      0x40000200
                  |L8.312|
                          DCD      0x40072000
                  |L8.316|
                          DCD      0x40071000
                  |L8.320|
                          DCD      0x40073000
                  |L8.324|
                          DCD      0x40074000
                  |L8.328|
                          DCD      0x40075000
                  |L8.332|
                          DCD      0x40076000
                  |L8.336|
                          DCD      0x40077000
                  |L8.340|
                          DCD      0xfff0ff0f
                  |L8.344|
                          DCD      0x0000ffff

                          AREA ||i.UART_Read||, CODE, READONLY, ALIGN=1

                  UART_Read PROC
;;;311     */
;;;312    uint32_t UART_Read(UART_T *uart, uint8_t pu8RxBuf[], uint32_t u32ReadBytes)
000000  b5f0              PUSH     {r4-r7,lr}
;;;313    {
;;;314        uint32_t  u32Count, u32delayno;
;;;315        uint32_t  u32Exit = 0ul;
000002  2700              MOVS     r7,#0
000004  4605              MOV      r5,r0                 ;313
;;;316    
;;;317        for (u32Count = 0ul; u32Count < u32ReadBytes; u32Count++)
;;;318        {
;;;319            u32delayno = 0ul;
;;;320    
;;;321            while (uart->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk)   /* Check RX empty => failed */
;;;322            {
;;;323                u32delayno++;
;;;324    
;;;325                if (u32delayno >= 0x40000000ul)
000006  2601              MOVS     r6,#1
000008  4638              MOV      r0,r7                 ;317
00000a  07b6              LSLS     r6,r6,#30
00000c  e00c              B        |L9.40|
                  |L9.14|
00000e  2300              MOVS     r3,#0                 ;319
000010  e002              B        |L9.24|
                  |L9.18|
000012  1c5b              ADDS     r3,r3,#1              ;321
000014  42b3              CMP      r3,r6
000016  d209              BCS      |L9.44|
                  |L9.24|
000018  69ac              LDR      r4,[r5,#0x18]         ;321
00001a  0464              LSLS     r4,r4,#17             ;321
00001c  d4f9              BMI      |L9.18|
;;;326                {
;;;327                    u32Exit = 1ul;
;;;328                    break;
;;;329                }
;;;330            }
;;;331    
;;;332            if (u32Exit == 1ul)
00001e  2f00              CMP      r7,#0
000020  d104              BNE      |L9.44|
;;;333            {
;;;334                break;
;;;335            }
;;;336            else
;;;337            {
;;;338                pu8RxBuf[u32Count] = (uint8_t)uart->DAT; /* Get Data from UART RX  */
000022  682b              LDR      r3,[r5,#0]
000024  540b              STRB     r3,[r1,r0]
000026  1c40              ADDS     r0,r0,#1
                  |L9.40|
000028  4290              CMP      r0,r2                 ;317
00002a  d3f0              BCC      |L9.14|
                  |L9.44|
;;;339            }
;;;340        }
;;;341    
;;;342        return u32Count;
;;;343    
;;;344    }
00002c  bdf0              POP      {r4-r7,pc}
;;;345    
                          ENDP


                          AREA ||i.UART_SelectIrDAMode||, CODE, READONLY, ALIGN=2

                  UART_SelectIrDAMode PROC
;;;509     */
;;;510    void UART_SelectIrDAMode(UART_T *uart, uint32_t u32Buadrate, uint32_t u32Direction)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;511    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;512        uint32_t u32UartClkSrcSel = 0ul, u32UartClkDivNum = 0ul;
000006  2500              MOVS     r5,#0
000008  462e              MOV      r6,r5
;;;513        uint32_t u32ClkTbl[6ul] = {__HXT, 0ul, __LXT, __HIRC, 0ul, __LIRC};
00000a  2218              MOVS     r2,#0x18
00000c  4947              LDR      r1,|L10.300|
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       __aeabi_memcpy4
;;;514        uint32_t u32Baud_Div;
;;;515    
;;;516        /* Select IrDA function mode */
;;;517        uart->FUNCSEL = UART_FUNCSEL_IrDA;
000014  2702              MOVS     r7,#2
000016  6327              STR      r7,[r4,#0x30]
;;;518    
;;;519    
;;;520        if (uart == UART0)
000018  4945              LDR      r1,|L10.304|
;;;521        {
;;;522            /* Get UART clock source selection */
;;;523            u32UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART0SEL_Msk) >> CLK_CLKSEL1_UART0SEL_Pos;
00001a  4846              LDR      r0,|L10.308|
;;;524            /* Get UART clock divider number */
;;;525            u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART0DIV_Msk) >> CLK_CLKDIV0_UART0DIV_Pos;
;;;526        }
;;;527        else if (uart == UART1)
;;;528        {
;;;529            /* Get UART clock source selection */
;;;530            u32UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART1SEL_Msk) >> CLK_CLKSEL1_UART1SEL_Pos;
;;;531            /* Get UART clock divider number */
;;;532            u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART1DIV_Msk) >> CLK_CLKDIV0_UART1DIV_Pos;
;;;533        }
;;;534        else if (uart == UART2)
00001c  4a46              LDR      r2,|L10.312|
00001e  428c              CMP      r4,r1                 ;520
000020  d104              BNE      |L10.44|
000022  6943              LDR      r3,[r0,#0x14]         ;523
000024  6a00              LDR      r0,[r0,#0x20]         ;525
;;;535        {
;;;536            /* Get UART clock source selection */
;;;537            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART2SEL_Msk) >> CLK_CLKSEL3_UART2SEL_Pos;
;;;538            /* Get UART clock divider number */
;;;539            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART2DIV_Msk) >> CLK_CLKDIV4_UART2DIV_Pos;
;;;540        }
;;;541        else if (uart == UART3)
;;;542        {
;;;543            /* Get UART clock source selection */
;;;544            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART3SEL_Msk) >> CLK_CLKSEL3_UART3SEL_Pos;
;;;545            /* Get UART clock divider number */
;;;546            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART3DIV_Msk) >> CLK_CLKDIV4_UART3DIV_Pos;
;;;547        }
;;;548        else if (uart == UART4)
;;;549        {
;;;550            /* Get UART clock source selection */
;;;551            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART4SEL_Msk) >> CLK_CLKSEL3_UART4SEL_Pos;
;;;552            /* Get UART clock divider number */
;;;553            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART4DIV_Msk) >> CLK_CLKDIV4_UART4DIV_Pos;
;;;554        }
;;;555        else if (uart == UART5)
;;;556        {
;;;557            /* Get UART clock source selection */
;;;558            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART5SEL_Msk) >> CLK_CLKSEL3_UART5SEL_Pos;
;;;559            /* Get UART clock divider number */
;;;560            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART5DIV_Msk) >> CLK_CLKDIV4_UART5DIV_Pos;
;;;561        }
;;;562        else if (uart == UART6)
;;;563        {
;;;564            /* Get UART clock source selection */
;;;565            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART6SEL_Msk) >> CLK_CLKSEL3_UART6SEL_Pos;
;;;566            /* Get UART clock divider number */
;;;567            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART6DIV_Msk) >> CLK_CLKDIV4_UART6DIV_Pos;
;;;568        }    
;;;569        else if (uart == UART7)
;;;570        {
;;;571            /* Get UART clock source selection */
;;;572            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART7SEL_Msk) >> CLK_CLKSEL3_UART7SEL_Pos;
;;;573            /* Get UART clock divider number */
;;;574            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART7DIV_Msk) >> CLK_CLKDIV4_UART7DIV_Pos;
;;;575        }    
;;;576    
;;;577        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;578        if (u32UartClkSrcSel == 1ul)
;;;579        {
;;;580            u32ClkTbl[u32UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;581        }
;;;582    
;;;583        /* Get PCLK clock frequency if UART clock source selection is PCLK */
;;;584        if (u32UartClkSrcSel == 4ul)
;;;585        {
;;;586            if ((uart == (UART_T *)UART0) || (uart == (UART_T *)UART2)|| (uart == (UART_T *)UART4)|| (uart == (UART_T *)UART6))
;;;587            {
;;;588                u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK0Freq();
;;;589            }
;;;590            else     /* UART Port as UART1, UART3, UART5, UART7*/
;;;591            {
;;;592                u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK1Freq();
;;;593            }
;;;594        }
;;;595    
;;;596    
;;;597        /* Set UART IrDA baud rate in mode 0 */
;;;598        if (u32Buadrate != 0ul)
;;;599        {
;;;600            u32Baud_Div = UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul), u32Buadrate);
;;;601    
;;;602            if (u32Baud_Div < 0xFFFFul)
;;;603            {
;;;604                uart->BAUD = (UART_BAUD_MODE0 | u32Baud_Div);
;;;605            }
;;;606            else
;;;607            {
;;;608            }
;;;609        }
;;;610    
;;;611        /* Configure IrDA relative settings */
;;;612        if (u32Direction == UART_IRDA_RXEN)
;;;613        {
;;;614            uart->IRDA |= UART_IRDA_RXINV_Msk;     /*Rx signal is inverse*/
;;;615            uart->IRDA &= ~UART_IRDA_TXEN_Msk;
;;;616        }
;;;617        else
;;;618        {
;;;619            uart->IRDA &= ~UART_IRDA_TXINV_Msk;    /*Tx signal is not inverse*/
;;;620            uart->IRDA |= UART_IRDA_TXEN_Msk;
;;;621        }
;;;622    
;;;623    }
000026  015b              LSLS     r3,r3,#5
000028  0f5d              LSRS     r5,r3,#29
00002a  e01f              B        |L10.108|
                  |L10.44|
00002c  4b43              LDR      r3,|L10.316|
00002e  429c              CMP      r4,r3                 ;527
000030  d104              BNE      |L10.60|
000032  6943              LDR      r3,[r0,#0x14]         ;530
000034  6a00              LDR      r0,[r0,#0x20]         ;532
000036  005b              LSLS     r3,r3,#1
000038  0f5d              LSRS     r5,r3,#29
00003a  e020              B        |L10.126|
                  |L10.60|
00003c  4294              CMP      r4,r2                 ;534
00003e  d104              BNE      |L10.74|
000040  69c3              LDR      r3,[r0,#0x1c]         ;537
000042  6b00              LDR      r0,[r0,#0x30]         ;539
000044  015b              LSLS     r3,r3,#5
000046  0f5d              LSRS     r5,r3,#29
000048  e02d              B        |L10.166|
                  |L10.74|
00004a  4b3d              LDR      r3,|L10.320|
00004c  429c              CMP      r4,r3                 ;541
00004e  d106              BNE      |L10.94|
000050  69c3              LDR      r3,[r0,#0x1c]         ;544
000052  6b00              LDR      r0,[r0,#0x30]         ;546
000054  005b              LSLS     r3,r3,#1
000056  0f5d              LSRS     r5,r3,#29
000058  0600              LSLS     r0,r0,#24             ;546
00005a  0f06              LSRS     r6,r0,#28             ;546
00005c  e025              B        |L10.170|
                  |L10.94|
00005e  4b39              LDR      r3,|L10.324|
000060  429c              CMP      r4,r3                 ;548
000062  d105              BNE      |L10.112|
000064  69c3              LDR      r3,[r0,#0x1c]         ;551
000066  6b00              LDR      r0,[r0,#0x30]         ;553
000068  035b              LSLS     r3,r3,#13
00006a  0f5d              LSRS     r5,r3,#29
                  |L10.108|
00006c  0a00              LSRS     r0,r0,#8
00006e  e01a              B        |L10.166|
                  |L10.112|
000070  4b35              LDR      r3,|L10.328|
000072  429c              CMP      r4,r3                 ;555
000074  d106              BNE      |L10.132|
000076  69c3              LDR      r3,[r0,#0x1c]         ;558
000078  6b00              LDR      r0,[r0,#0x30]         ;560
00007a  025b              LSLS     r3,r3,#9
00007c  0f5d              LSRS     r5,r3,#29
                  |L10.126|
00007e  0400              LSLS     r0,r0,#16             ;560
000080  0f06              LSRS     r6,r0,#28             ;560
000082  e012              B        |L10.170|
                  |L10.132|
000084  4b31              LDR      r3,|L10.332|
000086  429c              CMP      r4,r3                 ;562
000088  d105              BNE      |L10.150|
00008a  69c3              LDR      r3,[r0,#0x1c]         ;565
00008c  6b00              LDR      r0,[r0,#0x30]         ;567
00008e  055b              LSLS     r3,r3,#21
000090  0f5d              LSRS     r5,r3,#29
000092  0c00              LSRS     r0,r0,#16
000094  e007              B        |L10.166|
                  |L10.150|
000096  4b2e              LDR      r3,|L10.336|
000098  429c              CMP      r4,r3                 ;569
00009a  d11f              BNE      |L10.220|
00009c  69c3              LDR      r3,[r0,#0x1c]         ;572
00009e  6b00              LDR      r0,[r0,#0x30]         ;574
0000a0  045b              LSLS     r3,r3,#17
0000a2  0f5d              LSRS     r5,r3,#29
0000a4  0d00              LSRS     r0,r0,#20
                  |L10.166|
0000a6  0706              LSLS     r6,r0,#28
0000a8  0f36              LSRS     r6,r6,#28
                  |L10.170|
0000aa  2d01              CMP      r5,#1                 ;578
0000ac  d002              BEQ      |L10.180|
0000ae  2d04              CMP      r5,#4                 ;584
0000b0  d004              BEQ      |L10.188|
0000b2  e013              B        |L10.220|
                  |L10.180|
0000b4  f7fffffe          BL       CLK_GetPLLClockFreq
0000b8  9001              STR      r0,[sp,#4]            ;580
0000ba  e00f              B        |L10.220|
                  |L10.188|
0000bc  428c              CMP      r4,r1                 ;586
0000be  d007              BEQ      |L10.208|
0000c0  4294              CMP      r4,r2                 ;586
0000c2  d005              BEQ      |L10.208|
0000c4  481f              LDR      r0,|L10.324|
0000c6  4284              CMP      r4,r0                 ;586
0000c8  d002              BEQ      |L10.208|
0000ca  4820              LDR      r0,|L10.332|
0000cc  4284              CMP      r4,r0                 ;586
0000ce  d102              BNE      |L10.214|
                  |L10.208|
0000d0  f7fffffe          BL       CLK_GetPCLK0Freq
0000d4  e001              B        |L10.218|
                  |L10.214|
0000d6  f7fffffe          BL       CLK_GetPCLK1Freq
                  |L10.218|
0000da  9004              STR      r0,[sp,#0x10]         ;588
                  |L10.220|
0000dc  9807              LDR      r0,[sp,#0x1c]         ;598
0000de  2800              CMP      r0,#0                 ;598
0000e0  d011              BEQ      |L10.262|
0000e2  00a9              LSLS     r1,r5,#2              ;600
0000e4  4668              MOV      r0,sp                 ;600
0000e6  5840              LDR      r0,[r0,r1]            ;600
0000e8  1c71              ADDS     r1,r6,#1              ;600
0000ea  f7fffffe          BL       __aeabi_uidivmod
0000ee  9907              LDR      r1,[sp,#0x1c]         ;600
0000f0  00c9              LSLS     r1,r1,#3              ;600
0000f2  1840              ADDS     r0,r0,r1              ;600
0000f4  9907              LDR      r1,[sp,#0x1c]         ;600
0000f6  f7fffffe          BL       __aeabi_uidivmod
0000fa  0900              LSRS     r0,r0,#4              ;600
0000fc  4915              LDR      r1,|L10.340|
0000fe  1e80              SUBS     r0,r0,#2              ;602
000100  4288              CMP      r0,r1                 ;602
000102  d200              BCS      |L10.262|
000104  6260              STR      r0,[r4,#0x24]         ;604
                  |L10.262|
000106  9808              LDR      r0,[sp,#0x20]         ;612
000108  2800              CMP      r0,#0                 ;612
00010a  6aa0              LDR      r0,[r4,#0x28]         ;619
00010c  d007              BEQ      |L10.286|
00010e  2120              MOVS     r1,#0x20              ;619
000110  4388              BICS     r0,r0,r1              ;619
000112  62a0              STR      r0,[r4,#0x28]         ;619
000114  6aa0              LDR      r0,[r4,#0x28]         ;620
000116  4338              ORRS     r0,r0,r7              ;620
                  |L10.280|
000118  62a0              STR      r0,[r4,#0x28]         ;615
00011a  b009              ADD      sp,sp,#0x24
00011c  bdf0              POP      {r4-r7,pc}
                  |L10.286|
00011e  2140              MOVS     r1,#0x40              ;614
000120  4308              ORRS     r0,r0,r1              ;614
000122  62a0              STR      r0,[r4,#0x28]         ;614
000124  6aa0              LDR      r0,[r4,#0x28]         ;615
000126  43b8              BICS     r0,r0,r7              ;615
000128  e7f6              B        |L10.280|
;;;624    
                          ENDP

00012a  0000              DCW      0x0000
                  |L10.300|
                          DCD      ||.constdata||+0x30
                  |L10.304|
                          DCD      0x40070000
                  |L10.308|
                          DCD      0x40000200
                  |L10.312|
                          DCD      0x40072000
                  |L10.316|
                          DCD      0x40071000
                  |L10.320|
                          DCD      0x40073000
                  |L10.324|
                          DCD      0x40074000
                  |L10.328|
                          DCD      0x40075000
                  |L10.332|
                          DCD      0x40076000
                  |L10.336|
                          DCD      0x40077000
                  |L10.340|
                          DCD      0x0000ffff

                          AREA ||i.UART_SelectRS485Mode||, CODE, READONLY, ALIGN=2

                  UART_SelectRS485Mode PROC
;;;639     */
;;;640    void UART_SelectRS485Mode(UART_T *uart, uint32_t u32Mode, uint32_t u32Addr)
000000  b510              PUSH     {r4,lr}
;;;641    {
;;;642        /* Select UART RS485 function mode */
;;;643        uart->FUNCSEL = UART_FUNCSEL_RS485;
000002  2303              MOVS     r3,#3
000004  6303              STR      r3,[r0,#0x30]
;;;644    
;;;645        /* Set RS485 configuration */
;;;646        uart->ALTCTL &= ~(UART_ALTCTL_RS485NMM_Msk | UART_ALTCTL_RS485AUD_Msk | UART_ALTCTL_RS485AAD_Msk | UART_ALTCTL_ADDRMV_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  4c04              LDR      r4,|L11.28|
00000a  4023              ANDS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;647        uart->ALTCTL |= (u32Mode | (u32Addr << UART_ALTCTL_ADDRMV_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  0612              LSLS     r2,r2,#24
000012  430a              ORRS     r2,r2,r1
000014  4313              ORRS     r3,r3,r2
000016  62c3              STR      r3,[r0,#0x2c]
;;;648    }
000018  bd10              POP      {r4,pc}
;;;649    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x00fff8ff

                          AREA ||i.UART_SelectSingleWireMode||, CODE, READONLY, ALIGN=1

                  UART_SelectSingleWireMode PROC
;;;703     */
;;;704    void UART_SelectSingleWireMode(UART_T *uart)
000000  6b01              LDR      r1,[r0,#0x30]
;;;705    {
;;;706    
;;;707        /* Select UART SingleWire function mode */
;;;708        uart->FUNCSEL = ((uart->FUNCSEL & (~UART_FUNCSEL_FUNCSEL_Msk)) | UART_FUNCSEL_SINGLE_WIRE);
000002  08c9              LSRS     r1,r1,#3
000004  00c9              LSLS     r1,r1,#3
000006  1d09              ADDS     r1,r1,#4
000008  6301              STR      r1,[r0,#0x30]
;;;709    
;;;710    }
00000a  4770              BX       lr
;;;711    
                          ENDP


                          AREA ||i.UART_SetLine_Config||, CODE, READONLY, ALIGN=2

                  UART_SetLine_Config PROC
;;;372     */
;;;373    void UART_SetLine_Config(UART_T *uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits)
000000  b5ff              PUSH     {r0-r7,lr}
;;;374    {
000002  b087              SUB      sp,sp,#0x1c
000004  460f              MOV      r7,r1
000006  4604              MOV      r4,r0
;;;375        uint32_t u32UartClkSrcSel = 0ul, u32UartClkDivNum = 0ul;
000008  2500              MOVS     r5,#0
00000a  462e              MOV      r6,r5
;;;376        uint32_t u32ClkTbl[6ul] = {__HXT, 0ul, __LXT, __HIRC, 0, __LIRC};
00000c  2218              MOVS     r2,#0x18
00000e  4946              LDR      r1,|L13.296|
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       __aeabi_memcpy4
;;;377        uint32_t u32Baud_Div = 0ul;
;;;378    
;;;379    
;;;380        if (uart == (UART_T *)UART0)
000016  4945              LDR      r1,|L13.300|
;;;381        {
;;;382            /* Get UART clock source selection */
;;;383            u32UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART0SEL_Msk) >> CLK_CLKSEL1_UART0SEL_Pos;
000018  4845              LDR      r0,|L13.304|
;;;384            /* Get UART clock divider number */
;;;385            u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART0DIV_Msk) >> CLK_CLKDIV0_UART0DIV_Pos;
;;;386        }
;;;387        else if (uart == (UART_T *)UART1)
;;;388        {
;;;389            /* Get UART clock source selection */
;;;390            u32UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART1SEL_Msk) >> CLK_CLKSEL1_UART1SEL_Pos;
;;;391            /* Get UART clock divider number */
;;;392            u32UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UART1DIV_Msk) >> CLK_CLKDIV0_UART1DIV_Pos;
;;;393        }
;;;394        else if (uart == (UART_T *)UART2)
00001a  4a46              LDR      r2,|L13.308|
00001c  428c              CMP      r4,r1                 ;380
00001e  d104              BNE      |L13.42|
000020  6943              LDR      r3,[r0,#0x14]         ;383
000022  6a00              LDR      r0,[r0,#0x20]         ;385
;;;395        {
;;;396            /* Get UART clock source selection */
;;;397            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART2SEL_Msk) >> CLK_CLKSEL3_UART2SEL_Pos;
;;;398            /* Get UART clock divider number */
;;;399            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART2DIV_Msk) >> CLK_CLKDIV4_UART2DIV_Pos;
;;;400        }
;;;401        else if (uart == (UART_T *)UART3)
;;;402        {
;;;403            /* Get UART clock source selection */
;;;404            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART3SEL_Msk) >> CLK_CLKSEL3_UART3SEL_Pos;
;;;405            /* Get UART clock divider number */
;;;406            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART3DIV_Msk) >> CLK_CLKDIV4_UART3DIV_Pos;
;;;407        }
;;;408        else if (uart == (UART_T *)UART4)
;;;409        {
;;;410            /* Get UART clock source selection */
;;;411            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART4SEL_Msk) >> CLK_CLKSEL3_UART4SEL_Pos;
;;;412            /* Get UART clock divider number */
;;;413            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART4DIV_Msk) >> CLK_CLKDIV4_UART4DIV_Pos;
;;;414        }
;;;415        else if (uart == (UART_T *)UART5)
;;;416        {
;;;417            /* Get UART clock source selection */
;;;418            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART5SEL_Msk) >> CLK_CLKSEL3_UART5SEL_Pos;
;;;419            /* Get UART clock divider number */
;;;420            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART5DIV_Msk) >> CLK_CLKDIV4_UART5DIV_Pos;
;;;421        }
;;;422        else if (uart == (UART_T *)UART6)
;;;423        {
;;;424            /* Get UART clock source selection */
;;;425            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART6SEL_Msk) >> CLK_CLKSEL3_UART6SEL_Pos;
;;;426            /* Get UART clock divider number */
;;;427            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART6DIV_Msk) >> CLK_CLKDIV4_UART6DIV_Pos;
;;;428        }
;;;429        else if (uart == (UART_T *)UART7)
;;;430        {
;;;431            /* Get UART clock source selection */
;;;432            u32UartClkSrcSel = (CLK->CLKSEL3 & CLK_CLKSEL3_UART7SEL_Msk) >> CLK_CLKSEL3_UART7SEL_Pos;
;;;433            /* Get UART clock divider number */
;;;434            u32UartClkDivNum = (CLK->CLKDIV4 & CLK_CLKDIV4_UART7DIV_Msk) >> CLK_CLKDIV4_UART7DIV_Pos;
;;;435        }    
;;;436    
;;;437        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;438        if (u32UartClkSrcSel == 1ul)
;;;439        {
;;;440            u32ClkTbl[u32UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;441        }
;;;442    
;;;443        /* Get PCLK clock frequency if UART clock source selection is PCLK */
;;;444        if (u32UartClkSrcSel == 4ul)
;;;445        {
;;;446            if ((uart == (UART_T *)UART0) || (uart == (UART_T *)UART2) || (uart == (UART_T *)UART4) || (uart == (UART_T *)UART6))
;;;447            {
;;;448                u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK0Freq();
;;;449            }
;;;450            else     /* UART Port as UART1, UART3, UART5, UART7*/
;;;451            {
;;;452                u32ClkTbl[u32UartClkSrcSel] =  CLK_GetPCLK1Freq();
;;;453            }
;;;454        }
;;;455    
;;;456    
;;;457        /* Set UART baud rate */
;;;458        if (u32baudrate != 0ul)
;;;459        {
;;;460            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul), u32baudrate);
;;;461    
;;;462            if (u32Baud_Div > 0xFFFFul)
;;;463            {
;;;464                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u32UartClkSrcSel]) / (u32UartClkDivNum + 1ul), u32baudrate));
;;;465            }
;;;466            else
;;;467            {
;;;468                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;469            }
;;;470        }
;;;471    
;;;472        /* Set UART line configuration */
;;;473        uart->LINE = u32data_width | u32parity | u32stop_bits;
;;;474    }
000024  015b              LSLS     r3,r3,#5
000026  0f5d              LSRS     r5,r3,#29
000028  e01f              B        |L13.106|
                  |L13.42|
00002a  4b43              LDR      r3,|L13.312|
00002c  429c              CMP      r4,r3                 ;387
00002e  d104              BNE      |L13.58|
000030  6943              LDR      r3,[r0,#0x14]         ;390
000032  6a00              LDR      r0,[r0,#0x20]         ;392
000034  005b              LSLS     r3,r3,#1
000036  0f5d              LSRS     r5,r3,#29
000038  e020              B        |L13.124|
                  |L13.58|
00003a  4294              CMP      r4,r2                 ;394
00003c  d104              BNE      |L13.72|
00003e  69c3              LDR      r3,[r0,#0x1c]         ;397
000040  6b00              LDR      r0,[r0,#0x30]         ;399
000042  015b              LSLS     r3,r3,#5
000044  0f5d              LSRS     r5,r3,#29
000046  e02d              B        |L13.164|
                  |L13.72|
000048  4b3c              LDR      r3,|L13.316|
00004a  429c              CMP      r4,r3                 ;401
00004c  d106              BNE      |L13.92|
00004e  69c3              LDR      r3,[r0,#0x1c]         ;404
000050  6b00              LDR      r0,[r0,#0x30]         ;406
000052  005b              LSLS     r3,r3,#1
000054  0f5d              LSRS     r5,r3,#29
000056  0600              LSLS     r0,r0,#24             ;406
000058  0f06              LSRS     r6,r0,#28             ;406
00005a  e025              B        |L13.168|
                  |L13.92|
00005c  4b38              LDR      r3,|L13.320|
00005e  429c              CMP      r4,r3                 ;408
000060  d105              BNE      |L13.110|
000062  69c3              LDR      r3,[r0,#0x1c]         ;411
000064  6b00              LDR      r0,[r0,#0x30]         ;413
000066  035b              LSLS     r3,r3,#13
000068  0f5d              LSRS     r5,r3,#29
                  |L13.106|
00006a  0a00              LSRS     r0,r0,#8
00006c  e01a              B        |L13.164|
                  |L13.110|
00006e  4b35              LDR      r3,|L13.324|
000070  429c              CMP      r4,r3                 ;415
000072  d106              BNE      |L13.130|
000074  69c3              LDR      r3,[r0,#0x1c]         ;418
000076  6b00              LDR      r0,[r0,#0x30]         ;420
000078  025b              LSLS     r3,r3,#9
00007a  0f5d              LSRS     r5,r3,#29
                  |L13.124|
00007c  0400              LSLS     r0,r0,#16             ;420
00007e  0f06              LSRS     r6,r0,#28             ;420
000080  e012              B        |L13.168|
                  |L13.130|
000082  4b31              LDR      r3,|L13.328|
000084  429c              CMP      r4,r3                 ;422
000086  d105              BNE      |L13.148|
000088  69c3              LDR      r3,[r0,#0x1c]         ;425
00008a  6b00              LDR      r0,[r0,#0x30]         ;427
00008c  055b              LSLS     r3,r3,#21
00008e  0f5d              LSRS     r5,r3,#29
000090  0c00              LSRS     r0,r0,#16
000092  e007              B        |L13.164|
                  |L13.148|
000094  4b2d              LDR      r3,|L13.332|
000096  429c              CMP      r4,r3                 ;429
000098  d11f              BNE      |L13.218|
00009a  69c3              LDR      r3,[r0,#0x1c]         ;432
00009c  6b00              LDR      r0,[r0,#0x30]         ;434
00009e  045b              LSLS     r3,r3,#17
0000a0  0f5d              LSRS     r5,r3,#29
0000a2  0d00              LSRS     r0,r0,#20
                  |L13.164|
0000a4  0706              LSLS     r6,r0,#28
0000a6  0f36              LSRS     r6,r6,#28
                  |L13.168|
0000a8  2d01              CMP      r5,#1                 ;438
0000aa  d002              BEQ      |L13.178|
0000ac  2d04              CMP      r5,#4                 ;444
0000ae  d004              BEQ      |L13.186|
0000b0  e013              B        |L13.218|
                  |L13.178|
0000b2  f7fffffe          BL       CLK_GetPLLClockFreq
0000b6  9001              STR      r0,[sp,#4]            ;440
0000b8  e00f              B        |L13.218|
                  |L13.186|
0000ba  428c              CMP      r4,r1                 ;446
0000bc  d007              BEQ      |L13.206|
0000be  4294              CMP      r4,r2                 ;446
0000c0  d005              BEQ      |L13.206|
0000c2  481f              LDR      r0,|L13.320|
0000c4  4284              CMP      r4,r0                 ;446
0000c6  d002              BEQ      |L13.206|
0000c8  481f              LDR      r0,|L13.328|
0000ca  4284              CMP      r4,r0                 ;446
0000cc  d102              BNE      |L13.212|
                  |L13.206|
0000ce  f7fffffe          BL       CLK_GetPCLK0Freq
0000d2  e001              B        |L13.216|
                  |L13.212|
0000d4  f7fffffe          BL       CLK_GetPCLK1Freq
                  |L13.216|
0000d8  9004              STR      r0,[sp,#0x10]         ;448
                  |L13.218|
0000da  2f00              CMP      r7,#0                 ;458
0000dc  d01b              BEQ      |L13.278|
0000de  00a9              LSLS     r1,r5,#2              ;460
0000e0  4668              MOV      r0,sp                 ;460
0000e2  5840              LDR      r0,[r0,r1]            ;460
0000e4  1c71              ADDS     r1,r6,#1              ;460
0000e6  f7fffffe          BL       __aeabi_uidivmod
0000ea  4605              MOV      r5,r0                 ;460
0000ec  0879              LSRS     r1,r7,#1              ;460
0000ee  1840              ADDS     r0,r0,r1              ;460
0000f0  4639              MOV      r1,r7                 ;460
0000f2  f7fffffe          BL       __aeabi_uidivmod
0000f6  4916              LDR      r1,|L13.336|
0000f8  1e80              SUBS     r0,r0,#2              ;462
0000fa  4288              CMP      r0,r1                 ;462
0000fc  d907              BLS      |L13.270|
0000fe  00f9              LSLS     r1,r7,#3              ;464
000100  1868              ADDS     r0,r5,r1              ;464
000102  4639              MOV      r1,r7                 ;464
000104  f7fffffe          BL       __aeabi_uidivmod
000108  0900              LSRS     r0,r0,#4              ;464
00010a  1e80              SUBS     r0,r0,#2              ;464
00010c  e002              B        |L13.276|
                  |L13.270|
00010e  2103              MOVS     r1,#3                 ;468
000110  0709              LSLS     r1,r1,#28             ;468
000112  4308              ORRS     r0,r0,r1              ;468
                  |L13.276|
000114  6260              STR      r0,[r4,#0x24]         ;464
                  |L13.278|
000116  990a              LDR      r1,[sp,#0x28]         ;473
000118  9809              LDR      r0,[sp,#0x24]         ;473
00011a  4308              ORRS     r0,r0,r1              ;473
00011c  9910              LDR      r1,[sp,#0x40]         ;473
00011e  4308              ORRS     r0,r0,r1              ;473
000120  60e0              STR      r0,[r4,#0xc]          ;473
000122  b00b              ADD      sp,sp,#0x2c
000124  bdf0              POP      {r4-r7,pc}
;;;475    
                          ENDP

000126  0000              DCW      0x0000
                  |L13.296|
                          DCD      ||.constdata||+0x18
                  |L13.300|
                          DCD      0x40070000
                  |L13.304|
                          DCD      0x40000200
                  |L13.308|
                          DCD      0x40072000
                  |L13.312|
                          DCD      0x40071000
                  |L13.316|
                          DCD      0x40073000
                  |L13.320|
                          DCD      0x40074000
                  |L13.324|
                          DCD      0x40075000
                  |L13.328|
                          DCD      0x40076000
                  |L13.332|
                          DCD      0x40077000
                  |L13.336|
                          DCD      0x0000ffff

                          AREA ||i.UART_SetTimeoutCnt||, CODE, READONLY, ALIGN=1

                  UART_SetTimeoutCnt PROC
;;;486     */
;;;487    void UART_SetTimeoutCnt(UART_T *uart, uint32_t u32TOC)
000000  6a02              LDR      r2,[r0,#0x20]
;;;488    {
;;;489        /* Set time-out interrupt comparator */
;;;490        uart->TOUT = (uart->TOUT & ~UART_TOUT_TOIC_Msk) | (u32TOC);
000002  0a12              LSRS     r2,r2,#8
000004  0212              LSLS     r2,r2,#8
000006  430a              ORRS     r2,r2,r1
000008  6202              STR      r2,[r0,#0x20]
;;;491    
;;;492        /* Set time-out counter enable */
;;;493        uart->INTEN |= UART_INTEN_TOCNTEN_Msk;
00000a  6841              LDR      r1,[r0,#4]
00000c  2201              MOVS     r2,#1
00000e  02d2              LSLS     r2,r2,#11
000010  4311              ORRS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;494    }
000014  4770              BX       lr
;;;495    
                          ENDP


                          AREA ||i.UART_Write||, CODE, READONLY, ALIGN=1

                  UART_Write PROC
;;;661     */
;;;662    uint32_t UART_Write(UART_T *uart, uint8_t pu8TxBuf[], uint32_t u32WriteBytes)
000000  b5f0              PUSH     {r4-r7,lr}
;;;663    {
;;;664        uint32_t  u32Count, u32delayno;
;;;665        uint32_t  u32Exit = 0ul;
000002  2700              MOVS     r7,#0
000004  4605              MOV      r5,r0                 ;663
;;;666    
;;;667        for (u32Count = 0ul; u32Count != u32WriteBytes; u32Count++)
;;;668        {
;;;669            u32delayno = 0ul;
;;;670    
;;;671            while (uart->FIFOSTS & UART_FIFOSTS_TXFULL_Msk)   /* Check Tx Full */
;;;672            {
;;;673                u32delayno++;
;;;674    
;;;675                if (u32delayno >= 0x40000000ul)
000006  2601              MOVS     r6,#1
000008  4638              MOV      r0,r7                 ;667
00000a  07b6              LSLS     r6,r6,#30
00000c  e00c              B        |L15.40|
                  |L15.14|
00000e  2300              MOVS     r3,#0                 ;669
000010  e002              B        |L15.24|
                  |L15.18|
000012  1c5b              ADDS     r3,r3,#1              ;671
000014  42b3              CMP      r3,r6
000016  d209              BCS      |L15.44|
                  |L15.24|
000018  69ac              LDR      r4,[r5,#0x18]         ;671
00001a  0224              LSLS     r4,r4,#8              ;671
00001c  d4f9              BMI      |L15.18|
;;;676                {
;;;677                    u32Exit = 1ul;
;;;678                    break;
;;;679                }
;;;680            }
;;;681    
;;;682            if (u32Exit == 1ul)
00001e  2f00              CMP      r7,#0
000020  d104              BNE      |L15.44|
;;;683            {
;;;684                break;
;;;685            }
;;;686            else
;;;687            {
;;;688                uart->DAT = pu8TxBuf[u32Count];    /* Send UART Data from buffer */
000022  5c0b              LDRB     r3,[r1,r0]
000024  602b              STR      r3,[r5,#0]
000026  1c40              ADDS     r0,r0,#1
                  |L15.40|
000028  4290              CMP      r0,r2                 ;667
00002a  d1f0              BNE      |L15.14|
                  |L15.44|
;;;689            }
;;;690        }
;;;691    
;;;692        return u32Count;
;;;693    
;;;694    }
00002c  bdf0              POP      {r4-r7,pc}
;;;695    /**
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x01e84800
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x02dc6c00
                          DCD      0x00000000
                          DCD      0x00009600
                          DCD      0x01e84800
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x02dc6c00
                          DCD      0x00000000
                          DCD      0x00009600
                          DCD      0x01e84800
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x02dc6c00
                          DCD      0x00000000
                          DCD      0x00009600

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 402
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
